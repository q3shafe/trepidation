export CG_InitLocalEntities
code
proc CG_InitLocalEntities 12 12
file "../cg_localents.c"
line 21
;1:// Copyright (C) 1999-2000 Id Software, Inc.
;2://
;3:
;4:// cg_localents.c -- every frame, generate renderer commands for locally
;5:// processed entities, like smoke puffs, gibs, shells, etc.
;6:
;7:#include "cg_local.h"
;8:
;9:#define	MAX_LOCAL_ENTITIES	512
;10:localEntity_t	cg_localEntities[MAX_LOCAL_ENTITIES];
;11:localEntity_t	cg_activeLocalEntities;		// double linked list
;12:localEntity_t	*cg_freeLocalEntities;		// single linked list
;13:
;14:/*
;15:===================
;16:CG_InitLocalEntities
;17:
;18:This is called at startup and for tournement restarts
;19:===================
;20:*/
;21:void	CG_InitLocalEntities( void ) {
line 24
;22:	int		i;
;23:
;24:	memset( cg_localEntities, 0, sizeof( cg_localEntities ) );
ADDRGP4 cg_localEntities
ARGP4
CNSTI4 0
ARGI4
CNSTI4 149504
ARGI4
ADDRGP4 memset
CALLP4
pop
line 25
;25:	cg_activeLocalEntities.next = &cg_activeLocalEntities;
ADDRGP4 cg_activeLocalEntities+4
ADDRGP4 cg_activeLocalEntities
ASGNP4
line 26
;26:	cg_activeLocalEntities.prev = &cg_activeLocalEntities;
ADDRLP4 4
ADDRGP4 cg_activeLocalEntities
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
ASGNP4
line 27
;27:	cg_freeLocalEntities = cg_localEntities;
ADDRGP4 cg_freeLocalEntities
ADDRGP4 cg_localEntities
ASGNP4
line 28
;28:	for ( i = 0 ; i < MAX_LOCAL_ENTITIES - 1 ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $74
line 29
;29:		cg_localEntities[i].next = &cg_localEntities[i+1];
ADDRLP4 8
CNSTI4 292
ADDRLP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 8
INDIRI4
ADDRGP4 cg_localEntities+4
ADDP4
ADDRLP4 8
INDIRI4
ADDRGP4 cg_localEntities+292
ADDP4
ASGNP4
line 30
;30:	}
LABELV $75
line 28
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 511
LTI4 $74
line 31
;31:}
LABELV $72
endproc CG_InitLocalEntities 12 12
export CG_FreeLocalEntity
proc CG_FreeLocalEntity 12 4
line 39
;32:
;33:
;34:/*
;35:==================
;36:CG_FreeLocalEntity
;37:==================
;38:*/
;39:void CG_FreeLocalEntity( localEntity_t *le ) {
line 40
;40:	if ( !le->prev ) {
ADDRFP4 0
INDIRP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $81
line 41
;41:		CG_Error( "CG_FreeLocalEntity: not active" );
ADDRGP4 $83
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 42
;42:	}
LABELV $81
line 45
;43:
;44:	// remove from the doubly linked active list
;45:	le->prev->next = le->next;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
CNSTI4 4
ASGNI4
ADDRLP4 0
INDIRP4
INDIRP4
ADDRLP4 4
INDIRI4
ADDP4
ADDRLP4 0
INDIRP4
ADDRLP4 4
INDIRI4
ADDP4
INDIRP4
ASGNP4
line 46
;46:	le->next->prev = le->prev;
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
ADDRLP4 8
INDIRP4
INDIRP4
ASGNP4
line 49
;47:
;48:	// the free list is only singly linked
;49:	le->next = cg_freeLocalEntities;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg_freeLocalEntities
INDIRP4
ASGNP4
line 50
;50:	cg_freeLocalEntities = le;
ADDRGP4 cg_freeLocalEntities
ADDRFP4 0
INDIRP4
ASGNP4
line 51
;51:}
LABELV $80
endproc CG_FreeLocalEntity 12 4
export CG_AllocLocalEntity
proc CG_AllocLocalEntity 8 12
line 60
;52:
;53:/*
;54:===================
;55:CG_AllocLocalEntity
;56:
;57:Will allways succeed, even if it requires freeing an old active entity
;58:===================
;59:*/
;60:localEntity_t	*CG_AllocLocalEntity( void ) {
line 63
;61:	localEntity_t	*le;
;62:
;63:	if ( !cg_freeLocalEntities ) {
ADDRGP4 cg_freeLocalEntities
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $85
line 66
;64:		// no free entities, so free the one at the end of the chain
;65:		// remove the oldest active entity
;66:		CG_FreeLocalEntity( cg_activeLocalEntities.prev );
ADDRGP4 cg_activeLocalEntities
INDIRP4
ARGP4
ADDRGP4 CG_FreeLocalEntity
CALLV
pop
line 67
;67:	}
LABELV $85
line 69
;68:
;69:	le = cg_freeLocalEntities;
ADDRLP4 0
ADDRGP4 cg_freeLocalEntities
INDIRP4
ASGNP4
line 70
;70:	cg_freeLocalEntities = cg_freeLocalEntities->next;
ADDRLP4 4
ADDRGP4 cg_freeLocalEntities
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
ASGNP4
line 72
;71:
;72:	memset( le, 0, sizeof( *le ) );
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 292
ARGI4
ADDRGP4 memset
CALLP4
pop
line 75
;73:
;74:	// link into the active list
;75:	le->next = cg_activeLocalEntities.next;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg_activeLocalEntities+4
INDIRP4
ASGNP4
line 76
;76:	le->prev = &cg_activeLocalEntities;
ADDRLP4 0
INDIRP4
ADDRGP4 cg_activeLocalEntities
ASGNP4
line 77
;77:	cg_activeLocalEntities.next->prev = le;
ADDRGP4 cg_activeLocalEntities+4
INDIRP4
ADDRLP4 0
INDIRP4
ASGNP4
line 78
;78:	cg_activeLocalEntities.next = le;
ADDRGP4 cg_activeLocalEntities+4
ADDRLP4 0
INDIRP4
ASGNP4
line 79
;79:	return le;
ADDRLP4 0
INDIRP4
RETP4
LABELV $84
endproc CG_AllocLocalEntity 8 12
export CG_BloodTrail
proc CG_BloodTrail 48 48
line 101
;80:}
;81:
;82:
;83:/*
;84:====================================================================================
;85:
;86:FRAGMENT PROCESSING
;87:
;88:A fragment localentity interacts with the environment in some way (hitting walls),
;89:or generates more localentities along a trail.
;90:
;91:====================================================================================
;92:*/
;93:
;94:/*
;95:================
;96:CG_BloodTrail
;97:
;98:Leave expanding blood puffs behind gibs
;99:================
;100:*/
;101:void CG_BloodTrail( localEntity_t *le ) {
line 108
;102:	int		t;
;103:	int		t2;
;104:	int		step;
;105:	vec3_t	newOrigin;
;106:	localEntity_t	*blood;
;107:
;108:	step = 150;
ADDRLP4 20
CNSTI4 150
ASGNI4
line 109
;109:	t = step * ( (cg.time - cg.frametime + step ) / step );
ADDRLP4 0
ADDRLP4 20
INDIRI4
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg+107600
INDIRI4
SUBI4
ADDRLP4 20
INDIRI4
ADDI4
ADDRLP4 20
INDIRI4
DIVI4
MULI4
ASGNI4
line 110
;110:	t2 = step * ( cg.time / step );
ADDRLP4 24
ADDRLP4 20
INDIRI4
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 20
INDIRI4
DIVI4
MULI4
ASGNI4
line 112
;111:
;112:	for ( ; t <= t2; t += step ) {
ADDRGP4 $97
JUMPV
LABELV $94
line 113
;113:		BG_EvaluateTrajectory( &le->pos, t, newOrigin );
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 8
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 115
;114:
;115:		blood = CG_SmokePuff( newOrigin, vec3_origin, 
ADDRLP4 8
ARGP4
ADDRGP4 vec3_origin
ARGP4
CNSTF4 1101004800
ARGF4
ADDRLP4 36
CNSTF4 1065353216
ASGNF4
ADDRLP4 36
INDIRF4
ARGF4
ADDRLP4 36
INDIRF4
ARGF4
ADDRLP4 36
INDIRF4
ARGF4
ADDRLP4 36
INDIRF4
ARGF4
CNSTF4 1157234688
ARGF4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 40
CNSTI4 0
ASGNI4
ADDRLP4 40
INDIRI4
ARGI4
ADDRLP4 40
INDIRI4
ARGI4
ADDRGP4 cgs+152852+336
INDIRI4
ARGI4
ADDRLP4 44
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 44
INDIRP4
ASGNP4
line 124
;116:					  20,		// radius
;117:					  1, 1, 1, 1,	// color
;118:					  2000,		// trailTime
;119:					  t,		// startTime
;120:					  0,		// fadeInTime
;121:					  0,		// flags
;122:					  cgs.media.bloodTrailShader );
;123:		// use the optimized version
;124:		blood->leType = LE_FALL_SCALE_FADE;
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 5
ASGNI4
line 126
;125:		// drop a total of 40 units over its lifetime
;126:		blood->pos.trDelta[2] = 40;
ADDRLP4 4
INDIRP4
CNSTI4 64
ADDP4
CNSTF4 1109393408
ASGNF4
line 127
;127:	}
LABELV $95
line 112
ADDRLP4 0
ADDRLP4 0
INDIRI4
ADDRLP4 20
INDIRI4
ADDI4
ASGNI4
LABELV $97
ADDRLP4 0
INDIRI4
ADDRLP4 24
INDIRI4
LEI4 $94
line 128
;128:}
LABELV $90
endproc CG_BloodTrail 48 48
export CG_FragmentBounceMark
proc CG_FragmentBounceMark 20 44
line 136
;129:
;130:
;131:/*
;132:================
;133:CG_FragmentBounceMark
;134:================
;135:*/
;136:void CG_FragmentBounceMark( localEntity_t *le, trace_t *trace ) {
line 139
;137:	int			radius;
;138:
;139:	if ( le->leMarkType == LEMT_BLOOD ) {
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 2
NEI4 $101
line 141
;140:
;141:		radius = 16 + (rand()&31);
ADDRLP4 4
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 4
INDIRI4
CNSTI4 31
BANDI4
CNSTI4 16
ADDI4
ASGNI4
line 142
;142:		CG_ImpactMark( cgs.media.bloodMarkShader, trace->endpos, trace->plane.normal, random()*360,
ADDRLP4 8
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cgs+152852+420
INDIRI4
ARGI4
ADDRLP4 12
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 12
INDIRP4
CNSTI4 24
ADDP4
ARGP4
CNSTF4 1135869952
ADDRLP4 8
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ARGF4
ADDRLP4 16
CNSTF4 1065353216
ASGNF4
ADDRLP4 16
INDIRF4
ARGF4
ADDRLP4 16
INDIRF4
ARGF4
ADDRLP4 16
INDIRF4
ARGF4
ADDRLP4 16
INDIRF4
ARGF4
CNSTI4 1
ARGI4
ADDRLP4 0
INDIRI4
CVIF4 4
ARGF4
CNSTI4 0
ARGI4
ADDRGP4 CG_ImpactMark
CALLV
pop
line 144
;143:			1,1,1,1, qtrue, radius, qfalse );
;144:	} else if ( le->leMarkType == LEMT_BURN ) {
ADDRGP4 $102
JUMPV
LABELV $101
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 1
NEI4 $105
line 146
;145:
;146:		radius = 8 + (rand()&15);
ADDRLP4 4
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 4
INDIRI4
CNSTI4 15
BANDI4
CNSTI4 8
ADDI4
ASGNI4
line 147
;147:		CG_ImpactMark( cgs.media.burnMarkShader, trace->endpos, trace->plane.normal, random()*360,
ADDRLP4 8
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cgs+152852+428
INDIRI4
ARGI4
ADDRLP4 12
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 12
INDIRP4
CNSTI4 24
ADDP4
ARGP4
CNSTF4 1135869952
ADDRLP4 8
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ARGF4
ADDRLP4 16
CNSTF4 1065353216
ASGNF4
ADDRLP4 16
INDIRF4
ARGF4
ADDRLP4 16
INDIRF4
ARGF4
ADDRLP4 16
INDIRF4
ARGF4
ADDRLP4 16
INDIRF4
ARGF4
CNSTI4 1
ARGI4
ADDRLP4 0
INDIRI4
CVIF4 4
ARGF4
CNSTI4 0
ARGI4
ADDRGP4 CG_ImpactMark
CALLV
pop
line 149
;148:			1,1,1,1, qtrue, radius, qfalse );
;149:	}
LABELV $105
LABELV $102
line 154
;150:
;151:
;152:	// don't allow a fragment to make multiple marks, or they
;153:	// pile up while settling
;154:	le->leMarkType = LEMT_NONE;
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
CNSTI4 0
ASGNI4
line 155
;155:}
LABELV $100
endproc CG_FragmentBounceMark 20 44
export CG_FragmentBounceSound
proc CG_FragmentBounceSound 16 16
line 162
;156:
;157:/*
;158:================
;159:CG_FragmentBounceSound
;160:================
;161:*/
;162:void CG_FragmentBounceSound( localEntity_t *le, trace_t *trace ) {
line 163
;163:	if ( le->leBounceSoundType == LEBS_BLOOD ) {
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 1
NEI4 $110
line 165
;164:		// half the gibs will make splat sounds
;165:		if ( rand() & 1 ) {
ADDRLP4 0
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $111
line 166
;166:			int r = rand()&3;
ADDRLP4 12
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 12
INDIRI4
CNSTI4 3
BANDI4
ASGNI4
line 169
;167:			sfxHandle_t	s;
;168:
;169:			if ( r == 0 ) {
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $114
line 170
;170:				s = cgs.media.gibBounce1Sound;
ADDRLP4 8
ADDRGP4 cgs+152852+904
INDIRI4
ASGNI4
line 171
;171:			} else if ( r == 1 ) {
ADDRGP4 $115
JUMPV
LABELV $114
ADDRLP4 4
INDIRI4
CNSTI4 1
NEI4 $118
line 172
;172:				s = cgs.media.gibBounce2Sound;
ADDRLP4 8
ADDRGP4 cgs+152852+908
INDIRI4
ASGNI4
line 173
;173:			} else {
ADDRGP4 $119
JUMPV
LABELV $118
line 174
;174:				s = cgs.media.gibBounce3Sound;
ADDRLP4 8
ADDRGP4 cgs+152852+912
INDIRI4
ASGNI4
line 175
;175:			}
LABELV $119
LABELV $115
line 176
;176:			trap_S_StartSound( trace->endpos, ENTITYNUM_WORLD, CHAN_AUTO, s );
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ARGP4
CNSTI4 1022
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 177
;177:		}
line 178
;178:	} else if ( le->leBounceSoundType == LEBS_BRASS ) {
ADDRGP4 $111
JUMPV
LABELV $110
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 2
NEI4 $124
line 180
;179:
;180:	}
LABELV $124
LABELV $111
line 184
;181:
;182:	// don't allow a fragment to make multiple bounce sounds,
;183:	// or it gets too noisy as they settle
;184:	le->leBounceSoundType = LEBS_NONE;
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 0
ASGNI4
line 185
;185:}
LABELV $109
endproc CG_FragmentBounceSound 16 16
export CG_ReflectVelocity
proc CG_ReflectVelocity 56 12
line 193
;186:
;187:
;188:/*
;189:================
;190:CG_ReflectVelocity
;191:================
;192:*/
;193:void CG_ReflectVelocity( localEntity_t *le, trace_t *trace ) {
line 199
;194:	vec3_t	velocity;
;195:	float	dot;
;196:	int		hitTime;
;197:
;198:	// reflect the velocity on the trace plane
;199:	hitTime = cg.time - cg.frametime + cg.frametime * trace->fraction;
ADDRLP4 16
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg+107600
INDIRI4
SUBI4
CVIF4 4
ADDRGP4 cg+107600
INDIRI4
CVIF4 4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 200
;200:	BG_EvaluateTrajectoryDelta( &le->pos, hitTime, velocity );
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
ARGP4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 BG_EvaluateTrajectoryDelta
CALLV
pop
line 201
;201:	dot = DotProduct( velocity, trace->plane.normal );
ADDRLP4 20
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 0
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
MULF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 0+8
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 202
;202:	VectorMA( velocity, -2*dot, trace->plane.normal, le->pos.trDelta );
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 0
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
CNSTF4 3221225472
ADDRLP4 12
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 0+4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
CNSTF4 3221225472
ADDRLP4 12
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 0+8
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
CNSTF4 3221225472
ADDRLP4 12
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 204
;203:
;204:	VectorScale( le->pos.trDelta, le->bounceFactor, le->pos.trDelta );
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
ADDRLP4 24
INDIRP4
CNSTI4 56
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
ADDRLP4 24
INDIRP4
CNSTI4 104
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
ADDRLP4 32
INDIRP4
CNSTI4 60
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRF4
ADDRLP4 32
INDIRP4
CNSTI4 104
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 44
ADDRLP4 40
INDIRP4
CNSTI4 64
ADDP4
ASGNP4
ADDRLP4 44
INDIRP4
ADDRLP4 44
INDIRP4
INDIRF4
ADDRLP4 40
INDIRP4
CNSTI4 104
ADDP4
INDIRF4
MULF4
ASGNF4
line 206
;205:
;206:	VectorCopy( trace->endpos, le->pos.trBase );
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 207
;207:	le->pos.trTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 211
;208:
;209:
;210:	// check for stop, making sure that even on low FPS systems it doesn't bobble
;211:	if ( trace->allsolid || 
ADDRLP4 48
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 48
INDIRP4
INDIRI4
CNSTI4 0
NEI4 $139
ADDRLP4 48
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
CNSTF4 0
LEF4 $135
ADDRLP4 52
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRF4
ASGNF4
ADDRLP4 52
INDIRF4
CNSTF4 1109393408
LTF4 $139
ADDRLP4 52
INDIRF4
ADDRGP4 cg+107600
INDIRI4
NEGI4
CVIF4 4
ADDRLP4 52
INDIRF4
MULF4
GEF4 $135
LABELV $139
line 213
;212:		( trace->plane.normal[2] > 0 && 
;213:		( le->pos.trDelta[2] < 40 || le->pos.trDelta[2] < -cg.frametime * le->pos.trDelta[2] ) ) ) {
line 214
;214:		le->pos.trType = TR_STATIONARY;
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 0
ASGNI4
line 215
;215:	} else {
LABELV $135
line 217
;216:
;217:	}
LABELV $136
line 218
;218:}
LABELV $126
endproc CG_ReflectVelocity 56 12
export CG_AddFragment
proc CG_AddFragment 88 28
line 225
;219:
;220:/*
;221:================
;222:CG_AddFragment
;223:================
;224:*/
;225:void CG_AddFragment( localEntity_t *le ) {
line 229
;226:	vec3_t	newOrigin;
;227:	trace_t	trace;
;228:
;229:	if ( le->pos.trType == TR_STATIONARY ) {
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
CNSTI4 0
NEI4 $141
line 234
;230:		// sink into the ground if near the removal time
;231:		int		t;
;232:		float	oldZ;
;233:		
;234:		t = le->endTime - cg.time;
ADDRLP4 68
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
ASGNI4
line 235
;235:		if ( t < SINK_TIME ) {
ADDRLP4 68
INDIRI4
CNSTI4 1000
GEI4 $144
line 239
;236:			// we must use an explicit lighting origin, otherwise the
;237:			// lighting would be lost as soon as the origin went
;238:			// into the ground
;239:			VectorCopy( le->refEntity.origin, le->refEntity.lightingOrigin );
ADDRLP4 76
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 76
INDIRP4
CNSTI4 164
ADDP4
ADDRLP4 76
INDIRP4
CNSTI4 220
ADDP4
INDIRB
ASGNB 12
line 240
;240:			le->refEntity.renderfx |= RF_LIGHTING_ORIGIN;
ADDRLP4 80
ADDRFP4 0
INDIRP4
CNSTI4 156
ADDP4
ASGNP4
ADDRLP4 80
INDIRP4
ADDRLP4 80
INDIRP4
INDIRI4
CNSTI4 128
BORI4
ASGNI4
line 241
;241:			oldZ = le->refEntity.origin[2];
ADDRLP4 72
ADDRFP4 0
INDIRP4
CNSTI4 228
ADDP4
INDIRF4
ASGNF4
line 242
;242:			le->refEntity.origin[2] -= 16 * ( 1.0 - (float)t / SINK_TIME );
ADDRLP4 84
ADDRFP4 0
INDIRP4
CNSTI4 228
ADDP4
ASGNP4
ADDRLP4 84
INDIRP4
ADDRLP4 84
INDIRP4
INDIRF4
CNSTF4 1098907648
CNSTF4 1065353216
ADDRLP4 68
INDIRI4
CVIF4 4
CNSTF4 1148846080
DIVF4
SUBF4
MULF4
SUBF4
ASGNF4
line 243
;243:			trap_R_AddRefEntityToScene( &le->refEntity );
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 244
;244:			le->refEntity.origin[2] = oldZ;
ADDRFP4 0
INDIRP4
CNSTI4 228
ADDP4
ADDRLP4 72
INDIRF4
ASGNF4
line 245
;245:		} else {
ADDRGP4 $140
JUMPV
LABELV $144
line 246
;246:			trap_R_AddRefEntityToScene( &le->refEntity );
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 247
;247:		}
line 249
;248:
;249:		return;
ADDRGP4 $140
JUMPV
LABELV $141
line 253
;250:	}
;251:
;252:	// calculate new position
;253:	BG_EvaluateTrajectory( &le->pos, cg.time, newOrigin );
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
ARGP4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 56
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 256
;254:
;255:	// trace a line from previous position to new position
;256:	CG_Trace( &trace, le->refEntity.origin, NULL, NULL, newOrigin, -1, CONTENTS_SOLID );
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 220
ADDP4
ARGP4
ADDRLP4 68
CNSTP4 0
ASGNP4
ADDRLP4 68
INDIRP4
ARGP4
ADDRLP4 68
INDIRP4
ARGP4
ADDRLP4 56
ARGP4
CNSTI4 -1
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 257
;257:	if ( trace.fraction == 1.0 ) {
ADDRLP4 0+8
INDIRF4
CNSTF4 1065353216
NEF4 $147
line 259
;258:		// still in free fall
;259:		VectorCopy( newOrigin, le->refEntity.origin );
ADDRFP4 0
INDIRP4
CNSTI4 220
ADDP4
ADDRLP4 56
INDIRB
ASGNB 12
line 261
;260:
;261:		if ( le->leFlags & LEF_TUMBLE ) {
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $150
line 264
;262:			vec3_t angles;
;263:
;264:			BG_EvaluateTrajectory( &le->angles, cg.time, angles );
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
ARGP4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 72
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 265
;265:			AnglesToAxis( angles, le->refEntity.axis );
ADDRLP4 72
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 180
ADDP4
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 266
;266:		}
LABELV $150
line 268
;267:
;268:		trap_R_AddRefEntityToScene( &le->refEntity );
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 271
;269:
;270:		// add a blood trail
;271:		if ( le->leBounceSoundType == LEBS_BLOOD ) {
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 1
NEI4 $140
line 272
;272:			CG_BloodTrail( le );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_BloodTrail
CALLV
pop
line 273
;273:		}
line 275
;274:
;275:		return;
ADDRGP4 $140
JUMPV
LABELV $147
line 281
;276:	}
;277:
;278:	// if it is in a nodrop zone, remove it
;279:	// this keeps gibs from waiting at the bottom of pits of death
;280:	// and floating levels
;281:	if ( trap_CM_PointContents( trace.endpos, 0 ) & CONTENTS_NODROP ) {
ADDRLP4 0+12
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 72
ADDRGP4 trap_CM_PointContents
CALLI4
ASGNI4
ADDRLP4 72
INDIRI4
CVIU4 4
CNSTU4 2147483648
BANDU4
CNSTU4 0
EQU4 $155
line 282
;282:		CG_FreeLocalEntity( le );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_FreeLocalEntity
CALLV
pop
line 283
;283:		return;
ADDRGP4 $140
JUMPV
LABELV $155
line 287
;284:	}
;285:
;286:	// leave a mark
;287:	CG_FragmentBounceMark( le, &trace );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 CG_FragmentBounceMark
CALLV
pop
line 290
;288:
;289:	// do a bouncy sound
;290:	CG_FragmentBounceSound( le, &trace );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 CG_FragmentBounceSound
CALLV
pop
line 293
;291:
;292:	// reflect the velocity on the trace plane
;293:	CG_ReflectVelocity( le, &trace );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 CG_ReflectVelocity
CALLV
pop
line 295
;294:
;295:	trap_R_AddRefEntityToScene( &le->refEntity );
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 296
;296:}
LABELV $140
endproc CG_AddFragment 88 28
export CG_AddFadeRGB
proc CG_AddFadeRGB 60 4
line 312
;297:
;298:/*
;299:=====================================================================
;300:
;301:TRIVIAL LOCAL ENTITIES
;302:
;303:These only do simple scaling or modulation before passing to the renderer
;304:=====================================================================
;305:*/
;306:
;307:/*
;308:====================
;309:CG_AddFadeRGB
;310:====================
;311:*/
;312:void CG_AddFadeRGB( localEntity_t *le ) {
line 316
;313:	refEntity_t *re;
;314:	float c;
;315:
;316:	re = &le->refEntity;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 318
;317:
;318:	c = ( le->endTime - cg.time ) * le->lifeRate;
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 8
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 8
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
MULF4
ASGNF4
line 319
;319:	c *= 0xff;
ADDRLP4 4
CNSTF4 1132396544
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
line 321
;320:
;321:	re->shaderRGBA[0] = le->color[0] * c;
ADDRLP4 16
ADDRFP4 0
INDIRP4
CNSTI4 108
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
ADDRLP4 20
CNSTF4 1325400064
ASGNF4
ADDRLP4 16
INDIRF4
ADDRLP4 20
INDIRF4
LTF4 $161
ADDRLP4 12
ADDRLP4 16
INDIRF4
ADDRLP4 20
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $162
JUMPV
LABELV $161
ADDRLP4 12
ADDRLP4 16
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $162
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 12
INDIRU4
CVUU1 4
ASGNU1
line 322
;322:	re->shaderRGBA[1] = le->color[1] * c;
ADDRLP4 28
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
ADDRLP4 32
CNSTF4 1325400064
ASGNF4
ADDRLP4 28
INDIRF4
ADDRLP4 32
INDIRF4
LTF4 $164
ADDRLP4 24
ADDRLP4 28
INDIRF4
ADDRLP4 32
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $165
JUMPV
LABELV $164
ADDRLP4 24
ADDRLP4 28
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $165
ADDRLP4 0
INDIRP4
CNSTI4 117
ADDP4
ADDRLP4 24
INDIRU4
CVUU1 4
ASGNU1
line 323
;323:	re->shaderRGBA[2] = le->color[2] * c;
ADDRLP4 40
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
ADDRLP4 44
CNSTF4 1325400064
ASGNF4
ADDRLP4 40
INDIRF4
ADDRLP4 44
INDIRF4
LTF4 $167
ADDRLP4 36
ADDRLP4 40
INDIRF4
ADDRLP4 44
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $168
JUMPV
LABELV $167
ADDRLP4 36
ADDRLP4 40
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $168
ADDRLP4 0
INDIRP4
CNSTI4 118
ADDP4
ADDRLP4 36
INDIRU4
CVUU1 4
ASGNU1
line 324
;324:	re->shaderRGBA[3] = le->color[3] * c;
ADDRLP4 52
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
ADDRLP4 56
CNSTF4 1325400064
ASGNF4
ADDRLP4 52
INDIRF4
ADDRLP4 56
INDIRF4
LTF4 $170
ADDRLP4 48
ADDRLP4 52
INDIRF4
ADDRLP4 56
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $171
JUMPV
LABELV $170
ADDRLP4 48
ADDRLP4 52
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $171
ADDRLP4 0
INDIRP4
CNSTI4 119
ADDP4
ADDRLP4 48
INDIRU4
CVUU1 4
ASGNU1
line 326
;325:
;326:	trap_R_AddRefEntityToScene( re );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 327
;327:}
LABELV $158
endproc CG_AddFadeRGB 60 4
proc CG_AddMoveScaleFade 52 12
line 334
;328:
;329:/*
;330:==================
;331:CG_AddMoveScaleFade
;332:==================
;333:*/
;334:static void CG_AddMoveScaleFade( localEntity_t *le ) {
line 340
;335:	refEntity_t	*re;
;336:	float		c;
;337:	vec3_t		delta;
;338:	float		len;
;339:
;340:	re = &le->refEntity;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 342
;341:
;342:	if ( le->fadeInTime > le->startTime && cg.time < le->fadeInTime ) {
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
ADDRLP4 24
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
ASGNI4
ADDRLP4 28
INDIRI4
ADDRLP4 24
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
LEI4 $173
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 28
INDIRI4
GEI4 $173
line 344
;343:		// fade / grow time
;344:		c = 1.0 - (float) ( le->fadeInTime - cg.time ) / ( le->fadeInTime - le->startTime );
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
ADDRLP4 32
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
ASGNI4
ADDRLP4 16
CNSTF4 1065353216
ADDRLP4 36
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 36
INDIRI4
ADDRLP4 32
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
SUBF4
ASGNF4
line 345
;345:	}
ADDRGP4 $174
JUMPV
LABELV $173
line 346
;346:	else {
line 348
;347:		// fade / grow time
;348:		c = ( le->endTime - cg.time ) * le->lifeRate;
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
ADDRLP4 32
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 32
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
MULF4
ASGNF4
line 349
;349:	}
LABELV $174
line 351
;350:
;351:	re->shaderRGBA[3] = 0xff * c * le->color[3];
ADDRLP4 36
CNSTF4 1132396544
ADDRLP4 16
INDIRF4
MULF4
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 40
CNSTF4 1325400064
ASGNF4
ADDRLP4 36
INDIRF4
ADDRLP4 40
INDIRF4
LTF4 $179
ADDRLP4 32
ADDRLP4 36
INDIRF4
ADDRLP4 40
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $180
JUMPV
LABELV $179
ADDRLP4 32
ADDRLP4 36
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $180
ADDRLP4 0
INDIRP4
CNSTI4 119
ADDP4
ADDRLP4 32
INDIRU4
CVUU1 4
ASGNU1
line 353
;352:
;353:	if ( !( le->leFlags & LEF_PUFF_DONT_SCALE ) ) {
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
NEI4 $181
line 354
;354:		re->radius = le->radius * ( 1.0 - c ) + 8;
ADDRLP4 0
INDIRP4
CNSTI4 132
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
CNSTF4 1065353216
ADDRLP4 16
INDIRF4
SUBF4
MULF4
CNSTF4 1090519040
ADDF4
ASGNF4
line 355
;355:	}
LABELV $181
line 357
;356:
;357:	BG_EvaluateTrajectory( &le->pos, cg.time, re->origin );
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
ARGP4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 361
;358:
;359:	// if the view would be "inside" the sprite, kill the sprite
;360:	// so it doesn't add too much overdraw
;361:	VectorSubtract( re->origin, cg.refdef.vieworg, delta );
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRF4
ADDRGP4 cg+109048+24
INDIRF4
SUBF4
ASGNF4
ADDRLP4 4+4
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
ADDRGP4 cg+109048+24+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 4+8
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
ADDRGP4 cg+109048+24+8
INDIRF4
SUBF4
ASGNF4
line 362
;362:	len = VectorLength( delta );
ADDRLP4 4
ARGP4
ADDRLP4 48
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 20
ADDRLP4 48
INDIRF4
ASGNF4
line 363
;363:	if ( len < le->radius ) {
ADDRLP4 20
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
GEF4 $194
line 364
;364:		CG_FreeLocalEntity( le );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_FreeLocalEntity
CALLV
pop
line 365
;365:		return;
ADDRGP4 $172
JUMPV
LABELV $194
line 368
;366:	}
;367:
;368:	trap_R_AddRefEntityToScene( re );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 369
;369:}
LABELV $172
endproc CG_AddMoveScaleFade 52 12
proc CG_AddScaleFade 48 4
line 381
;370:
;371:
;372:/*
;373:===================
;374:CG_AddScaleFade
;375:
;376:For rocket smokes that hang in place, fade out, and are
;377:removed if the view passes through them.
;378:There are often many of these, so it needs to be simple.
;379:===================
;380:*/
;381:static void CG_AddScaleFade( localEntity_t *le ) {
line 387
;382:	refEntity_t	*re;
;383:	float		c;
;384:	vec3_t		delta;
;385:	float		len;
;386:
;387:	re = &le->refEntity;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 390
;388:
;389:	// fade / grow time
;390:	c = ( le->endTime - cg.time ) * le->lifeRate;
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
ADDRLP4 24
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 24
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
MULF4
ASGNF4
line 392
;391:
;392:	re->shaderRGBA[3] = 0xff * c * le->color[3];
ADDRLP4 32
CNSTF4 1132396544
ADDRLP4 16
INDIRF4
MULF4
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 36
CNSTF4 1325400064
ASGNF4
ADDRLP4 32
INDIRF4
ADDRLP4 36
INDIRF4
LTF4 $199
ADDRLP4 28
ADDRLP4 32
INDIRF4
ADDRLP4 36
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $200
JUMPV
LABELV $199
ADDRLP4 28
ADDRLP4 32
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $200
ADDRLP4 0
INDIRP4
CNSTI4 119
ADDP4
ADDRLP4 28
INDIRU4
CVUU1 4
ASGNU1
line 393
;393:	re->radius = le->radius * ( 1.0 - c ) + 8;
ADDRLP4 0
INDIRP4
CNSTI4 132
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
CNSTF4 1065353216
ADDRLP4 16
INDIRF4
SUBF4
MULF4
CNSTF4 1090519040
ADDF4
ASGNF4
line 397
;394:
;395:	// if the view would be "inside" the sprite, kill the sprite
;396:	// so it doesn't add too much overdraw
;397:	VectorSubtract( re->origin, cg.refdef.vieworg, delta );
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRF4
ADDRGP4 cg+109048+24
INDIRF4
SUBF4
ASGNF4
ADDRLP4 4+4
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
ADDRGP4 cg+109048+24+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 4+8
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
ADDRGP4 cg+109048+24+8
INDIRF4
SUBF4
ASGNF4
line 398
;398:	len = VectorLength( delta );
ADDRLP4 4
ARGP4
ADDRLP4 44
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 20
ADDRLP4 44
INDIRF4
ASGNF4
line 399
;399:	if ( len < le->radius ) {
ADDRLP4 20
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
GEF4 $211
line 400
;400:		CG_FreeLocalEntity( le );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_FreeLocalEntity
CALLV
pop
line 401
;401:		return;
ADDRGP4 $196
JUMPV
LABELV $211
line 404
;402:	}
;403:
;404:	trap_R_AddRefEntityToScene( re );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 405
;405:}
LABELV $196
endproc CG_AddScaleFade 48 4
proc CG_AddFallScaleFade 52 4
line 418
;406:
;407:
;408:/*
;409:=================
;410:CG_AddFallScaleFade
;411:
;412:This is just an optimized CG_AddMoveScaleFade
;413:For blood mists that drift down, fade out, and are
;414:removed if the view passes through them.
;415:There are often 100+ of these, so it needs to be simple.
;416:=================
;417:*/
;418:static void CG_AddFallScaleFade( localEntity_t *le ) {
line 424
;419:	refEntity_t	*re;
;420:	float		c;
;421:	vec3_t		delta;
;422:	float		len;
;423:
;424:	re = &le->refEntity;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 427
;425:
;426:	// fade time
;427:	c = ( le->endTime - cg.time ) * le->lifeRate;
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 24
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 24
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
MULF4
ASGNF4
line 429
;428:
;429:	re->shaderRGBA[3] = 0xff * c * le->color[3];
ADDRLP4 32
CNSTF4 1132396544
ADDRLP4 4
INDIRF4
MULF4
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 36
CNSTF4 1325400064
ASGNF4
ADDRLP4 32
INDIRF4
ADDRLP4 36
INDIRF4
LTF4 $216
ADDRLP4 28
ADDRLP4 32
INDIRF4
ADDRLP4 36
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $217
JUMPV
LABELV $216
ADDRLP4 28
ADDRLP4 32
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $217
ADDRLP4 0
INDIRP4
CNSTI4 119
ADDP4
ADDRLP4 28
INDIRU4
CVUU1 4
ASGNU1
line 431
;430:
;431:	re->origin[2] = le->pos.trBase[2] - ( 1.0 - c ) * le->pos.trDelta[2];
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
ADDRLP4 40
INDIRP4
CNSTI4 52
ADDP4
INDIRF4
CNSTF4 1065353216
ADDRLP4 4
INDIRF4
SUBF4
ADDRLP4 40
INDIRP4
CNSTI4 64
ADDP4
INDIRF4
MULF4
SUBF4
ASGNF4
line 433
;432:
;433:	re->radius = le->radius * ( 1.0 - c ) + 16;
ADDRLP4 0
INDIRP4
CNSTI4 132
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
CNSTF4 1065353216
ADDRLP4 4
INDIRF4
SUBF4
MULF4
CNSTF4 1098907648
ADDF4
ASGNF4
line 437
;434:
;435:	// if the view would be "inside" the sprite, kill the sprite
;436:	// so it doesn't add too much overdraw
;437:	VectorSubtract( re->origin, cg.refdef.vieworg, delta );
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRF4
ADDRGP4 cg+109048+24
INDIRF4
SUBF4
ASGNF4
ADDRLP4 8+4
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
ADDRGP4 cg+109048+24+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 8+8
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
ADDRGP4 cg+109048+24+8
INDIRF4
SUBF4
ASGNF4
line 438
;438:	len = VectorLength( delta );
ADDRLP4 8
ARGP4
ADDRLP4 48
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 20
ADDRLP4 48
INDIRF4
ASGNF4
line 439
;439:	if ( len < le->radius ) {
ADDRLP4 20
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
GEF4 $228
line 440
;440:		CG_FreeLocalEntity( le );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_FreeLocalEntity
CALLV
pop
line 441
;441:		return;
ADDRGP4 $213
JUMPV
LABELV $228
line 444
;442:	}
;443:
;444:	trap_R_AddRefEntityToScene( re );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 445
;445:}
LABELV $213
endproc CG_AddFallScaleFade 52 4
proc CG_AddExplosion 20 20
line 454
;446:
;447:
;448:
;449:/*
;450:================
;451:CG_AddExplosion
;452:================
;453:*/
;454:static void CG_AddExplosion( localEntity_t *ex ) {
line 457
;455:	refEntity_t	*ent;
;456:
;457:	ent = &ex->refEntity;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 460
;458:
;459:	// add the entity
;460:	trap_R_AddRefEntityToScene(ent);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 463
;461:
;462:	// add the dlight
;463:	if ( ex->light ) {
ADDRFP4 0
INDIRP4
CNSTI4 128
ADDP4
INDIRF4
CNSTF4 0
EQF4 $231
line 466
;464:		float		light;
;465:
;466:		light = (float)( cg.time - ex->startTime ) / ( ex->endTime - ex->startTime );
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 8
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ASGNI4
ADDRLP4 4
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 12
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 8
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 12
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 467
;467:		if ( light < 0.5 ) {
ADDRLP4 4
INDIRF4
CNSTF4 1056964608
GEF4 $234
line 468
;468:			light = 1.0;
ADDRLP4 4
CNSTF4 1065353216
ASGNF4
line 469
;469:		} else {
ADDRGP4 $235
JUMPV
LABELV $234
line 470
;470:			light = 1.0 - ( light - 0.5 ) * 2;
ADDRLP4 4
CNSTF4 1065353216
CNSTF4 1073741824
ADDRLP4 4
INDIRF4
CNSTF4 1056964608
SUBF4
MULF4
SUBF4
ASGNF4
line 471
;471:		}
LABELV $235
line 472
;472:		light = ex->light * light;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 128
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
line 473
;473:		trap_R_AddLightToScene(ent->origin, light, ex->lightColor[0], ex->lightColor[1], ex->lightColor[2] );
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ARGP4
ADDRLP4 4
INDIRF4
ARGF4
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
ARGF4
ADDRLP4 16
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
ARGF4
ADDRLP4 16
INDIRP4
CNSTI4 140
ADDP4
INDIRF4
ARGF4
ADDRGP4 trap_R_AddLightToScene
CALLV
pop
line 474
;474:	}
LABELV $231
line 475
;475:}
LABELV $230
endproc CG_AddExplosion 20 20
proc CG_AddSpriteExplosion 180 20
line 482
;476:
;477:/*
;478:================
;479:CG_AddSpriteExplosion
;480:================
;481:*/
;482:static void CG_AddSpriteExplosion( localEntity_t *le ) {
line 486
;483:	refEntity_t	re;
;484:	float c;
;485:
;486:	re = le->refEntity;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
INDIRB
ASGNB 140
line 488
;487:
;488:	c = ( le->endTime - cg.time ) / ( float ) ( le->endTime - le->startTime );
ADDRLP4 144
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 148
ADDRLP4 144
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ASGNI4
ADDRLP4 140
ADDRLP4 148
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 148
INDIRI4
ADDRLP4 144
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 489
;489:	if ( c > 1 ) {
ADDRLP4 140
INDIRF4
CNSTF4 1065353216
LEF4 $238
line 490
;490:		c = 1.0;	// can happen during connection problems
ADDRLP4 140
CNSTF4 1065353216
ASGNF4
line 491
;491:	}
LABELV $238
line 493
;492:
;493:	re.shaderRGBA[0] = 0xff;
ADDRLP4 0+116
CNSTU1 255
ASGNU1
line 494
;494:	re.shaderRGBA[1] = 0xff;
ADDRLP4 0+116+1
CNSTU1 255
ASGNU1
line 495
;495:	re.shaderRGBA[2] = 0xff;
ADDRLP4 0+116+2
CNSTU1 255
ASGNU1
line 496
;496:	re.shaderRGBA[3] = 0xff * c * 0.33;
ADDRLP4 156
CNSTF4 1051260355
CNSTF4 1132396544
ADDRLP4 140
INDIRF4
MULF4
MULF4
ASGNF4
ADDRLP4 160
CNSTF4 1325400064
ASGNF4
ADDRLP4 156
INDIRF4
ADDRLP4 160
INDIRF4
LTF4 $248
ADDRLP4 152
ADDRLP4 156
INDIRF4
ADDRLP4 160
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $249
JUMPV
LABELV $248
ADDRLP4 152
ADDRLP4 156
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $249
ADDRLP4 0+116+3
ADDRLP4 152
INDIRU4
CVUU1 4
ASGNU1
line 498
;497:
;498:	re.reType = RT_SPRITE;
ADDRLP4 0
CNSTI4 2
ASGNI4
line 499
;499:	re.radius = 42 * ( 1.0 - c ) + 30;
ADDRLP4 0+132
CNSTF4 1109917696
CNSTF4 1065353216
ADDRLP4 140
INDIRF4
SUBF4
MULF4
CNSTF4 1106247680
ADDF4
ASGNF4
line 501
;500:
;501:	trap_R_AddRefEntityToScene( &re );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 504
;502:
;503:	// add the dlight
;504:	if ( le->light ) {
ADDRFP4 0
INDIRP4
CNSTI4 128
ADDP4
INDIRF4
CNSTF4 0
EQF4 $251
line 507
;505:		float		light;
;506:
;507:		light = (float)( cg.time - le->startTime ) / ( le->endTime - le->startTime );
ADDRLP4 168
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 172
ADDRLP4 168
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ASGNI4
ADDRLP4 164
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 172
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 168
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 172
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 508
;508:		if ( light < 0.5 ) {
ADDRLP4 164
INDIRF4
CNSTF4 1056964608
GEF4 $254
line 509
;509:			light = 1.0;
ADDRLP4 164
CNSTF4 1065353216
ASGNF4
line 510
;510:		} else {
ADDRGP4 $255
JUMPV
LABELV $254
line 511
;511:			light = 1.0 - ( light - 0.5 ) * 2;
ADDRLP4 164
CNSTF4 1065353216
CNSTF4 1073741824
ADDRLP4 164
INDIRF4
CNSTF4 1056964608
SUBF4
MULF4
SUBF4
ASGNF4
line 512
;512:		}
LABELV $255
line 513
;513:		light = le->light * light;
ADDRLP4 164
ADDRFP4 0
INDIRP4
CNSTI4 128
ADDP4
INDIRF4
ADDRLP4 164
INDIRF4
MULF4
ASGNF4
line 514
;514:		trap_R_AddLightToScene(re.origin, light, le->lightColor[0], le->lightColor[1], le->lightColor[2] );
ADDRLP4 0+68
ARGP4
ADDRLP4 164
INDIRF4
ARGF4
ADDRLP4 176
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 176
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
ARGF4
ADDRLP4 176
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
ARGF4
ADDRLP4 176
INDIRP4
CNSTI4 140
ADDP4
INDIRF4
ARGF4
ADDRGP4 trap_R_AddLightToScene
CALLV
pop
line 515
;515:	}
LABELV $251
line 516
;516:}
LABELV $236
endproc CG_AddSpriteExplosion 180 20
export CG_AddKamikaze
proc CG_AddKamikaze 272 20
line 525
;517:
;518:
;519:#ifdef MISSIONPACK
;520:/*
;521:====================
;522:CG_AddKamikaze
;523:====================
;524:*/
;525:void CG_AddKamikaze( localEntity_t *le ) {
line 532
;526:	refEntity_t	*re;
;527:	refEntity_t shockwave;
;528:	float		c;
;529:	vec3_t		test, axis[3];
;530:	int			t;
;531:
;532:	re = &le->refEntity;
ADDRLP4 180
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 534
;533:
;534:	t = cg.time - le->startTime;
ADDRLP4 184
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
ASGNI4
line 535
;535:	VectorClear( test );
ADDRLP4 200
CNSTF4 0
ASGNF4
ADDRLP4 188+8
ADDRLP4 200
INDIRF4
ASGNF4
ADDRLP4 188+4
ADDRLP4 200
INDIRF4
ASGNF4
ADDRLP4 188
ADDRLP4 200
INDIRF4
ASGNF4
line 536
;536:	AnglesToAxis( test, axis );
ADDRLP4 188
ARGP4
ADDRLP4 144
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 538
;537:
;538:	if (t > KAMI_SHOCKWAVE_STARTTIME && t < KAMI_SHOCKWAVE_ENDTIME) {
ADDRLP4 184
INDIRI4
CNSTI4 0
LEI4 $261
ADDRLP4 184
INDIRI4
CNSTI4 2000
GEI4 $261
line 540
;539:
;540:		if (!(le->leFlags & LEF_SOUND1)) {
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
NEI4 $263
line 542
;541://			trap_S_StartSound (re->origin, ENTITYNUM_WORLD, CHAN_AUTO, cgs.media.kamikazeExplodeSound );
;542:			trap_S_StartLocalSound(cgs.media.kamikazeExplodeSound, CHAN_AUTO);
ADDRGP4 cgs+152852+840
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 543
;543:			le->leFlags |= LEF_SOUND1;
ADDRLP4 208
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 208
INDIRP4
ADDRLP4 208
INDIRP4
INDIRI4
CNSTI4 4
BORI4
ASGNI4
line 544
;544:		}
LABELV $263
line 546
;545:		// 1st kamikaze shockwave
;546:		memset(&shockwave, 0, sizeof(shockwave));
ADDRLP4 4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 547
;547:		shockwave.hModel = cgs.media.kamikazeShockWave;
ADDRLP4 4+8
ADDRGP4 cgs+152852+544
INDIRI4
ASGNI4
line 548
;548:		shockwave.reType = RT_MODEL;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 549
;549:		shockwave.shaderTime = re->shaderTime;
ADDRLP4 4+128
ADDRLP4 180
INDIRP4
CNSTI4 128
ADDP4
INDIRF4
ASGNF4
line 550
;550:		VectorCopy(re->origin, shockwave.origin);
ADDRLP4 4+68
ADDRLP4 180
INDIRP4
CNSTI4 68
ADDP4
INDIRB
ASGNB 12
line 552
;551:
;552:		c = (float)(t - KAMI_SHOCKWAVE_STARTTIME) / (float)(KAMI_SHOCKWAVE_ENDTIME - KAMI_SHOCKWAVE_STARTTIME);
ADDRLP4 0
ADDRLP4 184
INDIRI4
CVIF4 4
CNSTF4 1157234688
DIVF4
ASGNF4
line 553
;553:		VectorScale( axis[0], c * KAMI_SHOCKWAVE_MAXRADIUS / KAMI_SHOCKWAVEMODEL_RADIUS, shockwave.axis[0] );
ADDRLP4 4+28
ADDRLP4 144
INDIRF4
CNSTF4 1151664128
ADDRLP4 0
INDIRF4
MULF4
CNSTF4 1118830592
DIVF4
MULF4
ASGNF4
ADDRLP4 4+28+4
ADDRLP4 144+4
INDIRF4
CNSTF4 1151664128
ADDRLP4 0
INDIRF4
MULF4
CNSTF4 1118830592
DIVF4
MULF4
ASGNF4
ADDRLP4 4+28+8
ADDRLP4 144+8
INDIRF4
CNSTF4 1151664128
ADDRLP4 0
INDIRF4
MULF4
CNSTF4 1118830592
DIVF4
MULF4
ASGNF4
line 554
;554:		VectorScale( axis[1], c * KAMI_SHOCKWAVE_MAXRADIUS / KAMI_SHOCKWAVEMODEL_RADIUS, shockwave.axis[1] );
ADDRLP4 4+28+12
ADDRLP4 144+12
INDIRF4
CNSTF4 1151664128
ADDRLP4 0
INDIRF4
MULF4
CNSTF4 1118830592
DIVF4
MULF4
ASGNF4
ADDRLP4 4+28+12+4
ADDRLP4 144+12+4
INDIRF4
CNSTF4 1151664128
ADDRLP4 0
INDIRF4
MULF4
CNSTF4 1118830592
DIVF4
MULF4
ASGNF4
ADDRLP4 4+28+12+8
ADDRLP4 144+12+8
INDIRF4
CNSTF4 1151664128
ADDRLP4 0
INDIRF4
MULF4
CNSTF4 1118830592
DIVF4
MULF4
ASGNF4
line 555
;555:		VectorScale( axis[2], c * KAMI_SHOCKWAVE_MAXRADIUS / KAMI_SHOCKWAVEMODEL_RADIUS, shockwave.axis[2] );
ADDRLP4 4+28+24
ADDRLP4 144+24
INDIRF4
CNSTF4 1151664128
ADDRLP4 0
INDIRF4
MULF4
CNSTF4 1118830592
DIVF4
MULF4
ASGNF4
ADDRLP4 4+28+24+4
ADDRLP4 144+24+4
INDIRF4
CNSTF4 1151664128
ADDRLP4 0
INDIRF4
MULF4
CNSTF4 1118830592
DIVF4
MULF4
ASGNF4
ADDRLP4 4+28+24+8
ADDRLP4 144+24+8
INDIRF4
CNSTF4 1151664128
ADDRLP4 0
INDIRF4
MULF4
CNSTF4 1118830592
DIVF4
MULF4
ASGNF4
line 556
;556:		shockwave.nonNormalizedAxes = qtrue;
ADDRLP4 4+64
CNSTI4 1
ASGNI4
line 558
;557:
;558:		if (t > KAMI_SHOCKWAVEFADE_STARTTIME) {
ADDRLP4 184
INDIRI4
CNSTI4 1500
LEI4 $306
line 559
;559:			c = (float)(t - KAMI_SHOCKWAVEFADE_STARTTIME) / (float)(KAMI_SHOCKWAVE_ENDTIME - KAMI_SHOCKWAVEFADE_STARTTIME);
ADDRLP4 0
ADDRLP4 184
INDIRI4
CNSTI4 1500
SUBI4
CVIF4 4
CNSTF4 1140457472
DIVF4
ASGNF4
line 560
;560:		}
ADDRGP4 $307
JUMPV
LABELV $306
line 561
;561:		else {
line 562
;562:			c = 0;
ADDRLP4 0
CNSTF4 0
ASGNF4
line 563
;563:		}
LABELV $307
line 564
;564:		c *= 0xff;
ADDRLP4 0
CNSTF4 1132396544
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
line 565
;565:		shockwave.shaderRGBA[0] = 0xff - c;
ADDRLP4 212
CNSTF4 1132396544
ADDRLP4 0
INDIRF4
SUBF4
ASGNF4
ADDRLP4 216
CNSTF4 1325400064
ASGNF4
ADDRLP4 212
INDIRF4
ADDRLP4 216
INDIRF4
LTF4 $310
ADDRLP4 208
ADDRLP4 212
INDIRF4
ADDRLP4 216
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $311
JUMPV
LABELV $310
ADDRLP4 208
ADDRLP4 212
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $311
ADDRLP4 4+116
ADDRLP4 208
INDIRU4
CVUU1 4
ASGNU1
line 566
;566:		shockwave.shaderRGBA[1] = 0xff - c;
ADDRLP4 224
CNSTF4 1132396544
ADDRLP4 0
INDIRF4
SUBF4
ASGNF4
ADDRLP4 228
CNSTF4 1325400064
ASGNF4
ADDRLP4 224
INDIRF4
ADDRLP4 228
INDIRF4
LTF4 $315
ADDRLP4 220
ADDRLP4 224
INDIRF4
ADDRLP4 228
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $316
JUMPV
LABELV $315
ADDRLP4 220
ADDRLP4 224
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $316
ADDRLP4 4+116+1
ADDRLP4 220
INDIRU4
CVUU1 4
ASGNU1
line 567
;567:		shockwave.shaderRGBA[2] = 0xff - c;
ADDRLP4 236
CNSTF4 1132396544
ADDRLP4 0
INDIRF4
SUBF4
ASGNF4
ADDRLP4 240
CNSTF4 1325400064
ASGNF4
ADDRLP4 236
INDIRF4
ADDRLP4 240
INDIRF4
LTF4 $320
ADDRLP4 232
ADDRLP4 236
INDIRF4
ADDRLP4 240
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $321
JUMPV
LABELV $320
ADDRLP4 232
ADDRLP4 236
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $321
ADDRLP4 4+116+2
ADDRLP4 232
INDIRU4
CVUU1 4
ASGNU1
line 568
;568:		shockwave.shaderRGBA[3] = 0xff - c;
ADDRLP4 248
CNSTF4 1132396544
ADDRLP4 0
INDIRF4
SUBF4
ASGNF4
ADDRLP4 252
CNSTF4 1325400064
ASGNF4
ADDRLP4 248
INDIRF4
ADDRLP4 252
INDIRF4
LTF4 $325
ADDRLP4 244
ADDRLP4 248
INDIRF4
ADDRLP4 252
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $326
JUMPV
LABELV $325
ADDRLP4 244
ADDRLP4 248
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $326
ADDRLP4 4+116+3
ADDRLP4 244
INDIRU4
CVUU1 4
ASGNU1
line 570
;569:
;570:		trap_R_AddRefEntityToScene( &shockwave );
ADDRLP4 4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 571
;571:	}
LABELV $261
line 573
;572:
;573:	if (t > KAMI_EXPLODE_STARTTIME && t < KAMI_IMPLODE_ENDTIME) {
ADDRLP4 184
INDIRI4
CNSTI4 250
LEI4 $327
ADDRLP4 184
INDIRI4
CNSTI4 2250
GEI4 $327
line 575
;574:		// explosion and implosion
;575:		c = ( le->endTime - cg.time ) * le->lifeRate;
ADDRLP4 212
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 212
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 212
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
MULF4
ASGNF4
line 576
;576:		c *= 0xff;
ADDRLP4 0
CNSTF4 1132396544
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
line 577
;577:		re->shaderRGBA[0] = le->color[0] * c;
ADDRLP4 220
ADDRFP4 0
INDIRP4
CNSTI4 108
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
ADDRLP4 224
CNSTF4 1325400064
ASGNF4
ADDRLP4 220
INDIRF4
ADDRLP4 224
INDIRF4
LTF4 $331
ADDRLP4 216
ADDRLP4 220
INDIRF4
ADDRLP4 224
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $332
JUMPV
LABELV $331
ADDRLP4 216
ADDRLP4 220
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $332
ADDRLP4 180
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 216
INDIRU4
CVUU1 4
ASGNU1
line 578
;578:		re->shaderRGBA[1] = le->color[1] * c;
ADDRLP4 232
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
ADDRLP4 236
CNSTF4 1325400064
ASGNF4
ADDRLP4 232
INDIRF4
ADDRLP4 236
INDIRF4
LTF4 $334
ADDRLP4 228
ADDRLP4 232
INDIRF4
ADDRLP4 236
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $335
JUMPV
LABELV $334
ADDRLP4 228
ADDRLP4 232
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $335
ADDRLP4 180
INDIRP4
CNSTI4 117
ADDP4
ADDRLP4 228
INDIRU4
CVUU1 4
ASGNU1
line 579
;579:		re->shaderRGBA[2] = le->color[2] * c;
ADDRLP4 244
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
ADDRLP4 248
CNSTF4 1325400064
ASGNF4
ADDRLP4 244
INDIRF4
ADDRLP4 248
INDIRF4
LTF4 $337
ADDRLP4 240
ADDRLP4 244
INDIRF4
ADDRLP4 248
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $338
JUMPV
LABELV $337
ADDRLP4 240
ADDRLP4 244
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $338
ADDRLP4 180
INDIRP4
CNSTI4 118
ADDP4
ADDRLP4 240
INDIRU4
CVUU1 4
ASGNU1
line 580
;580:		re->shaderRGBA[3] = le->color[3] * c;
ADDRLP4 256
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
ADDRLP4 260
CNSTF4 1325400064
ASGNF4
ADDRLP4 256
INDIRF4
ADDRLP4 260
INDIRF4
LTF4 $340
ADDRLP4 252
ADDRLP4 256
INDIRF4
ADDRLP4 260
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $341
JUMPV
LABELV $340
ADDRLP4 252
ADDRLP4 256
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $341
ADDRLP4 180
INDIRP4
CNSTI4 119
ADDP4
ADDRLP4 252
INDIRU4
CVUU1 4
ASGNU1
line 582
;581:
;582:		if( t < KAMI_IMPLODE_STARTTIME ) {
ADDRLP4 184
INDIRI4
CNSTI4 2000
GEI4 $342
line 583
;583:			c = (float)(t - KAMI_EXPLODE_STARTTIME) / (float)(KAMI_IMPLODE_STARTTIME - KAMI_EXPLODE_STARTTIME);
ADDRLP4 0
ADDRLP4 184
INDIRI4
CNSTI4 250
SUBI4
CVIF4 4
CNSTF4 1155186688
DIVF4
ASGNF4
line 584
;584:		}
ADDRGP4 $343
JUMPV
LABELV $342
line 585
;585:		else {
line 586
;586:			if (!(le->leFlags & LEF_SOUND2)) {
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
NEI4 $344
line 588
;587://				trap_S_StartSound (re->origin, ENTITYNUM_WORLD, CHAN_AUTO, cgs.media.kamikazeImplodeSound );
;588:				trap_S_StartLocalSound(cgs.media.kamikazeImplodeSound, CHAN_AUTO);
ADDRGP4 cgs+152852+844
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 589
;589:				le->leFlags |= LEF_SOUND2;
ADDRLP4 264
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 264
INDIRP4
ADDRLP4 264
INDIRP4
INDIRI4
CNSTI4 8
BORI4
ASGNI4
line 590
;590:			}
LABELV $344
line 591
;591:			c = (float)(KAMI_IMPLODE_ENDTIME - t) / (float) (KAMI_IMPLODE_ENDTIME - KAMI_IMPLODE_STARTTIME);
ADDRLP4 0
CNSTI4 2250
ADDRLP4 184
INDIRI4
SUBI4
CVIF4 4
CNSTF4 1132068864
DIVF4
ASGNF4
line 592
;592:		}
LABELV $343
line 593
;593:		VectorScale( axis[0], c * KAMI_BOOMSPHERE_MAXRADIUS / KAMI_BOOMSPHEREMODEL_RADIUS, re->axis[0] );
ADDRLP4 180
INDIRP4
CNSTI4 28
ADDP4
ADDRLP4 144
INDIRF4
CNSTF4 1144258560
ADDRLP4 0
INDIRF4
MULF4
CNSTF4 1116733440
DIVF4
MULF4
ASGNF4
ADDRLP4 180
INDIRP4
CNSTI4 32
ADDP4
ADDRLP4 144+4
INDIRF4
CNSTF4 1144258560
ADDRLP4 0
INDIRF4
MULF4
CNSTF4 1116733440
DIVF4
MULF4
ASGNF4
ADDRLP4 180
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 144+8
INDIRF4
CNSTF4 1144258560
ADDRLP4 0
INDIRF4
MULF4
CNSTF4 1116733440
DIVF4
MULF4
ASGNF4
line 594
;594:		VectorScale( axis[1], c * KAMI_BOOMSPHERE_MAXRADIUS / KAMI_BOOMSPHEREMODEL_RADIUS, re->axis[1] );
ADDRLP4 180
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 144+12
INDIRF4
CNSTF4 1144258560
ADDRLP4 0
INDIRF4
MULF4
CNSTF4 1116733440
DIVF4
MULF4
ASGNF4
ADDRLP4 180
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 144+12+4
INDIRF4
CNSTF4 1144258560
ADDRLP4 0
INDIRF4
MULF4
CNSTF4 1116733440
DIVF4
MULF4
ASGNF4
ADDRLP4 180
INDIRP4
CNSTI4 48
ADDP4
ADDRLP4 144+12+8
INDIRF4
CNSTF4 1144258560
ADDRLP4 0
INDIRF4
MULF4
CNSTF4 1116733440
DIVF4
MULF4
ASGNF4
line 595
;595:		VectorScale( axis[2], c * KAMI_BOOMSPHERE_MAXRADIUS / KAMI_BOOMSPHEREMODEL_RADIUS, re->axis[2] );
ADDRLP4 180
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 144+24
INDIRF4
CNSTF4 1144258560
ADDRLP4 0
INDIRF4
MULF4
CNSTF4 1116733440
DIVF4
MULF4
ASGNF4
ADDRLP4 180
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 144+24+4
INDIRF4
CNSTF4 1144258560
ADDRLP4 0
INDIRF4
MULF4
CNSTF4 1116733440
DIVF4
MULF4
ASGNF4
ADDRLP4 180
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 144+24+8
INDIRF4
CNSTF4 1144258560
ADDRLP4 0
INDIRF4
MULF4
CNSTF4 1116733440
DIVF4
MULF4
ASGNF4
line 596
;596:		re->nonNormalizedAxes = qtrue;
ADDRLP4 180
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 1
ASGNI4
line 598
;597:
;598:		trap_R_AddRefEntityToScene( re );
ADDRLP4 180
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 600
;599:		// add the dlight
;600:		trap_R_AddLightToScene( re->origin, c * 1000.0, 1.0, 1.0, c );
ADDRLP4 180
INDIRP4
CNSTI4 68
ADDP4
ARGP4
CNSTF4 1148846080
ADDRLP4 0
INDIRF4
MULF4
ARGF4
ADDRLP4 268
CNSTF4 1065353216
ASGNF4
ADDRLP4 268
INDIRF4
ARGF4
ADDRLP4 268
INDIRF4
ARGF4
ADDRLP4 0
INDIRF4
ARGF4
ADDRGP4 trap_R_AddLightToScene
CALLV
pop
line 601
;601:	}
LABELV $327
line 603
;602:
;603:	if (t > KAMI_SHOCKWAVE2_STARTTIME && t < KAMI_SHOCKWAVE2_ENDTIME) {
ADDRLP4 184
INDIRI4
CNSTI4 2000
LEI4 $360
ADDRLP4 184
INDIRI4
CNSTI4 3000
GEI4 $360
line 605
;604:		// 2nd kamikaze shockwave
;605:		if (le->angles.trBase[0] == 0 &&
ADDRLP4 216
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 220
CNSTF4 0
ASGNF4
ADDRLP4 216
INDIRP4
CNSTI4 80
ADDP4
INDIRF4
ADDRLP4 220
INDIRF4
NEF4 $362
ADDRLP4 216
INDIRP4
CNSTI4 84
ADDP4
INDIRF4
ADDRLP4 220
INDIRF4
NEF4 $362
ADDRLP4 216
INDIRP4
CNSTI4 88
ADDP4
INDIRF4
ADDRLP4 220
INDIRF4
NEF4 $362
line 607
;606:			le->angles.trBase[1] == 0 &&
;607:			le->angles.trBase[2] == 0) {
line 608
;608:			le->angles.trBase[0] = random() * 360;
ADDRLP4 224
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 80
ADDP4
CNSTF4 1135869952
ADDRLP4 224
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ASGNF4
line 609
;609:			le->angles.trBase[1] = random() * 360;
ADDRLP4 228
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 84
ADDP4
CNSTF4 1135869952
ADDRLP4 228
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ASGNF4
line 610
;610:			le->angles.trBase[2] = random() * 360;
ADDRLP4 232
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 88
ADDP4
CNSTF4 1135869952
ADDRLP4 232
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ASGNF4
line 611
;611:		}
ADDRGP4 $363
JUMPV
LABELV $362
line 612
;612:		else {
line 613
;613:			c = 0;
ADDRLP4 0
CNSTF4 0
ASGNF4
line 614
;614:		}
LABELV $363
line 615
;615:		memset(&shockwave, 0, sizeof(shockwave));
ADDRLP4 4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 616
;616:		shockwave.hModel = cgs.media.kamikazeShockWave;
ADDRLP4 4+8
ADDRGP4 cgs+152852+544
INDIRI4
ASGNI4
line 617
;617:		shockwave.reType = RT_MODEL;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 618
;618:		shockwave.shaderTime = re->shaderTime;
ADDRLP4 4+128
ADDRLP4 180
INDIRP4
CNSTI4 128
ADDP4
INDIRF4
ASGNF4
line 619
;619:		VectorCopy(re->origin, shockwave.origin);
ADDRLP4 4+68
ADDRLP4 180
INDIRP4
CNSTI4 68
ADDP4
INDIRB
ASGNB 12
line 621
;620:
;621:		test[0] = le->angles.trBase[0];
ADDRLP4 188
ADDRFP4 0
INDIRP4
CNSTI4 80
ADDP4
INDIRF4
ASGNF4
line 622
;622:		test[1] = le->angles.trBase[1];
ADDRLP4 188+4
ADDRFP4 0
INDIRP4
CNSTI4 84
ADDP4
INDIRF4
ASGNF4
line 623
;623:		test[2] = le->angles.trBase[2];
ADDRLP4 188+8
ADDRFP4 0
INDIRP4
CNSTI4 88
ADDP4
INDIRF4
ASGNF4
line 624
;624:		AnglesToAxis( test, axis );
ADDRLP4 188
ARGP4
ADDRLP4 144
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 626
;625:
;626:		c = (float)(t - KAMI_SHOCKWAVE2_STARTTIME) / (float)(KAMI_SHOCKWAVE2_ENDTIME - KAMI_SHOCKWAVE2_STARTTIME);
ADDRLP4 0
ADDRLP4 184
INDIRI4
CNSTI4 2000
SUBI4
CVIF4 4
CNSTF4 1148846080
DIVF4
ASGNF4
line 627
;627:		VectorScale( axis[0], c * KAMI_SHOCKWAVE2_MAXRADIUS / KAMI_SHOCKWAVEMODEL_RADIUS, shockwave.axis[0] );
ADDRLP4 4+28
ADDRLP4 144
INDIRF4
CNSTF4 1143996416
ADDRLP4 0
INDIRF4
MULF4
CNSTF4 1118830592
DIVF4
MULF4
ASGNF4
ADDRLP4 4+28+4
ADDRLP4 144+4
INDIRF4
CNSTF4 1143996416
ADDRLP4 0
INDIRF4
MULF4
CNSTF4 1118830592
DIVF4
MULF4
ASGNF4
ADDRLP4 4+28+8
ADDRLP4 144+8
INDIRF4
CNSTF4 1143996416
ADDRLP4 0
INDIRF4
MULF4
CNSTF4 1118830592
DIVF4
MULF4
ASGNF4
line 628
;628:		VectorScale( axis[1], c * KAMI_SHOCKWAVE2_MAXRADIUS / KAMI_SHOCKWAVEMODEL_RADIUS, shockwave.axis[1] );
ADDRLP4 4+28+12
ADDRLP4 144+12
INDIRF4
CNSTF4 1143996416
ADDRLP4 0
INDIRF4
MULF4
CNSTF4 1118830592
DIVF4
MULF4
ASGNF4
ADDRLP4 4+28+12+4
ADDRLP4 144+12+4
INDIRF4
CNSTF4 1143996416
ADDRLP4 0
INDIRF4
MULF4
CNSTF4 1118830592
DIVF4
MULF4
ASGNF4
ADDRLP4 4+28+12+8
ADDRLP4 144+12+8
INDIRF4
CNSTF4 1143996416
ADDRLP4 0
INDIRF4
MULF4
CNSTF4 1118830592
DIVF4
MULF4
ASGNF4
line 629
;629:		VectorScale( axis[2], c * KAMI_SHOCKWAVE2_MAXRADIUS / KAMI_SHOCKWAVEMODEL_RADIUS, shockwave.axis[2] );
ADDRLP4 4+28+24
ADDRLP4 144+24
INDIRF4
CNSTF4 1143996416
ADDRLP4 0
INDIRF4
MULF4
CNSTF4 1118830592
DIVF4
MULF4
ASGNF4
ADDRLP4 4+28+24+4
ADDRLP4 144+24+4
INDIRF4
CNSTF4 1143996416
ADDRLP4 0
INDIRF4
MULF4
CNSTF4 1118830592
DIVF4
MULF4
ASGNF4
ADDRLP4 4+28+24+8
ADDRLP4 144+24+8
INDIRF4
CNSTF4 1143996416
ADDRLP4 0
INDIRF4
MULF4
CNSTF4 1118830592
DIVF4
MULF4
ASGNF4
line 630
;630:		shockwave.nonNormalizedAxes = qtrue;
ADDRLP4 4+64
CNSTI4 1
ASGNI4
line 632
;631:
;632:		if (t > KAMI_SHOCKWAVE2FADE_STARTTIME) {
ADDRLP4 184
INDIRI4
CNSTI4 2500
LEI4 $405
line 633
;633:			c = (float)(t - KAMI_SHOCKWAVE2FADE_STARTTIME) / (float)(KAMI_SHOCKWAVE2_ENDTIME - KAMI_SHOCKWAVE2FADE_STARTTIME);
ADDRLP4 0
ADDRLP4 184
INDIRI4
CNSTI4 2500
SUBI4
CVIF4 4
CNSTF4 1140457472
DIVF4
ASGNF4
line 634
;634:		}
ADDRGP4 $406
JUMPV
LABELV $405
line 635
;635:		else {
line 636
;636:			c = 0;
ADDRLP4 0
CNSTF4 0
ASGNF4
line 637
;637:		}
LABELV $406
line 638
;638:		c *= 0xff;
ADDRLP4 0
CNSTF4 1132396544
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
line 639
;639:		shockwave.shaderRGBA[0] = 0xff - c;
ADDRLP4 228
CNSTF4 1132396544
ADDRLP4 0
INDIRF4
SUBF4
ASGNF4
ADDRLP4 232
CNSTF4 1325400064
ASGNF4
ADDRLP4 228
INDIRF4
ADDRLP4 232
INDIRF4
LTF4 $409
ADDRLP4 224
ADDRLP4 228
INDIRF4
ADDRLP4 232
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $410
JUMPV
LABELV $409
ADDRLP4 224
ADDRLP4 228
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $410
ADDRLP4 4+116
ADDRLP4 224
INDIRU4
CVUU1 4
ASGNU1
line 640
;640:		shockwave.shaderRGBA[1] = 0xff - c;
ADDRLP4 240
CNSTF4 1132396544
ADDRLP4 0
INDIRF4
SUBF4
ASGNF4
ADDRLP4 244
CNSTF4 1325400064
ASGNF4
ADDRLP4 240
INDIRF4
ADDRLP4 244
INDIRF4
LTF4 $414
ADDRLP4 236
ADDRLP4 240
INDIRF4
ADDRLP4 244
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $415
JUMPV
LABELV $414
ADDRLP4 236
ADDRLP4 240
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $415
ADDRLP4 4+116+1
ADDRLP4 236
INDIRU4
CVUU1 4
ASGNU1
line 641
;641:		shockwave.shaderRGBA[2] = 0xff - c;
ADDRLP4 252
CNSTF4 1132396544
ADDRLP4 0
INDIRF4
SUBF4
ASGNF4
ADDRLP4 256
CNSTF4 1325400064
ASGNF4
ADDRLP4 252
INDIRF4
ADDRLP4 256
INDIRF4
LTF4 $419
ADDRLP4 248
ADDRLP4 252
INDIRF4
ADDRLP4 256
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $420
JUMPV
LABELV $419
ADDRLP4 248
ADDRLP4 252
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $420
ADDRLP4 4+116+2
ADDRLP4 248
INDIRU4
CVUU1 4
ASGNU1
line 642
;642:		shockwave.shaderRGBA[3] = 0xff - c;
ADDRLP4 264
CNSTF4 1132396544
ADDRLP4 0
INDIRF4
SUBF4
ASGNF4
ADDRLP4 268
CNSTF4 1325400064
ASGNF4
ADDRLP4 264
INDIRF4
ADDRLP4 268
INDIRF4
LTF4 $424
ADDRLP4 260
ADDRLP4 264
INDIRF4
ADDRLP4 268
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $425
JUMPV
LABELV $424
ADDRLP4 260
ADDRLP4 264
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $425
ADDRLP4 4+116+3
ADDRLP4 260
INDIRU4
CVUU1 4
ASGNU1
line 644
;643:
;644:		trap_R_AddRefEntityToScene( &shockwave );
ADDRLP4 4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 645
;645:	}
LABELV $360
line 646
;646:}
LABELV $257
endproc CG_AddKamikaze 272 20
export CG_AddInvulnerabilityImpact
proc CG_AddInvulnerabilityImpact 0 4
line 653
;647:
;648:/*
;649:===================
;650:CG_AddInvulnerabilityImpact
;651:===================
;652:*/
;653:void CG_AddInvulnerabilityImpact( localEntity_t *le ) {
line 654
;654:	trap_R_AddRefEntityToScene( &le->refEntity );
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 655
;655:}
LABELV $426
endproc CG_AddInvulnerabilityImpact 0 4
export CG_AddInvulnerabilityJuiced
proc CG_AddInvulnerabilityJuiced 4 4
line 662
;656:
;657:/*
;658:===================
;659:CG_AddInvulnerabilityJuiced
;660:===================
;661:*/
;662:void CG_AddInvulnerabilityJuiced( localEntity_t *le ) {
line 665
;663:	int t;
;664:
;665:	t = cg.time - le->startTime;
ADDRLP4 0
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
ASGNI4
line 666
;666:	if ( t > 3000 ) {
ADDRLP4 0
INDIRI4
CNSTI4 3000
LEI4 $429
line 667
;667:		le->refEntity.axis[0][0] = (float) 1.0 + 0.3 * (t - 3000) / 2000;
ADDRFP4 0
INDIRP4
CNSTI4 180
ADDP4
CNSTF4 1050253722
ADDRLP4 0
INDIRI4
CNSTI4 3000
SUBI4
CVIF4 4
MULF4
CNSTF4 1157234688
DIVF4
CNSTF4 1065353216
ADDF4
ASGNF4
line 668
;668:		le->refEntity.axis[1][1] = (float) 1.0 + 0.3 * (t - 3000) / 2000;
ADDRFP4 0
INDIRP4
CNSTI4 196
ADDP4
CNSTF4 1050253722
ADDRLP4 0
INDIRI4
CNSTI4 3000
SUBI4
CVIF4 4
MULF4
CNSTF4 1157234688
DIVF4
CNSTF4 1065353216
ADDF4
ASGNF4
line 669
;669:		le->refEntity.axis[2][2] = (float) 0.7 + 0.3 * (2000 - (t - 3000)) / 2000;
ADDRFP4 0
INDIRP4
CNSTI4 212
ADDP4
CNSTF4 1050253722
CNSTI4 2000
ADDRLP4 0
INDIRI4
CNSTI4 3000
SUBI4
SUBI4
CVIF4 4
MULF4
CNSTF4 1157234688
DIVF4
CNSTF4 1060320051
ADDF4
ASGNF4
line 670
;670:	}
LABELV $429
line 671
;671:	if ( t > 5000 ) {
ADDRLP4 0
INDIRI4
CNSTI4 5000
LEI4 $431
line 672
;672:		le->endTime = 0;
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
CNSTI4 0
ASGNI4
line 673
;673:		CG_GibPlayer( le->refEntity.origin );
ADDRFP4 0
INDIRP4
CNSTI4 220
ADDP4
ARGP4
ADDRGP4 CG_GibPlayer
CALLV
pop
line 674
;674:	}
ADDRGP4 $432
JUMPV
LABELV $431
line 675
;675:	else {
line 676
;676:		trap_R_AddRefEntityToScene( &le->refEntity );
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 677
;677:	}
LABELV $432
line 678
;678:}
LABELV $427
endproc CG_AddInvulnerabilityJuiced 4 4
export CG_AddRefEntity
proc CG_AddRefEntity 0 4
line 685
;679:
;680:/*
;681:===================
;682:CG_AddRefEntity
;683:===================
;684:*/
;685:void CG_AddRefEntity( localEntity_t *le ) {
line 686
;686:	if (le->endTime < cg.time) {
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
GEI4 $434
line 687
;687:		CG_FreeLocalEntity( le );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_FreeLocalEntity
CALLV
pop
line 688
;688:		return;
ADDRGP4 $433
JUMPV
LABELV $434
line 690
;689:	}
;690:	trap_R_AddRefEntityToScene( &le->refEntity );
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 691
;691:}
LABELV $433
endproc CG_AddRefEntity 0 4
lit
align 4
LABELV $438
byte 4 0
byte 4 0
byte 4 1065353216
export CG_AddScorePlum
code
proc CG_AddScorePlum 168 12
line 701
;692:
;693:#endif
;694:/*
;695:===================
;696:CG_AddScorePlum
;697:===================
;698:*/
;699:#define NUMBER_SIZE		8
;700:
;701:void CG_AddScorePlum( localEntity_t *le ) {
line 703
;702:	refEntity_t	*re;
;703:	vec3_t		origin, delta, dir, vec, up = {0, 0, 1};
ADDRLP4 112
ADDRGP4 $438
INDIRB
ASGNB 12
line 707
;704:	float		c, len;
;705:	int			i, score, digits[10], numdigits, negative;
;706:
;707:	re = &le->refEntity;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 709
;708:
;709:	c = ( le->endTime - cg.time ) * le->lifeRate;
ADDRLP4 128
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 80
ADDRLP4 128
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 128
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
MULF4
ASGNF4
line 711
;710:
;711:	score = le->radius;
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
CVFI4 4
ASGNI4
line 712
;712:	if (score < 0) {
ADDRLP4 12
INDIRI4
CNSTI4 0
GEI4 $440
line 713
;713:		re->shaderRGBA[0] = 0xff;
ADDRLP4 8
INDIRP4
CNSTI4 116
ADDP4
CNSTU1 255
ASGNU1
line 714
;714:		re->shaderRGBA[1] = 0x11;
ADDRLP4 8
INDIRP4
CNSTI4 117
ADDP4
CNSTU1 17
ASGNU1
line 715
;715:		re->shaderRGBA[2] = 0x11;
ADDRLP4 8
INDIRP4
CNSTI4 118
ADDP4
CNSTU1 17
ASGNU1
line 716
;716:	}
ADDRGP4 $441
JUMPV
LABELV $440
line 717
;717:	else {
line 718
;718:		re->shaderRGBA[0] = 0xff;
ADDRLP4 8
INDIRP4
CNSTI4 116
ADDP4
CNSTU1 255
ASGNU1
line 719
;719:		re->shaderRGBA[1] = 0xff;
ADDRLP4 8
INDIRP4
CNSTI4 117
ADDP4
CNSTU1 255
ASGNU1
line 720
;720:		re->shaderRGBA[2] = 0xff;
ADDRLP4 8
INDIRP4
CNSTI4 118
ADDP4
CNSTU1 255
ASGNU1
line 721
;721:		if (score >= 50) {
ADDRLP4 12
INDIRI4
CNSTI4 50
LTI4 $442
line 722
;722:			re->shaderRGBA[1] = 0;
ADDRLP4 8
INDIRP4
CNSTI4 117
ADDP4
CNSTU1 0
ASGNU1
line 723
;723:		} else if (score >= 20) {
ADDRGP4 $443
JUMPV
LABELV $442
ADDRLP4 12
INDIRI4
CNSTI4 20
LTI4 $444
line 724
;724:			re->shaderRGBA[0] = re->shaderRGBA[1] = 0;
ADDRLP4 136
CNSTU1 0
ASGNU1
ADDRLP4 8
INDIRP4
CNSTI4 117
ADDP4
ADDRLP4 136
INDIRU1
ASGNU1
ADDRLP4 8
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 136
INDIRU1
ASGNU1
line 725
;725:		} else if (score >= 10) {
ADDRGP4 $445
JUMPV
LABELV $444
ADDRLP4 12
INDIRI4
CNSTI4 10
LTI4 $446
line 726
;726:			re->shaderRGBA[2] = 0;
ADDRLP4 8
INDIRP4
CNSTI4 118
ADDP4
CNSTU1 0
ASGNU1
line 727
;727:		} else if (score >= 2) {
ADDRGP4 $447
JUMPV
LABELV $446
ADDRLP4 12
INDIRI4
CNSTI4 2
LTI4 $448
line 728
;728:			re->shaderRGBA[0] = re->shaderRGBA[2] = 0;
ADDRLP4 136
CNSTU1 0
ASGNU1
ADDRLP4 8
INDIRP4
CNSTI4 118
ADDP4
ADDRLP4 136
INDIRU1
ASGNU1
ADDRLP4 8
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 136
INDIRU1
ASGNU1
line 729
;729:		}
LABELV $448
LABELV $447
LABELV $445
LABELV $443
line 731
;730:
;731:	}
LABELV $441
line 732
;732:	if (c < 0.25)
ADDRLP4 80
INDIRF4
CNSTF4 1048576000
GEF4 $450
line 733
;733:		re->shaderRGBA[3] = 0xff * 4 * c;
ADDRLP4 136
CNSTF4 1149173760
ADDRLP4 80
INDIRF4
MULF4
ASGNF4
ADDRLP4 140
CNSTF4 1325400064
ASGNF4
ADDRLP4 136
INDIRF4
ADDRLP4 140
INDIRF4
LTF4 $453
ADDRLP4 132
ADDRLP4 136
INDIRF4
ADDRLP4 140
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $454
JUMPV
LABELV $453
ADDRLP4 132
ADDRLP4 136
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $454
ADDRLP4 8
INDIRP4
CNSTI4 119
ADDP4
ADDRLP4 132
INDIRU4
CVUU1 4
ASGNU1
ADDRGP4 $451
JUMPV
LABELV $450
line 735
;734:	else
;735:		re->shaderRGBA[3] = 0xff;
ADDRLP4 8
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 255
ASGNU1
LABELV $451
line 737
;736:
;737:	re->radius = NUMBER_SIZE / 2;
ADDRLP4 8
INDIRP4
CNSTI4 132
ADDP4
CNSTF4 1082130432
ASGNF4
line 739
;738:
;739:	VectorCopy(le->pos.trBase, origin);
ADDRLP4 16
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
INDIRB
ASGNB 12
line 740
;740:	origin[2] += 110 - c * 100;
ADDRLP4 16+8
ADDRLP4 16+8
INDIRF4
CNSTF4 1121714176
CNSTF4 1120403456
ADDRLP4 80
INDIRF4
MULF4
SUBF4
ADDF4
ASGNF4
line 742
;741:
;742:	VectorSubtract(cg.refdef.vieworg, origin, dir);
ADDRLP4 96
ADDRGP4 cg+109048+24
INDIRF4
ADDRLP4 16
INDIRF4
SUBF4
ASGNF4
ADDRLP4 96+4
ADDRGP4 cg+109048+24+4
INDIRF4
ADDRLP4 16+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 96+8
ADDRGP4 cg+109048+24+8
INDIRF4
ADDRLP4 16+8
INDIRF4
SUBF4
ASGNF4
line 743
;743:	CrossProduct(dir, up, vec);
ADDRLP4 96
ARGP4
ADDRLP4 112
ARGP4
ADDRLP4 28
ARGP4
ADDRGP4 CrossProduct
CALLV
pop
line 744
;744:	VectorNormalize(vec);
ADDRLP4 28
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 746
;745:
;746:	VectorMA(origin, -10 + 20 * sin(c * 2 * M_PI), vec, origin);
CNSTF4 1078530011
CNSTF4 1073741824
ADDRLP4 80
INDIRF4
MULF4
MULF4
ARGF4
ADDRLP4 144
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 16
ADDRLP4 16
INDIRF4
ADDRLP4 28
INDIRF4
CNSTF4 1101004800
ADDRLP4 144
INDIRF4
MULF4
CNSTF4 3240099840
ADDF4
MULF4
ADDF4
ASGNF4
CNSTF4 1078530011
CNSTF4 1073741824
ADDRLP4 80
INDIRF4
MULF4
MULF4
ARGF4
ADDRLP4 148
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 16+4
ADDRLP4 16+4
INDIRF4
ADDRLP4 28+4
INDIRF4
CNSTF4 1101004800
ADDRLP4 148
INDIRF4
MULF4
CNSTF4 3240099840
ADDF4
MULF4
ADDF4
ASGNF4
CNSTF4 1078530011
CNSTF4 1073741824
ADDRLP4 80
INDIRF4
MULF4
MULF4
ARGF4
ADDRLP4 152
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 16+8
ADDRLP4 16+8
INDIRF4
ADDRLP4 28+8
INDIRF4
CNSTF4 1101004800
ADDRLP4 152
INDIRF4
MULF4
CNSTF4 3240099840
ADDF4
MULF4
ADDF4
ASGNF4
line 750
;747:
;748:	// if the view would be "inside" the sprite, kill the sprite
;749:	// so it doesn't add too much overdraw
;750:	VectorSubtract( origin, cg.refdef.vieworg, delta );
ADDRLP4 84
ADDRLP4 16
INDIRF4
ADDRGP4 cg+109048+24
INDIRF4
SUBF4
ASGNF4
ADDRLP4 84+4
ADDRLP4 16+4
INDIRF4
ADDRGP4 cg+109048+24+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 84+8
ADDRLP4 16+8
INDIRF4
ADDRGP4 cg+109048+24+8
INDIRF4
SUBF4
ASGNF4
line 751
;751:	len = VectorLength( delta );
ADDRLP4 84
ARGP4
ADDRLP4 156
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 124
ADDRLP4 156
INDIRF4
ASGNF4
line 752
;752:	if ( len < 20 ) {
ADDRLP4 124
INDIRF4
CNSTF4 1101004800
GEF4 $486
line 753
;753:		CG_FreeLocalEntity( le );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_FreeLocalEntity
CALLV
pop
line 754
;754:		return;
ADDRGP4 $437
JUMPV
LABELV $486
line 757
;755:	}
;756:
;757:	negative = qfalse;
ADDRLP4 108
CNSTI4 0
ASGNI4
line 758
;758:	if (score < 0) {
ADDRLP4 12
INDIRI4
CNSTI4 0
GEI4 $488
line 759
;759:		negative = qtrue;
ADDRLP4 108
CNSTI4 1
ASGNI4
line 760
;760:		score = -score;
ADDRLP4 12
ADDRLP4 12
INDIRI4
NEGI4
ASGNI4
line 761
;761:	}
LABELV $488
line 763
;762:
;763:	for (numdigits = 0; !(numdigits && !score); numdigits++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $493
JUMPV
LABELV $490
line 764
;764:		digits[numdigits] = score % 10;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 40
ADDP4
ADDRLP4 12
INDIRI4
CNSTI4 10
MODI4
ASGNI4
line 765
;765:		score = score / 10;
ADDRLP4 12
ADDRLP4 12
INDIRI4
CNSTI4 10
DIVI4
ASGNI4
line 766
;766:	}
LABELV $491
line 763
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $493
ADDRLP4 160
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 160
INDIRI4
EQI4 $490
ADDRLP4 12
INDIRI4
ADDRLP4 160
INDIRI4
NEI4 $490
line 768
;767:
;768:	if (negative) {
ADDRLP4 108
INDIRI4
CNSTI4 0
EQI4 $494
line 769
;769:		digits[numdigits] = 10;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 40
ADDP4
CNSTI4 10
ASGNI4
line 770
;770:		numdigits++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 771
;771:	}
LABELV $494
line 773
;772:
;773:	for (i = 0; i < numdigits; i++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $499
JUMPV
LABELV $496
line 774
;774:		VectorMA(origin, (float) (((float) numdigits / 2) - i) * NUMBER_SIZE, vec, re->origin);
ADDRLP4 8
INDIRP4
CNSTI4 68
ADDP4
ADDRLP4 16
INDIRF4
ADDRLP4 28
INDIRF4
CNSTF4 1090519040
ADDRLP4 0
INDIRI4
CVIF4 4
CNSTF4 1073741824
DIVF4
ADDRLP4 4
INDIRI4
CVIF4 4
SUBF4
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 8
INDIRP4
CNSTI4 72
ADDP4
ADDRLP4 16+4
INDIRF4
ADDRLP4 28+4
INDIRF4
CNSTF4 1090519040
ADDRLP4 0
INDIRI4
CVIF4 4
CNSTF4 1073741824
DIVF4
ADDRLP4 4
INDIRI4
CVIF4 4
SUBF4
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 8
INDIRP4
CNSTI4 76
ADDP4
ADDRLP4 16+8
INDIRF4
ADDRLP4 28+8
INDIRF4
CNSTF4 1090519040
ADDRLP4 0
INDIRI4
CVIF4 4
CNSTF4 1073741824
DIVF4
ADDRLP4 4
INDIRI4
CVIF4 4
SUBF4
MULF4
MULF4
ADDF4
ASGNF4
line 775
;775:		re->customShader = cgs.media.numberShaders[digits[numdigits-1-i]];
ADDRLP4 164
CNSTI4 2
ASGNI4
ADDRLP4 8
INDIRP4
CNSTI4 112
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 1
SUBI4
ADDRLP4 4
INDIRI4
SUBI4
ADDRLP4 164
INDIRI4
LSHI4
ADDRLP4 40
ADDP4
INDIRI4
ADDRLP4 164
INDIRI4
LSHI4
ADDRGP4 cgs+152852+348
ADDP4
INDIRI4
ASGNI4
line 776
;776:		trap_R_AddRefEntityToScene( re );
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 777
;777:	}
LABELV $497
line 773
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $499
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRI4
LTI4 $496
line 778
;778:}
LABELV $437
endproc CG_AddScorePlum 168 12
export CG_AddLocalEntities
proc CG_AddLocalEntities 16 8
line 791
;779:
;780:
;781:
;782:
;783://==============================================================================
;784:
;785:/*
;786:===================
;787:CG_AddLocalEntities
;788:
;789:===================
;790:*/
;791:void CG_AddLocalEntities( void ) {
line 796
;792:	localEntity_t	*le, *next;
;793:
;794:	// walk the list backwards, so any new local entities generated
;795:	// (trails, marks, etc) will be present this frame
;796:	le = cg_activeLocalEntities.prev;
ADDRLP4 0
ADDRGP4 cg_activeLocalEntities
INDIRP4
ASGNP4
line 797
;797:	for ( ; le != &cg_activeLocalEntities ; le = next ) {
ADDRGP4 $510
JUMPV
LABELV $507
line 800
;798:		// grab next now, so if the local entity is freed we
;799:		// still have it
;800:		next = le->prev;
ADDRLP4 4
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 802
;801:
;802:		if ( cg.time >= le->endTime ) {
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
LTI4 $511
line 803
;803:			CG_FreeLocalEntity( le );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_FreeLocalEntity
CALLV
pop
line 804
;804:			continue;
ADDRGP4 $508
JUMPV
LABELV $511
line 806
;805:		}
;806:		switch ( le->leType ) {
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
LTI4 $514
ADDRLP4 8
INDIRI4
CNSTI4 12
GTI4 $514
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $531
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $531
address $515
address $520
address $519
address $521
address $522
address $524
address $523
address $525
address $526
address $527
address $528
address $529
address $530
code
LABELV $514
line 808
;807:		default:
;808:			CG_Error( "Bad leType: %i", le->leType );
ADDRGP4 $517
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_Error
CALLV
pop
line 809
;809:			break;
ADDRGP4 $515
JUMPV
line 812
;810:
;811:		case LE_MARK:
;812:			break;
LABELV $519
line 815
;813:
;814:		case LE_SPRITE_EXPLOSION:
;815:			CG_AddSpriteExplosion( le );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddSpriteExplosion
CALLV
pop
line 816
;816:			break;
ADDRGP4 $515
JUMPV
LABELV $520
line 819
;817:
;818:		case LE_EXPLOSION:
;819:			CG_AddExplosion( le );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddExplosion
CALLV
pop
line 820
;820:			break;
ADDRGP4 $515
JUMPV
LABELV $521
line 823
;821:
;822:		case LE_FRAGMENT:			// gibs and brass
;823:			CG_AddFragment( le );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddFragment
CALLV
pop
line 824
;824:			break;
ADDRGP4 $515
JUMPV
LABELV $522
line 827
;825:
;826:		case LE_MOVE_SCALE_FADE:		// water bubbles
;827:			CG_AddMoveScaleFade( le );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddMoveScaleFade
CALLV
pop
line 828
;828:			break;
ADDRGP4 $515
JUMPV
LABELV $523
line 831
;829:
;830:		case LE_FADE_RGB:				// teleporters, railtrails
;831:			CG_AddFadeRGB( le );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddFadeRGB
CALLV
pop
line 832
;832:			break;
ADDRGP4 $515
JUMPV
LABELV $524
line 835
;833:
;834:		case LE_FALL_SCALE_FADE: // gib blood trails
;835:			CG_AddFallScaleFade( le );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddFallScaleFade
CALLV
pop
line 836
;836:			break;
ADDRGP4 $515
JUMPV
LABELV $525
line 839
;837:
;838:		case LE_SCALE_FADE:		// rocket trails
;839:			CG_AddScaleFade( le );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddScaleFade
CALLV
pop
line 840
;840:			break;
ADDRGP4 $515
JUMPV
LABELV $526
line 843
;841:
;842:		case LE_SCOREPLUM:
;843:			CG_AddScorePlum( le );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddScorePlum
CALLV
pop
line 844
;844:			break;
ADDRGP4 $515
JUMPV
LABELV $527
line 848
;845:
;846:#ifdef MISSIONPACK
;847:		case LE_KAMIKAZE:
;848:			CG_AddKamikaze( le );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddKamikaze
CALLV
pop
line 849
;849:			break;
ADDRGP4 $515
JUMPV
LABELV $528
line 851
;850:		case LE_INVULIMPACT:
;851:			CG_AddInvulnerabilityImpact( le );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddInvulnerabilityImpact
CALLV
pop
line 852
;852:			break;
ADDRGP4 $515
JUMPV
LABELV $529
line 854
;853:		case LE_INVULJUICED:
;854:			CG_AddInvulnerabilityJuiced( le );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddInvulnerabilityJuiced
CALLV
pop
line 855
;855:			break;
ADDRGP4 $515
JUMPV
LABELV $530
line 857
;856:		case LE_SHOWREFENTITY:
;857:			CG_AddRefEntity( le );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddRefEntity
CALLV
pop
line 858
;858:			break;
LABELV $515
line 861
;859:#endif
;860:		}
;861:	}
LABELV $508
line 797
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
LABELV $510
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRGP4 cg_activeLocalEntities
CVPU4 4
NEU4 $507
line 862
;862:}
LABELV $506
endproc CG_AddLocalEntities 16 8
bss
export cg_freeLocalEntities
align 4
LABELV cg_freeLocalEntities
skip 4
export cg_activeLocalEntities
align 4
LABELV cg_activeLocalEntities
skip 292
export cg_localEntities
align 4
LABELV cg_localEntities
skip 149504
import CG_DrawScanner
import CG_ScannerOff_f
import CG_ScannerOn_f
import CG_NewParticleArea
import initparticles
import CG_ParticleExplosion
import CG_ParticleMisc
import CG_ParticleDust
import CG_ParticleSparks
import CG_ParticleBulletDebris
import CG_ParticleSnowFlurry
import CG_AddParticleShrapnel
import CG_ParticleSmoke
import CG_ParticleSnow
import CG_AddParticles
import CG_ClearParticles
import trap_GetEntityToken
import trap_getCameraInfo
import trap_startCamera
import trap_loadCamera
import trap_SnapVector
import trap_CIN_SetExtents
import trap_CIN_DrawCinematic
import trap_CIN_RunCinematic
import trap_CIN_StopCinematic
import trap_CIN_PlayCinematic
import trap_Key_GetKey
import trap_Key_SetCatcher
import trap_Key_GetCatcher
import trap_Key_IsDown
import trap_R_RegisterFont
import trap_MemoryRemaining
import testPrintFloat
import testPrintInt
import trap_SetUserCmdValue
import trap_GetUserCmd
import trap_GetCurrentCmdNumber
import trap_GetServerCommand
import trap_GetSnapshot
import trap_GetCurrentSnapshotNumber
import trap_GetGameState
import trap_GetGlconfig
import trap_R_RemapShader
import trap_R_LerpTag
import trap_R_ModelBounds
import trap_R_DrawStretchPic
import trap_R_SetColor
import trap_R_RenderScene
import trap_R_LightForPoint
import trap_R_AddLightToScene
import trap_R_AddPolysToScene
import trap_R_AddPolyToScene
import trap_R_AddRefEntityToScene
import trap_R_ClearScene
import trap_R_RegisterShaderNoMip
import trap_R_RegisterShader
import trap_R_RegisterSkin
import trap_R_RegisterModel
import trap_R_LoadWorldMap
import trap_S_StopBackgroundTrack
import trap_S_StartBackgroundTrack
import trap_S_RegisterSound
import trap_S_Respatialize
import trap_S_UpdateEntityPosition
import trap_S_AddRealLoopingSound
import trap_S_AddLoopingSound
import trap_S_ClearLoopingSounds
import trap_S_StartLocalSound
import trap_S_StopLoopingSound
import trap_S_StartSound
import trap_CM_MarkFragments
import trap_CM_TransformedBoxTrace
import trap_CM_BoxTrace
import trap_CM_TransformedPointContents
import trap_CM_PointContents
import trap_CM_TempBoxModel
import trap_CM_InlineModel
import trap_CM_NumInlineModels
import trap_CM_LoadMap
import trap_UpdateScreen
import trap_SendClientCommand
import trap_AddCommand
import trap_SendConsoleCommand
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_Cvar_VariableStringBuffer
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_Milliseconds
import trap_Error
import trap_Print
import CG_CheckChangedPredictableEvents
import CG_TransitionPlayerState
import CG_Respawn
import CG_PlayBufferedVoiceChats
import CG_VoiceChatLocal
import CG_ShaderStateChanged
import CG_LoadVoiceChats
import CG_SetConfigValues
import CG_ParseServerinfo
import CG_ExecuteNewServerCommands
import CG_InitConsoleCommands
import CG_ConsoleCommand
import CG_DrawOldTourneyScoreboard
import CG_DrawOldScoreboard
import CG_DrawInformation
import CG_LoadingClient
import CG_LoadingItem
import CG_LoadingString
import CG_TransitionEntity
import CG_ProcessSnapshots
import CG_MakeExplosion
import CG_Bleed
import CG_BigExplode
import CG_GibPlayerHeadshot
import CG_GibPlayer
import CG_ScorePlum
import CG_LightningBoltBeam
import CG_InvulnerabilityJuiced
import CG_InvulnerabilityImpact
import CG_ObeliskPain
import CG_ObeliskExplode
import CG_KamikazeEffect
import CG_SpawnEffect
import CG_BubbleTrail
import CG_SmokePuff
import CG_ImpactMark
import CG_AddMarks
import CG_InitMarkPolys
import CG_OutOfAmmoChange
import CG_DrawWeaponSelect
import CG_AddPlayerWeapon
import CG_AddViewWeapon
import CG_GrappleTrail
import CG_RailTrail
import CG_Bullet
import CG_ShotgunFire
import CG_MissileHitPlayer
import CG_MissileHitWall
import CG_FireWeapon2
import CG_FireWeapon
import CG_RegisterItemVisuals
import CG_RegisterWeapon
import CG_Weapon_f
import CG_PrevWeapon_f
import CG_NextWeapon_f
import CG_PositionRotatedEntityOnTag
import CG_PositionEntityOnTag
import CG_AdjustPositionForMover
import CG_Beam
import CG_AddPacketEntities
import CG_SetEntitySoundPosition
import CG_PainEvent
import CG_EntityEvent
import CG_PlaceString
import CG_CheckEvents
import CG_LoadDeferredPlayers
import CG_PredictPlayerState
import CG_Trace
import CG_PointContents
import CG_BuildSolidList
import CG_CustomSound
import CG_NewClientInfo
import CG_AddRefEntityWithPowerups
import CG_ResetPlayerEntity
import CG_Player
import CG_StatusHandle
import CG_OtherTeamHasFlag
import CG_YourTeamHasFlag
import CG_GameTypeString
import CG_CheckOrderPending
import CG_Text_PaintChar
import CG_Draw3DModel
import CG_GetKillerText
import CG_GetGameStatusText
import CG_GetTeamColor
import CG_InitTeamChat
import CG_SetPrintString
import CG_ShowResponseHead
import CG_RunMenuScript
import CG_OwnerDrawVisible
import CG_GetValue
import CG_SelectNextPlayer
import CG_SelectPrevPlayer
import CG_Text_Height
import CG_Text_Width
import CG_Text_Paint
import CG_OwnerDraw
import CG_DrawTeamBackground
import CG_DrawFlagModel
import CG_DrawActive
import CG_DrawHead
import CG_CenterPrint
import CG_AddLagometerSnapshotInfo
import CG_AddLagometerFrameInfo
import teamChat2
import teamChat1
import systemChat
import drawTeamOverlayModificationCount
import numSortedTeamPlayers
import sortedTeamPlayers
import CG_DrawTopBottom
import CG_DrawSides
import CG_DrawRect
import UI_DrawProportionalString
import CG_GetColorForHealth
import CG_ColorForHealth
import CG_TileClear
import CG_TeamColor
import CG_FadeColor
import CG_DrawStrlen
import CG_DrawSmallStringColor
import CG_DrawSmallString
import CG_DrawBigStringColor
import CG_DrawBigString
import CG_DrawStringExt
import CG_DrawString
import CG_DrawPic
import CG_FillRect
import CG_AdjustFrom640
import CG_DrawActiveFrame
import CG_AddBufferedSound
import CG_ZoomUp_f
import CG_ZoomDown_f
import CG_TestModelPrevSkin_f
import CG_TestModelNextSkin_f
import CG_TestModelPrevFrame_f
import CG_TestModelNextFrame_f
import CG_TestGun_f
import CG_TestModel_f
import CG_BuildSpectatorString
import CG_GetSelectedScore
import CG_SetScoreSelection
import CG_RankRunFrame
import CG_EventHandling
import CG_MouseEvent
import CG_KeyEvent
import CG_LoadMenus
import CG_LastAttacker
import CG_CrosshairPlayer
import CG_UpdateCvars
import CG_StartMusic
import CG_Error
import CG_Printf
import CG_Argv
import CG_ConfigString
import CG_Cvar_ClampInt
import CG_AddBoundingBox
import CG_PredictWeaponEffects
import cg_playerOrigins
import cg_plOut
import cg_latentCmds
import cg_latentSnaps
import cl_timeNudge
import cg_optimizePrediction
import cg_projectileNudge
import sv_fps
import cg_cmdTimeNudge
import cg_drawBBox
import cg_debugDelag
import cg_delag
import cg_obeliskRespawnDelay
import cg_recordSPDemoName
import cg_recordSPDemo
import cg_singlePlayerActive
import cg_enableBreath
import cg_enableDust
import cg_singlePlayer
import cg_currentSelectedPlayerName
import cg_currentSelectedPlayer
import cg_blueTeamName
import cg_redTeamName
import cg_trueLightning
import cg_oldPlasma
import cg_oldRocket
import cg_oldRail
import cg_noProjectileTrail
import cg_noTaunt
import cg_bigFont
import cg_smallFont
import cg_cameraMode
import cg_timescale
import cg_timescaleFadeSpeed
import cg_timescaleFadeEnd
import cg_cameraOrbitDelay
import cg_cameraOrbit
import pmove_msec
import pmove_fixed
import cg_scorePlum
import cg_noVoiceText
import cg_noVoiceChats
import cg_teamChatsOnly
import cg_drawFriend
import cg_deferPlayers
import cg_predictItems
import cg_blood
import cg_paused
import cg_buildScript
import cg_forceModel
import cg_stats
import cg_teamChatHeight
import cg_teamChatTime
import cg_synchronousClients
import cg_drawAttacker
import cg_lagometer
import cg_stereoSeparation
import cg_thirdPerson
import cg_thirdPersonAngle
import cg_thirdPersonRange
import cg_zoomFov
import cg_fov
import cg_simpleItems
import cg_ignore
import cg_autoswitch
import cg_tracerLength
import cg_tracerWidth
import cg_tracerChance
import cg_viewsize
import cg_drawGun
import cg_gun_z
import cg_gun_y
import cg_gun_x
import cg_gun_frame
import cg_brassTime
import cg_addMarks
import cg_footsteps
import cg_showmiss
import cg_noPlayerAnims
import cg_nopredict
import cg_errorDecay
import cg_railTrailTime
import cg_debugEvents
import cg_debugPosition
import cg_debugAnim
import cg_animSpeed
import cg_draw2D
import cg_drawStatus
import cg_crosshairHealth
import cg_crosshairSize
import cg_crosshairY
import cg_crosshairX
import cg_teamOverlayUserinfo
import cg_drawTeamOverlay
import cg_drawRewards
import cg_drawCrosshairNames
import cg_drawCrosshair
import cg_drawAmmoWarning
import cg_drawIcons
import cg_draw3dIcons
import cg_drawSnapshot
import cg_drawFPS
import cg_drawTimer
import cg_gibs
import cg_shadows
import cg_swingSpeed
import cg_bobroll
import cg_bobpitch
import cg_bobup
import cg_runroll
import cg_runpitch
import cg_centertime
import cg_markPolys
import cg_items
import cg_weapons
import cg_entities
import cg
import cgs
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import Max_Ammo
import BG_CanItemBeGrabbed
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import Com_Printf
import Com_Error
import Info_NextPair
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_RemoveKey_big
import Info_RemoveKey
import Info_ValueForKey
import va
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import SnapVectorTowards
import tonextint
import init_tonextint
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Com_Memcpy
import Com_Memset
import Hunk_Alloc
import FloatSwap
import LongSwap
import ShortSwap
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import sscanf
import vsprintf
import _atoi
import atoi
import _atof
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $517
byte 1 66
byte 1 97
byte 1 100
byte 1 32
byte 1 108
byte 1 101
byte 1 84
byte 1 121
byte 1 112
byte 1 101
byte 1 58
byte 1 32
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $83
byte 1 67
byte 1 71
byte 1 95
byte 1 70
byte 1 114
byte 1 101
byte 1 101
byte 1 76
byte 1 111
byte 1 99
byte 1 97
byte 1 108
byte 1 69
byte 1 110
byte 1 116
byte 1 105
byte 1 116
byte 1 121
byte 1 58
byte 1 32
byte 1 110
byte 1 111
byte 1 116
byte 1 32
byte 1 97
byte 1 99
byte 1 116
byte 1 105
byte 1 118
byte 1 101
byte 1 0
