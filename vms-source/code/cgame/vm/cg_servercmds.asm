lit
align 4
LABELV validOrders
address $73
byte 4 1
address $74
byte 4 1
address $75
byte 4 2
address $76
byte 4 2
address $77
byte 4 3
address $78
byte 4 7
address $79
byte 4 4
address $80
byte 4 5
address $81
byte 4 6
align 4
LABELV numValidOrders
byte 4 9
code
proc CG_ParseScores 212 12
file "../cg_servercmds.c"
line 51
;1:// Copyright (C) 1999-2000 Id Software, Inc.
;2://
;3:// cg_servercmds.c -- reliably sequenced text commands sent by the server
;4:// these are processed at snapshot transition time, so there will definately
;5:// be a valid snapshot this frame
;6:
;7:#include "cg_local.h"
;8:#include "../../ui/menudef.h" // bk001205 - for Q3_ui as well
;9:
;10:
;11:playerpos_t		cg_playerOrigins[MAX_CLIENTS];  // Shafe - Trep - Radar
;12:
;13:
;14:typedef struct {
;15:	const char *order;
;16:	int taskNum;
;17:} orderTask_t;
;18:
;19:static const orderTask_t validOrders[] = {
;20:	{ VOICECHAT_GETFLAG,						TEAMTASK_OFFENSE },
;21:	{ VOICECHAT_OFFENSE,						TEAMTASK_OFFENSE },
;22:	{ VOICECHAT_DEFEND,							TEAMTASK_DEFENSE },
;23:	{ VOICECHAT_DEFENDFLAG,					TEAMTASK_DEFENSE },
;24:	{ VOICECHAT_PATROL,							TEAMTASK_PATROL },
;25:	{ VOICECHAT_CAMP,								TEAMTASK_CAMP },
;26:	{ VOICECHAT_FOLLOWME,						TEAMTASK_FOLLOW },
;27:	{ VOICECHAT_RETURNFLAG,					TEAMTASK_RETRIEVE },
;28:	{ VOICECHAT_FOLLOWFLAGCARRIER,	TEAMTASK_ESCORT }
;29:};
;30:
;31:static const int numValidOrders = sizeof(validOrders) / sizeof(orderTask_t);
;32:
;33:#ifdef MISSIONPACK // bk001204
;34:static int CG_ValidOrder(const char *p) {
;35:	int i;
;36:	for (i = 0; i < numValidOrders; i++) {
;37:		if (Q_stricmp(p, validOrders[i].order) == 0) {
;38:			return validOrders[i].taskNum;
;39:		}
;40:	}
;41:	return -1;
;42:}
;43:#endif
;44:
;45:/*
;46:=================
;47:CG_ParseScores
;48:
;49:=================
;50:*/
;51:static void CG_ParseScores( void ) {
line 54
;52:	int		i, powerups;
;53:
;54:	cg.numScores = atoi( CG_Argv( 1 ) );
CNSTI4 1
ARGI4
ADDRLP4 8
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cg+112532
ADDRLP4 12
INDIRI4
ASGNI4
line 55
;55:	if ( cg.numScores > MAX_CLIENTS ) {
ADDRGP4 cg+112532
INDIRI4
CNSTI4 64
LEI4 $84
line 56
;56:		cg.numScores = MAX_CLIENTS;
ADDRGP4 cg+112532
CNSTI4 64
ASGNI4
line 57
;57:	}
LABELV $84
line 59
;58:
;59:	cg.teamScores[0] = atoi( CG_Argv( 2 ) );
CNSTI4 2
ARGI4
ADDRLP4 16
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 16
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cg+112540
ADDRLP4 20
INDIRI4
ASGNI4
line 60
;60:	cg.teamScores[1] = atoi( CG_Argv( 3 ) );
CNSTI4 3
ARGI4
ADDRLP4 24
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 28
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cg+112540+4
ADDRLP4 28
INDIRI4
ASGNI4
line 62
;61:
;62:	memset( cg.scores, 0, sizeof( cg.scores ) );
ADDRGP4 cg+112548
ARGP4
CNSTI4 0
ARGI4
CNSTI4 3840
ARGI4
ADDRGP4 memset
CALLP4
pop
line 63
;63:	for ( i = 0 ; i < cg.numScores ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $96
JUMPV
LABELV $93
line 65
;64:		//
;65:		cg.scores[i].client = atoi( CG_Argv( i * 14 + 4 ) );
CNSTI4 14
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 4
ADDI4
ARGI4
ADDRLP4 36
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 36
INDIRP4
ARGP4
ADDRLP4 40
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 60
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+112548
ADDP4
ADDRLP4 40
INDIRI4
ASGNI4
line 66
;66:		cg.scores[i].score = atoi( CG_Argv( i * 14 + 5 ) );
CNSTI4 14
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 5
ADDI4
ARGI4
ADDRLP4 48
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 48
INDIRP4
ARGP4
ADDRLP4 52
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 60
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+112548+4
ADDP4
ADDRLP4 52
INDIRI4
ASGNI4
line 67
;67:		cg.scores[i].ping = atoi( CG_Argv( i * 14 + 6 ) );
CNSTI4 14
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 6
ADDI4
ARGI4
ADDRLP4 60
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 60
INDIRP4
ARGP4
ADDRLP4 64
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 60
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+112548+8
ADDP4
ADDRLP4 64
INDIRI4
ASGNI4
line 68
;68:		cg.scores[i].time = atoi( CG_Argv( i * 14 + 7 ) );
CNSTI4 14
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 7
ADDI4
ARGI4
ADDRLP4 72
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 72
INDIRP4
ARGP4
ADDRLP4 76
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 60
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+112548+12
ADDP4
ADDRLP4 76
INDIRI4
ASGNI4
line 69
;69:		cg.scores[i].scoreFlags = atoi( CG_Argv( i * 14 + 8 ) );
CNSTI4 14
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 8
ADDI4
ARGI4
ADDRLP4 84
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 84
INDIRP4
ARGP4
ADDRLP4 88
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 60
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+112548+16
ADDP4
ADDRLP4 88
INDIRI4
ASGNI4
line 70
;70:		powerups = atoi( CG_Argv( i * 14 + 9 ) );
CNSTI4 14
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 9
ADDI4
ARGI4
ADDRLP4 92
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 92
INDIRP4
ARGP4
ADDRLP4 96
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 96
INDIRI4
ASGNI4
line 71
;71:		cg.scores[i].accuracy = atoi(CG_Argv(i * 14 + 10));
CNSTI4 14
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 10
ADDI4
ARGI4
ADDRLP4 104
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 104
INDIRP4
ARGP4
ADDRLP4 108
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 60
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+112548+24
ADDP4
ADDRLP4 108
INDIRI4
ASGNI4
line 72
;72:		cg.scores[i].impressiveCount = atoi(CG_Argv(i * 14 + 11));
CNSTI4 14
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 11
ADDI4
ARGI4
ADDRLP4 116
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 116
INDIRP4
ARGP4
ADDRLP4 120
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 60
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+112548+28
ADDP4
ADDRLP4 120
INDIRI4
ASGNI4
line 73
;73:		cg.scores[i].excellentCount = atoi(CG_Argv(i * 14 + 12));
CNSTI4 14
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 12
ADDI4
ARGI4
ADDRLP4 128
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 128
INDIRP4
ARGP4
ADDRLP4 132
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 60
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+112548+32
ADDP4
ADDRLP4 132
INDIRI4
ASGNI4
line 74
;74:		cg.scores[i].guantletCount = atoi(CG_Argv(i * 14 + 13));
CNSTI4 14
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 13
ADDI4
ARGI4
ADDRLP4 140
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 140
INDIRP4
ARGP4
ADDRLP4 144
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 60
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+112548+36
ADDP4
ADDRLP4 144
INDIRI4
ASGNI4
line 75
;75:		cg.scores[i].defendCount = atoi(CG_Argv(i * 14 + 14));
ADDRLP4 148
CNSTI4 14
ASGNI4
ADDRLP4 148
INDIRI4
ADDRLP4 0
INDIRI4
MULI4
ADDRLP4 148
INDIRI4
ADDI4
ARGI4
ADDRLP4 156
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 156
INDIRP4
ARGP4
ADDRLP4 160
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 60
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+112548+40
ADDP4
ADDRLP4 160
INDIRI4
ASGNI4
line 76
;76:		cg.scores[i].assistCount = atoi(CG_Argv(i * 14 + 15));
CNSTI4 14
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 15
ADDI4
ARGI4
ADDRLP4 168
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 168
INDIRP4
ARGP4
ADDRLP4 172
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 60
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+112548+44
ADDP4
ADDRLP4 172
INDIRI4
ASGNI4
line 77
;77:		cg.scores[i].perfect = atoi(CG_Argv(i * 14 + 16));
CNSTI4 14
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 16
ADDI4
ARGI4
ADDRLP4 180
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 180
INDIRP4
ARGP4
ADDRLP4 184
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 60
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+112548+52
ADDP4
ADDRLP4 184
INDIRI4
ASGNI4
line 78
;78:		cg.scores[i].captures = atoi(CG_Argv(i * 14 + 17));
CNSTI4 14
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 17
ADDI4
ARGI4
ADDRLP4 192
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 192
INDIRP4
ARGP4
ADDRLP4 196
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 60
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+112548+48
ADDP4
ADDRLP4 196
INDIRI4
ASGNI4
line 81
;79:
;80:
;81:		if ( cg.scores[i].client < 0 || cg.scores[i].client >= MAX_CLIENTS ) {
ADDRLP4 200
CNSTI4 60
ADDRLP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 200
INDIRI4
ADDRGP4 cg+112548
ADDP4
INDIRI4
CNSTI4 0
LTI4 $127
ADDRLP4 200
INDIRI4
ADDRGP4 cg+112548
ADDP4
INDIRI4
CNSTI4 64
LTI4 $123
LABELV $127
line 82
;82:			cg.scores[i].client = 0;
CNSTI4 60
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+112548
ADDP4
CNSTI4 0
ASGNI4
line 83
;83:		}
LABELV $123
line 84
;84:		cgs.clientinfo[ cg.scores[i].client ].score = cg.scores[i].score;
ADDRLP4 204
CNSTI4 60
ADDRLP4 0
INDIRI4
MULI4
ASGNI4
CNSTI4 1740
ADDRLP4 204
INDIRI4
ADDRGP4 cg+112548
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+40972+100
ADDP4
ADDRLP4 204
INDIRI4
ADDRGP4 cg+112548+4
ADDP4
INDIRI4
ASGNI4
line 85
;85:		cgs.clientinfo[ cg.scores[i].client ].powerups = powerups;
CNSTI4 1740
CNSTI4 60
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+112548
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+40972+140
ADDP4
ADDRLP4 4
INDIRI4
ASGNI4
line 87
;86:
;87:		cg.scores[i].team = cgs.clientinfo[cg.scores[i].client].team;
ADDRLP4 208
CNSTI4 60
ADDRLP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 208
INDIRI4
ADDRGP4 cg+112548+56
ADDP4
CNSTI4 1740
ADDRLP4 208
INDIRI4
ADDRGP4 cg+112548
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+40972+68
ADDP4
INDIRI4
ASGNI4
line 88
;88:	}
LABELV $94
line 63
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $96
ADDRLP4 0
INDIRI4
ADDRGP4 cg+112532
INDIRI4
LTI4 $93
line 93
;89:#ifdef MISSIONPACK
;90:	CG_SetScoreSelection(NULL);
;91:#endif
;92:
;93:}
LABELV $82
endproc CG_ParseScores 212 12
proc CG_ParseTeamInfo 68 4
line 101
;94:
;95:/*
;96:=================
;97:CG_ParseTeamInfo
;98:
;99:=================
;100:*/
;101:static void CG_ParseTeamInfo( void ) {
line 105
;102:	int		i;
;103:	int		client;
;104:
;105:	numSortedTeamPlayers = atoi( CG_Argv( 1 ) );
CNSTI4 1
ARGI4
ADDRLP4 8
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 numSortedTeamPlayers
ADDRLP4 12
INDIRI4
ASGNI4
line 107
;106:
;107:	for ( i = 0 ; i < numSortedTeamPlayers ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $146
JUMPV
LABELV $143
line 108
;108:		client = atoi( CG_Argv( i * 6 + 2 ) );
CNSTI4 6
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 2
ADDI4
ARGI4
ADDRLP4 16
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 16
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 20
INDIRI4
ASGNI4
line 110
;109:
;110:		sortedTeamPlayers[i] = client;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 sortedTeamPlayers
ADDP4
ADDRLP4 4
INDIRI4
ASGNI4
line 112
;111:
;112:		cgs.clientinfo[ client ].location = atoi( CG_Argv( i * 6 + 3 ) );
CNSTI4 6
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 3
ADDI4
ARGI4
ADDRLP4 24
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 28
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 1740
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 cgs+40972+104
ADDP4
ADDRLP4 28
INDIRI4
ASGNI4
line 113
;113:		cgs.clientinfo[ client ].health = atoi( CG_Argv( i * 6 + 4 ) );
CNSTI4 6
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 4
ADDI4
ARGI4
ADDRLP4 32
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 32
INDIRP4
ARGP4
ADDRLP4 36
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 1740
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 cgs+40972+108
ADDP4
ADDRLP4 36
INDIRI4
ASGNI4
line 114
;114:		cgs.clientinfo[ client ].armor = atoi( CG_Argv( i * 6 + 5 ) );
CNSTI4 6
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 5
ADDI4
ARGI4
ADDRLP4 40
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 40
INDIRP4
ARGP4
ADDRLP4 44
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 1740
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 cgs+40972+112
ADDP4
ADDRLP4 44
INDIRI4
ASGNI4
line 115
;115:		cgs.clientinfo[ client ].curWeapon = atoi( CG_Argv( i * 6 + 6 ) );
ADDRLP4 48
CNSTI4 6
ASGNI4
ADDRLP4 48
INDIRI4
ADDRLP4 0
INDIRI4
MULI4
ADDRLP4 48
INDIRI4
ADDI4
ARGI4
ADDRLP4 52
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 52
INDIRP4
ARGP4
ADDRLP4 56
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 1740
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 cgs+40972+116
ADDP4
ADDRLP4 56
INDIRI4
ASGNI4
line 116
;116:		cgs.clientinfo[ client ].powerups = atoi( CG_Argv( i * 6 + 7 ) );
CNSTI4 6
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 7
ADDI4
ARGI4
ADDRLP4 60
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 60
INDIRP4
ARGP4
ADDRLP4 64
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 1740
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 cgs+40972+140
ADDP4
ADDRLP4 64
INDIRI4
ASGNI4
line 117
;117:	}
LABELV $144
line 107
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $146
ADDRLP4 0
INDIRI4
ADDRGP4 numSortedTeamPlayers
INDIRI4
LTI4 $143
line 118
;118:}
LABELV $142
endproc CG_ParseTeamInfo 68 4
export CG_ParseServerinfo
proc CG_ParseServerinfo 128 16
line 129
;119:
;120:
;121:/*
;122:================
;123:CG_ParseServerinfo
;124:
;125:This is called explicitly when the gamestate is first received,
;126:and whenever the server updates any serverinfo flagged cvars
;127:================
;128:*/
;129:void CG_ParseServerinfo( void ) {
line 133
;130:	const char	*info;
;131:	char	*mapname;
;132:
;133:	info = CG_ConfigString( CS_SERVERINFO );
CNSTI4 0
ARGI4
ADDRLP4 8
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 134
;134:	cgs.gametype = atoi( Info_ValueForKey( info, "g_gametype" ) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $159
ARGP4
ADDRLP4 12
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 16
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+31456
ADDRLP4 16
INDIRI4
ASGNI4
line 135
;135:	trap_Cvar_Set("g_gametype", va("%i", cgs.gametype));
ADDRGP4 $160
ARGP4
ADDRGP4 cgs+31456
INDIRI4
ARGI4
ADDRLP4 20
ADDRGP4 va
CALLP4
ASGNP4
ADDRGP4 $159
ARGP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 136
;136:	cgs.dmflags = atoi( Info_ValueForKey( info, "dmflags" ) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $163
ARGP4
ADDRLP4 24
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 28
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+31460
ADDRLP4 28
INDIRI4
ASGNI4
line 137
;137:	cgs.teamflags = atoi( Info_ValueForKey( info, "teamflags" ) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $165
ARGP4
ADDRLP4 32
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 32
INDIRP4
ARGP4
ADDRLP4 36
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+31464
ADDRLP4 36
INDIRI4
ASGNI4
line 138
;138:	cgs.fraglimit = atoi( Info_ValueForKey( info, "fraglimit" ) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $167
ARGP4
ADDRLP4 40
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 40
INDIRP4
ARGP4
ADDRLP4 44
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+31468
ADDRLP4 44
INDIRI4
ASGNI4
line 139
;139:	cgs.capturelimit = atoi( Info_ValueForKey( info, "capturelimit" ) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $169
ARGP4
ADDRLP4 48
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 48
INDIRP4
ARGP4
ADDRLP4 52
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+31472
ADDRLP4 52
INDIRI4
ASGNI4
line 140
;140:	cgs.timelimit = atoi( Info_ValueForKey( info, "timelimit" ) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $171
ARGP4
ADDRLP4 56
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 56
INDIRP4
ARGP4
ADDRLP4 60
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+31476
ADDRLP4 60
INDIRI4
ASGNI4
line 141
;141:	cgs.maxclients = atoi( Info_ValueForKey( info, "sv_maxclients" ) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $173
ARGP4
ADDRLP4 64
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 64
INDIRP4
ARGP4
ADDRLP4 68
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+31480
ADDRLP4 68
INDIRI4
ASGNI4
line 142
;142:	mapname = Info_ValueForKey( info, "mapname" );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $174
ARGP4
ADDRLP4 72
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 72
INDIRP4
ASGNP4
line 143
;143:	Com_sprintf( cgs.mapname, sizeof( cgs.mapname ), "maps/%s.bsp", mapname );
ADDRGP4 cgs+31484
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $177
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 144
;144:	Q_strncpyz( cgs.redTeam, Info_ValueForKey( info, "g_redTeam" ), sizeof(cgs.redTeam) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $179
ARGP4
ADDRLP4 76
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRGP4 cgs+31548
ARGP4
ADDRLP4 76
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 145
;145:	trap_Cvar_Set("g_redTeam", cgs.redTeam);
ADDRGP4 $179
ARGP4
ADDRGP4 cgs+31548
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 146
;146:	Q_strncpyz( cgs.blueTeam, Info_ValueForKey( info, "g_blueTeam" ), sizeof(cgs.blueTeam) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $183
ARGP4
ADDRLP4 80
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRGP4 cgs+31612
ARGP4
ADDRLP4 80
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 147
;147:	trap_Cvar_Set("g_blueTeam", cgs.blueTeam);
ADDRGP4 $183
ARGP4
ADDRGP4 cgs+31612
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 149
;148:	// Shafe - Trep
;149:	cgs.g_instagib = atoi( Info_ValueForKey( info, "g_instagib" ) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $187
ARGP4
ADDRLP4 84
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 84
INDIRP4
ARGP4
ADDRLP4 88
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+155532
ADDRLP4 88
INDIRI4
ASGNI4
line 150
;150:	cgs.g_GameMode = atoi( Info_ValueForKey( info, "g_GameMode" ) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $189
ARGP4
ADDRLP4 92
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 92
INDIRP4
ARGP4
ADDRLP4 96
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+155536
ADDRLP4 96
INDIRI4
ASGNI4
line 151
;151:	cgs.g_BlueMC = atoi( Info_ValueForKey( info, "g_BlueMC" ) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $191
ARGP4
ADDRLP4 100
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 100
INDIRP4
ARGP4
ADDRLP4 104
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+155544
ADDRLP4 104
INDIRI4
ASGNI4
line 152
;152:	cgs.g_RedMC = atoi( Info_ValueForKey( info, "g_RedMC" ) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $193
ARGP4
ADDRLP4 108
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 108
INDIRP4
ARGP4
ADDRLP4 112
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+155540
ADDRLP4 112
INDIRI4
ASGNI4
line 156
;153:
;154://unlagged - server options
;155:	// we'll need this for deciding whether or not to predict weapon effects
;156:	cgs.delagHitscan = atoi( Info_ValueForKey( info, "g_delagHitscan" ) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $195
ARGP4
ADDRLP4 116
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 116
INDIRP4
ARGP4
ADDRLP4 120
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+155528
ADDRLP4 120
INDIRI4
ASGNI4
line 157
;157:	trap_Cvar_Set("g_delagHitscan", va("%i", cgs.delagHitscan));
ADDRGP4 $160
ARGP4
ADDRGP4 cgs+155528
INDIRI4
ARGI4
ADDRLP4 124
ADDRGP4 va
CALLP4
ASGNP4
ADDRGP4 $195
ARGP4
ADDRLP4 124
INDIRP4
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 159
;158://unlagged - server options
;159:}
LABELV $157
endproc CG_ParseServerinfo 128 16
proc CG_ParseWarmup 24 8
line 166
;160:
;161:/*
;162:==================
;163:CG_ParseWarmup
;164:==================
;165:*/
;166:static void CG_ParseWarmup( void ) {
line 170
;167:	const char	*info;
;168:	int			warmup;
;169:
;170:	info = CG_ConfigString( CS_WARMUP );
CNSTI4 5
ARGI4
ADDRLP4 8
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 8
INDIRP4
ASGNP4
line 172
;171:
;172:	warmup = atoi( info );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 12
INDIRI4
ASGNI4
line 173
;173:	cg.warmupCount = -1;
ADDRGP4 cg+126728
CNSTI4 -1
ASGNI4
line 175
;174:
;175:	if ( warmup == 0 && cg.warmup ) {
ADDRLP4 16
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 16
INDIRI4
NEI4 $199
ADDRGP4 cg+126724
INDIRI4
ADDRLP4 16
INDIRI4
EQI4 $199
line 177
;176:
;177:	} else if ( warmup > 0 && cg.warmup <= 0 ) {
ADDRGP4 $200
JUMPV
LABELV $199
ADDRLP4 20
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 20
INDIRI4
LEI4 $202
ADDRGP4 cg+126724
INDIRI4
ADDRLP4 20
INDIRI4
GTI4 $202
line 183
;178:#ifdef MISSIONPACK
;179:		if (cgs.gametype >= GT_CTF && cgs.gametype <= GT_HARVESTER) {
;180:			trap_S_StartLocalSound( cgs.media.countPrepareTeamSound, CHAN_ANNOUNCER );
;181:		} else
;182:#endif
;183:		{
line 184
;184:			trap_S_StartLocalSound( cgs.media.countPrepareSound, CHAN_ANNOUNCER );
ADDRGP4 cgs+154388+1056
INDIRI4
ARGI4
CNSTI4 7
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 185
;185:		}
line 186
;186:	}
LABELV $202
LABELV $200
line 188
;187:
;188:	cg.warmup = warmup;
ADDRGP4 cg+126724
ADDRLP4 0
INDIRI4
ASGNI4
line 189
;189:}
LABELV $197
endproc CG_ParseWarmup 24 8
export CG_SetConfigValues
proc CG_SetConfigValues 36 4
line 198
;190:
;191:/*
;192:================
;193:CG_SetConfigValues
;194:
;195:Called on load to set the initial values from configure strings
;196:================
;197:*/
;198:void CG_SetConfigValues( void ) {
line 201
;199:	const char *s;
;200:
;201:	cgs.scores1 = atoi( CG_ConfigString( CS_SCORES1 ) );
CNSTI4 6
ARGI4
ADDRLP4 4
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 8
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+34800
ADDRLP4 8
INDIRI4
ASGNI4
line 202
;202:	cgs.scores2 = atoi( CG_ConfigString( CS_SCORES2 ) );
CNSTI4 7
ARGI4
ADDRLP4 12
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 16
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+34804
ADDRLP4 16
INDIRI4
ASGNI4
line 203
;203:	cgs.levelStartTime = atoi( CG_ConfigString( CS_LEVEL_START_TIME ) );
CNSTI4 21
ARGI4
ADDRLP4 20
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRLP4 24
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+34796
ADDRLP4 24
INDIRI4
ASGNI4
line 204
;204:	if( cgs.gametype == GT_CTF ) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 4
NEI4 $212
line 205
;205:		s = CG_ConfigString( CS_FLAGSTATUS );
CNSTI4 23
ARGI4
ADDRLP4 28
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 28
INDIRP4
ASGNP4
line 206
;206:		cgs.redflag = s[0] - '0';
ADDRGP4 cgs+34808
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
ASGNI4
line 207
;207:		cgs.blueflag = s[1] - '0';
ADDRGP4 cgs+34812
ADDRLP4 0
INDIRP4
CNSTI4 1
ADDP4
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
ASGNI4
line 208
;208:	}
LABELV $212
line 215
;209:#ifdef MISSIONPACK
;210:	else if( cgs.gametype == GT_1FCTF ) {
;211:		s = CG_ConfigString( CS_FLAGSTATUS );
;212:		cgs.flagStatus = s[0] - '0';
;213:	}
;214:#endif
;215:	cg.warmup = atoi( CG_ConfigString( CS_WARMUP ) );
CNSTI4 5
ARGI4
ADDRLP4 28
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 28
INDIRP4
ARGP4
ADDRLP4 32
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cg+126724
ADDRLP4 32
INDIRI4
ASGNI4
line 216
;216:}
LABELV $208
endproc CG_SetConfigValues 36 4
export CG_ShaderStateChanged
proc CG_ShaderStateChanged 188 12
line 223
;217:
;218:/*
;219:=====================
;220:CG_ShaderStateChanged
;221:=====================
;222:*/
;223:void CG_ShaderStateChanged(void) {
line 230
;224:	char originalShader[MAX_QPATH];
;225:	char newShader[MAX_QPATH];
;226:	char timeOffset[16];
;227:	const char *o;
;228:	char *n,*t;
;229:
;230:	o = CG_ConfigString( CS_SHADERSTATE );
CNSTI4 24
ARGI4
ADDRLP4 156
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 156
INDIRP4
ASGNP4
ADDRGP4 $220
JUMPV
LABELV $219
line 231
;231:	while (o && *o) {
line 232
;232:		n = strstr(o, "=");
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $222
ARGP4
ADDRLP4 160
ADDRGP4 strstr
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 160
INDIRP4
ASGNP4
line 233
;233:		if (n && *n) {
ADDRLP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $221
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $221
line 234
;234:			strncpy(originalShader, o, n-o);
ADDRLP4 12
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
CVPU4 4
ADDRLP4 0
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ARGI4
ADDRGP4 strncpy
CALLP4
pop
line 235
;235:			originalShader[n-o] = 0;
ADDRLP4 4
INDIRP4
CVPU4 4
ADDRLP4 0
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ADDRLP4 12
ADDP4
CNSTI1 0
ASGNI1
line 236
;236:			n++;
ADDRLP4 4
ADDRLP4 4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 237
;237:			t = strstr(n, ":");
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 $225
ARGP4
ADDRLP4 172
ADDRGP4 strstr
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 172
INDIRP4
ASGNP4
line 238
;238:			if (t && *t) {
ADDRLP4 8
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $221
ADDRLP4 8
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $221
line 239
;239:				strncpy(newShader, n, t-n);
ADDRLP4 76
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
CVPU4 4
ADDRLP4 4
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ARGI4
ADDRGP4 strncpy
CALLP4
pop
line 240
;240:				newShader[t-n] = 0;
ADDRLP4 8
INDIRP4
CVPU4 4
ADDRLP4 4
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ADDRLP4 76
ADDP4
CNSTI1 0
ASGNI1
line 241
;241:			} else {
line 242
;242:				break;
LABELV $227
line 244
;243:			}
;244:			t++;
ADDRLP4 8
ADDRLP4 8
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 245
;245:			o = strstr(t, "@");
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 $228
ARGP4
ADDRLP4 180
ADDRGP4 strstr
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 180
INDIRP4
ASGNP4
line 246
;246:			if (o) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $224
line 247
;247:				strncpy(timeOffset, t, o-t);
ADDRLP4 140
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ARGI4
ADDRGP4 strncpy
CALLP4
pop
line 248
;248:				timeOffset[o-t] = 0;
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ADDRLP4 140
ADDP4
CNSTI1 0
ASGNI1
line 249
;249:				o++;
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 250
;250:				trap_R_RemapShader( originalShader, newShader, timeOffset );
ADDRLP4 12
ARGP4
ADDRLP4 76
ARGP4
ADDRLP4 140
ARGP4
ADDRGP4 trap_R_RemapShader
CALLV
pop
line 251
;251:			}
line 252
;252:		} else {
line 253
;253:			break;
LABELV $224
line 255
;254:		}
;255:	}
LABELV $220
line 231
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $231
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $219
LABELV $231
LABELV $221
line 256
;256:}
LABELV $218
endproc CG_ShaderStateChanged 188 12
proc CG_ConfigStringModified 48 12
line 264
;257:
;258:/*
;259:================
;260:CG_ConfigStringModified
;261:
;262:================
;263:*/
;264:static void CG_ConfigStringModified( void ) {
line 268
;265:	const char	*str;
;266:	int		num;
;267:
;268:	num = atoi( CG_Argv( 1 ) );
CNSTI4 1
ARGI4
ADDRLP4 8
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 12
INDIRI4
ASGNI4
line 272
;269:
;270:	// get the gamestate from the client system, which will have the
;271:	// new configstring already integrated
;272:	trap_GetGameState( &cgs.gameState );
ADDRGP4 cgs
ARGP4
ADDRGP4 trap_GetGameState
CALLV
pop
line 275
;273:
;274:	// look up the individual string that was modified
;275:	str = CG_ConfigString( num );
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 16
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 16
INDIRP4
ASGNP4
line 278
;276:
;277:	// do something with it if necessary
;278:	if ( num == CS_MUSIC ) {
ADDRLP4 0
INDIRI4
CNSTI4 2
NEI4 $233
line 279
;279:		CG_StartMusic();
ADDRGP4 CG_StartMusic
CALLV
pop
line 280
;280:	} else if ( num == CS_SERVERINFO ) {
ADDRGP4 $234
JUMPV
LABELV $233
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $235
line 281
;281:		CG_ParseServerinfo();
ADDRGP4 CG_ParseServerinfo
CALLV
pop
line 282
;282:	} else if ( num == CS_WARMUP ) {
ADDRGP4 $236
JUMPV
LABELV $235
ADDRLP4 0
INDIRI4
CNSTI4 5
NEI4 $237
line 283
;283:		CG_ParseWarmup();
ADDRGP4 CG_ParseWarmup
CALLV
pop
line 284
;284:	} else if ( num == CS_SCORES1 ) {
ADDRGP4 $238
JUMPV
LABELV $237
ADDRLP4 0
INDIRI4
CNSTI4 6
NEI4 $239
line 285
;285:		cgs.scores1 = atoi( str );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+34800
ADDRLP4 20
INDIRI4
ASGNI4
line 286
;286:	} else if ( num == CS_SCORES2 ) {
ADDRGP4 $240
JUMPV
LABELV $239
ADDRLP4 0
INDIRI4
CNSTI4 7
NEI4 $242
line 287
;287:		cgs.scores2 = atoi( str );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+34804
ADDRLP4 20
INDIRI4
ASGNI4
line 288
;288:	} else if ( num == CS_LEVEL_START_TIME ) {
ADDRGP4 $243
JUMPV
LABELV $242
ADDRLP4 0
INDIRI4
CNSTI4 21
NEI4 $245
line 289
;289:		cgs.levelStartTime = atoi( str );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+34796
ADDRLP4 20
INDIRI4
ASGNI4
line 290
;290:	} else if ( num == CS_VOTE_TIME ) {
ADDRGP4 $246
JUMPV
LABELV $245
ADDRLP4 0
INDIRI4
CNSTI4 8
NEI4 $248
line 291
;291:		cgs.voteTime = atoi( str );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+31676
ADDRLP4 20
INDIRI4
ASGNI4
line 292
;292:		cgs.voteModified = qtrue;
ADDRGP4 cgs+31688
CNSTI4 1
ASGNI4
line 293
;293:	} else if ( num == CS_VOTE_YES ) {
ADDRGP4 $249
JUMPV
LABELV $248
ADDRLP4 0
INDIRI4
CNSTI4 10
NEI4 $252
line 294
;294:		cgs.voteYes = atoi( str );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+31680
ADDRLP4 20
INDIRI4
ASGNI4
line 295
;295:		cgs.voteModified = qtrue;
ADDRGP4 cgs+31688
CNSTI4 1
ASGNI4
line 296
;296:	} else if ( num == CS_VOTE_NO ) {
ADDRGP4 $253
JUMPV
LABELV $252
ADDRLP4 0
INDIRI4
CNSTI4 11
NEI4 $256
line 297
;297:		cgs.voteNo = atoi( str );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+31684
ADDRLP4 20
INDIRI4
ASGNI4
line 298
;298:		cgs.voteModified = qtrue;
ADDRGP4 cgs+31688
CNSTI4 1
ASGNI4
line 299
;299:	} else if ( num == CS_VOTE_STRING ) {
ADDRGP4 $257
JUMPV
LABELV $256
ADDRLP4 0
INDIRI4
CNSTI4 9
NEI4 $260
line 300
;300:		Q_strncpyz( cgs.voteString, str, sizeof( cgs.voteString ) );
ADDRGP4 cgs+31692
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 304
;301:#ifdef MISSIONPACK
;302:		trap_S_StartLocalSound( cgs.media.voteNow, CHAN_ANNOUNCER );
;303:#endif //MISSIONPACK
;304:	} else if ( num >= CS_TEAMVOTE_TIME && num <= CS_TEAMVOTE_TIME + 1) {
ADDRGP4 $261
JUMPV
LABELV $260
ADDRLP4 0
INDIRI4
CNSTI4 12
LTI4 $264
ADDRLP4 0
INDIRI4
CNSTI4 13
GTI4 $264
line 305
;305:		cgs.teamVoteTime[num-CS_TEAMVOTE_TIME] = atoi( str );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 24
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+32716-48
ADDP4
ADDRLP4 24
INDIRI4
ASGNI4
line 306
;306:		cgs.teamVoteModified[num-CS_TEAMVOTE_TIME] = qtrue;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+32740-48
ADDP4
CNSTI4 1
ASGNI4
line 307
;307:	} else if ( num >= CS_TEAMVOTE_YES && num <= CS_TEAMVOTE_YES + 1) {
ADDRGP4 $265
JUMPV
LABELV $264
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $270
ADDRLP4 0
INDIRI4
CNSTI4 17
GTI4 $270
line 308
;308:		cgs.teamVoteYes[num-CS_TEAMVOTE_YES] = atoi( str );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 28
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+32724-64
ADDP4
ADDRLP4 28
INDIRI4
ASGNI4
line 309
;309:		cgs.teamVoteModified[num-CS_TEAMVOTE_YES] = qtrue;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+32740-64
ADDP4
CNSTI4 1
ASGNI4
line 310
;310:	} else if ( num >= CS_TEAMVOTE_NO && num <= CS_TEAMVOTE_NO + 1) {
ADDRGP4 $271
JUMPV
LABELV $270
ADDRLP4 0
INDIRI4
CNSTI4 18
LTI4 $276
ADDRLP4 0
INDIRI4
CNSTI4 19
GTI4 $276
line 311
;311:		cgs.teamVoteNo[num-CS_TEAMVOTE_NO] = atoi( str );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 32
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+32732-72
ADDP4
ADDRLP4 32
INDIRI4
ASGNI4
line 312
;312:		cgs.teamVoteModified[num-CS_TEAMVOTE_NO] = qtrue;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+32740-72
ADDP4
CNSTI4 1
ASGNI4
line 313
;313:	} else if ( num >= CS_TEAMVOTE_STRING && num <= CS_TEAMVOTE_STRING + 1) {
ADDRGP4 $277
JUMPV
LABELV $276
ADDRLP4 0
INDIRI4
CNSTI4 14
LTI4 $282
ADDRLP4 0
INDIRI4
CNSTI4 15
GTI4 $282
line 314
;314:		Q_strncpyz( cgs.teamVoteString[num-CS_TEAMVOTE_STRING], str, sizeof( cgs.teamVoteString ) );
ADDRLP4 0
INDIRI4
CNSTI4 10
LSHI4
ADDRGP4 cgs+32748-14336
ADDP4
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
CNSTI4 2048
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 318
;315:#ifdef MISSIONPACK
;316:		trap_S_StartLocalSound( cgs.media.voteNow, CHAN_ANNOUNCER );
;317:#endif
;318:	} else if ( num == CS_INTERMISSION ) {
ADDRGP4 $283
JUMPV
LABELV $282
ADDRLP4 0
INDIRI4
CNSTI4 22
NEI4 $287
line 319
;319:		cg.intermissionStarted = atoi( str );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 36
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cg+24
ADDRLP4 36
INDIRI4
ASGNI4
line 320
;320:	} else if ( num >= CS_MODELS && num < CS_MODELS+MAX_MODELS ) {
ADDRGP4 $288
JUMPV
LABELV $287
ADDRLP4 0
INDIRI4
CNSTI4 32
LTI4 $290
ADDRLP4 0
INDIRI4
CNSTI4 288
GEI4 $290
line 321
;321:		cgs.gameModels[ num-CS_MODELS ] = trap_R_RegisterModel( str );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 40
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+34824-128
ADDP4
ADDRLP4 40
INDIRI4
ASGNI4
line 322
;322:	} else if ( num >= CS_SOUNDS && num < CS_SOUNDS+MAX_MODELS ) {
ADDRGP4 $291
JUMPV
LABELV $290
ADDRLP4 0
INDIRI4
CNSTI4 288
LTI4 $294
ADDRLP4 0
INDIRI4
CNSTI4 544
GEI4 $294
line 323
;323:		if ( str[0] != '*' ) {	// player specific sounds don't register here
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 42
EQI4 $295
line 324
;324:			cgs.gameSounds[ num-CS_SOUNDS] = trap_S_RegisterSound( str, qfalse );
ADDRLP4 4
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 44
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+35848-1152
ADDP4
ADDRLP4 44
INDIRI4
ASGNI4
line 325
;325:		}
line 326
;326:	} else if ( num >= CS_PLAYERS && num < CS_PLAYERS+MAX_CLIENTS ) {
ADDRGP4 $295
JUMPV
LABELV $294
ADDRLP4 0
INDIRI4
CNSTI4 544
LTI4 $300
ADDRLP4 0
INDIRI4
CNSTI4 608
GEI4 $300
line 327
;327:		CG_NewClientInfo( num - CS_PLAYERS );
ADDRLP4 0
INDIRI4
CNSTI4 544
SUBI4
ARGI4
ADDRGP4 CG_NewClientInfo
CALLV
pop
line 328
;328:		CG_BuildSpectatorString();
ADDRGP4 CG_BuildSpectatorString
CALLV
pop
line 329
;329:	} else if ( num == CS_FLAGSTATUS ) {
ADDRGP4 $301
JUMPV
LABELV $300
ADDRLP4 0
INDIRI4
CNSTI4 23
NEI4 $302
line 330
;330:		if( cgs.gametype == GT_CTF ) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 4
NEI4 $303
line 332
;331:			// format is rb where its red/blue, 0 is at base, 1 is taken, 2 is dropped
;332:			cgs.redflag = str[0] - '0';
ADDRGP4 cgs+34808
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
ASGNI4
line 333
;333:			cgs.blueflag = str[1] - '0';
ADDRGP4 cgs+34812
ADDRLP4 4
INDIRP4
CNSTI4 1
ADDP4
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
ASGNI4
line 334
;334:		}
line 340
;335:#ifdef MISSIONPACK
;336:		else if( cgs.gametype == GT_1FCTF ) {
;337:			cgs.flagStatus = str[0] - '0';
;338:		}
;339:#endif
;340:	}
ADDRGP4 $303
JUMPV
LABELV $302
line 341
;341:	else if ( num == CS_SHADERSTATE ) {
ADDRLP4 0
INDIRI4
CNSTI4 24
NEI4 $309
line 342
;342:		CG_ShaderStateChanged();
ADDRGP4 CG_ShaderStateChanged
CALLV
pop
line 343
;343:	}
LABELV $309
LABELV $303
LABELV $301
LABELV $295
LABELV $291
LABELV $288
LABELV $283
LABELV $277
LABELV $271
LABELV $265
LABELV $261
LABELV $257
LABELV $253
LABELV $249
LABELV $246
LABELV $243
LABELV $240
LABELV $238
LABELV $236
LABELV $234
line 345
;344:		
;345:}
LABELV $232
endproc CG_ConfigStringModified 48 12
proc CG_AddToTeamChat 60 0
line 354
;346:
;347:
;348:/*
;349:=======================
;350:CG_AddToTeamChat
;351:
;352:=======================
;353:*/
;354:static void CG_AddToTeamChat( const char *str ) {
line 360
;355:	int len;
;356:	char *p, *ls;
;357:	int lastcolor;
;358:	int chatHeight;
;359:
;360:	if (cg_teamChatHeight.integer < TEAMCHAT_HEIGHT) {
ADDRGP4 cg_teamChatHeight+12
INDIRI4
CNSTI4 8
GEI4 $312
line 361
;361:		chatHeight = cg_teamChatHeight.integer;
ADDRLP4 12
ADDRGP4 cg_teamChatHeight+12
INDIRI4
ASGNI4
line 362
;362:	} else {
ADDRGP4 $313
JUMPV
LABELV $312
line 363
;363:		chatHeight = TEAMCHAT_HEIGHT;
ADDRLP4 12
CNSTI4 8
ASGNI4
line 364
;364:	}
LABELV $313
line 366
;365:
;366:	if (chatHeight <= 0 || cg_teamChatTime.integer <= 0) {
ADDRLP4 20
CNSTI4 0
ASGNI4
ADDRLP4 12
INDIRI4
ADDRLP4 20
INDIRI4
LEI4 $319
ADDRGP4 cg_teamChatTime+12
INDIRI4
ADDRLP4 20
INDIRI4
GTI4 $316
LABELV $319
line 368
;367:		// team chat disabled, dump into normal chat
;368:		cgs.teamChatPos = cgs.teamLastChatPos = 0;
ADDRLP4 24
CNSTI4 0
ASGNI4
ADDRGP4 cgs+154296
ADDRLP4 24
INDIRI4
ASGNI4
ADDRGP4 cgs+154292
ADDRLP4 24
INDIRI4
ASGNI4
line 369
;369:		return;
ADDRGP4 $311
JUMPV
LABELV $316
line 372
;370:	}
;371:
;372:	len = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 374
;373:
;374:	p = cgs.teamChatMsgs[cgs.teamChatPos % chatHeight];
ADDRLP4 0
CNSTI4 241
ADDRGP4 cgs+154292
INDIRI4
ADDRLP4 12
INDIRI4
MODI4
MULI4
ADDRGP4 cgs+152332
ADDP4
ASGNP4
line 375
;375:	*p = 0;
ADDRLP4 0
INDIRP4
CNSTI1 0
ASGNI1
line 377
;376:
;377:	lastcolor = '7';
ADDRLP4 16
CNSTI4 55
ASGNI4
line 379
;378:
;379:	ls = NULL;
ADDRLP4 8
CNSTP4 0
ASGNP4
ADDRGP4 $325
JUMPV
LABELV $324
line 380
;380:	while (*str) {
line 381
;381:		if (len > TEAMCHAT_WIDTH - 1) {
ADDRLP4 4
INDIRI4
CNSTI4 79
LEI4 $327
line 382
;382:			if (ls) {
ADDRLP4 8
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $329
line 383
;383:				str -= (p - ls);
ADDRFP4 0
ADDRFP4 0
INDIRP4
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
SUBP4
ASGNP4
line 384
;384:				str++;
ADDRFP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 385
;385:				p -= (p - ls);
ADDRLP4 0
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
SUBP4
ASGNP4
line 386
;386:			}
LABELV $329
line 387
;387:			*p = 0;
ADDRLP4 0
INDIRP4
CNSTI1 0
ASGNI1
line 389
;388:
;389:			cgs.teamChatMsgTimes[cgs.teamChatPos % chatHeight] = cg.time;
ADDRGP4 cgs+154292
INDIRI4
ADDRLP4 12
INDIRI4
MODI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+154260
ADDP4
ADDRGP4 cg+109652
INDIRI4
ASGNI4
line 391
;390:
;391:			cgs.teamChatPos++;
ADDRLP4 24
ADDRGP4 cgs+154292
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 392
;392:			p = cgs.teamChatMsgs[cgs.teamChatPos % chatHeight];
ADDRLP4 0
CNSTI4 241
ADDRGP4 cgs+154292
INDIRI4
ADDRLP4 12
INDIRI4
MODI4
MULI4
ADDRGP4 cgs+152332
ADDP4
ASGNP4
line 393
;393:			*p = 0;
ADDRLP4 0
INDIRP4
CNSTI1 0
ASGNI1
line 394
;394:			*p++ = Q_COLOR_ESCAPE;
ADDRLP4 28
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 28
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI1 94
ASGNI1
line 395
;395:			*p++ = lastcolor;
ADDRLP4 32
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 32
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 16
INDIRI4
CVII1 4
ASGNI1
line 396
;396:			len = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 397
;397:			ls = NULL;
ADDRLP4 8
CNSTP4 0
ASGNP4
line 398
;398:		}
LABELV $327
line 400
;399:
;400:		if ( Q_IsColorString( str ) ) {
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $337
ADDRLP4 28
CNSTI4 94
ASGNI4
ADDRLP4 24
INDIRP4
INDIRI1
CVII4 1
ADDRLP4 28
INDIRI4
NEI4 $337
ADDRLP4 32
ADDRLP4 24
INDIRP4
CNSTI4 1
ADDP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 32
INDIRI4
CNSTI4 0
EQI4 $337
ADDRLP4 32
INDIRI4
ADDRLP4 28
INDIRI4
EQI4 $337
line 401
;401:			*p++ = *str++;
ADDRLP4 36
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 44
CNSTI4 1
ASGNI4
ADDRLP4 0
ADDRLP4 36
INDIRP4
ADDRLP4 44
INDIRI4
ADDP4
ASGNP4
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRFP4 0
ADDRLP4 40
INDIRP4
ADDRLP4 44
INDIRI4
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 40
INDIRP4
INDIRI1
ASGNI1
line 402
;402:			lastcolor = *str;
ADDRLP4 16
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
ASGNI4
line 403
;403:			*p++ = *str++;
ADDRLP4 48
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 56
CNSTI4 1
ASGNI4
ADDRLP4 0
ADDRLP4 48
INDIRP4
ADDRLP4 56
INDIRI4
ADDP4
ASGNP4
ADDRLP4 52
ADDRFP4 0
INDIRP4
ASGNP4
ADDRFP4 0
ADDRLP4 52
INDIRP4
ADDRLP4 56
INDIRI4
ADDP4
ASGNP4
ADDRLP4 48
INDIRP4
ADDRLP4 52
INDIRP4
INDIRI1
ASGNI1
line 404
;404:			continue;
ADDRGP4 $325
JUMPV
LABELV $337
line 406
;405:		}
;406:		if (*str == ' ') {
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 32
NEI4 $339
line 407
;407:			ls = p;
ADDRLP4 8
ADDRLP4 0
INDIRP4
ASGNP4
line 408
;408:		}
LABELV $339
line 409
;409:		*p++ = *str++;
ADDRLP4 36
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 44
CNSTI4 1
ASGNI4
ADDRLP4 0
ADDRLP4 36
INDIRP4
ADDRLP4 44
INDIRI4
ADDP4
ASGNP4
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRFP4 0
ADDRLP4 40
INDIRP4
ADDRLP4 44
INDIRI4
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 40
INDIRP4
INDIRI1
ASGNI1
line 410
;410:		len++;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 411
;411:	}
LABELV $325
line 380
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $324
line 412
;412:	*p = 0;
ADDRLP4 0
INDIRP4
CNSTI1 0
ASGNI1
line 414
;413:
;414:	cgs.teamChatMsgTimes[cgs.teamChatPos % chatHeight] = cg.time;
ADDRGP4 cgs+154292
INDIRI4
ADDRLP4 12
INDIRI4
MODI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+154260
ADDP4
ADDRGP4 cg+109652
INDIRI4
ASGNI4
line 415
;415:	cgs.teamChatPos++;
ADDRLP4 24
ADDRGP4 cgs+154292
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 417
;416:
;417:	if (cgs.teamChatPos - cgs.teamLastChatPos > chatHeight)
ADDRGP4 cgs+154292
INDIRI4
ADDRGP4 cgs+154296
INDIRI4
SUBI4
ADDRLP4 12
INDIRI4
LEI4 $345
line 418
;418:		cgs.teamLastChatPos = cgs.teamChatPos - chatHeight;
ADDRGP4 cgs+154296
ADDRGP4 cgs+154292
INDIRI4
ADDRLP4 12
INDIRI4
SUBI4
ASGNI4
LABELV $345
line 419
;419:}
LABELV $311
endproc CG_AddToTeamChat 60 0
proc CG_MapRestart 0 12
line 432
;420:
;421:/*
;422:===============
;423:CG_MapRestart
;424:
;425:The server has issued a map_restart, so the next snapshot
;426:is completely new and should not be interpolated to.
;427:
;428:A tournement restart will clear everything, but doesn't
;429:require a reload of all the media
;430:===============
;431:*/
;432:static void CG_MapRestart( void ) {
line 433
;433:	if ( cg_showmiss.integer ) {
ADDRGP4 cg_showmiss+12
INDIRI4
CNSTI4 0
EQI4 $352
line 434
;434:		CG_Printf( "CG_MapRestart\n" );
ADDRGP4 $355
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 435
;435:	}
LABELV $352
line 437
;436:
;437:	CG_InitLocalEntities();
ADDRGP4 CG_InitLocalEntities
CALLV
pop
line 438
;438:	CG_InitMarkPolys();
ADDRGP4 CG_InitMarkPolys
CALLV
pop
line 439
;439:	CG_ClearParticles ();
ADDRGP4 CG_ClearParticles
CALLV
pop
line 442
;440:
;441:	// make sure the "3 frags left" warnings play again
;442:	cg.fraglimitWarnings = 0;
ADDRGP4 cg+109668
CNSTI4 0
ASGNI4
line 444
;443:
;444:	cg.timelimitWarnings = 0;
ADDRGP4 cg+109664
CNSTI4 0
ASGNI4
line 446
;445:
;446:	cg.intermissionStarted = qfalse;
ADDRGP4 cg+24
CNSTI4 0
ASGNI4
line 448
;447:
;448:	cgs.voteTime = 0;
ADDRGP4 cgs+31676
CNSTI4 0
ASGNI4
line 450
;449:
;450:	cg.mapRestart = qtrue;
ADDRGP4 cg+109672
CNSTI4 1
ASGNI4
line 452
;451:
;452:	CG_StartMusic();
ADDRGP4 CG_StartMusic
CALLV
pop
line 455
;453:
;454:
;455:	trap_S_ClearLoopingSounds(qtrue);
CNSTI4 1
ARGI4
ADDRGP4 trap_S_ClearLoopingSounds
CALLV
pop
line 460
;456:
;457:	// we really should clear more parts of cg here and stop sounds
;458:
;459:	// play the "fight" sound if this is a restart without warmup
;460:	if ( cg.warmup == 0 /* && cgs.gametype == GT_TOURNAMENT */) {
ADDRGP4 cg+126724
INDIRI4
CNSTI4 0
NEI4 $361
line 461
;461:		trap_S_StartLocalSound( cgs.media.countFightSound, CHAN_ANNOUNCER );
ADDRGP4 cgs+154388+1052
INDIRI4
ARGI4
CNSTI4 7
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 462
;462:		CG_CenterPrint( "FIGHT!", 120, GIANTCHAR_WIDTH*2 );
ADDRGP4 $366
ARGP4
CNSTI4 120
ARGI4
CNSTI4 64
ARGI4
ADDRGP4 CG_CenterPrint
CALLV
pop
line 464
;463:
;464:	}
LABELV $361
line 473
;465:#ifdef MISSIONPACK
;466:	if (cg_singlePlayerActive.integer) {
;467:		trap_Cvar_Set("ui_matchStartTime", va("%i", cg.time));
;468:		if (cg_recordSPDemo.integer && cg_recordSPDemoName.string && *cg_recordSPDemoName.string) {
;469:			trap_SendConsoleCommand(va("set g_synchronousclients 1 ; record %s \n", cg_recordSPDemoName.string));
;470:		}
;471:	}
;472:#endif
;473:	trap_Cvar_Set("cg_thirdPerson", "0");
ADDRGP4 $367
ARGP4
ADDRGP4 $368
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 474
;474:}
LABELV $351
endproc CG_MapRestart 0 12
export CG_ParseVoiceChats
proc CG_ParseVoiceChats 16504 16
line 513
;475:
;476:#define MAX_VOICEFILESIZE	16384
;477:#define MAX_VOICEFILES		8
;478:#define MAX_VOICECHATS		64
;479:#define MAX_VOICESOUNDS		64
;480:#define MAX_CHATSIZE		64
;481:#define MAX_HEADMODELS		64
;482:
;483:typedef struct voiceChat_s
;484:{
;485:	char id[64];
;486:	int numSounds;
;487:	sfxHandle_t sounds[MAX_VOICESOUNDS];
;488:	char chats[MAX_VOICESOUNDS][MAX_CHATSIZE];
;489:} voiceChat_t;
;490:
;491:typedef struct voiceChatList_s
;492:{
;493:	char name[64];
;494:	int gender;
;495:	int numVoiceChats;
;496:	voiceChat_t voiceChats[MAX_VOICECHATS];
;497:} voiceChatList_t;
;498:
;499:typedef struct headModelVoiceChat_s
;500:{
;501:	char headmodel[64];
;502:	int voiceChatNum;
;503:} headModelVoiceChat_t;
;504:
;505:voiceChatList_t voiceChatLists[MAX_VOICEFILES];
;506:headModelVoiceChat_t headModelVoiceChat[MAX_HEADMODELS];
;507:
;508:/*
;509:=================
;510:CG_ParseVoiceChats
;511:=================
;512:*/
;513:int CG_ParseVoiceChats( const char *filename, voiceChatList_t *voiceChatList, int maxVoiceChats ) {
line 522
;514:	int	len, i;
;515:	fileHandle_t f;
;516:	char buf[MAX_VOICEFILESIZE];
;517:	char **p, *ptr;
;518:	char *token;
;519:	voiceChat_t *voiceChats;
;520:	qboolean compress;
;521:
;522:	compress = qtrue;
ADDRLP4 12
CNSTI4 1
ASGNI4
line 523
;523:	if (cg_buildScript.integer) {
ADDRGP4 cg_buildScript+12
INDIRI4
CNSTI4 0
EQI4 $370
line 524
;524:		compress = qfalse;
ADDRLP4 12
CNSTI4 0
ASGNI4
line 525
;525:	}
LABELV $370
line 527
;526:
;527:	len = trap_FS_FOpenFile( filename, &f, FS_READ );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 24
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 16416
ADDRGP4 trap_FS_FOpenFile
CALLI4
ASGNI4
ADDRLP4 20
ADDRLP4 16416
INDIRI4
ASGNI4
line 528
;528:	if ( !f ) {
ADDRLP4 24
INDIRI4
CNSTI4 0
NEI4 $373
line 529
;529:		trap_Print( va( S_COLOR_RED "voice chat file not found: %s\n", filename ) );
ADDRGP4 $375
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 16420
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 16420
INDIRP4
ARGP4
ADDRGP4 trap_Print
CALLV
pop
line 530
;530:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $369
JUMPV
LABELV $373
line 532
;531:	}
;532:	if ( len >= MAX_VOICEFILESIZE ) {
ADDRLP4 20
INDIRI4
CNSTI4 16384
LTI4 $376
line 533
;533:		trap_Print( va( S_COLOR_RED "voice chat file too large: %s is %i, max allowed is %i", filename, len, MAX_VOICEFILESIZE ) );
ADDRGP4 $378
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 20
INDIRI4
ARGI4
CNSTI4 16384
ARGI4
ADDRLP4 16420
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 16420
INDIRP4
ARGP4
ADDRGP4 trap_Print
CALLV
pop
line 534
;534:		trap_FS_FCloseFile( f );
ADDRLP4 24
INDIRI4
ARGI4
ADDRGP4 trap_FS_FCloseFile
CALLV
pop
line 535
;535:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $369
JUMPV
LABELV $376
line 538
;536:	}
;537:
;538:	trap_FS_Read( buf, len, f );
ADDRLP4 28
ARGP4
ADDRLP4 20
INDIRI4
ARGI4
ADDRLP4 24
INDIRI4
ARGI4
ADDRGP4 trap_FS_Read
CALLV
pop
line 539
;539:	buf[len] = 0;
ADDRLP4 20
INDIRI4
ADDRLP4 28
ADDP4
CNSTI1 0
ASGNI1
line 540
;540:	trap_FS_FCloseFile( f );
ADDRLP4 24
INDIRI4
ARGI4
ADDRGP4 trap_FS_FCloseFile
CALLV
pop
line 542
;541:
;542:	ptr = buf;
ADDRLP4 16412
ADDRLP4 28
ASGNP4
line 543
;543:	p = &ptr;
ADDRLP4 8
ADDRLP4 16412
ASGNP4
line 545
;544:
;545:	Com_sprintf(voiceChatList->name, sizeof(voiceChatList->name), "%s", filename);
ADDRFP4 4
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $379
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 546
;546:	voiceChats = voiceChatList->voiceChats;
ADDRLP4 4
ADDRFP4 4
INDIRP4
CNSTI4 72
ADDP4
ASGNP4
line 547
;547:	for ( i = 0; i < maxVoiceChats; i++ ) {
ADDRLP4 16
CNSTI4 0
ASGNI4
ADDRGP4 $383
JUMPV
LABELV $380
line 548
;548:		voiceChats[i].id[0] = 0;
CNSTI4 4420
ADDRLP4 16
INDIRI4
MULI4
ADDRLP4 4
INDIRP4
ADDP4
CNSTI1 0
ASGNI1
line 549
;549:	}
LABELV $381
line 547
ADDRLP4 16
ADDRLP4 16
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $383
ADDRLP4 16
INDIRI4
ADDRFP4 8
INDIRI4
LTI4 $380
line 550
;550:	token = COM_ParseExt(p, qtrue);
ADDRLP4 8
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 16420
ADDRGP4 COM_ParseExt
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 16420
INDIRP4
ASGNP4
line 551
;551:	if (!token || token[0] == 0) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $386
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $384
LABELV $386
line 552
;552:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $369
JUMPV
LABELV $384
line 554
;553:	}
;554:	if (!Q_stricmp(token, "female")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $389
ARGP4
ADDRLP4 16428
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 16428
INDIRI4
CNSTI4 0
NEI4 $387
line 555
;555:		voiceChatList->gender = GENDER_FEMALE;
ADDRFP4 4
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 1
ASGNI4
line 556
;556:	}
ADDRGP4 $388
JUMPV
LABELV $387
line 557
;557:	else if (!Q_stricmp(token, "male")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $392
ARGP4
ADDRLP4 16432
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 16432
INDIRI4
CNSTI4 0
NEI4 $390
line 558
;558:		voiceChatList->gender = GENDER_MALE;
ADDRFP4 4
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 0
ASGNI4
line 559
;559:	}
ADDRGP4 $391
JUMPV
LABELV $390
line 560
;560:	else if (!Q_stricmp(token, "neuter")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $395
ARGP4
ADDRLP4 16436
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 16436
INDIRI4
CNSTI4 0
NEI4 $393
line 561
;561:		voiceChatList->gender = GENDER_NEUTER;
ADDRFP4 4
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 2
ASGNI4
line 562
;562:	}
ADDRGP4 $394
JUMPV
LABELV $393
line 563
;563:	else {
line 564
;564:		trap_Print( va( S_COLOR_RED "expected gender not found in voice chat file: %s\n", filename ) );
ADDRGP4 $396
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 16440
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 16440
INDIRP4
ARGP4
ADDRGP4 trap_Print
CALLV
pop
line 565
;565:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $369
JUMPV
LABELV $394
LABELV $391
LABELV $388
line 568
;566:	}
;567:
;568:	voiceChatList->numVoiceChats = 0;
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
CNSTI4 0
ASGNI4
ADDRGP4 $398
JUMPV
LABELV $397
line 569
;569:	while ( 1 ) {
line 570
;570:		token = COM_ParseExt(p, qtrue);
ADDRLP4 8
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 16440
ADDRGP4 COM_ParseExt
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 16440
INDIRP4
ASGNP4
line 571
;571:		if (!token || token[0] == 0) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $402
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $400
LABELV $402
line 572
;572:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $369
JUMPV
LABELV $400
line 574
;573:		}
;574:		Com_sprintf(voiceChats[voiceChatList->numVoiceChats].id, sizeof( voiceChats[voiceChatList->numVoiceChats].id ), "%s", token);
CNSTI4 4420
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
MULI4
ADDRLP4 4
INDIRP4
ADDP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $379
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 575
;575:		token = COM_ParseExt(p, qtrue);
ADDRLP4 8
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 16448
ADDRGP4 COM_ParseExt
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 16448
INDIRP4
ASGNP4
line 576
;576:		if (Q_stricmp(token, "{")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $405
ARGP4
ADDRLP4 16452
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 16452
INDIRI4
CNSTI4 0
EQI4 $403
line 577
;577:			trap_Print( va( S_COLOR_RED "expected { found %s in voice chat file: %s\n", token, filename ) );
ADDRGP4 $406
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 16456
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 16456
INDIRP4
ARGP4
ADDRGP4 trap_Print
CALLV
pop
line 578
;578:			return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $369
JUMPV
LABELV $403
line 580
;579:		}
;580:		voiceChats[voiceChatList->numVoiceChats].numSounds = 0;
CNSTI4 4420
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
MULI4
ADDRLP4 4
INDIRP4
ADDP4
CNSTI4 64
ADDP4
CNSTI4 0
ASGNI4
ADDRGP4 $408
JUMPV
LABELV $407
line 581
;581:		while(1) {
line 582
;582:			token = COM_ParseExt(p, qtrue);
ADDRLP4 8
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 16456
ADDRGP4 COM_ParseExt
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 16456
INDIRP4
ASGNP4
line 583
;583:			if (!token || token[0] == 0) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $412
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $410
LABELV $412
line 584
;584:				return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $369
JUMPV
LABELV $410
line 586
;585:			}
;586:			if (!Q_stricmp(token, "}"))
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $415
ARGP4
ADDRLP4 16464
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 16464
INDIRI4
CNSTI4 0
NEI4 $413
line 587
;587:				break;
ADDRGP4 $409
JUMPV
LABELV $413
line 588
;588:			voiceChats[voiceChatList->numVoiceChats].sounds[voiceChats[voiceChatList->numVoiceChats].numSounds] = 
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 12
INDIRI4
ARGI4
ADDRLP4 16468
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 16472
CNSTI4 68
ASGNI4
ADDRLP4 16476
CNSTI4 4420
ADDRFP4 4
INDIRP4
ADDRLP4 16472
INDIRI4
ADDP4
INDIRI4
MULI4
ADDRLP4 4
INDIRP4
ADDP4
ASGNP4
ADDRLP4 16476
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 16476
INDIRP4
ADDRLP4 16472
INDIRI4
ADDP4
ADDP4
ADDRLP4 16468
INDIRI4
ASGNI4
line 590
;589:          trap_S_RegisterSound( token , compress );
;590:			token = COM_ParseExt(p, qtrue);
ADDRLP4 8
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 16480
ADDRGP4 COM_ParseExt
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 16480
INDIRP4
ASGNP4
line 591
;591:			if (!token || token[0] == 0) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $418
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $416
LABELV $418
line 592
;592:				return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $369
JUMPV
LABELV $416
line 594
;593:			}
;594:			Com_sprintf(voiceChats[voiceChatList->numVoiceChats].chats[
ADDRLP4 16488
CNSTI4 4420
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
MULI4
ADDRLP4 4
INDIRP4
ADDP4
ASGNP4
ADDRLP4 16492
CNSTI4 64
ASGNI4
ADDRLP4 16488
INDIRP4
ADDRLP4 16492
INDIRI4
ADDP4
INDIRI4
CNSTI4 6
LSHI4
ADDRLP4 16488
INDIRP4
CNSTI4 324
ADDP4
ADDP4
ARGP4
ADDRLP4 16492
INDIRI4
ARGI4
ADDRGP4 $379
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 596
;595:							voiceChats[voiceChatList->numVoiceChats].numSounds], MAX_CHATSIZE, "%s", token);
;596:			voiceChats[voiceChatList->numVoiceChats].numSounds++;
ADDRLP4 16496
CNSTI4 4420
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
MULI4
ADDRLP4 4
INDIRP4
ADDP4
CNSTI4 64
ADDP4
ASGNP4
ADDRLP4 16496
INDIRP4
ADDRLP4 16496
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 597
;597:			if (voiceChats[voiceChatList->numVoiceChats].numSounds >= MAX_VOICESOUNDS)
ADDRLP4 16500
CNSTI4 64
ASGNI4
CNSTI4 4420
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
MULI4
ADDRLP4 4
INDIRP4
ADDP4
ADDRLP4 16500
INDIRI4
ADDP4
INDIRI4
ADDRLP4 16500
INDIRI4
LTI4 $419
line 598
;598:				break;
ADDRGP4 $409
JUMPV
LABELV $419
line 599
;599:		}
LABELV $408
line 581
ADDRGP4 $407
JUMPV
LABELV $409
line 600
;600:		voiceChatList->numVoiceChats++;
ADDRLP4 16456
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
ASGNP4
ADDRLP4 16456
INDIRP4
ADDRLP4 16456
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 601
;601:		if (voiceChatList->numVoiceChats >= maxVoiceChats)
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
ADDRFP4 8
INDIRI4
LTI4 $421
line 602
;602:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $369
JUMPV
LABELV $421
line 603
;603:	}
LABELV $398
line 569
ADDRGP4 $397
JUMPV
line 604
;604:	return qtrue;
CNSTI4 1
RETI4
LABELV $369
endproc CG_ParseVoiceChats 16504 16
export CG_LoadVoiceChats
proc CG_LoadVoiceChats 12 12
line 612
;605:}
;606:
;607:/*
;608:=================
;609:CG_LoadVoiceChats
;610:=================
;611:*/
;612:void CG_LoadVoiceChats( void ) {
line 615
;613:	int size;
;614:
;615:	size = trap_MemoryRemaining();
ADDRLP4 4
ADDRGP4 trap_MemoryRemaining
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 4
INDIRI4
ASGNI4
line 616
;616:	CG_ParseVoiceChats( "scripts/female1.voice", &voiceChatLists[0], MAX_VOICECHATS );
ADDRGP4 $424
ARGP4
ADDRGP4 voiceChatLists
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 CG_ParseVoiceChats
CALLI4
pop
line 617
;617:	CG_ParseVoiceChats( "scripts/female2.voice", &voiceChatLists[1], MAX_VOICECHATS );
ADDRGP4 $425
ARGP4
ADDRGP4 voiceChatLists+282952
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 CG_ParseVoiceChats
CALLI4
pop
line 618
;618:	CG_ParseVoiceChats( "scripts/female3.voice", &voiceChatLists[2], MAX_VOICECHATS );
ADDRGP4 $427
ARGP4
ADDRGP4 voiceChatLists+565904
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 CG_ParseVoiceChats
CALLI4
pop
line 619
;619:	CG_ParseVoiceChats( "scripts/male1.voice", &voiceChatLists[3], MAX_VOICECHATS );
ADDRGP4 $429
ARGP4
ADDRGP4 voiceChatLists+848856
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 CG_ParseVoiceChats
CALLI4
pop
line 620
;620:	CG_ParseVoiceChats( "scripts/male2.voice", &voiceChatLists[4], MAX_VOICECHATS );
ADDRGP4 $431
ARGP4
ADDRGP4 voiceChatLists+1131808
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 CG_ParseVoiceChats
CALLI4
pop
line 621
;621:	CG_ParseVoiceChats( "scripts/male3.voice", &voiceChatLists[5], MAX_VOICECHATS );
ADDRGP4 $433
ARGP4
ADDRGP4 voiceChatLists+1414760
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 CG_ParseVoiceChats
CALLI4
pop
line 622
;622:	CG_ParseVoiceChats( "scripts/male4.voice", &voiceChatLists[6], MAX_VOICECHATS );
ADDRGP4 $435
ARGP4
ADDRGP4 voiceChatLists+1697712
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 CG_ParseVoiceChats
CALLI4
pop
line 623
;623:	CG_ParseVoiceChats( "scripts/male5.voice", &voiceChatLists[7], MAX_VOICECHATS );
ADDRGP4 $437
ARGP4
ADDRGP4 voiceChatLists+1980664
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 CG_ParseVoiceChats
CALLI4
pop
line 624
;624:	CG_Printf("voice chat memory size = %d\n", size - trap_MemoryRemaining());
ADDRLP4 8
ADDRGP4 trap_MemoryRemaining
CALLI4
ASGNI4
ADDRGP4 $439
ARGP4
ADDRLP4 0
INDIRI4
ADDRLP4 8
INDIRI4
SUBI4
ARGI4
ADDRGP4 CG_Printf
CALLV
pop
line 625
;625:}
LABELV $423
endproc CG_LoadVoiceChats 12 12
export CG_HeadModelVoiceChats
proc CG_HeadModelVoiceChats 16424 16
line 632
;626:
;627:/*
;628:=================
;629:CG_HeadModelVoiceChats
;630:=================
;631:*/
;632:int CG_HeadModelVoiceChats( char *filename ) {
line 639
;633:	int	len, i;
;634:	fileHandle_t f;
;635:	char buf[MAX_VOICEFILESIZE];
;636:	char **p, *ptr;
;637:	char *token;
;638:
;639:	len = trap_FS_FOpenFile( filename, &f, FS_READ );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 12
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 16408
ADDRGP4 trap_FS_FOpenFile
CALLI4
ASGNI4
ADDRLP4 8
ADDRLP4 16408
INDIRI4
ASGNI4
line 640
;640:	if ( !f ) {
ADDRLP4 12
INDIRI4
CNSTI4 0
NEI4 $441
line 642
;641:		//trap_Print( va( "voice chat file not found: %s\n", filename ) );
;642:		return -1;
CNSTI4 -1
RETI4
ADDRGP4 $440
JUMPV
LABELV $441
line 644
;643:	}
;644:	if ( len >= MAX_VOICEFILESIZE ) {
ADDRLP4 8
INDIRI4
CNSTI4 16384
LTI4 $443
line 645
;645:		trap_Print( va( S_COLOR_RED "voice chat file too large: %s is %i, max allowed is %i", filename, len, MAX_VOICEFILESIZE ) );
ADDRGP4 $378
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 8
INDIRI4
ARGI4
CNSTI4 16384
ARGI4
ADDRLP4 16412
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 16412
INDIRP4
ARGP4
ADDRGP4 trap_Print
CALLV
pop
line 646
;646:		trap_FS_FCloseFile( f );
ADDRLP4 12
INDIRI4
ARGI4
ADDRGP4 trap_FS_FCloseFile
CALLV
pop
line 647
;647:		return -1;
CNSTI4 -1
RETI4
ADDRGP4 $440
JUMPV
LABELV $443
line 650
;648:	}
;649:
;650:	trap_FS_Read( buf, len, f );
ADDRLP4 16
ARGP4
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 12
INDIRI4
ARGI4
ADDRGP4 trap_FS_Read
CALLV
pop
line 651
;651:	buf[len] = 0;
ADDRLP4 8
INDIRI4
ADDRLP4 16
ADDP4
CNSTI1 0
ASGNI1
line 652
;652:	trap_FS_FCloseFile( f );
ADDRLP4 12
INDIRI4
ARGI4
ADDRGP4 trap_FS_FCloseFile
CALLV
pop
line 654
;653:
;654:	ptr = buf;
ADDRLP4 16404
ADDRLP4 16
ASGNP4
line 655
;655:	p = &ptr;
ADDRLP4 16400
ADDRLP4 16404
ASGNP4
line 657
;656:
;657:	token = COM_ParseExt(p, qtrue);
ADDRLP4 16400
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 16412
ADDRGP4 COM_ParseExt
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 16412
INDIRP4
ASGNP4
line 658
;658:	if (!token || token[0] == 0) {
ADDRLP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $447
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $445
LABELV $447
line 659
;659:		return -1;
CNSTI4 -1
RETI4
ADDRGP4 $440
JUMPV
LABELV $445
line 662
;660:	}
;661:
;662:	for ( i = 0; i < MAX_VOICEFILES; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $448
line 663
;663:		if ( !Q_stricmp(token, voiceChatLists[i].name) ) {
ADDRLP4 4
INDIRP4
ARGP4
CNSTI4 282952
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 voiceChatLists
ADDP4
ARGP4
ADDRLP4 16420
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 16420
INDIRI4
CNSTI4 0
NEI4 $452
line 664
;664:			return i;
ADDRLP4 0
INDIRI4
RETI4
ADDRGP4 $440
JUMPV
LABELV $452
line 666
;665:		}
;666:	}
LABELV $449
line 662
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 8
LTI4 $448
line 670
;667:
;668:	//FIXME: maybe try to load the .voice file which name is stored in token?
;669:
;670:	return -1;
CNSTI4 -1
RETI4
LABELV $440
endproc CG_HeadModelVoiceChats 16424 16
export CG_GetVoiceChat
proc CG_GetVoiceChat 16 8
line 679
;671:}
;672:
;673:
;674:/*
;675:=================
;676:CG_GetVoiceChat
;677:=================
;678:*/
;679:int CG_GetVoiceChat( voiceChatList_t *voiceChatList, const char *id, sfxHandle_t *snd, char **chat) {
line 682
;680:	int i, rnd;
;681:
;682:	for ( i = 0; i < voiceChatList->numVoiceChats; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $458
JUMPV
LABELV $455
line 683
;683:		if ( !Q_stricmp( id, voiceChatList->voiceChats[i].id ) ) {
ADDRFP4 4
INDIRP4
ARGP4
CNSTI4 4420
ADDRLP4 0
INDIRI4
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDP4
ARGP4
ADDRLP4 8
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
NEI4 $459
line 684
;684:			rnd = random() * voiceChatList->voiceChats[i].numSounds;
ADDRLP4 12
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 12
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTI4 4420
ADDRLP4 0
INDIRI4
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDP4
CNSTI4 64
ADDP4
INDIRI4
CVIF4 4
MULF4
CVFI4 4
ASGNI4
line 685
;685:			*snd = voiceChatList->voiceChats[i].sounds[rnd];
ADDRFP4 8
INDIRP4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
CNSTI4 4420
ADDRLP4 0
INDIRI4
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDP4
CNSTI4 68
ADDP4
ADDP4
INDIRI4
ASGNI4
line 686
;686:			*chat = voiceChatList->voiceChats[i].chats[rnd];
ADDRFP4 12
INDIRP4
ADDRLP4 4
INDIRI4
CNSTI4 6
LSHI4
CNSTI4 4420
ADDRLP4 0
INDIRI4
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDP4
CNSTI4 324
ADDP4
ADDP4
ASGNP4
line 687
;687:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $454
JUMPV
LABELV $459
line 689
;688:		}
;689:	}
LABELV $456
line 682
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $458
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
LTI4 $455
line 690
;690:	return qfalse;
CNSTI4 0
RETI4
LABELV $454
endproc CG_GetVoiceChat 16 8
export CG_VoiceChatListForClient
proc CG_VoiceChatListForClient 164 20
line 698
;691:}
;692:
;693:/*
;694:=================
;695:CG_VoiceChatListForClient
;696:=================
;697:*/
;698:voiceChatList_t *CG_VoiceChatListForClient( int clientNum ) {
line 703
;699:	clientInfo_t *ci;
;700:	int voiceChatNum, i, j, k, gender;
;701:	char filename[MAX_QPATH], headModelName[MAX_QPATH];
;702:
;703:	if ( clientNum < 0 || clientNum >= MAX_CLIENTS ) {
ADDRLP4 152
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 152
INDIRI4
CNSTI4 0
LTI4 $464
ADDRLP4 152
INDIRI4
CNSTI4 64
LTI4 $462
LABELV $464
line 704
;704:		clientNum = 0;
ADDRFP4 0
CNSTI4 0
ASGNI4
line 705
;705:	}
LABELV $462
line 706
;706:	ci = &cgs.clientinfo[ clientNum ];
ADDRLP4 148
CNSTI4 1740
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 cgs+40972
ADDP4
ASGNP4
line 708
;707:
;708:	for ( k = 0; k < 2; k++ ) {
ADDRLP4 144
CNSTI4 0
ASGNI4
LABELV $466
line 709
;709:		if ( k == 0 ) {
ADDRLP4 144
INDIRI4
CNSTI4 0
NEI4 $470
line 710
;710:			if (ci->headModelName[0] == '*') {
ADDRLP4 148
INDIRP4
CNSTI4 296
ADDP4
INDIRI1
CVII4 1
CNSTI4 42
NEI4 $472
line 711
;711:				Com_sprintf( headModelName, sizeof(headModelName), "%s/%s", ci->headModelName+1, ci->headSkinName );
ADDRLP4 8
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $474
ARGP4
ADDRLP4 148
INDIRP4
CNSTI4 297
ADDP4
ARGP4
ADDRLP4 148
INDIRP4
CNSTI4 360
ADDP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 712
;712:			}
ADDRGP4 $471
JUMPV
LABELV $472
line 713
;713:			else {
line 714
;714:				Com_sprintf( headModelName, sizeof(headModelName), "%s/%s", ci->headModelName, ci->headSkinName );
ADDRLP4 8
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $474
ARGP4
ADDRLP4 148
INDIRP4
CNSTI4 296
ADDP4
ARGP4
ADDRLP4 148
INDIRP4
CNSTI4 360
ADDP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 715
;715:			}
line 716
;716:		}
ADDRGP4 $471
JUMPV
LABELV $470
line 717
;717:		else {
line 718
;718:			if (ci->headModelName[0] == '*') {
ADDRLP4 148
INDIRP4
CNSTI4 296
ADDP4
INDIRI1
CVII4 1
CNSTI4 42
NEI4 $475
line 719
;719:				Com_sprintf( headModelName, sizeof(headModelName), "%s", ci->headModelName+1 );
ADDRLP4 8
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $379
ARGP4
ADDRLP4 148
INDIRP4
CNSTI4 297
ADDP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 720
;720:			}
ADDRGP4 $476
JUMPV
LABELV $475
line 721
;721:			else {
line 722
;722:				Com_sprintf( headModelName, sizeof(headModelName), "%s", ci->headModelName );
ADDRLP4 8
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $379
ARGP4
ADDRLP4 148
INDIRP4
CNSTI4 296
ADDP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 723
;723:			}
LABELV $476
line 724
;724:		}
LABELV $471
line 726
;725:		// find the voice file for the head model the client uses
;726:		for ( i = 0; i < MAX_HEADMODELS; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $477
line 727
;727:			if (!Q_stricmp(headModelVoiceChat[i].headmodel, headModelName)) {
CNSTI4 68
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 headModelVoiceChat
ADDP4
ARGP4
ADDRLP4 8
ARGP4
ADDRLP4 156
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 156
INDIRI4
CNSTI4 0
NEI4 $481
line 728
;728:				break;
ADDRGP4 $479
JUMPV
LABELV $481
line 730
;729:			}
;730:		}
LABELV $478
line 726
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 64
LTI4 $477
LABELV $479
line 731
;731:		if (i < MAX_HEADMODELS) {
ADDRLP4 0
INDIRI4
CNSTI4 64
GEI4 $483
line 732
;732:			return &voiceChatLists[headModelVoiceChat[i].voiceChatNum];
CNSTI4 282952
CNSTI4 68
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 headModelVoiceChat+64
ADDP4
INDIRI4
MULI4
ADDRGP4 voiceChatLists
ADDP4
RETP4
ADDRGP4 $461
JUMPV
LABELV $483
line 735
;733:		}
;734:		// find a <headmodelname>.vc file
;735:		for ( i = 0; i < MAX_HEADMODELS; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $486
line 736
;736:			if (!strlen(headModelVoiceChat[i].headmodel)) {
CNSTI4 68
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 headModelVoiceChat
ADDP4
ARGP4
ADDRLP4 156
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 156
INDIRI4
CNSTI4 0
NEI4 $490
line 737
;737:				Com_sprintf(filename, sizeof(filename), "scripts/%s.vc", headModelName);
ADDRLP4 76
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $492
ARGP4
ADDRLP4 8
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 738
;738:				voiceChatNum = CG_HeadModelVoiceChats(filename);
ADDRLP4 76
ARGP4
ADDRLP4 160
ADDRGP4 CG_HeadModelVoiceChats
CALLI4
ASGNI4
ADDRLP4 72
ADDRLP4 160
INDIRI4
ASGNI4
line 739
;739:				if (voiceChatNum == -1)
ADDRLP4 72
INDIRI4
CNSTI4 -1
NEI4 $493
line 740
;740:					break;
ADDRGP4 $488
JUMPV
LABELV $493
line 741
;741:				Com_sprintf(headModelVoiceChat[i].headmodel, sizeof ( headModelVoiceChat[i].headmodel ),
CNSTI4 68
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 headModelVoiceChat
ADDP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $379
ARGP4
ADDRLP4 8
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 743
;742:							"%s", headModelName);
;743:				headModelVoiceChat[i].voiceChatNum = voiceChatNum;
CNSTI4 68
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 headModelVoiceChat+64
ADDP4
ADDRLP4 72
INDIRI4
ASGNI4
line 744
;744:				return &voiceChatLists[headModelVoiceChat[i].voiceChatNum];
CNSTI4 282952
CNSTI4 68
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 headModelVoiceChat+64
ADDP4
INDIRI4
MULI4
ADDRGP4 voiceChatLists
ADDP4
RETP4
ADDRGP4 $461
JUMPV
LABELV $490
line 746
;745:			}
;746:		}
LABELV $487
line 735
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 64
LTI4 $486
LABELV $488
line 747
;747:	}
LABELV $467
line 708
ADDRLP4 144
ADDRLP4 144
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 144
INDIRI4
CNSTI4 2
LTI4 $466
line 748
;748:	gender = ci->gender;
ADDRLP4 140
ADDRLP4 148
INDIRP4
CNSTI4 520
ADDP4
INDIRI4
ASGNI4
line 749
;749:	for (k = 0; k < 2; k++) {
ADDRLP4 144
CNSTI4 0
ASGNI4
LABELV $497
line 751
;750:		// just pick the first with the right gender
;751:		for ( i = 0; i < MAX_VOICEFILES; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $501
line 752
;752:			if (strlen(voiceChatLists[i].name)) {
CNSTI4 282952
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 voiceChatLists
ADDP4
ARGP4
ADDRLP4 156
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 156
INDIRI4
CNSTI4 0
EQI4 $505
line 753
;753:				if (voiceChatLists[i].gender == gender) {
CNSTI4 282952
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 voiceChatLists+64
ADDP4
INDIRI4
ADDRLP4 140
INDIRI4
NEI4 $507
line 755
;754:					// store this head model with voice chat for future reference
;755:					for ( j = 0; j < MAX_HEADMODELS; j++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $510
line 756
;756:						if (!strlen(headModelVoiceChat[j].headmodel)) {
CNSTI4 68
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 headModelVoiceChat
ADDP4
ARGP4
ADDRLP4 160
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 160
INDIRI4
CNSTI4 0
NEI4 $514
line 757
;757:							Com_sprintf(headModelVoiceChat[j].headmodel, sizeof ( headModelVoiceChat[j].headmodel ),
CNSTI4 68
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 headModelVoiceChat
ADDP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $379
ARGP4
ADDRLP4 8
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 759
;758:									"%s", headModelName);
;759:							headModelVoiceChat[j].voiceChatNum = i;
CNSTI4 68
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 headModelVoiceChat+64
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 760
;760:							break;
ADDRGP4 $512
JUMPV
LABELV $514
line 762
;761:						}
;762:					}
LABELV $511
line 755
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 64
LTI4 $510
LABELV $512
line 763
;763:					return &voiceChatLists[i];
CNSTI4 282952
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 voiceChatLists
ADDP4
RETP4
ADDRGP4 $461
JUMPV
LABELV $507
line 765
;764:				}
;765:			}
LABELV $505
line 766
;766:		}
LABELV $502
line 751
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 8
LTI4 $501
line 768
;767:		// fall back to male gender because we don't have neuter in the mission pack
;768:		if (gender == GENDER_MALE)
ADDRLP4 140
INDIRI4
CNSTI4 0
NEI4 $517
line 769
;769:			break;
ADDRGP4 $499
JUMPV
LABELV $517
line 770
;770:		gender = GENDER_MALE;
ADDRLP4 140
CNSTI4 0
ASGNI4
line 771
;771:	}
LABELV $498
line 749
ADDRLP4 144
ADDRLP4 144
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 144
INDIRI4
CNSTI4 2
LTI4 $497
LABELV $499
line 773
;772:	// store this head model with voice chat for future reference
;773:	for ( j = 0; j < MAX_HEADMODELS; j++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $519
line 774
;774:		if (!strlen(headModelVoiceChat[j].headmodel)) {
CNSTI4 68
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 headModelVoiceChat
ADDP4
ARGP4
ADDRLP4 156
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 156
INDIRI4
CNSTI4 0
NEI4 $523
line 775
;775:			Com_sprintf(headModelVoiceChat[j].headmodel, sizeof ( headModelVoiceChat[j].headmodel ),
CNSTI4 68
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 headModelVoiceChat
ADDP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $379
ARGP4
ADDRLP4 8
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 777
;776:					"%s", headModelName);
;777:			headModelVoiceChat[j].voiceChatNum = 0;
CNSTI4 68
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 headModelVoiceChat+64
ADDP4
CNSTI4 0
ASGNI4
line 778
;778:			break;
ADDRGP4 $521
JUMPV
LABELV $523
line 780
;779:		}
;780:	}
LABELV $520
line 773
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 64
LTI4 $519
LABELV $521
line 782
;781:	// just return the first voice chat list
;782:	return &voiceChatLists[0];
ADDRGP4 voiceChatLists
RETP4
LABELV $461
endproc CG_VoiceChatListForClient 164 20
export CG_PlayVoiceChat
proc CG_PlayVoiceChat 0 0
line 803
;783:}
;784:
;785:#define MAX_VOICECHATBUFFER		32
;786:
;787:typedef struct bufferedVoiceChat_s
;788:{
;789:	int clientNum;
;790:	sfxHandle_t snd;
;791:	int voiceOnly;
;792:	char cmd[MAX_SAY_TEXT];
;793:	char message[MAX_SAY_TEXT];
;794:} bufferedVoiceChat_t;
;795:
;796:bufferedVoiceChat_t voiceChatBuffer[MAX_VOICECHATBUFFER];
;797:
;798:/*
;799:=================
;800:CG_PlayVoiceChat
;801:=================
;802:*/
;803:void CG_PlayVoiceChat( bufferedVoiceChat_t *vchat ) {
line 830
;804:#ifdef MISSIONPACK
;805:	// if we are going into the intermission, don't start any voices
;806:	if ( cg.intermissionStarted ) {
;807:		return;
;808:	}
;809:
;810:	if ( !cg_noVoiceChats.integer ) {
;811:		trap_S_StartLocalSound( vchat->snd, CHAN_VOICE);
;812:		if (vchat->clientNum != cg.snap->ps.clientNum) {
;813:			int orderTask = CG_ValidOrder(vchat->cmd);
;814:			if (orderTask > 0) {
;815:				cgs.acceptOrderTime = cg.time + 5000;
;816:				Q_strncpyz(cgs.acceptVoice, vchat->cmd, sizeof(cgs.acceptVoice));
;817:				cgs.acceptTask = orderTask;
;818:				cgs.acceptLeader = vchat->clientNum;
;819:			}
;820:			// see if this was an order
;821:			CG_ShowResponseHead();
;822:		}
;823:	}
;824:	if (!vchat->voiceOnly && !cg_noVoiceText.integer) {
;825:		CG_AddToTeamChat( vchat->message );
;826:		CG_Printf( "%s\n", vchat->message );
;827:	}
;828:	voiceChatBuffer[cg.voiceChatBufferOut].snd = 0;
;829:#endif
;830:}
LABELV $526
endproc CG_PlayVoiceChat 0 0
export CG_PlayBufferedVoiceChats
proc CG_PlayBufferedVoiceChats 0 0
line 837
;831:
;832:/*
;833:=====================
;834:CG_PlayBufferedVoieChats
;835:=====================
;836:*/
;837:void CG_PlayBufferedVoiceChats( void ) {
line 849
;838:#ifdef MISSIONPACK
;839:	if ( cg.voiceChatTime < cg.time ) {
;840:		if (cg.voiceChatBufferOut != cg.voiceChatBufferIn && voiceChatBuffer[cg.voiceChatBufferOut].snd) {
;841:			//
;842:			CG_PlayVoiceChat(&voiceChatBuffer[cg.voiceChatBufferOut]);
;843:			//
;844:			cg.voiceChatBufferOut = (cg.voiceChatBufferOut + 1) % MAX_VOICECHATBUFFER;
;845:			cg.voiceChatTime = cg.time + 1000;
;846:		}
;847:	}
;848:#endif
;849:}
LABELV $527
endproc CG_PlayBufferedVoiceChats 0 0
export CG_AddBufferedVoiceChat
proc CG_AddBufferedVoiceChat 0 0
line 856
;850:
;851:/*
;852:=====================
;853:CG_AddBufferedVoiceChat
;854:=====================
;855:*/
;856:void CG_AddBufferedVoiceChat( bufferedVoiceChat_t *vchat ) {
line 870
;857:#ifdef MISSIONPACK
;858:	// if we are going into the intermission, don't start any voices
;859:	if ( cg.intermissionStarted ) {
;860:		return;
;861:	}
;862:
;863:	memcpy(&voiceChatBuffer[cg.voiceChatBufferIn], vchat, sizeof(bufferedVoiceChat_t));
;864:	cg.voiceChatBufferIn = (cg.voiceChatBufferIn + 1) % MAX_VOICECHATBUFFER;
;865:	if (cg.voiceChatBufferIn == cg.voiceChatBufferOut) {
;866:		CG_PlayVoiceChat( &voiceChatBuffer[cg.voiceChatBufferOut] );
;867:		cg.voiceChatBufferOut++;
;868:	}
;869:#endif
;870:}
LABELV $528
endproc CG_AddBufferedVoiceChat 0 0
export CG_VoiceChatLocal
proc CG_VoiceChatLocal 0 0
line 877
;871:
;872:/*
;873:=================
;874:CG_VoiceChatLocal
;875:=================
;876:*/
;877:void CG_VoiceChatLocal( int mode, qboolean voiceOnly, int clientNum, int color, const char *cmd ) {
line 919
;878:#ifdef MISSIONPACK
;879:	char *chat;
;880:	voiceChatList_t *voiceChatList;
;881:	clientInfo_t *ci;
;882:	sfxHandle_t snd;
;883:	bufferedVoiceChat_t vchat;
;884:
;885:	// if we are going into the intermission, don't start any voices
;886:	if ( cg.intermissionStarted ) {
;887:		return;
;888:	}
;889:
;890:	if ( clientNum < 0 || clientNum >= MAX_CLIENTS ) {
;891:		clientNum = 0;
;892:	}
;893:	ci = &cgs.clientinfo[ clientNum ];
;894:
;895:	cgs.currentVoiceClient = clientNum;
;896:
;897:	voiceChatList = CG_VoiceChatListForClient( clientNum );
;898:
;899:	if ( CG_GetVoiceChat( voiceChatList, cmd, &snd, &chat ) ) {
;900:		//
;901:		if ( mode == SAY_TEAM || !cg_teamChatsOnly.integer ) {
;902:			vchat.clientNum = clientNum;
;903:			vchat.snd = snd;
;904:			vchat.voiceOnly = voiceOnly;
;905:			Q_strncpyz(vchat.cmd, cmd, sizeof(vchat.cmd));
;906:			if ( mode == SAY_TELL ) {
;907:				Com_sprintf(vchat.message, sizeof(vchat.message), "[%s]: %c%c%s", ci->name, Q_COLOR_ESCAPE, color, chat);
;908:			}
;909:			else if ( mode == SAY_TEAM ) {
;910:				Com_sprintf(vchat.message, sizeof(vchat.message), "(%s): %c%c%s", ci->name, Q_COLOR_ESCAPE, color, chat);
;911:			}
;912:			else {
;913:				Com_sprintf(vchat.message, sizeof(vchat.message), "%s: %c%c%s", ci->name, Q_COLOR_ESCAPE, color, chat);
;914:			}
;915:			CG_AddBufferedVoiceChat(&vchat);
;916:		}
;917:	}
;918:#endif
;919:}
LABELV $529
endproc CG_VoiceChatLocal 0 0
export CG_VoiceChat
proc CG_VoiceChat 0 0
line 926
;920:
;921:/*
;922:=================
;923:CG_VoiceChat
;924:=================
;925:*/
;926:void CG_VoiceChat( int mode ) {
line 947
;927:#ifdef MISSIONPACK
;928:	const char *cmd;
;929:	int clientNum, color;
;930:	qboolean voiceOnly;
;931:
;932:	voiceOnly = atoi(CG_Argv(1));
;933:	clientNum = atoi(CG_Argv(2));
;934:	color = atoi(CG_Argv(3));
;935:	cmd = CG_Argv(4);
;936:
;937:	if (cg_noTaunt.integer != 0) {
;938:		if (!strcmp(cmd, VOICECHAT_KILLINSULT)  || !strcmp(cmd, VOICECHAT_TAUNT) || \
;939:			!strcmp(cmd, VOICECHAT_DEATHINSULT) || !strcmp(cmd, VOICECHAT_KILLGAUNTLET) || \
;940:			!strcmp(cmd, VOICECHAT_PRAISE)) {
;941:			return;
;942:		}
;943:	}
;944:
;945:	CG_VoiceChatLocal( mode, voiceOnly, clientNum, color, cmd );
;946:#endif
;947:}
LABELV $530
endproc CG_VoiceChat 0 0
proc CG_RemoveChatEscapeChar 16 0
line 954
;948:
;949:/*
;950:=================
;951:CG_RemoveChatEscapeChar
;952:=================
;953:*/
;954:static void CG_RemoveChatEscapeChar( char *text ) {
line 957
;955:	int i, l;
;956:
;957:	l = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 958
;958:	for ( i = 0; text[i]; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $535
JUMPV
LABELV $532
line 959
;959:		if (text[i] == '\x19')
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
INDIRI1
CVII4 1
CNSTI4 25
NEI4 $536
line 960
;960:			continue;
ADDRGP4 $533
JUMPV
LABELV $536
line 961
;961:		text[l++] = text[i];
ADDRLP4 8
ADDRLP4 4
INDIRI4
ASGNI4
ADDRLP4 4
ADDRLP4 8
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRI4
ADDRLP4 12
INDIRP4
ADDP4
ADDRLP4 0
INDIRI4
ADDRLP4 12
INDIRP4
ADDP4
INDIRI1
ASGNI1
line 962
;962:	}
LABELV $533
line 958
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $535
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $532
line 963
;963:	text[l] = '\0';
ADDRLP4 4
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
CNSTI1 0
ASGNI1
line 964
;964:}
LABELV $531
endproc CG_RemoveChatEscapeChar 16 0
proc CG_ServerCommand 264 12
line 974
;965:
;966:/*
;967:=================
;968:CG_ServerCommand
;969:
;970:The string has been tokenized and can be retrieved with
;971:Cmd_Argc() / Cmd_Argv()
;972:=================
;973:*/
;974:static void CG_ServerCommand( void ) {
line 984
;975:	const char	*cmd;
;976:	char		text[MAX_SAY_TEXT];
;977:	
;978:	// Shafe - Trep Radar
;979:	int				count;
;980:    int				i;
;981:    const char		*ptr;
;982:	// End Shafe
;983:
;984:	cmd = CG_Argv(0);
CNSTI4 0
ARGI4
ADDRLP4 168
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 168
INDIRP4
ASGNP4
line 986
;985:
;986:	if ( !cmd[0] ) {
ADDRLP4 8
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $539
line 988
;987:		// server claimed the command
;988:		return;
ADDRGP4 $538
JUMPV
LABELV $539
line 991
;989:	}
;990:
;991:	if ( !strcmp( cmd, "cp" ) ) {
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 $543
ARGP4
ADDRLP4 172
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 172
INDIRI4
CNSTI4 0
NEI4 $541
line 992
;992:		CG_CenterPrint( CG_Argv(1), SCREEN_HEIGHT * 0.30, BIGCHAR_WIDTH );
CNSTI4 1
ARGI4
ADDRLP4 176
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 176
INDIRP4
ARGP4
CNSTI4 144
ARGI4
CNSTI4 16
ARGI4
ADDRGP4 CG_CenterPrint
CALLV
pop
line 993
;993:		return;
ADDRGP4 $538
JUMPV
LABELV $541
line 996
;994:	}
;995:
;996:	if ( !strcmp( cmd, "cs" ) ) {
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 $546
ARGP4
ADDRLP4 176
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 176
INDIRI4
CNSTI4 0
NEI4 $544
line 997
;997:		CG_ConfigStringModified();
ADDRGP4 CG_ConfigStringModified
CALLV
pop
line 998
;998:		return;
ADDRGP4 $538
JUMPV
LABELV $544
line 1001
;999:	}
;1000:
;1001:	if ( !strcmp( cmd, "print" ) ) {
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 $549
ARGP4
ADDRLP4 180
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 180
INDIRI4
CNSTI4 0
NEI4 $547
line 1002
;1002:		CG_Printf( "%s", CG_Argv(1) );
CNSTI4 1
ARGI4
ADDRLP4 184
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRGP4 $379
ARGP4
ADDRLP4 184
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 1012
;1003:#ifdef MISSIONPACK
;1004:		cmd = CG_Argv(1);			// yes, this is obviously a hack, but so is the way we hear about
;1005:									// votes passing or failing
;1006:		if ( !Q_stricmpn( cmd, "vote failed", 11 ) || !Q_stricmpn( cmd, "team vote failed", 16 )) {
;1007:			trap_S_StartLocalSound( cgs.media.voteFailed, CHAN_ANNOUNCER );
;1008:		} else if ( !Q_stricmpn( cmd, "vote passed", 11 ) || !Q_stricmpn( cmd, "team vote passed", 16 ) ) {
;1009:			trap_S_StartLocalSound( cgs.media.votePassed, CHAN_ANNOUNCER );
;1010:		}
;1011:#endif
;1012:		return;
ADDRGP4 $538
JUMPV
LABELV $547
line 1015
;1013:	}
;1014:
;1015:	if ( !strcmp( cmd, "chat" ) ) {
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 $552
ARGP4
ADDRLP4 184
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 184
INDIRI4
CNSTI4 0
NEI4 $550
line 1016
;1016:		if ( !cg_teamChatsOnly.integer ) {
ADDRGP4 cg_teamChatsOnly+12
INDIRI4
CNSTI4 0
NEI4 $538
line 1017
;1017:			trap_S_StartLocalSound( cgs.media.talkSound, CHAN_LOCAL_SOUND );
ADDRGP4 cgs+154388+812
INDIRI4
ARGI4
CNSTI4 6
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 1018
;1018:			Q_strncpyz( text, CG_Argv(1), MAX_SAY_TEXT );
CNSTI4 1
ARGI4
ADDRLP4 188
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 16
ARGP4
ADDRLP4 188
INDIRP4
ARGP4
CNSTI4 150
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1019
;1019:			CG_RemoveChatEscapeChar( text );
ADDRLP4 16
ARGP4
ADDRGP4 CG_RemoveChatEscapeChar
CALLV
pop
line 1020
;1020:			CG_Printf( "%s\n", text );
ADDRGP4 $558
ARGP4
ADDRLP4 16
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 1021
;1021:		}
line 1022
;1022:		return;
ADDRGP4 $538
JUMPV
LABELV $550
line 1025
;1023:	}
;1024:
;1025:	if ( !strcmp( cmd, "tchat" ) ) {
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 $561
ARGP4
ADDRLP4 188
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 188
INDIRI4
CNSTI4 0
NEI4 $559
line 1026
;1026:		trap_S_StartLocalSound( cgs.media.talkSound, CHAN_LOCAL_SOUND );
ADDRGP4 cgs+154388+812
INDIRI4
ARGI4
CNSTI4 6
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 1027
;1027:		Q_strncpyz( text, CG_Argv(1), MAX_SAY_TEXT );
CNSTI4 1
ARGI4
ADDRLP4 192
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 16
ARGP4
ADDRLP4 192
INDIRP4
ARGP4
CNSTI4 150
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1028
;1028:		CG_RemoveChatEscapeChar( text );
ADDRLP4 16
ARGP4
ADDRGP4 CG_RemoveChatEscapeChar
CALLV
pop
line 1029
;1029:		CG_AddToTeamChat( text );
ADDRLP4 16
ARGP4
ADDRGP4 CG_AddToTeamChat
CALLV
pop
line 1030
;1030:		CG_Printf( "%s\n", text );
ADDRGP4 $558
ARGP4
ADDRLP4 16
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 1031
;1031:		return;
ADDRGP4 $538
JUMPV
LABELV $559
line 1033
;1032:	}
;1033:	if ( !strcmp( cmd, "vchat" ) ) {
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 $566
ARGP4
ADDRLP4 192
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 192
INDIRI4
CNSTI4 0
NEI4 $564
line 1034
;1034:		CG_VoiceChat( SAY_ALL );
CNSTI4 0
ARGI4
ADDRGP4 CG_VoiceChat
CALLV
pop
line 1035
;1035:		return;
ADDRGP4 $538
JUMPV
LABELV $564
line 1038
;1036:	}
;1037:
;1038:	if ( !strcmp( cmd, "vtchat" ) ) {
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 $569
ARGP4
ADDRLP4 196
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 196
INDIRI4
CNSTI4 0
NEI4 $567
line 1039
;1039:		CG_VoiceChat( SAY_TEAM );
CNSTI4 1
ARGI4
ADDRGP4 CG_VoiceChat
CALLV
pop
line 1040
;1040:		return;
ADDRGP4 $538
JUMPV
LABELV $567
line 1043
;1041:	}
;1042:
;1043:	if ( !strcmp( cmd, "vtell" ) ) {
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 $572
ARGP4
ADDRLP4 200
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 200
INDIRI4
CNSTI4 0
NEI4 $570
line 1044
;1044:		CG_VoiceChat( SAY_TELL );
CNSTI4 2
ARGI4
ADDRGP4 CG_VoiceChat
CALLV
pop
line 1045
;1045:		return;
ADDRGP4 $538
JUMPV
LABELV $570
line 1048
;1046:	}
;1047:
;1048:	if ( !strcmp( cmd, "scores" ) ) {
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 $575
ARGP4
ADDRLP4 204
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 204
INDIRI4
CNSTI4 0
NEI4 $573
line 1049
;1049:		CG_ParseScores();
ADDRGP4 CG_ParseScores
CALLV
pop
line 1050
;1050:		return;
ADDRGP4 $538
JUMPV
LABELV $573
line 1053
;1051:	}
;1052:
;1053:	if ( !strcmp( cmd, "tinfo" ) ) {
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 $578
ARGP4
ADDRLP4 208
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 208
INDIRI4
CNSTI4 0
NEI4 $576
line 1054
;1054:		CG_ParseTeamInfo();
ADDRGP4 CG_ParseTeamInfo
CALLV
pop
line 1055
;1055:		return;
ADDRGP4 $538
JUMPV
LABELV $576
line 1058
;1056:	}
;1057:
;1058:	if ( !strcmp( cmd, "map_restart" ) ) {
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 $581
ARGP4
ADDRLP4 212
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 212
INDIRI4
CNSTI4 0
NEI4 $579
line 1059
;1059:		CG_MapRestart();
ADDRGP4 CG_MapRestart
CALLV
pop
line 1060
;1060:		return;
ADDRGP4 $538
JUMPV
LABELV $579
line 1063
;1061:	}
;1062:
;1063:  if ( Q_stricmp (cmd, "remapShader") == 0 ) {
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 $584
ARGP4
ADDRLP4 216
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 216
INDIRI4
CNSTI4 0
NEI4 $582
line 1064
;1064:		if (trap_Argc() == 4) {
ADDRLP4 220
ADDRGP4 trap_Argc
CALLI4
ASGNI4
ADDRLP4 220
INDIRI4
CNSTI4 4
NEI4 $585
line 1065
;1065:			trap_R_RemapShader(CG_Argv(1), CG_Argv(2), CG_Argv(3));
CNSTI4 1
ARGI4
ADDRLP4 224
ADDRGP4 CG_Argv
CALLP4
ASGNP4
CNSTI4 2
ARGI4
ADDRLP4 228
ADDRGP4 CG_Argv
CALLP4
ASGNP4
CNSTI4 3
ARGI4
ADDRLP4 232
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 224
INDIRP4
ARGP4
ADDRLP4 228
INDIRP4
ARGP4
ADDRLP4 232
INDIRP4
ARGP4
ADDRGP4 trap_R_RemapShader
CALLV
pop
line 1066
;1066:		}
LABELV $585
line 1067
;1067:	}
LABELV $582
line 1070
;1068:
;1069:	// loaddeferred can be both a servercmd and a consolecmd
;1070:	if ( !strcmp( cmd, "loaddefered" ) ) {	// FIXME: spelled wrong, but not changing for demo
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 $589
ARGP4
ADDRLP4 220
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 220
INDIRI4
CNSTI4 0
NEI4 $587
line 1071
;1071:		CG_LoadDeferredPlayers();
ADDRGP4 CG_LoadDeferredPlayers
CALLV
pop
line 1072
;1072:		return;
ADDRGP4 $538
JUMPV
LABELV $587
line 1077
;1073:	}
;1074:
;1075:	// clientLevelShot is sent before taking a special screenshot for
;1076:	// the menu system during development
;1077:	if ( !strcmp( cmd, "clientLevelShot" ) ) {
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 $592
ARGP4
ADDRLP4 224
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 224
INDIRI4
CNSTI4 0
NEI4 $590
line 1078
;1078:		cg.levelShot = qtrue;
ADDRGP4 cg+12
CNSTI4 1
ASGNI4
line 1079
;1079:		return;
ADDRGP4 $538
JUMPV
LABELV $590
line 1083
;1080:	}
;1081:
;1082:	// Shafe - Trep - Radar
;1083:    if ( !strcmp( cmd, "playerpos" ) ) 
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 $596
ARGP4
ADDRLP4 228
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 228
INDIRI4
CNSTI4 0
NEI4 $594
line 1084
;1084:    {
line 1088
;1085:        // -- expand the comma delimited string into the player positions --
;1086:
;1087:        //clear out old list of positions
;1088:        memset(cg_playerOrigins, kENTRY_EOL, sizeof(cg_playerOrigins));
ADDRGP4 cg_playerOrigins
ARGP4
CNSTI4 0
ARGI4
CNSTI4 1024
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1091
;1089:
;1090:        //get the number of entries in the list
;1091:        count = atof(CG_Argv(1));
CNSTI4 1
ARGI4
ADDRLP4 232
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 232
INDIRP4
ARGP4
ADDRLP4 236
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 12
ADDRLP4 236
INDIRF4
CVFI4 4
ASGNI4
line 1092
;1092:        for(i=0;i<count;i++)
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $600
JUMPV
LABELV $597
line 1093
;1093:        {
line 1095
;1094:            //set the string pointer to the correct set of parameters
;1095:            ptr = CG_Argv(i+2);
ADDRLP4 4
INDIRI4
CNSTI4 2
ADDI4
ARGI4
ADDRLP4 240
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 240
INDIRP4
ASGNP4
line 1098
;1096:
;1097:            //read in the first number
;1098:            cg_playerOrigins[i].pos[0] = atof(ptr);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 244
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 4
INDIRI4
CNSTI4 4
LSHI4
ADDRGP4 cg_playerOrigins+4
ADDP4
ADDRLP4 244
INDIRF4
ASGNF4
line 1101
;1099:
;1100:            //move the ptr on until we come to a comma
;1101:            ptr = strchr(ptr, ',');
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 44
ARGI4
ADDRLP4 248
ADDRGP4 strchr
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 248
INDIRP4
ASGNP4
line 1104
;1102:
;1103:            //skip over the comma
;1104:            ptr++;
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 1107
;1105:
;1106:            //read in the next number
;1107:            cg_playerOrigins[i].pos[1] = atof(ptr);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 252
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 4
INDIRI4
CNSTI4 4
LSHI4
ADDRGP4 cg_playerOrigins+4+4
ADDP4
ADDRLP4 252
INDIRF4
ASGNF4
line 1110
;1108:
;1109:            //move the ptr on until we come to a comma
;1110:            ptr = strchr(ptr, ',');
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 44
ARGI4
ADDRLP4 256
ADDRGP4 strchr
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 256
INDIRP4
ASGNP4
line 1113
;1111:
;1112:            //skip over the comma
;1113:            ptr++;
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 1116
;1114:
;1115:            //read in the final number
;1116:            cg_playerOrigins[i].pos[2] = atof(ptr);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 260
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 4
INDIRI4
CNSTI4 4
LSHI4
ADDRGP4 cg_playerOrigins+4+8
ADDP4
ADDRLP4 260
INDIRF4
ASGNF4
line 1119
;1117:
;1118:            //mark the entry as valid
;1119:            cg_playerOrigins[i].valid = kENTRY_VALID;
ADDRLP4 4
INDIRI4
CNSTI4 4
LSHI4
ADDRGP4 cg_playerOrigins
ADDP4
CNSTI4 2
ASGNI4
line 1120
;1120:        }
LABELV $598
line 1092
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $600
ADDRLP4 4
INDIRI4
ADDRLP4 12
INDIRI4
LTI4 $597
line 1121
;1121:        return;
ADDRGP4 $538
JUMPV
LABELV $594
line 1125
;1122:    }
;1123:	// End Shafe
;1124:
;1125:	CG_Printf( "Unknown client game command: %s\n", cmd );
ADDRGP4 $606
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 1126
;1126:}
LABELV $538
endproc CG_ServerCommand 264 12
export CG_ExecuteNewServerCommands
proc CG_ExecuteNewServerCommands 12 4
line 1137
;1127:
;1128:
;1129:/*
;1130:====================
;1131:CG_ExecuteNewServerCommands
;1132:
;1133:Execute all of the server commands that were received along
;1134:with this this snapshot.
;1135:====================
;1136:*/
;1137:void CG_ExecuteNewServerCommands( int latestSequence ) {
ADDRGP4 $609
JUMPV
LABELV $608
line 1138
;1138:	while ( cgs.serverCommandSequence < latestSequence ) {
line 1139
;1139:		if ( trap_GetServerCommand( ++cgs.serverCommandSequence ) ) {
ADDRLP4 0
ADDRGP4 cgs+31444
ASGNP4
ADDRLP4 4
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRP4
ADDRLP4 4
INDIRI4
ASGNI4
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 8
ADDRGP4 trap_GetServerCommand
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
EQI4 $612
line 1140
;1140:			CG_ServerCommand();
ADDRGP4 CG_ServerCommand
CALLV
pop
line 1141
;1141:		}
LABELV $612
line 1142
;1142:	}
LABELV $609
line 1138
ADDRGP4 cgs+31444
INDIRI4
ADDRFP4 0
INDIRI4
LTI4 $608
line 1143
;1143:}
LABELV $607
endproc CG_ExecuteNewServerCommands 12 4
bss
export voiceChatBuffer
align 4
LABELV voiceChatBuffer
skip 9984
export headModelVoiceChat
align 4
LABELV headModelVoiceChat
skip 4352
export voiceChatLists
align 4
LABELV voiceChatLists
skip 2263616
import CG_DrawScanner
import CG_ScannerOff_f
import CG_ScannerOn_f
import CG_NewParticleArea
import initparticles
import CG_ParticleExplosion
import CG_ParticleMisc
import CG_ParticleDust
import CG_ParticleSparks
import CG_ParticleBulletDebris
import CG_ParticleSnowFlurry
import CG_AddParticleShrapnel
import CG_ParticleSmoke
import CG_ParticleSnow
import CG_AddParticles
import CG_ClearParticles
import trap_GetEntityToken
import trap_getCameraInfo
import trap_startCamera
import trap_loadCamera
import trap_SnapVector
import trap_CIN_SetExtents
import trap_CIN_DrawCinematic
import trap_CIN_RunCinematic
import trap_CIN_StopCinematic
import trap_CIN_PlayCinematic
import trap_Key_GetKey
import trap_Key_SetCatcher
import trap_Key_GetCatcher
import trap_Key_IsDown
import trap_R_RegisterFont
import trap_MemoryRemaining
import testPrintFloat
import testPrintInt
import trap_SetUserCmdValue
import trap_GetUserCmd
import trap_GetCurrentCmdNumber
import trap_GetServerCommand
import trap_GetSnapshot
import trap_GetCurrentSnapshotNumber
import trap_GetGameState
import trap_GetGlconfig
import trap_R_RemapShader
import trap_R_LerpTag
import trap_R_ModelBounds
import trap_R_DrawStretchPic
import trap_R_SetColor
import trap_R_RenderScene
import trap_R_LightForPoint
import trap_R_AddLightToScene
import trap_R_AddPolysToScene
import trap_R_AddPolyToScene
import trap_R_AddRefEntityToScene
import trap_R_ClearScene
import trap_R_RegisterShaderNoMip
import trap_R_RegisterShader
import trap_R_RegisterSkin
import trap_R_RegisterModel
import trap_R_LoadWorldMap
import trap_S_StopBackgroundTrack
import trap_S_StartBackgroundTrack
import trap_S_RegisterSound
import trap_S_Respatialize
import trap_S_UpdateEntityPosition
import trap_S_AddRealLoopingSound
import trap_S_AddLoopingSound
import trap_S_ClearLoopingSounds
import trap_S_StartLocalSound
import trap_S_StopLoopingSound
import trap_S_StartSound
import trap_CM_MarkFragments
import trap_CM_TransformedBoxTrace
import trap_CM_BoxTrace
import trap_CM_TransformedPointContents
import trap_CM_PointContents
import trap_CM_TempBoxModel
import trap_CM_InlineModel
import trap_CM_NumInlineModels
import trap_CM_LoadMap
import trap_UpdateScreen
import trap_SendClientCommand
import trap_AddCommand
import trap_SendConsoleCommand
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_Cvar_VariableStringBuffer
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_Milliseconds
import trap_Error
import trap_Print
import CG_PlayerSprites
import CG_CheckChangedPredictableEvents
import CG_TransitionPlayerState
import CG_Respawn
import CG_InitConsoleCommands
import CG_ConsoleCommand
import CG_DrawOldTourneyScoreboard
import CG_DrawOldScoreboard
import CG_DrawInformation
import CG_LoadingClient
import CG_LoadingItem
import CG_LoadingString
import CG_TransitionEntity
import CG_ProcessSnapshots
import CG_MakeExplosion
import CG_Bleed
import CG_BigExplode
import CG_GibPlayerHeadshot
import CG_BreakGlass
import CG_GibPlayer
import CG_ScorePlum
import CG_SpawnEffect
import CG_ShotgunTrail
import CG_BubbleTrail
import CG_SmokePuff
import CG_AddLocalEntities
import CG_AllocLocalEntity
import CG_InitLocalEntities
import CG_ImpactMark
import CG_AddMarks
import CG_InitMarkPolys
import CG_OutOfAmmoChange
import CG_DrawWeaponSelect
import CG_AddPlayerWeapon
import CG_AddViewWeapon
import CG_GrappleTrail
import CG_RailTrail
import CG_Bullet
import CG_ShotgunFire
import CG_MissileHitPlayer
import CG_MissileHitWall
import CG_FireWeapon2
import CG_FireWeapon
import CG_RegisterItemVisuals
import CG_RegisterWeapon
import CG_Weapon_f
import CG_PrevWeapon_f
import CG_NextWeapon_f
import CG_PositionRotatedEntityOnTag
import CG_PositionEntityOnTag
import CG_AdjustPositionForMover
import CG_Beam
import CG_AddPacketEntities
import CG_SetEntitySoundPosition
import CG_PainEvent
import CG_EntityEvent
import CG_PlaceString
import CG_CheckEvents
import CG_LoadDeferredPlayers
import CG_PredictPlayerState
import CG_Trace
import CG_PointContents
import CG_BuildSolidList
import CG_CustomSound
import CG_NewClientInfo
import CG_AddRefEntityWithPowerups
import CG_ResetPlayerEntity
import CG_Player
import CG_StatusHandle
import CG_OtherTeamHasFlag
import CG_YourTeamHasFlag
import CG_GameTypeString
import CG_CheckOrderPending
import CG_Text_PaintChar
import CG_Draw3DModel
import CG_GetKillerText
import CG_GetGameStatusText
import CG_GetTeamColor
import CG_InitTeamChat
import CG_SetPrintString
import CG_ShowResponseHead
import CG_RunMenuScript
import CG_OwnerDrawVisible
import CG_GetValue
import CG_SelectNextPlayer
import CG_SelectPrevPlayer
import CG_Text_Height
import CG_Text_Width
import CG_Text_Paint
import CG_OwnerDraw
import CG_DrawTeamBackground
import CG_DrawFlagModel
import CG_DrawActive
import CG_DrawHead
import CG_CenterPrint
import CG_AddLagometerSnapshotInfo
import CG_AddLagometerFrameInfo
import teamChat2
import teamChat1
import systemChat
import drawTeamOverlayModificationCount
import numSortedTeamPlayers
import sortedTeamPlayers
import CG_DrawTopBottom
import CG_DrawSides
import CG_DrawRect
import UI_DrawProportionalString
import CG_GetColorForHealth
import CG_ColorForHealth
import CG_TileClear
import CG_TeamColor
import CG_FadeColor
import CG_DrawStrlen
import CG_DrawSmallStringColor
import CG_DrawSmallString
import CG_DrawBigStringColor
import CG_DrawBigString
import CG_DrawStringExt
import CG_DrawString
import CG_DrawPic
import CG_FillRect
import CG_AdjustFrom640
import CG_DrawActiveFrame
import CG_AddBufferedSound
import CG_ResetZoom
import CG_ZoomUp_f
import CG_ZoomDown_f
import CG_TestModelPrevSkin_f
import CG_TestModelNextSkin_f
import CG_TestModelPrevFrame_f
import CG_TestModelNextFrame_f
import CG_TestGun_f
import CG_TestModel_f
import CG_BuildSpectatorString
import CG_GetSelectedScore
import CG_SetScoreSelection
import CG_RankRunFrame
import CG_EventHandling
import CG_MouseEvent
import CG_KeyEvent
import CG_LoadMenus
import CG_LastAttacker
import CG_CrosshairPlayer
import CG_UpdateCvars
import CG_StartMusic
import CG_Error
import CG_Printf
import CG_Argv
import CG_ConfigString
import CG_Cvar_ClampInt
import CG_AddBoundingBox
import CG_PredictWeaponEffects
export cg_playerOrigins
align 4
LABELV cg_playerOrigins
skip 1024
import cg_RedMC
import cg_BlueMC
import cg_GameMode
import cg_plOut
import cg_latentCmds
import cg_latentSnaps
import cl_timeNudge
import cg_optimizePrediction
import cg_projectileNudge
import sv_fps
import cg_cmdTimeNudge
import cg_drawBBox
import cg_debugDelag
import cg_delag
import cg_trueLightning
import cg_oldPlasma
import cg_oldRocket
import cg_oldRail
import cg_noProjectileTrail
import cg_noTaunt
import cg_bigFont
import cg_smallFont
import cg_cameraMode
import cg_timescale
import cg_timescaleFadeSpeed
import cg_timescaleFadeEnd
import cg_cameraOrbitDelay
import cg_cameraOrbit
import pmove_msec
import pmove_fixed
import cg_scorePlum
import cg_noVoiceText
import cg_noVoiceChats
import cg_teamChatsOnly
import cg_drawFriend
import cg_deferPlayers
import cg_predictItems
import cg_blood
import cg_paused
import cg_buildScript
import cg_forceModel
import cg_stats
import cg_teamChatHeight
import cg_teamChatTime
import cg_synchronousClients
import cg_drawAttacker
import cg_lagometer
import cg_stereoSeparation
import cg_thirdPerson
import cg_thirdPersonAngle
import cg_thirdPersonRange
import cg_zoomFov
import cg_fov
import cg_simpleItems
import cg_ignore
import cg_autoswitch
import cg_tracerLength
import cg_tracerWidth
import cg_tracerChance
import cg_viewsize
import cg_drawGun
import cg_gun_z
import cg_gun_y
import cg_gun_x
import cg_gun_frame
import cg_brassTime
import cg_addMarks
import cg_footsteps
import cg_showmiss
import cg_noPlayerAnims
import cg_nopredict
import cg_errorDecay
import cg_railTrailTime
import cg_debugEvents
import cg_debugPosition
import cg_debugAnim
import cg_animSpeed
import cg_draw2D
import cg_drawStatus
import cg_crosshairHealth
import cg_crosshairSize
import cg_crosshairY
import cg_crosshairX
import cg_teamOverlayUserinfo
import cg_drawTeamOverlay
import cg_drawRewards
import cg_drawCrosshairNames
import cg_drawCrosshair
import cg_drawAmmoWarning
import cg_drawIcons
import cg_draw3dIcons
import cg_drawSnapshot
import cg_drawFPS
import cg_drawTimer
import cg_gibs
import cg_shadows
import cg_swingSpeed
import cg_bobroll
import cg_bobpitch
import cg_bobup
import cg_runroll
import cg_runpitch
import cg_centertime
import cg_markPolys
import cg_items
import cg_weapons
import cg_entities
import cg
import cgs
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import Max_Ammo
import BG_CanItemBeGrabbed
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import Com_Printf
import Com_Error
import Info_NextPair
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_RemoveKey_big
import Info_RemoveKey
import Info_ValueForKey
import va
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import irandom
import flrandom
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import SnapVectorTowards
import tonextint
import init_tonextint
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Com_Memcpy
import Com_Memset
import Hunk_Alloc
import FloatSwap
import LongSwap
import ShortSwap
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import sscanf
import vsprintf
import _atoi
import atoi
import _atof
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $606
byte 1 85
byte 1 110
byte 1 107
byte 1 110
byte 1 111
byte 1 119
byte 1 110
byte 1 32
byte 1 99
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 32
byte 1 103
byte 1 97
byte 1 109
byte 1 101
byte 1 32
byte 1 99
byte 1 111
byte 1 109
byte 1 109
byte 1 97
byte 1 110
byte 1 100
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $596
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 112
byte 1 111
byte 1 115
byte 1 0
align 1
LABELV $592
byte 1 99
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 76
byte 1 101
byte 1 118
byte 1 101
byte 1 108
byte 1 83
byte 1 104
byte 1 111
byte 1 116
byte 1 0
align 1
LABELV $589
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 100
byte 1 101
byte 1 102
byte 1 101
byte 1 114
byte 1 101
byte 1 100
byte 1 0
align 1
LABELV $584
byte 1 114
byte 1 101
byte 1 109
byte 1 97
byte 1 112
byte 1 83
byte 1 104
byte 1 97
byte 1 100
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $581
byte 1 109
byte 1 97
byte 1 112
byte 1 95
byte 1 114
byte 1 101
byte 1 115
byte 1 116
byte 1 97
byte 1 114
byte 1 116
byte 1 0
align 1
LABELV $578
byte 1 116
byte 1 105
byte 1 110
byte 1 102
byte 1 111
byte 1 0
align 1
LABELV $575
byte 1 115
byte 1 99
byte 1 111
byte 1 114
byte 1 101
byte 1 115
byte 1 0
align 1
LABELV $572
byte 1 118
byte 1 116
byte 1 101
byte 1 108
byte 1 108
byte 1 0
align 1
LABELV $569
byte 1 118
byte 1 116
byte 1 99
byte 1 104
byte 1 97
byte 1 116
byte 1 0
align 1
LABELV $566
byte 1 118
byte 1 99
byte 1 104
byte 1 97
byte 1 116
byte 1 0
align 1
LABELV $561
byte 1 116
byte 1 99
byte 1 104
byte 1 97
byte 1 116
byte 1 0
align 1
LABELV $558
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $552
byte 1 99
byte 1 104
byte 1 97
byte 1 116
byte 1 0
align 1
LABELV $549
byte 1 112
byte 1 114
byte 1 105
byte 1 110
byte 1 116
byte 1 0
align 1
LABELV $546
byte 1 99
byte 1 115
byte 1 0
align 1
LABELV $543
byte 1 99
byte 1 112
byte 1 0
align 1
LABELV $492
byte 1 115
byte 1 99
byte 1 114
byte 1 105
byte 1 112
byte 1 116
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 46
byte 1 118
byte 1 99
byte 1 0
align 1
LABELV $474
byte 1 37
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $439
byte 1 118
byte 1 111
byte 1 105
byte 1 99
byte 1 101
byte 1 32
byte 1 99
byte 1 104
byte 1 97
byte 1 116
byte 1 32
byte 1 109
byte 1 101
byte 1 109
byte 1 111
byte 1 114
byte 1 121
byte 1 32
byte 1 115
byte 1 105
byte 1 122
byte 1 101
byte 1 32
byte 1 61
byte 1 32
byte 1 37
byte 1 100
byte 1 10
byte 1 0
align 1
LABELV $437
byte 1 115
byte 1 99
byte 1 114
byte 1 105
byte 1 112
byte 1 116
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 108
byte 1 101
byte 1 53
byte 1 46
byte 1 118
byte 1 111
byte 1 105
byte 1 99
byte 1 101
byte 1 0
align 1
LABELV $435
byte 1 115
byte 1 99
byte 1 114
byte 1 105
byte 1 112
byte 1 116
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 108
byte 1 101
byte 1 52
byte 1 46
byte 1 118
byte 1 111
byte 1 105
byte 1 99
byte 1 101
byte 1 0
align 1
LABELV $433
byte 1 115
byte 1 99
byte 1 114
byte 1 105
byte 1 112
byte 1 116
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 108
byte 1 101
byte 1 51
byte 1 46
byte 1 118
byte 1 111
byte 1 105
byte 1 99
byte 1 101
byte 1 0
align 1
LABELV $431
byte 1 115
byte 1 99
byte 1 114
byte 1 105
byte 1 112
byte 1 116
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 108
byte 1 101
byte 1 50
byte 1 46
byte 1 118
byte 1 111
byte 1 105
byte 1 99
byte 1 101
byte 1 0
align 1
LABELV $429
byte 1 115
byte 1 99
byte 1 114
byte 1 105
byte 1 112
byte 1 116
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 108
byte 1 101
byte 1 49
byte 1 46
byte 1 118
byte 1 111
byte 1 105
byte 1 99
byte 1 101
byte 1 0
align 1
LABELV $427
byte 1 115
byte 1 99
byte 1 114
byte 1 105
byte 1 112
byte 1 116
byte 1 115
byte 1 47
byte 1 102
byte 1 101
byte 1 109
byte 1 97
byte 1 108
byte 1 101
byte 1 51
byte 1 46
byte 1 118
byte 1 111
byte 1 105
byte 1 99
byte 1 101
byte 1 0
align 1
LABELV $425
byte 1 115
byte 1 99
byte 1 114
byte 1 105
byte 1 112
byte 1 116
byte 1 115
byte 1 47
byte 1 102
byte 1 101
byte 1 109
byte 1 97
byte 1 108
byte 1 101
byte 1 50
byte 1 46
byte 1 118
byte 1 111
byte 1 105
byte 1 99
byte 1 101
byte 1 0
align 1
LABELV $424
byte 1 115
byte 1 99
byte 1 114
byte 1 105
byte 1 112
byte 1 116
byte 1 115
byte 1 47
byte 1 102
byte 1 101
byte 1 109
byte 1 97
byte 1 108
byte 1 101
byte 1 49
byte 1 46
byte 1 118
byte 1 111
byte 1 105
byte 1 99
byte 1 101
byte 1 0
align 1
LABELV $415
byte 1 125
byte 1 0
align 1
LABELV $406
byte 1 94
byte 1 49
byte 1 101
byte 1 120
byte 1 112
byte 1 101
byte 1 99
byte 1 116
byte 1 101
byte 1 100
byte 1 32
byte 1 123
byte 1 32
byte 1 102
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 105
byte 1 110
byte 1 32
byte 1 118
byte 1 111
byte 1 105
byte 1 99
byte 1 101
byte 1 32
byte 1 99
byte 1 104
byte 1 97
byte 1 116
byte 1 32
byte 1 102
byte 1 105
byte 1 108
byte 1 101
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $405
byte 1 123
byte 1 0
align 1
LABELV $396
byte 1 94
byte 1 49
byte 1 101
byte 1 120
byte 1 112
byte 1 101
byte 1 99
byte 1 116
byte 1 101
byte 1 100
byte 1 32
byte 1 103
byte 1 101
byte 1 110
byte 1 100
byte 1 101
byte 1 114
byte 1 32
byte 1 110
byte 1 111
byte 1 116
byte 1 32
byte 1 102
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 32
byte 1 105
byte 1 110
byte 1 32
byte 1 118
byte 1 111
byte 1 105
byte 1 99
byte 1 101
byte 1 32
byte 1 99
byte 1 104
byte 1 97
byte 1 116
byte 1 32
byte 1 102
byte 1 105
byte 1 108
byte 1 101
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $395
byte 1 110
byte 1 101
byte 1 117
byte 1 116
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $392
byte 1 109
byte 1 97
byte 1 108
byte 1 101
byte 1 0
align 1
LABELV $389
byte 1 102
byte 1 101
byte 1 109
byte 1 97
byte 1 108
byte 1 101
byte 1 0
align 1
LABELV $379
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $378
byte 1 94
byte 1 49
byte 1 118
byte 1 111
byte 1 105
byte 1 99
byte 1 101
byte 1 32
byte 1 99
byte 1 104
byte 1 97
byte 1 116
byte 1 32
byte 1 102
byte 1 105
byte 1 108
byte 1 101
byte 1 32
byte 1 116
byte 1 111
byte 1 111
byte 1 32
byte 1 108
byte 1 97
byte 1 114
byte 1 103
byte 1 101
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 105
byte 1 115
byte 1 32
byte 1 37
byte 1 105
byte 1 44
byte 1 32
byte 1 109
byte 1 97
byte 1 120
byte 1 32
byte 1 97
byte 1 108
byte 1 108
byte 1 111
byte 1 119
byte 1 101
byte 1 100
byte 1 32
byte 1 105
byte 1 115
byte 1 32
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $375
byte 1 94
byte 1 49
byte 1 118
byte 1 111
byte 1 105
byte 1 99
byte 1 101
byte 1 32
byte 1 99
byte 1 104
byte 1 97
byte 1 116
byte 1 32
byte 1 102
byte 1 105
byte 1 108
byte 1 101
byte 1 32
byte 1 110
byte 1 111
byte 1 116
byte 1 32
byte 1 102
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $368
byte 1 48
byte 1 0
align 1
LABELV $367
byte 1 99
byte 1 103
byte 1 95
byte 1 116
byte 1 104
byte 1 105
byte 1 114
byte 1 100
byte 1 80
byte 1 101
byte 1 114
byte 1 115
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $366
byte 1 70
byte 1 73
byte 1 71
byte 1 72
byte 1 84
byte 1 33
byte 1 0
align 1
LABELV $355
byte 1 67
byte 1 71
byte 1 95
byte 1 77
byte 1 97
byte 1 112
byte 1 82
byte 1 101
byte 1 115
byte 1 116
byte 1 97
byte 1 114
byte 1 116
byte 1 10
byte 1 0
align 1
LABELV $228
byte 1 64
byte 1 0
align 1
LABELV $225
byte 1 58
byte 1 0
align 1
LABELV $222
byte 1 61
byte 1 0
align 1
LABELV $195
byte 1 103
byte 1 95
byte 1 100
byte 1 101
byte 1 108
byte 1 97
byte 1 103
byte 1 72
byte 1 105
byte 1 116
byte 1 115
byte 1 99
byte 1 97
byte 1 110
byte 1 0
align 1
LABELV $193
byte 1 103
byte 1 95
byte 1 82
byte 1 101
byte 1 100
byte 1 77
byte 1 67
byte 1 0
align 1
LABELV $191
byte 1 103
byte 1 95
byte 1 66
byte 1 108
byte 1 117
byte 1 101
byte 1 77
byte 1 67
byte 1 0
align 1
LABELV $189
byte 1 103
byte 1 95
byte 1 71
byte 1 97
byte 1 109
byte 1 101
byte 1 77
byte 1 111
byte 1 100
byte 1 101
byte 1 0
align 1
LABELV $187
byte 1 103
byte 1 95
byte 1 105
byte 1 110
byte 1 115
byte 1 116
byte 1 97
byte 1 103
byte 1 105
byte 1 98
byte 1 0
align 1
LABELV $183
byte 1 103
byte 1 95
byte 1 98
byte 1 108
byte 1 117
byte 1 101
byte 1 84
byte 1 101
byte 1 97
byte 1 109
byte 1 0
align 1
LABELV $179
byte 1 103
byte 1 95
byte 1 114
byte 1 101
byte 1 100
byte 1 84
byte 1 101
byte 1 97
byte 1 109
byte 1 0
align 1
LABELV $177
byte 1 109
byte 1 97
byte 1 112
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 46
byte 1 98
byte 1 115
byte 1 112
byte 1 0
align 1
LABELV $174
byte 1 109
byte 1 97
byte 1 112
byte 1 110
byte 1 97
byte 1 109
byte 1 101
byte 1 0
align 1
LABELV $173
byte 1 115
byte 1 118
byte 1 95
byte 1 109
byte 1 97
byte 1 120
byte 1 99
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 115
byte 1 0
align 1
LABELV $171
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 108
byte 1 105
byte 1 109
byte 1 105
byte 1 116
byte 1 0
align 1
LABELV $169
byte 1 99
byte 1 97
byte 1 112
byte 1 116
byte 1 117
byte 1 114
byte 1 101
byte 1 108
byte 1 105
byte 1 109
byte 1 105
byte 1 116
byte 1 0
align 1
LABELV $167
byte 1 102
byte 1 114
byte 1 97
byte 1 103
byte 1 108
byte 1 105
byte 1 109
byte 1 105
byte 1 116
byte 1 0
align 1
LABELV $165
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 115
byte 1 0
align 1
LABELV $163
byte 1 100
byte 1 109
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 115
byte 1 0
align 1
LABELV $160
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $159
byte 1 103
byte 1 95
byte 1 103
byte 1 97
byte 1 109
byte 1 101
byte 1 116
byte 1 121
byte 1 112
byte 1 101
byte 1 0
align 1
LABELV $81
byte 1 102
byte 1 111
byte 1 108
byte 1 108
byte 1 111
byte 1 119
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 99
byte 1 97
byte 1 114
byte 1 114
byte 1 105
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $80
byte 1 114
byte 1 101
byte 1 116
byte 1 117
byte 1 114
byte 1 110
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 0
align 1
LABELV $79
byte 1 102
byte 1 111
byte 1 108
byte 1 108
byte 1 111
byte 1 119
byte 1 109
byte 1 101
byte 1 0
align 1
LABELV $78
byte 1 99
byte 1 97
byte 1 109
byte 1 112
byte 1 0
align 1
LABELV $77
byte 1 112
byte 1 97
byte 1 116
byte 1 114
byte 1 111
byte 1 108
byte 1 0
align 1
LABELV $76
byte 1 100
byte 1 101
byte 1 102
byte 1 101
byte 1 110
byte 1 100
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 0
align 1
LABELV $75
byte 1 100
byte 1 101
byte 1 102
byte 1 101
byte 1 110
byte 1 100
byte 1 0
align 1
LABELV $74
byte 1 111
byte 1 102
byte 1 102
byte 1 101
byte 1 110
byte 1 115
byte 1 101
byte 1 0
align 1
LABELV $73
byte 1 103
byte 1 101
byte 1 116
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 0
