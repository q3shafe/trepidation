data
export cg_customSoundNames
align 4
LABELV cg_customSoundNames
address $72
address $73
address $74
address $75
address $76
address $77
address $78
address $79
address $80
address $81
address $82
address $83
address $84
address $85
address $86
address $87
address $88
address $89
address $90
address $91
address $92
address $93
address $94
address $95
address $96
address $97
address $98
address $99
address $100
address $101
address $102
address $103
address $104
address $105
address $106
skip 4
export CG_CustomSound
code
proc CG_CustomSound 16 8
file "../cg_players.c"
line 52
;1:// Copyright (C) 1999-2000 Id Software, Inc.
;2://
;3:// cg_players.c -- handle the media and animation for player entities
;4:#include "cg_local.h"
;5:
;6:char	*cg_customSoundNames[MAX_CUSTOM_SOUNDS] = {
;7:	"*death1.wav",
;8:	"*death2.wav",
;9:	"*death3.wav",
;10:	"*jump1.wav",
;11:	"*pain25_1.wav",
;12:	"*pain50_1.wav",
;13:	"*pain75_1.wav",
;14:	"*pain100_1.wav",
;15:	"*falling1.wav",
;16:	"*gasp.wav",
;17:	"*drown.wav",
;18:	"*fall1.wav",
;19:	"*taunt.wav",
;20:	"*taunt1.wav",
;21:	"*taunt2.wav",
;22:	"*taunt3.wav",
;23:	"*taunt4.wav",
;24:	"*taunt5.wav"	
;25:	"*death1.mp3",
;26:	"*death2.mp3",
;27:	"*death3.mp3",
;28:	"*jump1.mp3",
;29:	"*pain25_1.mp3",
;30:	"*pain50_1.mp3",
;31:	"*pain75_1.mp3",
;32:	"*pain100_1.mp3",
;33:	"*falling1.mp3",
;34:	"*gasp.mp3",
;35:	"*drown.mp3",
;36:	"*fall1.mp3",
;37:	"*taunt.mp3",
;38:	"*taunt1.mp3",
;39:	"*taunt2.mp3",
;40:	"*taunt3.mp3",
;41:	"*taunt4.mp3",
;42:	"*taunt5.mp3"
;43:};
;44:
;45:
;46:/*
;47:================
;48:CG_CustomSound
;49:
;50:================
;51:*/
;52:sfxHandle_t	CG_CustomSound( int clientNum, const char *soundName ) {
line 56
;53:	clientInfo_t *ci;
;54:	int			i;
;55:
;56:	if ( soundName[0] != '*' ) {
ADDRFP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 42
EQI4 $108
line 57
;57:		return trap_S_RegisterSound( soundName, qfalse );
ADDRFP4 4
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 8
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
RETI4
ADDRGP4 $107
JUMPV
LABELV $108
line 60
;58:	}
;59:
;60:	if ( clientNum < 0 || clientNum >= MAX_CLIENTS ) {
ADDRLP4 8
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
LTI4 $112
ADDRLP4 8
INDIRI4
CNSTI4 64
LTI4 $110
LABELV $112
line 61
;61:		clientNum = 0;
ADDRFP4 0
CNSTI4 0
ASGNI4
line 62
;62:	}
LABELV $110
line 63
;63:	ci = &cgs.clientinfo[ clientNum ];
ADDRLP4 4
CNSTI4 1740
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 cgs+40972
ADDP4
ASGNP4
line 65
;64:
;65:	for ( i = 0 ; i < MAX_CUSTOM_SOUNDS && cg_customSoundNames[i] ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $117
JUMPV
LABELV $114
line 66
;66:		if ( !strcmp( soundName, cg_customSoundNames[i] ) ) {
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg_customSoundNames
ADDP4
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
NEI4 $118
line 67
;67:			return ci->sounds[i];
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 1592
ADDP4
ADDP4
INDIRI4
RETI4
ADDRGP4 $107
JUMPV
LABELV $118
line 69
;68:		}
;69:	}
LABELV $115
line 65
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $117
ADDRLP4 0
INDIRI4
CNSTI4 36
GEI4 $120
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg_customSoundNames
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $114
LABELV $120
line 71
;70:
;71:	CG_Error( "Unknown custom sound: %s", soundName );
ADDRGP4 $121
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 72
;72:	return 0;
CNSTI4 0
RETI4
LABELV $107
endproc CG_CustomSound 16 8
proc CG_ParseAnimationFile 20084 12
line 93
;73:}
;74:
;75:
;76:
;77:/*
;78:=============================================================================
;79:
;80:CLIENT INFO
;81:
;82:=============================================================================
;83:*/
;84:
;85:/*
;86:======================
;87:CG_ParseAnimationFile
;88:
;89:Read a configuration file containing animation coutns and rates
;90:models/players/visor/animation.cfg, etc
;91:======================
;92:*/
;93:static qboolean	CG_ParseAnimationFile( const char *filename, clientInfo_t *ci ) {
line 104
;94:	char		*text_p, *prev;
;95:	int			len;
;96:	int			i;
;97:	char		*token;
;98:	float		fps;
;99:	int			skip;
;100:	char		text[20000];
;101:	fileHandle_t	f;
;102:	animation_t *animations;
;103:
;104:	animations = ci->animations;
ADDRLP4 8
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
ASGNP4
line 107
;105:
;106:	// load the file
;107:	len = trap_FS_FOpenFile( filename, &f, FS_READ );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 20032
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 20036
ADDRGP4 trap_FS_FOpenFile
CALLI4
ASGNI4
ADDRLP4 28
ADDRLP4 20036
INDIRI4
ASGNI4
line 108
;108:	if ( len <= 0 ) {
ADDRLP4 28
INDIRI4
CNSTI4 0
GTI4 $123
line 109
;109:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $122
JUMPV
LABELV $123
line 111
;110:	}
;111:	if ( len >= sizeof( text ) - 1 ) {
ADDRLP4 28
INDIRI4
CVIU4 4
CNSTU4 19999
LTU4 $125
line 112
;112:		CG_Printf( "File %s too long\n", filename );
ADDRGP4 $127
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 113
;113:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $122
JUMPV
LABELV $125
line 115
;114:	}
;115:	trap_FS_Read( text, len, f );
ADDRLP4 32
ARGP4
ADDRLP4 28
INDIRI4
ARGI4
ADDRLP4 20032
INDIRI4
ARGI4
ADDRGP4 trap_FS_Read
CALLV
pop
line 116
;116:	text[len] = 0;
ADDRLP4 28
INDIRI4
ADDRLP4 32
ADDP4
CNSTI1 0
ASGNI1
line 117
;117:	trap_FS_FCloseFile( f );
ADDRLP4 20032
INDIRI4
ARGI4
ADDRGP4 trap_FS_FCloseFile
CALLV
pop
line 120
;118:
;119:	// parse the text
;120:	text_p = text;
ADDRLP4 12
ADDRLP4 32
ASGNP4
line 121
;121:	skip = 0;	// quite the compiler warning
ADDRLP4 24
CNSTI4 0
ASGNI4
line 123
;122:
;123:	ci->footsteps = FOOTSTEP_NORMAL;
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
CNSTI4 0
ASGNI4
line 124
;124:	VectorClear( ci->headOffset );
ADDRLP4 20040
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 20044
CNSTF4 0
ASGNF4
ADDRLP4 20040
INDIRP4
CNSTI4 512
ADDP4
ADDRLP4 20044
INDIRF4
ASGNF4
ADDRLP4 20040
INDIRP4
CNSTI4 508
ADDP4
ADDRLP4 20044
INDIRF4
ASGNF4
ADDRLP4 20040
INDIRP4
CNSTI4 504
ADDP4
ADDRLP4 20044
INDIRF4
ASGNF4
line 125
;125:	ci->gender = GENDER_MALE;
ADDRFP4 4
INDIRP4
CNSTI4 520
ADDP4
CNSTI4 0
ASGNI4
line 126
;126:	ci->fixedlegs = qfalse;
ADDRFP4 4
INDIRP4
CNSTI4 496
ADDP4
CNSTI4 0
ASGNI4
line 127
;127:	ci->fixedtorso = qfalse;
ADDRFP4 4
INDIRP4
CNSTI4 500
ADDP4
CNSTI4 0
ASGNI4
ADDRGP4 $129
JUMPV
LABELV $128
line 130
;128:
;129:	// read optional parameters
;130:	while ( 1 ) {
line 131
;131:		prev = text_p;	// so we can unget
ADDRLP4 20
ADDRLP4 12
INDIRP4
ASGNP4
line 132
;132:		token = COM_Parse( &text_p );
ADDRLP4 12
ARGP4
ADDRLP4 20048
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20048
INDIRP4
ASGNP4
line 133
;133:		if ( !token ) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $131
line 134
;134:			break;
ADDRGP4 $130
JUMPV
LABELV $131
line 136
;135:		}
;136:		if ( !Q_stricmp( token, "footsteps" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $135
ARGP4
ADDRLP4 20052
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20052
INDIRI4
CNSTI4 0
NEI4 $133
line 137
;137:			token = COM_Parse( &text_p );
ADDRLP4 12
ARGP4
ADDRLP4 20056
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20056
INDIRP4
ASGNP4
line 138
;138:			if ( !token ) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $136
line 139
;139:				break;
ADDRGP4 $130
JUMPV
LABELV $136
line 141
;140:			}
;141:			if ( !Q_stricmp( token, "default" ) || !Q_stricmp( token, "normal" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $140
ARGP4
ADDRLP4 20060
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20060
INDIRI4
CNSTI4 0
EQI4 $142
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $141
ARGP4
ADDRLP4 20064
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20064
INDIRI4
CNSTI4 0
NEI4 $138
LABELV $142
line 142
;142:				ci->footsteps = FOOTSTEP_NORMAL;
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
CNSTI4 0
ASGNI4
line 143
;143:			} else if ( !Q_stricmp( token, "boot" ) ) {
ADDRGP4 $129
JUMPV
LABELV $138
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $145
ARGP4
ADDRLP4 20068
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20068
INDIRI4
CNSTI4 0
NEI4 $143
line 144
;144:				ci->footsteps = FOOTSTEP_BOOT;
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
CNSTI4 1
ASGNI4
line 145
;145:			} else if ( !Q_stricmp( token, "flesh" ) ) {
ADDRGP4 $129
JUMPV
LABELV $143
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $148
ARGP4
ADDRLP4 20072
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20072
INDIRI4
CNSTI4 0
NEI4 $146
line 146
;146:				ci->footsteps = FOOTSTEP_FLESH;
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
CNSTI4 2
ASGNI4
line 147
;147:			} else if ( !Q_stricmp( token, "mech" ) ) {
ADDRGP4 $129
JUMPV
LABELV $146
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $151
ARGP4
ADDRLP4 20076
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20076
INDIRI4
CNSTI4 0
NEI4 $149
line 148
;148:				ci->footsteps = FOOTSTEP_MECH;
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
CNSTI4 3
ASGNI4
line 149
;149:			} else if ( !Q_stricmp( token, "energy" ) ) {
ADDRGP4 $129
JUMPV
LABELV $149
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $154
ARGP4
ADDRLP4 20080
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20080
INDIRI4
CNSTI4 0
NEI4 $152
line 150
;150:				ci->footsteps = FOOTSTEP_ENERGY;
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
CNSTI4 4
ASGNI4
line 151
;151:			} else {
ADDRGP4 $129
JUMPV
LABELV $152
line 152
;152:				CG_Printf( "Bad footsteps parm in %s: %s Reverting to Fallback\n", filename, token );
ADDRGP4 $155
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 153
;153:				ci->footsteps = FOOTSTEP_NORMAL;
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
CNSTI4 0
ASGNI4
line 154
;154:			}
line 155
;155:			continue;
ADDRGP4 $129
JUMPV
LABELV $133
line 156
;156:		} else if ( !Q_stricmp( token, "headoffset" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $158
ARGP4
ADDRLP4 20056
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20056
INDIRI4
CNSTI4 0
NEI4 $156
line 157
;157:			for ( i = 0 ; i < 3 ; i++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $159
line 158
;158:				token = COM_Parse( &text_p );
ADDRLP4 12
ARGP4
ADDRLP4 20060
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20060
INDIRP4
ASGNP4
line 159
;159:				if ( !token ) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $163
line 160
;160:					break;
ADDRGP4 $129
JUMPV
LABELV $163
line 162
;161:				}
;162:				ci->headOffset[i] = atof( token );
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 20064
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
CNSTI4 504
ADDP4
ADDP4
ADDRLP4 20064
INDIRF4
ASGNF4
line 163
;163:			}
LABELV $160
line 157
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 3
LTI4 $159
line 164
;164:			continue;
ADDRGP4 $129
JUMPV
LABELV $156
line 165
;165:		} else if ( !Q_stricmp( token, "sex" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $167
ARGP4
ADDRLP4 20060
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20060
INDIRI4
CNSTI4 0
NEI4 $165
line 166
;166:			token = COM_Parse( &text_p );
ADDRLP4 12
ARGP4
ADDRLP4 20064
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20064
INDIRP4
ASGNP4
line 167
;167:			if ( !token ) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $168
line 168
;168:				break;
ADDRGP4 $130
JUMPV
LABELV $168
line 170
;169:			}
;170:			if ( token[0] == 'f' || token[0] == 'F' ) {
ADDRLP4 20068
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 20068
INDIRI4
CNSTI4 102
EQI4 $172
ADDRLP4 20068
INDIRI4
CNSTI4 70
NEI4 $170
LABELV $172
line 171
;171:				ci->gender = GENDER_FEMALE;
ADDRFP4 4
INDIRP4
CNSTI4 520
ADDP4
CNSTI4 1
ASGNI4
line 172
;172:			} else if ( token[0] == 'n' || token[0] == 'N' ) {
ADDRGP4 $129
JUMPV
LABELV $170
ADDRLP4 20072
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 20072
INDIRI4
CNSTI4 110
EQI4 $175
ADDRLP4 20072
INDIRI4
CNSTI4 78
NEI4 $173
LABELV $175
line 173
;173:				ci->gender = GENDER_NEUTER;
ADDRFP4 4
INDIRP4
CNSTI4 520
ADDP4
CNSTI4 2
ASGNI4
line 174
;174:			} else {
ADDRGP4 $129
JUMPV
LABELV $173
line 175
;175:				ci->gender = GENDER_MALE;
ADDRFP4 4
INDIRP4
CNSTI4 520
ADDP4
CNSTI4 0
ASGNI4
line 176
;176:			}
line 177
;177:			continue;
ADDRGP4 $129
JUMPV
LABELV $165
line 178
;178:		} else if ( !Q_stricmp( token, "fixedlegs" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $178
ARGP4
ADDRLP4 20064
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20064
INDIRI4
CNSTI4 0
NEI4 $176
line 179
;179:			ci->fixedlegs = qtrue;
ADDRFP4 4
INDIRP4
CNSTI4 496
ADDP4
CNSTI4 1
ASGNI4
line 180
;180:			continue;
ADDRGP4 $129
JUMPV
LABELV $176
line 181
;181:		} else if ( !Q_stricmp( token, "fixedtorso" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $181
ARGP4
ADDRLP4 20068
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20068
INDIRI4
CNSTI4 0
NEI4 $179
line 182
;182:			ci->fixedtorso = qtrue;
ADDRFP4 4
INDIRP4
CNSTI4 500
ADDP4
CNSTI4 1
ASGNI4
line 183
;183:			continue;
ADDRGP4 $129
JUMPV
LABELV $179
line 187
;184:		}
;185:
;186:		// if it is a number, start parsing animations
;187:		if ( token[0] >= '0' && token[0] <= '9' ) {
ADDRLP4 20072
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 20072
INDIRI4
CNSTI4 48
LTI4 $182
ADDRLP4 20072
INDIRI4
CNSTI4 57
GTI4 $182
line 188
;188:			text_p = prev;	// unget the token
ADDRLP4 12
ADDRLP4 20
INDIRP4
ASGNP4
line 189
;189:			break;
ADDRGP4 $130
JUMPV
LABELV $182
line 191
;190:		}
;191:		Com_Printf( "unknown token '%s' is %s\n", token, filename );
ADDRGP4 $184
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 Com_Printf
CALLV
pop
line 192
;192:	}
LABELV $129
line 130
ADDRGP4 $128
JUMPV
LABELV $130
line 195
;193:
;194:	// read information for each frame
;195:	for ( i = 0 ; i < MAX_ANIMATIONS ; i++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $185
line 197
;196:
;197:		token = COM_Parse( &text_p );
ADDRLP4 12
ARGP4
ADDRLP4 20048
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20048
INDIRP4
ASGNP4
line 198
;198:		if ( !*token ) {
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $189
line 199
;199:			if( i >= TORSO_GETFLAG && i <= TORSO_NEGATIVE ) {
ADDRLP4 4
INDIRI4
CNSTI4 25
LTI4 $187
ADDRLP4 4
INDIRI4
CNSTI4 30
GTI4 $187
line 200
;200:				animations[i].firstFrame = animations[TORSO_GESTURE].firstFrame;
CNSTI4 28
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8
INDIRP4
ADDP4
ADDRLP4 8
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
ASGNI4
line 201
;201:				animations[i].frameLerp = animations[TORSO_GESTURE].frameLerp;
CNSTI4 28
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8
INDIRP4
ADDP4
CNSTI4 12
ADDP4
ADDRLP4 8
INDIRP4
CNSTI4 180
ADDP4
INDIRI4
ASGNI4
line 202
;202:				animations[i].initialLerp = animations[TORSO_GESTURE].initialLerp;
CNSTI4 28
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8
INDIRP4
ADDP4
CNSTI4 16
ADDP4
ADDRLP4 8
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ASGNI4
line 203
;203:				animations[i].loopFrames = animations[TORSO_GESTURE].loopFrames;
CNSTI4 28
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8
INDIRP4
ADDP4
CNSTI4 8
ADDP4
ADDRLP4 8
INDIRP4
CNSTI4 176
ADDP4
INDIRI4
ASGNI4
line 204
;204:				animations[i].numFrames = animations[TORSO_GESTURE].numFrames;
CNSTI4 28
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8
INDIRP4
ADDP4
CNSTI4 4
ADDP4
ADDRLP4 8
INDIRP4
CNSTI4 172
ADDP4
INDIRI4
ASGNI4
line 205
;205:				animations[i].reversed = qfalse;
CNSTI4 28
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8
INDIRP4
ADDP4
CNSTI4 20
ADDP4
CNSTI4 0
ASGNI4
line 206
;206:				animations[i].flipflop = qfalse;
CNSTI4 28
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8
INDIRP4
ADDP4
CNSTI4 24
ADDP4
CNSTI4 0
ASGNI4
line 207
;207:				continue;
ADDRGP4 $186
JUMPV
line 209
;208:			}
;209:			break;
LABELV $189
line 211
;210:		}
;211:		animations[i].firstFrame = atoi( token );
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 20052
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 28
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8
INDIRP4
ADDP4
ADDRLP4 20052
INDIRI4
ASGNI4
line 213
;212:		// leg only frames are adjusted to not count the upper body only frames
;213:		if ( i == LEGS_WALKCR ) {
ADDRLP4 4
INDIRI4
CNSTI4 13
NEI4 $193
line 214
;214:			skip = animations[LEGS_WALKCR].firstFrame - animations[TORSO_GESTURE].firstFrame;
ADDRLP4 24
ADDRLP4 8
INDIRP4
CNSTI4 364
ADDP4
INDIRI4
ADDRLP4 8
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
SUBI4
ASGNI4
line 215
;215:		}
LABELV $193
line 216
;216:		if ( i >= LEGS_WALKCR && i<TORSO_GETFLAG) {
ADDRLP4 4
INDIRI4
CNSTI4 13
LTI4 $195
ADDRLP4 4
INDIRI4
CNSTI4 25
GEI4 $195
line 217
;217:			animations[i].firstFrame -= skip;
ADDRLP4 20060
CNSTI4 28
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8
INDIRP4
ADDP4
ASGNP4
ADDRLP4 20060
INDIRP4
ADDRLP4 20060
INDIRP4
INDIRI4
ADDRLP4 24
INDIRI4
SUBI4
ASGNI4
line 218
;218:		}
LABELV $195
line 220
;219:
;220:		token = COM_Parse( &text_p );
ADDRLP4 12
ARGP4
ADDRLP4 20060
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20060
INDIRP4
ASGNP4
line 221
;221:		if ( !*token ) {
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $197
line 222
;222:			break;
ADDRGP4 $187
JUMPV
LABELV $197
line 224
;223:		}
;224:		animations[i].numFrames = atoi( token );
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 20064
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 28
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8
INDIRP4
ADDP4
CNSTI4 4
ADDP4
ADDRLP4 20064
INDIRI4
ASGNI4
line 226
;225:
;226:		animations[i].reversed = qfalse;
CNSTI4 28
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8
INDIRP4
ADDP4
CNSTI4 20
ADDP4
CNSTI4 0
ASGNI4
line 227
;227:		animations[i].flipflop = qfalse;
CNSTI4 28
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8
INDIRP4
ADDP4
CNSTI4 24
ADDP4
CNSTI4 0
ASGNI4
line 229
;228:		// if numFrames is negative the animation is reversed
;229:		if (animations[i].numFrames < 0) {
CNSTI4 28
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8
INDIRP4
ADDP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 0
GEI4 $199
line 230
;230:			animations[i].numFrames = -animations[i].numFrames;
ADDRLP4 20068
CNSTI4 28
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8
INDIRP4
ADDP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 20068
INDIRP4
ADDRLP4 20068
INDIRP4
INDIRI4
NEGI4
ASGNI4
line 231
;231:			animations[i].reversed = qtrue;
CNSTI4 28
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8
INDIRP4
ADDP4
CNSTI4 20
ADDP4
CNSTI4 1
ASGNI4
line 232
;232:		}
LABELV $199
line 234
;233:
;234:		token = COM_Parse( &text_p );
ADDRLP4 12
ARGP4
ADDRLP4 20068
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20068
INDIRP4
ASGNP4
line 235
;235:		if ( !*token ) {
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $201
line 236
;236:			break;
ADDRGP4 $187
JUMPV
LABELV $201
line 238
;237:		}
;238:		animations[i].loopFrames = atoi( token );
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 20072
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 28
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8
INDIRP4
ADDP4
CNSTI4 8
ADDP4
ADDRLP4 20072
INDIRI4
ASGNI4
line 240
;239:
;240:		token = COM_Parse( &text_p );
ADDRLP4 12
ARGP4
ADDRLP4 20076
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20076
INDIRP4
ASGNP4
line 241
;241:		if ( !*token ) {
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $203
line 242
;242:			break;
ADDRGP4 $187
JUMPV
LABELV $203
line 244
;243:		}
;244:		fps = atof( token );
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 20080
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 16
ADDRLP4 20080
INDIRF4
ASGNF4
line 245
;245:		if ( fps == 0 ) {
ADDRLP4 16
INDIRF4
CNSTF4 0
NEF4 $205
line 246
;246:			fps = 1;
ADDRLP4 16
CNSTF4 1065353216
ASGNF4
line 247
;247:		}
LABELV $205
line 248
;248:		animations[i].frameLerp = 1000 / fps;
CNSTI4 28
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8
INDIRP4
ADDP4
CNSTI4 12
ADDP4
CNSTF4 1148846080
ADDRLP4 16
INDIRF4
DIVF4
CVFI4 4
ASGNI4
line 249
;249:		animations[i].initialLerp = 1000 / fps;
CNSTI4 28
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8
INDIRP4
ADDP4
CNSTI4 16
ADDP4
CNSTF4 1148846080
ADDRLP4 16
INDIRF4
DIVF4
CVFI4 4
ASGNI4
line 250
;250:	}
LABELV $186
line 195
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 31
LTI4 $185
LABELV $187
line 252
;251:
;252:	if ( i != MAX_ANIMATIONS ) {
ADDRLP4 4
INDIRI4
CNSTI4 31
EQI4 $207
line 253
;253:		CG_Printf( "Error parsing animation file: %s", filename );
ADDRGP4 $209
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 254
;254:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $122
JUMPV
LABELV $207
line 258
;255:	}
;256:
;257:	// crouch backward animation
;258:	memcpy(&animations[LEGS_BACKCR], &animations[LEGS_WALKCR], sizeof(animation_t));
ADDRLP4 8
INDIRP4
CNSTI4 896
ADDP4
ARGP4
ADDRLP4 8
INDIRP4
CNSTI4 364
ADDP4
ARGP4
CNSTI4 28
ARGI4
ADDRGP4 memcpy
CALLP4
pop
line 259
;259:	animations[LEGS_BACKCR].reversed = qtrue;
ADDRLP4 8
INDIRP4
CNSTI4 916
ADDP4
CNSTI4 1
ASGNI4
line 261
;260:	// walk backward animation
;261:	memcpy(&animations[LEGS_BACKWALK], &animations[LEGS_WALK], sizeof(animation_t));
ADDRLP4 8
INDIRP4
CNSTI4 924
ADDP4
ARGP4
ADDRLP4 8
INDIRP4
CNSTI4 392
ADDP4
ARGP4
CNSTI4 28
ARGI4
ADDRGP4 memcpy
CALLP4
pop
line 262
;262:	animations[LEGS_BACKWALK].reversed = qtrue;
ADDRLP4 8
INDIRP4
CNSTI4 944
ADDP4
CNSTI4 1
ASGNI4
line 264
;263:	// flag moving fast
;264:	animations[FLAG_RUN].firstFrame = 0;
ADDRLP4 8
INDIRP4
CNSTI4 952
ADDP4
CNSTI4 0
ASGNI4
line 265
;265:	animations[FLAG_RUN].numFrames = 16;
ADDRLP4 8
INDIRP4
CNSTI4 956
ADDP4
CNSTI4 16
ASGNI4
line 266
;266:	animations[FLAG_RUN].loopFrames = 16;
ADDRLP4 8
INDIRP4
CNSTI4 960
ADDP4
CNSTI4 16
ASGNI4
line 267
;267:	animations[FLAG_RUN].frameLerp = 1000 / 15;
ADDRLP4 8
INDIRP4
CNSTI4 964
ADDP4
CNSTI4 66
ASGNI4
line 268
;268:	animations[FLAG_RUN].initialLerp = 1000 / 15;
ADDRLP4 8
INDIRP4
CNSTI4 968
ADDP4
CNSTI4 66
ASGNI4
line 269
;269:	animations[FLAG_RUN].reversed = qfalse;
ADDRLP4 8
INDIRP4
CNSTI4 972
ADDP4
CNSTI4 0
ASGNI4
line 271
;270:	// flag not moving or moving slowly
;271:	animations[FLAG_STAND].firstFrame = 16;
ADDRLP4 8
INDIRP4
CNSTI4 980
ADDP4
CNSTI4 16
ASGNI4
line 272
;272:	animations[FLAG_STAND].numFrames = 5;
ADDRLP4 8
INDIRP4
CNSTI4 984
ADDP4
CNSTI4 5
ASGNI4
line 273
;273:	animations[FLAG_STAND].loopFrames = 0;
ADDRLP4 8
INDIRP4
CNSTI4 988
ADDP4
CNSTI4 0
ASGNI4
line 274
;274:	animations[FLAG_STAND].frameLerp = 1000 / 20;
ADDRLP4 8
INDIRP4
CNSTI4 992
ADDP4
CNSTI4 50
ASGNI4
line 275
;275:	animations[FLAG_STAND].initialLerp = 1000 / 20;
ADDRLP4 8
INDIRP4
CNSTI4 996
ADDP4
CNSTI4 50
ASGNI4
line 276
;276:	animations[FLAG_STAND].reversed = qfalse;
ADDRLP4 8
INDIRP4
CNSTI4 1000
ADDP4
CNSTI4 0
ASGNI4
line 278
;277:	// flag speeding up
;278:	animations[FLAG_STAND2RUN].firstFrame = 16;
ADDRLP4 8
INDIRP4
CNSTI4 1008
ADDP4
CNSTI4 16
ASGNI4
line 279
;279:	animations[FLAG_STAND2RUN].numFrames = 5;
ADDRLP4 8
INDIRP4
CNSTI4 1012
ADDP4
CNSTI4 5
ASGNI4
line 280
;280:	animations[FLAG_STAND2RUN].loopFrames = 1;
ADDRLP4 8
INDIRP4
CNSTI4 1016
ADDP4
CNSTI4 1
ASGNI4
line 281
;281:	animations[FLAG_STAND2RUN].frameLerp = 1000 / 15;
ADDRLP4 8
INDIRP4
CNSTI4 1020
ADDP4
CNSTI4 66
ASGNI4
line 282
;282:	animations[FLAG_STAND2RUN].initialLerp = 1000 / 15;
ADDRLP4 8
INDIRP4
CNSTI4 1024
ADDP4
CNSTI4 66
ASGNI4
line 283
;283:	animations[FLAG_STAND2RUN].reversed = qtrue;
ADDRLP4 8
INDIRP4
CNSTI4 1028
ADDP4
CNSTI4 1
ASGNI4
line 293
;284:	//
;285:	// new anims changes
;286:	//
;287://	animations[TORSO_GETFLAG].flipflop = qtrue;
;288://	animations[TORSO_GUARDBASE].flipflop = qtrue;
;289://	animations[TORSO_PATROL].flipflop = qtrue;
;290://	animations[TORSO_AFFIRMATIVE].flipflop = qtrue;
;291://	animations[TORSO_NEGATIVE].flipflop = qtrue;
;292:	//
;293:	return qtrue;
CNSTI4 1
RETI4
LABELV $122
endproc CG_ParseAnimationFile 20084 12
proc CG_FileExists 8 12
line 301
;294:}
;295:
;296:/*
;297:==========================
;298:CG_FileExists
;299:==========================
;300:*/
;301:static qboolean	CG_FileExists(const char *filename) {
line 304
;302:	int len;
;303:
;304:	len = trap_FS_FOpenFile( filename, 0, FS_READ );
ADDRFP4 0
INDIRP4
ARGP4
CNSTP4 0
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 4
ADDRGP4 trap_FS_FOpenFile
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 4
INDIRI4
ASGNI4
line 305
;305:	if (len>0) {
ADDRLP4 0
INDIRI4
CNSTI4 0
LEI4 $211
line 306
;306:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $210
JUMPV
LABELV $211
line 308
;307:	}
;308:	return qfalse;
CNSTI4 0
RETI4
LABELV $210
endproc CG_FileExists 8 12
proc CG_FindClientModelFile 48 40
line 316
;309:}
;310:
;311:/*
;312:==========================
;313:CG_FindClientModelFile
;314:==========================
;315:*/
;316:static qboolean	CG_FindClientModelFile( char *filename, int length, clientInfo_t *ci, const char *teamName, const char *modelName, const char *skinName, const char *base, const char *ext ) {
line 320
;317:	char *team, *charactersFolder;
;318:	int i;
;319:
;320:	ci->efmodel = qfalse;
ADDRFP4 8
INDIRP4
CNSTI4 524
ADDP4
CNSTI4 0
ASGNI4
line 321
;321:	if ( cgs.gametype >= GT_TEAM ) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
LTI4 $214
line 322
;322:		switch ( ci->team ) {
ADDRLP4 12
ADDRFP4 8
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 2
EQI4 $220
ADDRGP4 $217
JUMPV
LABELV $220
line 323
;323:			case TEAM_BLUE: {
line 324
;324:				team = "blue";
ADDRLP4 8
ADDRGP4 $221
ASGNP4
line 325
;325:				break;
ADDRGP4 $215
JUMPV
LABELV $217
line 327
;326:			}
;327:			default: {
line 328
;328:				team = "red";
ADDRLP4 8
ADDRGP4 $222
ASGNP4
line 329
;329:				break;
line 332
;330:			}
;331:		}
;332:	}
ADDRGP4 $215
JUMPV
LABELV $214
line 333
;333:	else {
line 334
;334:		team = "default";
ADDRLP4 8
ADDRGP4 $140
ASGNP4
line 335
;335:	}
LABELV $215
line 336
;336:	charactersFolder = "";
ADDRLP4 4
ADDRGP4 $223
ASGNP4
ADDRGP4 $225
JUMPV
LABELV $224
line 337
;337:	while(1) {
line 338
;338:		for ( i = 0; i < 2; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $227
line 339
;339:			if ( i == 0 && teamName && *teamName ) {
ADDRLP4 12
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 12
INDIRI4
NEI4 $231
ADDRLP4 16
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $231
ADDRLP4 16
INDIRP4
INDIRI1
CVII4 1
ADDRLP4 12
INDIRI4
EQI4 $231
line 341
;340:				//								"models/players/characters/james/stroggs/lower_lily_red.skin"
;341:				Com_sprintf( filename, length, "models/players/%s%s/%s%s_%s_%s.%s", charactersFolder, modelName, teamName, base, skinName, team, ext );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $233
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRFP4 24
INDIRP4
ARGP4
ADDRFP4 20
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRFP4 28
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 344
;342:				
;343:				
;344:			}
ADDRGP4 $232
JUMPV
LABELV $231
line 345
;345:			else {
line 347
;346:				//								"models/players/characters/james/lower_lily_red.skin"
;347:				Com_sprintf( filename, length, "models/players/%s%s/%s_%s_%s.%s", charactersFolder, modelName, base, skinName, team, ext );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $234
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 24
INDIRP4
ARGP4
ADDRFP4 20
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRFP4 28
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 348
;348:			}
LABELV $232
line 349
;349:			if ( CG_FileExists( filename ) ) {
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 CG_FileExists
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
EQI4 $235
line 350
;350:				ci->efmodel = qfalse;
ADDRFP4 8
INDIRP4
CNSTI4 524
ADDP4
CNSTI4 0
ASGNI4
line 351
;351:				return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $213
JUMPV
LABELV $235
line 354
;352:			}
;353:			// MDR Format
;354:			if ( i == 0 && teamName && *teamName ) {
ADDRLP4 24
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 24
INDIRI4
NEI4 $237
ADDRLP4 28
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $237
ADDRLP4 28
INDIRP4
INDIRI1
CVII4 1
ADDRLP4 24
INDIRI4
EQI4 $237
line 356
;355:				//								"models/players/characters/james/stroggs/lower_lily_red.skin"
;356:				Com_sprintf( filename, length, "models/players2/%s%s/%s%s_%s_%s.%s", charactersFolder, modelName, teamName, base, skinName, team, ext );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $239
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRFP4 24
INDIRP4
ARGP4
ADDRFP4 20
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRFP4 28
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 357
;357:			}
ADDRGP4 $238
JUMPV
LABELV $237
line 358
;358:			else {
line 360
;359:				//								"models/players/characters/james/lower_lily_red.skin"
;360:				Com_sprintf( filename, length, "models/players2/%s%s/%s_%s_%s.%s", charactersFolder, modelName, base, skinName, team, ext );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $240
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 24
INDIRP4
ARGP4
ADDRFP4 20
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRFP4 28
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 361
;361:			}
LABELV $238
line 362
;362:			if ( CG_FileExists( filename ) ) {
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 32
ADDRGP4 CG_FileExists
CALLI4
ASGNI4
ADDRLP4 32
INDIRI4
CNSTI4 0
EQI4 $241
line 363
;363:				ci->efmodel = qtrue;
ADDRFP4 8
INDIRP4
CNSTI4 524
ADDP4
CNSTI4 1
ASGNI4
line 364
;364:				return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $213
JUMPV
LABELV $241
line 369
;365:			}
;366:
;367:
;368:
;369:			if ( cgs.gametype >= GT_TEAM ) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
LTI4 $243
line 370
;370:				if ( i == 0 && teamName && *teamName ) {
ADDRLP4 36
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 36
INDIRI4
NEI4 $246
ADDRLP4 40
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $246
ADDRLP4 40
INDIRP4
INDIRI1
CVII4 1
ADDRLP4 36
INDIRI4
EQI4 $246
line 372
;371:					//								"models/players/characters/james/stroggs/lower_red.skin"
;372:					Com_sprintf( filename, length, "models/players/%s%s/%s%s_%s.%s", charactersFolder, modelName, teamName, base, team, ext );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $248
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRFP4 24
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRFP4 28
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 373
;373:				}
ADDRGP4 $244
JUMPV
LABELV $246
line 374
;374:				else {
line 376
;375:					//								"models/players/characters/james/lower_red.skin"
;376:					Com_sprintf( filename, length, "models/players/%s%s/%s_%s.%s", charactersFolder, modelName, base, team, ext );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $249
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 24
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRFP4 28
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 377
;377:				}
line 378
;378:			}
ADDRGP4 $244
JUMPV
LABELV $243
line 379
;379:			else {
line 380
;380:				if ( i == 0 && teamName && *teamName ) {
ADDRLP4 36
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 36
INDIRI4
NEI4 $250
ADDRLP4 40
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $250
ADDRLP4 40
INDIRP4
INDIRI1
CVII4 1
ADDRLP4 36
INDIRI4
EQI4 $250
line 382
;381:					//								"models/players/characters/james/stroggs/lower_lily.skin"
;382:					Com_sprintf( filename, length, "models/players/%s%s/%s%s_%s.%s", charactersFolder, modelName, teamName, base, skinName, ext );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $248
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRFP4 24
INDIRP4
ARGP4
ADDRFP4 20
INDIRP4
ARGP4
ADDRFP4 28
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 383
;383:				}
ADDRGP4 $251
JUMPV
LABELV $250
line 384
;384:				else {
line 386
;385:					//								"models/players/characters/james/lower_lily.skin"
;386:					Com_sprintf( filename, length, "models/players/%s%s/%s_%s.%s", charactersFolder, modelName, base, skinName, ext );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $249
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 24
INDIRP4
ARGP4
ADDRFP4 20
INDIRP4
ARGP4
ADDRFP4 28
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 387
;387:				}
LABELV $251
line 388
;388:			}
LABELV $244
line 389
;389:			if ( CG_FileExists( filename ) ) {
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 36
ADDRGP4 CG_FileExists
CALLI4
ASGNI4
ADDRLP4 36
INDIRI4
CNSTI4 0
EQI4 $252
line 390
;390:				ci->efmodel = qfalse;
ADDRFP4 8
INDIRP4
CNSTI4 524
ADDP4
CNSTI4 0
ASGNI4
line 391
;391:				return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $213
JUMPV
LABELV $252
line 397
;392:
;393:			}
;394:
;395:
;396:			// Same thing MDR format thoguh
;397:			if ( cgs.gametype >= GT_TEAM ) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
LTI4 $254
line 398
;398:				if ( i == 0 && teamName && *teamName ) {
ADDRLP4 40
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 40
INDIRI4
NEI4 $257
ADDRLP4 44
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $257
ADDRLP4 44
INDIRP4
INDIRI1
CVII4 1
ADDRLP4 40
INDIRI4
EQI4 $257
line 400
;399:					//								"models/players/characters/james/stroggs/lower_red.skin"
;400:					Com_sprintf( filename, length, "models/players2/%s%s/%s%s_%s.%s", charactersFolder, modelName, teamName, base, team, ext );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $259
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRFP4 24
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRFP4 28
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 401
;401:				}
ADDRGP4 $255
JUMPV
LABELV $257
line 402
;402:				else {
line 404
;403:					//								"models/players/characters/james/lower_red.skin"
;404:					Com_sprintf( filename, length, "models/players2/%s%s/%s_%s.%s", charactersFolder, modelName, base, team, ext );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $260
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 24
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRFP4 28
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 405
;405:				}
line 406
;406:			}
ADDRGP4 $255
JUMPV
LABELV $254
line 407
;407:			else {
line 408
;408:				if ( i == 0 && teamName && *teamName ) {
ADDRLP4 40
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 40
INDIRI4
NEI4 $261
ADDRLP4 44
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $261
ADDRLP4 44
INDIRP4
INDIRI1
CVII4 1
ADDRLP4 40
INDIRI4
EQI4 $261
line 410
;409:					//								"models/players/characters/james/stroggs/lower_lily.skin"
;410:					Com_sprintf( filename, length, "models/players2/%s%s/%s%s_%s.%s", charactersFolder, modelName, teamName, base, skinName, ext );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $259
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRFP4 24
INDIRP4
ARGP4
ADDRFP4 20
INDIRP4
ARGP4
ADDRFP4 28
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 411
;411:				}
ADDRGP4 $262
JUMPV
LABELV $261
line 412
;412:				else {
line 414
;413:					//								"models/players/characters/james/lower_lily.skin"
;414:					Com_sprintf( filename, length, "models/players2/%s%s/%s_%s.%s", charactersFolder, modelName, base, skinName, ext );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $260
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 24
INDIRP4
ARGP4
ADDRFP4 20
INDIRP4
ARGP4
ADDRFP4 28
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 415
;415:				}
LABELV $262
line 416
;416:			}
LABELV $255
line 417
;417:			if ( CG_FileExists( filename ) ) {
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 40
ADDRGP4 CG_FileExists
CALLI4
ASGNI4
ADDRLP4 40
INDIRI4
CNSTI4 0
EQI4 $263
line 418
;418:				ci->efmodel = qtrue;
ADDRFP4 8
INDIRP4
CNSTI4 524
ADDP4
CNSTI4 1
ASGNI4
line 419
;419:				return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $213
JUMPV
LABELV $263
line 425
;420:			}
;421:
;422:
;423:
;424:
;425:			if ( !teamName || !*teamName ) {
ADDRLP4 44
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $267
ADDRLP4 44
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $265
LABELV $267
line 426
;426:				break;
ADDRGP4 $229
JUMPV
LABELV $265
line 428
;427:			}
;428:		}
LABELV $228
line 338
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LTI4 $227
LABELV $229
line 430
;429:		// if tried the heads folder first
;430:		if ( charactersFolder[0] ) {
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $268
line 431
;431:			break;
ADDRGP4 $226
JUMPV
LABELV $268
line 433
;432:		}
;433:		charactersFolder = "characters/";
ADDRLP4 4
ADDRGP4 $270
ASGNP4
line 434
;434:	}
LABELV $225
line 337
ADDRGP4 $224
JUMPV
LABELV $226
line 436
;435:
;436:	return qfalse;
CNSTI4 0
RETI4
LABELV $213
endproc CG_FindClientModelFile 48 40
proc CG_FindClientHeadFile 48 40
line 444
;437:}
;438:
;439:/*
;440:==========================
;441:CG_FindClientHeadFile
;442:==========================
;443:*/
;444:static qboolean	CG_FindClientHeadFile( char *filename, int length, clientInfo_t *ci, const char *teamName, const char *headModelName, const char *headSkinName, const char *base, const char *ext ) {
line 448
;445:	char *team, *headsFolder;
;446:	int i;
;447:
;448:	if ( cgs.gametype >= GT_TEAM ) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
LTI4 $272
line 449
;449:		switch ( ci->team ) {
ADDRLP4 12
ADDRFP4 8
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 2
EQI4 $278
ADDRGP4 $275
JUMPV
LABELV $278
line 450
;450:			case TEAM_BLUE: {
line 451
;451:				team = "blue";
ADDRLP4 8
ADDRGP4 $221
ASGNP4
line 452
;452:				break;
ADDRGP4 $273
JUMPV
LABELV $275
line 454
;453:			}
;454:			default: {
line 455
;455:				team = "red";
ADDRLP4 8
ADDRGP4 $222
ASGNP4
line 456
;456:				break;
line 459
;457:			}
;458:		}
;459:	}
ADDRGP4 $273
JUMPV
LABELV $272
line 460
;460:	else {
line 461
;461:		team = "default";
ADDRLP4 8
ADDRGP4 $140
ASGNP4
line 462
;462:	}
LABELV $273
line 464
;463:
;464:	if ( headModelName[0] == '*' ) {
ADDRFP4 16
INDIRP4
INDIRI1
CVII4 1
CNSTI4 42
NEI4 $279
line 465
;465:		headsFolder = "heads/";
ADDRLP4 4
ADDRGP4 $281
ASGNP4
line 466
;466:		headModelName++;
ADDRFP4 16
ADDRFP4 16
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 467
;467:	}
ADDRGP4 $283
JUMPV
LABELV $279
line 468
;468:	else {
line 469
;469:		headsFolder = "";
ADDRLP4 4
ADDRGP4 $223
ASGNP4
line 470
;470:	}
ADDRGP4 $283
JUMPV
LABELV $282
line 471
;471:	while(1) {
line 472
;472:		for ( i = 0; i < 2; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $285
line 473
;473:			if ( i == 0 && teamName && *teamName ) {
ADDRLP4 12
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 12
INDIRI4
NEI4 $289
ADDRLP4 16
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $289
ADDRLP4 16
INDIRP4
INDIRI1
CVII4 1
ADDRLP4 12
INDIRI4
EQI4 $289
line 474
;474:				Com_sprintf( filename, length, "models/players/%s%s/%s/%s%s_%s.%s", headsFolder, headModelName, headSkinName, teamName, base, team, ext );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $291
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 20
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRFP4 24
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRFP4 28
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 475
;475:			}
ADDRGP4 $290
JUMPV
LABELV $289
line 476
;476:			else {
line 477
;477:				Com_sprintf( filename, length, "models/players/%s%s/%s/%s_%s.%s", headsFolder, headModelName, headSkinName, base, team, ext );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $292
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 20
INDIRP4
ARGP4
ADDRFP4 24
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRFP4 28
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 478
;478:			}
LABELV $290
line 479
;479:			if ( CG_FileExists( filename ) ) {
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 CG_FileExists
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
EQI4 $293
line 480
;480:				return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $271
JUMPV
LABELV $293
line 484
;481:			}
;482:			
;483:			// Try EF Format
;484:			if ( i == 0 && teamName && *teamName ) {
ADDRLP4 24
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 24
INDIRI4
NEI4 $295
ADDRLP4 28
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $295
ADDRLP4 28
INDIRP4
INDIRI1
CVII4 1
ADDRLP4 24
INDIRI4
EQI4 $295
line 485
;485:				Com_sprintf( filename, length, "models/players2/%s%s/%s/%s%s_%s.%s", headsFolder, headModelName, headSkinName, teamName, base, team, ext );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $297
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 20
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRFP4 24
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRFP4 28
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 486
;486:			}
ADDRGP4 $296
JUMPV
LABELV $295
line 487
;487:			else {
line 488
;488:				Com_sprintf( filename, length, "models/players2/%s%s/%s/%s_%s.%s", headsFolder, headModelName, headSkinName, base, team, ext );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $298
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 20
INDIRP4
ARGP4
ADDRFP4 24
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRFP4 28
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 489
;489:			}
LABELV $296
line 490
;490:			if ( CG_FileExists( filename ) ) {
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 32
ADDRGP4 CG_FileExists
CALLI4
ASGNI4
ADDRLP4 32
INDIRI4
CNSTI4 0
EQI4 $299
line 491
;491:				return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $271
JUMPV
LABELV $299
line 495
;492:			}
;493:
;494:			// q3 format
;495:			if ( cgs.gametype >= GT_TEAM ) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
LTI4 $301
line 496
;496:				if ( i == 0 &&  teamName && *teamName ) {
ADDRLP4 36
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 36
INDIRI4
NEI4 $304
ADDRLP4 40
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $304
ADDRLP4 40
INDIRP4
INDIRI1
CVII4 1
ADDRLP4 36
INDIRI4
EQI4 $304
line 497
;497:					Com_sprintf( filename, length, "models/players/%s%s/%s%s_%s.%s", headsFolder, headModelName, teamName, base, team, ext );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $248
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRFP4 24
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRFP4 28
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 498
;498:				}
ADDRGP4 $302
JUMPV
LABELV $304
line 499
;499:				else {
line 500
;500:					Com_sprintf( filename, length, "models/players/%s%s/%s_%s.%s", headsFolder, headModelName, base, team, ext );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $249
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 24
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRFP4 28
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 501
;501:				}
line 502
;502:			}
ADDRGP4 $302
JUMPV
LABELV $301
line 503
;503:			else {
line 504
;504:				if ( i == 0 && teamName && *teamName ) {
ADDRLP4 36
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 36
INDIRI4
NEI4 $306
ADDRLP4 40
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $306
ADDRLP4 40
INDIRP4
INDIRI1
CVII4 1
ADDRLP4 36
INDIRI4
EQI4 $306
line 505
;505:					Com_sprintf( filename, length, "models/players/%s%s/%s%s_%s.%s", headsFolder, headModelName, teamName, base, headSkinName, ext );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $248
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRFP4 24
INDIRP4
ARGP4
ADDRFP4 20
INDIRP4
ARGP4
ADDRFP4 28
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 506
;506:				}
ADDRGP4 $307
JUMPV
LABELV $306
line 507
;507:				else {
line 508
;508:					Com_sprintf( filename, length, "models/players/%s%s/%s_%s.%s", headsFolder, headModelName, base, headSkinName, ext );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $249
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 24
INDIRP4
ARGP4
ADDRFP4 20
INDIRP4
ARGP4
ADDRFP4 28
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 509
;509:				}
LABELV $307
line 510
;510:			}
LABELV $302
line 512
;511:
;512:			if ( CG_FileExists( filename ) ) {
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 36
ADDRGP4 CG_FileExists
CALLI4
ASGNI4
ADDRLP4 36
INDIRI4
CNSTI4 0
EQI4 $308
line 513
;513:				return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $271
JUMPV
LABELV $308
line 517
;514:			} 
;515:
;516:			// EF Format
;517:			if ( cgs.gametype >= GT_TEAM ) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
LTI4 $310
line 518
;518:				if ( i == 0 &&  teamName && *teamName ) {
ADDRLP4 40
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 40
INDIRI4
NEI4 $313
ADDRLP4 44
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $313
ADDRLP4 44
INDIRP4
INDIRI1
CVII4 1
ADDRLP4 40
INDIRI4
EQI4 $313
line 519
;519:					Com_sprintf( filename, length, "models/players2/%s%s/%s%s_%s.%s", headsFolder, headModelName, teamName, base, team, ext );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $259
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRFP4 24
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRFP4 28
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 520
;520:				}
ADDRGP4 $311
JUMPV
LABELV $313
line 521
;521:				else {
line 522
;522:					Com_sprintf( filename, length, "models/players2/%s%s/%s_%s.%s", headsFolder, headModelName, base, team, ext );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $260
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 24
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRFP4 28
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 523
;523:				}
line 524
;524:			}
ADDRGP4 $311
JUMPV
LABELV $310
line 525
;525:			else {
line 526
;526:				if ( i == 0 && teamName && *teamName ) {
ADDRLP4 40
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 40
INDIRI4
NEI4 $315
ADDRLP4 44
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $315
ADDRLP4 44
INDIRP4
INDIRI1
CVII4 1
ADDRLP4 40
INDIRI4
EQI4 $315
line 527
;527:					Com_sprintf( filename, length, "models/players2/%s%s/%s%s_%s.%s", headsFolder, headModelName, teamName, base, headSkinName, ext );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $259
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRFP4 24
INDIRP4
ARGP4
ADDRFP4 20
INDIRP4
ARGP4
ADDRFP4 28
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 528
;528:				}
ADDRGP4 $316
JUMPV
LABELV $315
line 529
;529:				else {
line 530
;530:					Com_sprintf( filename, length, "models/players2/%s%s/%s_%s.%s", headsFolder, headModelName, base, headSkinName, ext );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $260
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 24
INDIRP4
ARGP4
ADDRFP4 20
INDIRP4
ARGP4
ADDRFP4 28
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 531
;531:				}
LABELV $316
line 532
;532:			}
LABELV $311
line 534
;533:
;534:			if ( CG_FileExists( filename ) ) {
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 40
ADDRGP4 CG_FileExists
CALLI4
ASGNI4
ADDRLP4 40
INDIRI4
CNSTI4 0
EQI4 $317
line 535
;535:				return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $271
JUMPV
LABELV $317
line 540
;536:			} 
;537:
;538:
;539:
;540:			if ( !teamName || !*teamName ) {
ADDRLP4 44
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $321
ADDRLP4 44
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $319
LABELV $321
line 541
;541:				break;
ADDRGP4 $287
JUMPV
LABELV $319
line 543
;542:			}
;543:		}
LABELV $286
line 472
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LTI4 $285
LABELV $287
line 545
;544:		// if tried the heads folder first
;545:		if ( headsFolder[0] ) {
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $322
line 546
;546:			break;
ADDRGP4 $284
JUMPV
LABELV $322
line 548
;547:		}
;548:		headsFolder = "heads/";
ADDRLP4 4
ADDRGP4 $281
ASGNP4
line 549
;549:	}
LABELV $283
line 471
ADDRGP4 $282
JUMPV
LABELV $284
line 551
;550:
;551:	return qfalse;
CNSTI4 0
RETI4
LABELV $271
endproc CG_FindClientHeadFile 48 40
proc CG_RegisterClientSkin 84 32
line 559
;552:}
;553:
;554:/*
;555:==========================
;556:CG_RegisterClientSkin
;557:==========================
;558:*/
;559:static qboolean	CG_RegisterClientSkin( clientInfo_t *ci, const char *teamName, const char *modelName, const char *skinName, const char *headModelName, const char *headSkinName ) {
line 584
;560:	char filename[MAX_QPATH];
;561:
;562:	/*
;563:	Com_sprintf( filename, sizeof( filename ), "models/players/%s/%slower_%s.skin", modelName, teamName, skinName );
;564:	ci->legsSkin = trap_R_RegisterSkin( filename );
;565:	if (!ci->legsSkin) {
;566:		Com_sprintf( filename, sizeof( filename ), "models/players/characters/%s/%slower_%s.skin", modelName, teamName, skinName );
;567:		ci->legsSkin = trap_R_RegisterSkin( filename );
;568:		if (!ci->legsSkin) {
;569:			Com_Printf( "Leg skin load failure: %s\n", filename );
;570:		}
;571:	}
;572:
;573:
;574:	Com_sprintf( filename, sizeof( filename ), "models/players/%s/%supper_%s.skin", modelName, teamName, skinName );
;575:	ci->torsoSkin = trap_R_RegisterSkin( filename );
;576:	if (!ci->torsoSkin) {
;577:		Com_sprintf( filename, sizeof( filename ), "models/players/characters/%s/%supper_%s.skin", modelName, teamName, skinName );
;578:		ci->torsoSkin = trap_R_RegisterSkin( filename );
;579:		if (!ci->torsoSkin) {
;580:			Com_Printf( "Torso skin load failure: %s\n", filename );
;581:		}
;582:	}
;583:	*/
;584:	if ( CG_FindClientModelFile( filename, sizeof(filename), ci, teamName, modelName, skinName, "lower", "skin" ) ) {
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRGP4 $327
ARGP4
ADDRGP4 $328
ARGP4
ADDRLP4 64
ADDRGP4 CG_FindClientModelFile
CALLI4
ASGNI4
ADDRLP4 64
INDIRI4
CNSTI4 0
EQI4 $325
line 585
;585:		ci->legsSkin = trap_R_RegisterSkin( filename );
ADDRLP4 0
ARGP4
ADDRLP4 68
ADDRGP4 trap_R_RegisterSkin
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 532
ADDP4
ADDRLP4 68
INDIRI4
ASGNI4
line 586
;586:	}
LABELV $325
line 587
;587:	if (!ci->legsSkin) {
ADDRFP4 0
INDIRP4
CNSTI4 532
ADDP4
INDIRI4
CNSTI4 0
NEI4 $329
line 588
;588:		Com_Printf( "Leg skin load failure: %s\n", filename );
ADDRGP4 $331
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 Com_Printf
CALLV
pop
line 589
;589:	}
LABELV $329
line 591
;590:
;591:	if ( CG_FindClientModelFile( filename, sizeof(filename), ci, teamName, modelName, skinName, "upper", "skin" ) ) {
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRGP4 $334
ARGP4
ADDRGP4 $328
ARGP4
ADDRLP4 68
ADDRGP4 CG_FindClientModelFile
CALLI4
ASGNI4
ADDRLP4 68
INDIRI4
CNSTI4 0
EQI4 $332
line 592
;592:		ci->torsoSkin = trap_R_RegisterSkin( filename );
ADDRLP4 0
ARGP4
ADDRLP4 72
ADDRGP4 trap_R_RegisterSkin
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 540
ADDP4
ADDRLP4 72
INDIRI4
ASGNI4
line 593
;593:	}
LABELV $332
line 594
;594:	if (!ci->torsoSkin) {
ADDRFP4 0
INDIRP4
CNSTI4 540
ADDP4
INDIRI4
CNSTI4 0
NEI4 $335
line 595
;595:		Com_Printf( "Torso skin load failure: %s\n", filename );
ADDRGP4 $337
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 Com_Printf
CALLV
pop
line 596
;596:	}
LABELV $335
line 598
;597:
;598:	if ( CG_FindClientHeadFile( filename, sizeof(filename), ci, teamName, headModelName, headSkinName, "head", "skin" ) ) {
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 20
INDIRP4
ARGP4
ADDRGP4 $340
ARGP4
ADDRGP4 $328
ARGP4
ADDRLP4 72
ADDRGP4 CG_FindClientHeadFile
CALLI4
ASGNI4
ADDRLP4 72
INDIRI4
CNSTI4 0
EQI4 $338
line 599
;599:		ci->headSkin = trap_R_RegisterSkin( filename );
ADDRLP4 0
ARGP4
ADDRLP4 76
ADDRGP4 trap_R_RegisterSkin
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 548
ADDP4
ADDRLP4 76
INDIRI4
ASGNI4
line 600
;600:	}
LABELV $338
line 601
;601:	if (!ci->headSkin) {
ADDRFP4 0
INDIRP4
CNSTI4 548
ADDP4
INDIRI4
CNSTI4 0
NEI4 $341
line 602
;602:		Com_Printf( "Head skin load failure: %s\n", filename );
ADDRGP4 $343
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 Com_Printf
CALLV
pop
line 603
;603:	}
LABELV $341
line 606
;604:
;605:	// if any skins failed to load
;606:	if ( !ci->legsSkin || !ci->torsoSkin || !ci->headSkin ) {
ADDRLP4 76
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 80
CNSTI4 0
ASGNI4
ADDRLP4 76
INDIRP4
CNSTI4 532
ADDP4
INDIRI4
ADDRLP4 80
INDIRI4
EQI4 $347
ADDRLP4 76
INDIRP4
CNSTI4 540
ADDP4
INDIRI4
ADDRLP4 80
INDIRI4
EQI4 $347
ADDRLP4 76
INDIRP4
CNSTI4 548
ADDP4
INDIRI4
ADDRLP4 80
INDIRI4
NEI4 $344
LABELV $347
line 609
;607:		// Try EF Folders
;608:
;609:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $324
JUMPV
LABELV $344
line 611
;610:	}
;611:	return qtrue;
CNSTI4 1
RETI4
LABELV $324
endproc CG_RegisterClientSkin 84 32
proc CG_RegisterClientModelname 292 32
line 619
;612:}
;613:
;614:/*
;615:==========================
;616:CG_RegisterClientModelname
;617:==========================
;618:*/
;619:static qboolean CG_RegisterClientModelname( clientInfo_t *ci, const char *modelName, const char *skinName, const char *headModelName, const char *headSkinName, const char *teamName ) {
line 624
;620:	char	filename[MAX_QPATH*2];
;621:	const char		*headName;
;622:	char newTeamName[MAX_QPATH*2];
;623:
;624:	if ( headModelName[0] == '\0' ) {
ADDRFP4 12
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $349
line 625
;625:		headName = modelName;
ADDRLP4 128
ADDRFP4 4
INDIRP4
ASGNP4
line 626
;626:	}
ADDRGP4 $350
JUMPV
LABELV $349
line 627
;627:	else {
line 628
;628:		headName = headModelName;
ADDRLP4 128
ADDRFP4 12
INDIRP4
ASGNP4
line 629
;629:	}
LABELV $350
line 632
;630:
;631:	
;632:	Com_sprintf( filename, sizeof( filename ), "models/players/%s/lower.md3", modelName );
ADDRLP4 0
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $351
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 633
;633:	ci->legsModel = trap_R_RegisterModel( filename );
ADDRLP4 0
ARGP4
ADDRLP4 260
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 528
ADDP4
ADDRLP4 260
INDIRI4
ASGNI4
line 634
;634:	ci->efmodel = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
CNSTI4 0
ASGNI4
line 635
;635:	if ( !ci->legsModel ) {
ADDRFP4 0
INDIRP4
CNSTI4 528
ADDP4
INDIRI4
CNSTI4 0
NEI4 $352
line 636
;636:		Com_sprintf( filename, sizeof( filename ), "models/players/characters/%s/lower.md3", modelName );
ADDRLP4 0
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $354
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 637
;637:		ci->legsModel = trap_R_RegisterModel( filename );
ADDRLP4 0
ARGP4
ADDRLP4 264
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 528
ADDP4
ADDRLP4 264
INDIRI4
ASGNI4
line 638
;638:		ci->efmodel = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
CNSTI4 0
ASGNI4
line 639
;639:		if ( !ci->legsModel ) {
ADDRFP4 0
INDIRP4
CNSTI4 528
ADDP4
INDIRI4
CNSTI4 0
NEI4 $355
line 641
;640:			// Now Try Md4/MDr format Shafe - Trep 
;641:			Com_sprintf( filename, sizeof( filename ), "models/players2/%s/lower.mdr", modelName );
ADDRLP4 0
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $357
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 642
;642:			ci->efmodel = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
CNSTI4 1
ASGNI4
line 643
;643:			ci->legsModel = trap_R_RegisterModel( filename );
ADDRLP4 0
ARGP4
ADDRLP4 268
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 528
ADDP4
ADDRLP4 268
INDIRI4
ASGNI4
line 644
;644:			if ( !ci->legsModel ) {
ADDRFP4 0
INDIRP4
CNSTI4 528
ADDP4
INDIRI4
CNSTI4 0
NEI4 $358
line 646
;645:				// Now Try Md3 in the players 2 folder format Shafe - Trep 
;646:				Com_sprintf( filename, sizeof( filename ), "models/players2/%s/lower.md3", modelName );
ADDRLP4 0
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $360
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 647
;647:				ci->legsModel = trap_R_RegisterModel( filename );
ADDRLP4 0
ARGP4
ADDRLP4 272
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 528
ADDP4
ADDRLP4 272
INDIRI4
ASGNI4
line 648
;648:				ci->efmodel = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
CNSTI4 1
ASGNI4
line 649
;649:				if ( !ci->legsModel ) {
ADDRFP4 0
INDIRP4
CNSTI4 528
ADDP4
INDIRI4
CNSTI4 0
NEI4 $361
line 650
;650:					Com_Printf( "CG_RegisterClientModelname: Failed to load model file %s\n", filename );
ADDRGP4 $363
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 Com_Printf
CALLV
pop
line 651
;651:					return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $348
JUMPV
LABELV $361
line 653
;652:				}
;653:			}
LABELV $358
line 654
;654:		}
LABELV $355
line 655
;655:	}
LABELV $352
line 658
;656:
;657:	
;658:	Com_sprintf( filename, sizeof( filename ), "models/players/%s/upper.md3", modelName );
ADDRLP4 0
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $364
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 659
;659:	ci->torsoModel = trap_R_RegisterModel( filename );
ADDRLP4 0
ARGP4
ADDRLP4 264
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 536
ADDP4
ADDRLP4 264
INDIRI4
ASGNI4
line 660
;660:	if ( !ci->torsoModel ) {
ADDRFP4 0
INDIRP4
CNSTI4 536
ADDP4
INDIRI4
CNSTI4 0
NEI4 $365
line 661
;661:		Com_sprintf( filename, sizeof( filename ), "models/players/characters/%s/upper.md3", modelName );
ADDRLP4 0
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $367
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 662
;662:		ci->torsoModel = trap_R_RegisterModel( filename );
ADDRLP4 0
ARGP4
ADDRLP4 268
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 536
ADDP4
ADDRLP4 268
INDIRI4
ASGNI4
line 663
;663:		if ( !ci->torsoModel ) {
ADDRFP4 0
INDIRP4
CNSTI4 536
ADDP4
INDIRI4
CNSTI4 0
NEI4 $368
line 665
;664:			// Try MDR/MD4 Shafe - Trep
;665:			Com_sprintf( filename, sizeof( filename ), "models/players2/%s/upper.mdr", modelName );
ADDRLP4 0
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $370
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 666
;666:			ci->torsoModel = trap_R_RegisterModel( filename );
ADDRLP4 0
ARGP4
ADDRLP4 272
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 536
ADDP4
ADDRLP4 272
INDIRI4
ASGNI4
line 667
;667:			if ( !ci->torsoModel ) {
ADDRFP4 0
INDIRP4
CNSTI4 536
ADDP4
INDIRI4
CNSTI4 0
NEI4 $371
line 668
;668:				Com_sprintf( filename, sizeof( filename ), "models/players2/%s/upper.md3", modelName );
ADDRLP4 0
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $373
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 669
;669:				ci->torsoModel = trap_R_RegisterModel( filename );
ADDRLP4 0
ARGP4
ADDRLP4 276
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 536
ADDP4
ADDRLP4 276
INDIRI4
ASGNI4
line 670
;670:				if ( !ci->torsoModel ) {
ADDRFP4 0
INDIRP4
CNSTI4 536
ADDP4
INDIRI4
CNSTI4 0
NEI4 $374
line 671
;671:					Com_Printf( "CG_RegisterClientModelname: Failed to load model file %s\n", filename );
ADDRGP4 $363
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 Com_Printf
CALLV
pop
line 672
;672:					return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $348
JUMPV
LABELV $374
line 674
;673:				}		
;674:			}		
LABELV $371
line 675
;675:		}
LABELV $368
line 676
;676:	}
LABELV $365
line 678
;677:
;678:if( headName[0] == '*' ) {
ADDRLP4 128
INDIRP4
INDIRI1
CVII4 1
CNSTI4 42
NEI4 $376
line 679
;679:		Com_sprintf( filename, sizeof( filename ), "models/players/heads/%s/%s.md3", &headModelName[1], &headModelName[1] );
ADDRLP4 0
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $378
ARGP4
ADDRLP4 268
ADDRFP4 12
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 268
INDIRP4
ARGP4
ADDRLP4 268
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 680
;680:	}
ADDRGP4 $377
JUMPV
LABELV $376
line 681
;681:	else {
line 682
;682:		Com_sprintf( filename, sizeof( filename ), "models/players/%s/head.md3", headName );
ADDRLP4 0
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $379
ARGP4
ADDRLP4 128
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 683
;683:	}
LABELV $377
line 685
;684:
;685:	ci->headModel = trap_R_RegisterModel( filename );
ADDRLP4 0
ARGP4
ADDRLP4 268
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 544
ADDP4
ADDRLP4 268
INDIRI4
ASGNI4
line 687
;686:	// if the head model could not be found and we didn't load from the heads folder try to load from there
;687:	if ( !ci->headModel && headName[0] != '*' ) {
ADDRFP4 0
INDIRP4
CNSTI4 544
ADDP4
INDIRI4
CNSTI4 0
NEI4 $380
ADDRLP4 128
INDIRP4
INDIRI1
CVII4 1
CNSTI4 42
EQI4 $380
line 688
;688:		Com_sprintf( filename, sizeof( filename ), "models/players/heads/%s/%s.md3", headModelName, headModelName );
ADDRLP4 0
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $378
ARGP4
ADDRLP4 272
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 272
INDIRP4
ARGP4
ADDRLP4 272
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 689
;689:		ci->headModel = trap_R_RegisterModel( filename );
ADDRLP4 0
ARGP4
ADDRLP4 276
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 544
ADDP4
ADDRLP4 276
INDIRI4
ASGNI4
line 690
;690:	}
LABELV $380
line 691
;691:	if ( !ci->headModel ) {
ADDRFP4 0
INDIRP4
CNSTI4 544
ADDP4
INDIRI4
CNSTI4 0
NEI4 $382
line 692
;692:		Com_sprintf( filename, sizeof( filename ), "models/players2/%s/head.md3", headName );
ADDRLP4 0
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $384
ARGP4
ADDRLP4 128
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 693
;693:		ci->headModel = trap_R_RegisterModel( filename );
ADDRLP4 0
ARGP4
ADDRLP4 272
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 544
ADDP4
ADDRLP4 272
INDIRI4
ASGNI4
line 695
;694:		
;695:		if ( !ci->headModel ) {
ADDRFP4 0
INDIRP4
CNSTI4 544
ADDP4
INDIRI4
CNSTI4 0
NEI4 $385
line 696
;696:			Com_Printf( "CG_RegisterClientModelname: Failed to load model file %s\n", filename );
ADDRGP4 $363
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 Com_Printf
CALLV
pop
line 697
;697:			return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $348
JUMPV
LABELV $385
line 699
;698:		}
;699:	}
LABELV $382
line 702
;700:
;701:	// if any skins failed to load, return failure
;702:	if ( !CG_RegisterClientSkin( ci, teamName, modelName, skinName, headName, headSkinName ) ) {
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 20
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 128
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRLP4 272
ADDRGP4 CG_RegisterClientSkin
CALLI4
ASGNI4
ADDRLP4 272
INDIRI4
CNSTI4 0
NEI4 $387
line 703
;703:		if ( teamName && *teamName) {
ADDRLP4 276
ADDRFP4 20
INDIRP4
ASGNP4
ADDRLP4 276
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $389
ADDRLP4 276
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $389
line 704
;704:			Com_Printf( "Failed to load skin file: %s : %s : %s, %s : %s\n", teamName, modelName, skinName, headName, headSkinName );
ADDRGP4 $391
ARGP4
ADDRFP4 20
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 128
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRGP4 Com_Printf
CALLV
pop
line 705
;705:			if( ci->team == TEAM_BLUE ) {
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
CNSTI4 2
NEI4 $392
line 706
;706:				Com_sprintf(newTeamName, sizeof(newTeamName), "%s/", DEFAULT_BLUETEAM_NAME);
ADDRLP4 132
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $394
ARGP4
ADDRGP4 $395
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 707
;707:			}
ADDRGP4 $393
JUMPV
LABELV $392
line 708
;708:			else {
line 709
;709:				Com_sprintf(newTeamName, sizeof(newTeamName), "%s/", DEFAULT_REDTEAM_NAME);
ADDRLP4 132
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $394
ARGP4
ADDRGP4 $396
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 710
;710:			}
LABELV $393
line 711
;711:			if ( !CG_RegisterClientSkin( ci, newTeamName, modelName, skinName, headName, headSkinName ) ) {
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 132
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 128
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRLP4 280
ADDRGP4 CG_RegisterClientSkin
CALLI4
ASGNI4
ADDRLP4 280
INDIRI4
CNSTI4 0
NEI4 $390
line 712
;712:				Com_Printf( "CG_RegisterClientModelname: Failed to load skin file: %s : %s : %s, %s : %s\n", newTeamName, modelName, skinName, headName, headSkinName );
ADDRGP4 $399
ARGP4
ADDRLP4 132
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 128
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRGP4 Com_Printf
CALLV
pop
line 713
;713:				return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $348
JUMPV
line 715
;714:			}
;715:		} else {
LABELV $389
line 716
;716:			Com_Printf( "CG_RegisterClientModelname: Failed to load skin file: %s : %s, %s : %s\n", modelName, skinName, headName, headSkinName );
ADDRGP4 $400
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 128
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRGP4 Com_Printf
CALLV
pop
line 717
;717:			return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $348
JUMPV
LABELV $390
line 719
;718:		}
;719:	}
LABELV $387
line 722
;720:
;721:	// load the animations
;722:	Com_sprintf( filename, sizeof( filename ), "models/players/%s/animation.cfg", modelName );
ADDRLP4 0
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $401
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 723
;723:	if ( !CG_ParseAnimationFile( filename, ci ) ) {
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 276
ADDRGP4 CG_ParseAnimationFile
CALLI4
ASGNI4
ADDRLP4 276
INDIRI4
CNSTI4 0
NEI4 $402
line 724
;724:		Com_sprintf( filename, sizeof( filename ), "models/players/characters/%s/animation.cfg", modelName );
ADDRLP4 0
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $404
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 725
;725:		if ( !CG_ParseAnimationFile( filename, ci ) ) {
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 280
ADDRGP4 CG_ParseAnimationFile
CALLI4
ASGNI4
ADDRLP4 280
INDIRI4
CNSTI4 0
NEI4 $405
line 726
;726:			Com_sprintf( filename, sizeof( filename ), "models/players2/%s/animation.cfg", modelName );
ADDRLP4 0
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $407
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 727
;727:			if ( !CG_ParseAnimationFile( filename, ci ) ) {
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 284
ADDRGP4 CG_ParseAnimationFile
CALLI4
ASGNI4
ADDRLP4 284
INDIRI4
CNSTI4 0
NEI4 $408
line 728
;728:				Com_Printf( "CG_RegisterClientModelname: Failed to load animation file %s\n", filename );
ADDRGP4 $410
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 Com_Printf
CALLV
pop
line 729
;729:				return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $348
JUMPV
LABELV $408
line 731
;730:			}
;731:		}
LABELV $405
line 732
;732:	}
LABELV $402
line 734
;733:
;734:	if ( CG_FindClientHeadFile( filename, sizeof(filename), ci, teamName, headName, headSkinName, "icon", "skin" ) ) {
ADDRLP4 0
ARGP4
CNSTI4 128
ARGI4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 20
INDIRP4
ARGP4
ADDRLP4 128
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRGP4 $413
ARGP4
ADDRGP4 $328
ARGP4
ADDRLP4 280
ADDRGP4 CG_FindClientHeadFile
CALLI4
ASGNI4
ADDRLP4 280
INDIRI4
CNSTI4 0
EQI4 $411
line 735
;735:		ci->modelIcon = trap_R_RegisterShaderNoMip( filename );
ADDRLP4 0
ARGP4
ADDRLP4 284
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 552
ADDP4
ADDRLP4 284
INDIRI4
ASGNI4
line 736
;736:	}
ADDRGP4 $412
JUMPV
LABELV $411
line 737
;737:	else if ( CG_FindClientHeadFile( filename, sizeof(filename), ci, teamName, headName, headSkinName, "icon", "tga" ) ) {
ADDRLP4 0
ARGP4
CNSTI4 128
ARGI4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 20
INDIRP4
ARGP4
ADDRLP4 128
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRGP4 $413
ARGP4
ADDRGP4 $416
ARGP4
ADDRLP4 284
ADDRGP4 CG_FindClientHeadFile
CALLI4
ASGNI4
ADDRLP4 284
INDIRI4
CNSTI4 0
EQI4 $414
line 738
;738:		ci->modelIcon = trap_R_RegisterShaderNoMip( filename );
ADDRLP4 0
ARGP4
ADDRLP4 288
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 552
ADDP4
ADDRLP4 288
INDIRI4
ASGNI4
line 739
;739:	}
LABELV $414
LABELV $412
line 741
;740:
;741:	if ( !ci->modelIcon ) {
ADDRFP4 0
INDIRP4
CNSTI4 552
ADDP4
INDIRI4
CNSTI4 0
NEI4 $417
line 742
;742:		Com_Printf( "CG_RegisterClientModelname: Failed to modelIcon %s\n", filename );
ADDRGP4 $419
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 Com_Printf
CALLV
pop
line 744
;743:		//return qfalse;
;744:	}
LABELV $417
line 746
;745:
;746:	return qtrue;
CNSTI4 1
RETI4
LABELV $348
endproc CG_RegisterClientModelname 292 32
proc CG_ColorFromString 20 4
line 754
;747:}
;748:
;749:/*
;750:====================
;751:CG_ColorFromString
;752:====================
;753:*/
;754:static void CG_ColorFromString( const char *v, vec3_t color ) {
line 757
;755:	int val;
;756:
;757:	VectorClear( color );
ADDRLP4 4
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 8
CNSTF4 0
ASGNF4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 8
INDIRF4
ASGNF4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 8
INDIRF4
ASGNF4
ADDRLP4 4
INDIRP4
ADDRLP4 8
INDIRF4
ASGNF4
line 759
;758:
;759:	val = atoi( v );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 12
INDIRI4
ASGNI4
line 761
;760:
;761:	if ( val < 1 || val > 7 ) {
ADDRLP4 0
INDIRI4
CNSTI4 1
LTI4 $423
ADDRLP4 0
INDIRI4
CNSTI4 7
LEI4 $421
LABELV $423
line 762
;762:		VectorSet( color, 1, 1, 1 );
ADDRFP4 4
INDIRP4
CNSTF4 1065353216
ASGNF4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
CNSTF4 1065353216
ASGNF4
line 763
;763:		return;
ADDRGP4 $420
JUMPV
LABELV $421
line 766
;764:	}
;765:
;766:	if ( val & 1 ) {
ADDRLP4 0
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $424
line 767
;767:		color[2] = 1.0f;
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
CNSTF4 1065353216
ASGNF4
line 768
;768:	}
LABELV $424
line 769
;769:	if ( val & 2 ) {
ADDRLP4 0
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $426
line 770
;770:		color[1] = 1.0f;
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
CNSTF4 1065353216
ASGNF4
line 771
;771:	}
LABELV $426
line 772
;772:	if ( val & 4 ) {
ADDRLP4 0
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $428
line 773
;773:		color[0] = 1.0f;
ADDRFP4 4
INDIRP4
CNSTF4 1065353216
ASGNF4
line 774
;774:	}
LABELV $428
line 775
;775:}
LABELV $420
endproc CG_ColorFromString 20 4
proc CG_LoadClientInfo 156 24
line 785
;776:
;777:/*
;778:===================
;779:CG_LoadClientInfo
;780:
;781:Load it now, taking the disk hits.
;782:This will usually be deferred to a safe time
;783:===================
;784:*/
;785:static void CG_LoadClientInfo( clientInfo_t *ci ) {
line 796
;786:	const char	*dir, *fallback;
;787:	int			i, modelloaded;
;788:	const char	*s;
;789:	int			clientNum;
;790:	char		teamname[MAX_QPATH];
;791://	char		*filename;
;792://	char		temp_string[200];
;793://	qboolean	noMoreTaunts; //, loadingTaunt;
;794:	int			y;
;795:
;796:	teamname[0] = 0;
ADDRLP4 20
CNSTI1 0
ASGNI1
line 809
;797:#ifdef MISSIONPACK
;798:	if( cgs.gametype >= GT_TEAM) {
;799:		if( ci->team == TEAM_BLUE ) {
;800:			Q_strncpyz(teamname, cg_blueTeamName.string, sizeof(teamname) );
;801:		} else {
;802:			Q_strncpyz(teamname, cg_redTeamName.string, sizeof(teamname) );
;803:		}
;804:	}
;805:	if( teamname[0] ) {
;806:		strcat( teamname, "/" );
;807:	}
;808:#endif
;809:	modelloaded = qtrue;
ADDRLP4 84
CNSTI4 1
ASGNI4
line 810
;810:	if ( !CG_RegisterClientModelname( ci, ci->modelName, ci->skinName, ci->headModelName, ci->headSkinName, teamname ) ) {
ADDRLP4 92
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 92
INDIRP4
ARGP4
ADDRLP4 92
INDIRP4
CNSTI4 168
ADDP4
ARGP4
ADDRLP4 92
INDIRP4
CNSTI4 232
ADDP4
ARGP4
ADDRLP4 92
INDIRP4
CNSTI4 296
ADDP4
ARGP4
ADDRLP4 92
INDIRP4
CNSTI4 360
ADDP4
ARGP4
ADDRLP4 20
ARGP4
ADDRLP4 96
ADDRGP4 CG_RegisterClientModelname
CALLI4
ASGNI4
ADDRLP4 96
INDIRI4
CNSTI4 0
NEI4 $431
line 811
;811:		if ( cg_buildScript.integer ) {
ADDRGP4 cg_buildScript+12
INDIRI4
CNSTI4 0
EQI4 $433
line 812
;812:			CG_Error( "CG_RegisterClientModelname( %s, %s, %s, %s %s ) failed", ci->modelName, ci->skinName, ci->headModelName, ci->headSkinName, teamname );
ADDRGP4 $436
ARGP4
ADDRLP4 100
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 100
INDIRP4
CNSTI4 168
ADDP4
ARGP4
ADDRLP4 100
INDIRP4
CNSTI4 232
ADDP4
ARGP4
ADDRLP4 100
INDIRP4
CNSTI4 296
ADDP4
ARGP4
ADDRLP4 100
INDIRP4
CNSTI4 360
ADDP4
ARGP4
ADDRLP4 20
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 813
;813:		}
LABELV $433
line 816
;814:
;815:		// fall back to default team name
;816:		if( cgs.gametype >= GT_TEAM) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
LTI4 $437
line 818
;817:			// keep skin name
;818:			if( ci->team == TEAM_BLUE ) {
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
CNSTI4 2
NEI4 $440
line 819
;819:				Q_strncpyz(teamname, DEFAULT_BLUETEAM_NAME, sizeof(teamname) );
ADDRLP4 20
ARGP4
ADDRGP4 $395
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 820
;820:			} else {
ADDRGP4 $441
JUMPV
LABELV $440
line 821
;821:				Q_strncpyz(teamname, DEFAULT_REDTEAM_NAME, sizeof(teamname) );
ADDRLP4 20
ARGP4
ADDRGP4 $396
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 822
;822:			}
LABELV $441
line 823
;823:			if ( !CG_RegisterClientModelname( ci, DEFAULT_TEAM_MODEL, ci->skinName, DEFAULT_TEAM_HEAD, ci->skinName, teamname ) ) {
ADDRLP4 100
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 100
INDIRP4
ARGP4
ADDRLP4 104
ADDRGP4 $444
ASGNP4
ADDRLP4 104
INDIRP4
ARGP4
ADDRLP4 108
ADDRLP4 100
INDIRP4
CNSTI4 232
ADDP4
ASGNP4
ADDRLP4 108
INDIRP4
ARGP4
ADDRLP4 104
INDIRP4
ARGP4
ADDRLP4 108
INDIRP4
ARGP4
ADDRLP4 20
ARGP4
ADDRLP4 112
ADDRGP4 CG_RegisterClientModelname
CALLI4
ASGNI4
ADDRLP4 112
INDIRI4
CNSTI4 0
NEI4 $438
line 824
;824:				CG_Error( "DEFAULT_TEAM_MODEL / skin (%s/%s) failed to register", DEFAULT_TEAM_MODEL, ci->skinName );
ADDRGP4 $445
ARGP4
ADDRGP4 $444
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 232
ADDP4
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 825
;825:			}
line 826
;826:		} else {
ADDRGP4 $438
JUMPV
LABELV $437
line 827
;827:			if ( !CG_RegisterClientModelname( ci, DEFAULT_MODEL, "default", DEFAULT_MODEL, "default", teamname ) ) {
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 100
ADDRGP4 $444
ASGNP4
ADDRLP4 100
INDIRP4
ARGP4
ADDRLP4 104
ADDRGP4 $140
ASGNP4
ADDRLP4 104
INDIRP4
ARGP4
ADDRLP4 100
INDIRP4
ARGP4
ADDRLP4 104
INDIRP4
ARGP4
ADDRLP4 20
ARGP4
ADDRLP4 108
ADDRGP4 CG_RegisterClientModelname
CALLI4
ASGNI4
ADDRLP4 108
INDIRI4
CNSTI4 0
NEI4 $446
line 828
;828:				CG_Error( "DEFAULT_MODEL (%s) failed to register", DEFAULT_MODEL );
ADDRGP4 $448
ARGP4
ADDRGP4 $444
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 829
;829:			}
LABELV $446
line 830
;830:		}
LABELV $438
line 831
;831:		modelloaded = qfalse;
ADDRLP4 84
CNSTI4 0
ASGNI4
line 832
;832:	}
LABELV $431
line 834
;833:
;834:	ci->newAnims = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 492
ADDP4
CNSTI4 0
ASGNI4
line 835
;835:	if ( ci->torsoModel ) {
ADDRFP4 0
INDIRP4
CNSTI4 536
ADDP4
INDIRI4
CNSTI4 0
EQI4 $449
line 838
;836:		orientation_t tag;
;837:		// if the torso model has the "tag_flag"
;838:		if ( trap_R_LerpTag( &tag, ci->torsoModel, 0, 0, 1, "tag_flag" ) ) {
ADDRLP4 100
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 536
ADDP4
INDIRI4
ARGI4
ADDRLP4 148
CNSTI4 0
ASGNI4
ADDRLP4 148
INDIRI4
ARGI4
ADDRLP4 148
INDIRI4
ARGI4
CNSTF4 1065353216
ARGF4
ADDRGP4 $453
ARGP4
ADDRLP4 152
ADDRGP4 trap_R_LerpTag
CALLI4
ASGNI4
ADDRLP4 152
INDIRI4
CNSTI4 0
EQI4 $451
line 839
;839:			ci->newAnims = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 492
ADDP4
CNSTI4 1
ASGNI4
line 840
;840:		}
LABELV $451
line 841
;841:	}
LABELV $449
line 844
;842:
;843:	// sounds
;844:	dir = ci->modelName;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 168
ADDP4
ASGNP4
line 845
;845:	fallback = (cgs.gametype >= GT_TEAM) ? DEFAULT_TEAM_MODEL : DEFAULT_MODEL;
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
LTI4 $456
ADDRLP4 100
ADDRGP4 $444
ASGNP4
ADDRGP4 $457
JUMPV
LABELV $456
ADDRLP4 100
ADDRGP4 $444
ASGNP4
LABELV $457
ADDRLP4 88
ADDRLP4 100
INDIRP4
ASGNP4
line 847
;846:
;847:	for ( i = 0 ; i < MAX_CUSTOM_SOUNDS ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $458
line 848
;848:		s = cg_customSoundNames[i];
ADDRLP4 4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg_customSoundNames
ADDP4
INDIRP4
ASGNP4
line 849
;849:		if ( !s ) {
ADDRLP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $462
line 850
;850:			break;
ADDRGP4 $460
JUMPV
LABELV $462
line 853
;851:		}
;852:
;853:		ci->sounds[i] = 0;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 1592
ADDP4
ADDP4
CNSTI4 0
ASGNI4
line 854
;854:		if (CG_FileExists(va("sound/player/%s/%s", dir, s + 1)))
ADDRGP4 $466
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 1
ADDP4
ARGP4
ADDRLP4 104
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 104
INDIRP4
ARGP4
ADDRLP4 108
ADDRGP4 CG_FileExists
CALLI4
ASGNI4
ADDRLP4 108
INDIRI4
CNSTI4 0
EQI4 $464
line 855
;855:		{
line 856
;856:			ci->sounds[i] = trap_S_RegisterSound( va("sound/player/%s/%s", dir, s + 1), qfalse );
ADDRGP4 $466
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 1
ADDP4
ARGP4
ADDRLP4 112
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 112
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 116
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 1592
ADDP4
ADDP4
ADDRLP4 116
INDIRI4
ASGNI4
line 857
;857:		} 
ADDRGP4 $465
JUMPV
LABELV $464
line 859
;858:		else
;859:		{
line 860
;860:			ci->sounds[i] = trap_S_RegisterSound( va("sound/voice/%s/misc/%s", dir, s + 1), qtrue );
ADDRGP4 $467
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 1
ADDP4
ARGP4
ADDRLP4 112
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 112
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 116
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 1592
ADDP4
ADDP4
ADDRLP4 116
INDIRI4
ASGNI4
line 861
;861:		}
LABELV $465
line 864
;862:				
;863:		
;864:	y=i;
ADDRLP4 16
ADDRLP4 0
INDIRI4
ASGNI4
line 865
;865:	}
LABELV $459
line 847
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 36
LTI4 $458
LABELV $460
line 868
;866:
;867:
;868:	ci->deferred = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 488
ADDP4
CNSTI4 0
ASGNI4
line 872
;869:
;870:	// reset any existing players and bodies, because they might be in bad
;871:	// frames for this new model
;872:	clientNum = ci - cgs.clientinfo;
ADDRLP4 12
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 cgs+40972
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 1740
DIVI4
ASGNI4
line 873
;873:	for ( i = 0 ; i < MAX_GENTITIES ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $469
line 874
;874:		if ( cg_entities[i].currentState.clientNum == clientNum
ADDRLP4 104
CNSTI4 740
ADDRLP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 104
INDIRI4
ADDRGP4 cg_entities+168
ADDP4
INDIRI4
ADDRLP4 12
INDIRI4
NEI4 $473
ADDRLP4 104
INDIRI4
ADDRGP4 cg_entities+4
ADDP4
INDIRI4
CNSTI4 1
NEI4 $473
line 875
;875:			&& cg_entities[i].currentState.eType == ET_PLAYER ) {
line 876
;876:			CG_ResetPlayerEntity( &cg_entities[i] );
CNSTI4 740
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg_entities
ADDP4
ARGP4
ADDRGP4 CG_ResetPlayerEntity
CALLV
pop
line 877
;877:		}
LABELV $473
line 878
;878:	}
LABELV $470
line 873
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 1024
LTI4 $469
line 879
;879:}
LABELV $430
endproc CG_LoadClientInfo 156 24
proc CG_CopyClientInfoModel 56 12
line 886
;880:
;881:/*
;882:======================
;883:CG_CopyClientInfoModel
;884:======================
;885:*/
;886:static void CG_CopyClientInfoModel( clientInfo_t *from, clientInfo_t *to ) {
line 887
;887:	VectorCopy( from->headOffset, to->headOffset );
ADDRLP4 0
CNSTI4 504
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 0
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 0
INDIRI4
ADDP4
INDIRB
ASGNB 12
line 888
;888:	to->footsteps = from->footsteps;
ADDRLP4 4
CNSTI4 516
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 4
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 4
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 889
;889:	to->gender = from->gender;
ADDRLP4 8
CNSTI4 520
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 8
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 8
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 890
;890:	to->numTaunts = from->numTaunts;
ADDRLP4 12
CNSTI4 1736
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 12
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 12
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 892
;891:
;892:	to->legsModel = from->legsModel;
ADDRLP4 16
CNSTI4 528
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 893
;893:	to->legsSkin = from->legsSkin;
ADDRLP4 20
CNSTI4 532
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 20
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 20
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 894
;894:	to->torsoModel = from->torsoModel;
ADDRLP4 24
CNSTI4 536
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 24
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 24
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 895
;895:	to->torsoSkin = from->torsoSkin;
ADDRLP4 28
CNSTI4 540
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 28
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 28
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 896
;896:	to->headModel = from->headModel;
ADDRLP4 32
CNSTI4 544
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 32
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 32
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 897
;897:	to->headSkin = from->headSkin;
ADDRLP4 36
CNSTI4 548
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 36
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 36
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 898
;898:	to->modelIcon = from->modelIcon;
ADDRLP4 40
CNSTI4 552
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 40
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 40
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 900
;899:
;900:	to->newAnims = from->newAnims;
ADDRLP4 44
CNSTI4 492
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 44
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 44
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 902
;901:
;902:	memcpy( to->animations, from->animations, sizeof( to->animations ) );
ADDRLP4 48
CNSTI4 556
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 48
INDIRI4
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
ADDRLP4 48
INDIRI4
ADDP4
ARGP4
CNSTI4 1036
ARGI4
ADDRGP4 memcpy
CALLP4
pop
line 903
;903:	memcpy( to->sounds, from->sounds, sizeof( to->sounds ) );
ADDRLP4 52
CNSTI4 1592
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 52
INDIRI4
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
ADDRLP4 52
INDIRI4
ADDP4
ARGP4
CNSTI4 144
ARGI4
ADDRGP4 memcpy
CALLP4
pop
line 904
;904:}
LABELV $477
endproc CG_CopyClientInfoModel 56 12
proc CG_ScanForExistingClientInfo 60 8
line 911
;905:
;906:/*
;907:======================
;908:CG_ScanForExistingClientInfo
;909:======================
;910:*/
;911:static qboolean CG_ScanForExistingClientInfo( clientInfo_t *ci ) {
line 915
;912:	int		i;
;913:	clientInfo_t	*match;
;914:
;915:	for ( i = 0 ; i < cgs.maxclients ; i++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $482
JUMPV
LABELV $479
line 916
;916:		match = &cgs.clientinfo[ i ];
ADDRLP4 0
CNSTI4 1740
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 cgs+40972
ADDP4
ASGNP4
line 917
;917:		if ( !match->infoValid ) {
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 0
NEI4 $485
line 918
;918:			continue;
ADDRGP4 $480
JUMPV
LABELV $485
line 920
;919:		}
;920:		if ( match->deferred ) {
ADDRLP4 0
INDIRP4
CNSTI4 488
ADDP4
INDIRI4
CNSTI4 0
EQI4 $487
line 921
;921:			continue;
ADDRGP4 $480
JUMPV
LABELV $487
line 923
;922:		}
;923:		if ( !Q_stricmp( ci->modelName, match->modelName )
ADDRLP4 8
CNSTI4 168
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 8
INDIRI4
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
ADDRLP4 8
INDIRI4
ADDP4
ARGP4
ADDRLP4 12
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
NEI4 $489
ADDRLP4 16
CNSTI4 232
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
ARGP4
ADDRLP4 20
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
NEI4 $489
ADDRLP4 24
CNSTI4 296
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 24
INDIRI4
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
ADDRLP4 24
INDIRI4
ADDP4
ARGP4
ADDRLP4 28
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 28
INDIRI4
CNSTI4 0
NEI4 $489
ADDRLP4 32
CNSTI4 360
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 32
INDIRI4
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
ADDRLP4 32
INDIRI4
ADDP4
ARGP4
ADDRLP4 36
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 36
INDIRI4
CNSTI4 0
NEI4 $489
ADDRLP4 40
CNSTI4 456
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 40
INDIRI4
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
ADDRLP4 40
INDIRI4
ADDP4
ARGP4
ADDRLP4 44
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 44
INDIRI4
CNSTI4 0
NEI4 $489
ADDRLP4 48
CNSTI4 424
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 48
INDIRI4
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
ADDRLP4 48
INDIRI4
ADDP4
ARGP4
ADDRLP4 52
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 52
INDIRI4
CNSTI4 0
NEI4 $489
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
LTI4 $492
ADDRLP4 56
CNSTI4 68
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 56
INDIRI4
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
ADDRLP4 56
INDIRI4
ADDP4
INDIRI4
NEI4 $489
LABELV $492
line 929
;924:			&& !Q_stricmp( ci->skinName, match->skinName )
;925:			&& !Q_stricmp( ci->headModelName, match->headModelName )
;926:			&& !Q_stricmp( ci->headSkinName, match->headSkinName ) 
;927:			&& !Q_stricmp( ci->blueTeam, match->blueTeam ) 
;928:			&& !Q_stricmp( ci->redTeam, match->redTeam )
;929:			&& (cgs.gametype < GT_TEAM || ci->team == match->team) ) {
line 932
;930:			// this clientinfo is identical, so use it's handles
;931:
;932:			ci->deferred = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 488
ADDP4
CNSTI4 0
ASGNI4
line 934
;933:
;934:			CG_CopyClientInfoModel( match, ci );
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_CopyClientInfoModel
CALLV
pop
line 936
;935:
;936:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $478
JUMPV
LABELV $489
line 938
;937:		}
;938:	}
LABELV $480
line 915
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $482
ADDRLP4 4
INDIRI4
ADDRGP4 cgs+31480
INDIRI4
LTI4 $479
line 941
;939:
;940:	// nothing matches, so defer the load
;941:	return qfalse;
CNSTI4 0
RETI4
LABELV $478
endproc CG_ScanForExistingClientInfo 60 8
proc CG_SetDeferredClientInfo 36 8
line 952
;942:}
;943:
;944:/*
;945:======================
;946:CG_SetDeferredClientInfo
;947:
;948:We aren't going to load it now, so grab some other
;949:client's info to use until we have some spare time.
;950:======================
;951:*/
;952:static void CG_SetDeferredClientInfo( clientInfo_t *ci ) {
line 958
;953:	int		i;
;954:	clientInfo_t	*match;
;955:
;956:	// if someone else is already the same models and skins we
;957:	// can just load the client info
;958:	for ( i = 0 ; i < cgs.maxclients ; i++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $497
JUMPV
LABELV $494
line 959
;959:		match = &cgs.clientinfo[ i ];
ADDRLP4 0
CNSTI4 1740
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 cgs+40972
ADDP4
ASGNP4
line 960
;960:		if ( !match->infoValid || match->deferred ) {
ADDRLP4 12
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRP4
INDIRI4
ADDRLP4 12
INDIRI4
EQI4 $502
ADDRLP4 0
INDIRP4
CNSTI4 488
ADDP4
INDIRI4
ADDRLP4 12
INDIRI4
EQI4 $500
LABELV $502
line 961
;961:			continue;
ADDRGP4 $495
JUMPV
LABELV $500
line 963
;962:		}
;963:		if ( Q_stricmp( ci->skinName, match->skinName ) ||
ADDRLP4 16
CNSTI4 232
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
ARGP4
ADDRLP4 20
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
NEI4 $507
ADDRLP4 24
CNSTI4 168
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 24
INDIRI4
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
ADDRLP4 24
INDIRI4
ADDP4
ARGP4
ADDRLP4 28
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 28
INDIRI4
CNSTI4 0
NEI4 $507
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
LTI4 $503
ADDRLP4 32
CNSTI4 68
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 32
INDIRI4
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
ADDRLP4 32
INDIRI4
ADDP4
INDIRI4
EQI4 $503
LABELV $507
line 967
;964:			 Q_stricmp( ci->modelName, match->modelName ) ||
;965://			 Q_stricmp( ci->headModelName, match->headModelName ) ||
;966://			 Q_stricmp( ci->headSkinName, match->headSkinName ) ||
;967:			 (cgs.gametype >= GT_TEAM && ci->team != match->team) ) {
line 968
;968:			continue;
ADDRGP4 $495
JUMPV
LABELV $503
line 971
;969:		}
;970:		// just load the real info cause it uses the same models and skins
;971:		CG_LoadClientInfo( ci );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_LoadClientInfo
CALLV
pop
line 972
;972:		return;
ADDRGP4 $493
JUMPV
LABELV $495
line 958
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $497
ADDRLP4 4
INDIRI4
ADDRGP4 cgs+31480
INDIRI4
LTI4 $494
line 976
;973:	}
;974:
;975:	// if we are in teamplay, only grab a model if the skin is correct
;976:	if ( cgs.gametype >= GT_TEAM ) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
LTI4 $508
line 977
;977:		for ( i = 0 ; i < cgs.maxclients ; i++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $514
JUMPV
LABELV $511
line 978
;978:			match = &cgs.clientinfo[ i ];
ADDRLP4 0
CNSTI4 1740
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 cgs+40972
ADDP4
ASGNP4
line 979
;979:			if ( !match->infoValid || match->deferred ) {
ADDRLP4 12
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRP4
INDIRI4
ADDRLP4 12
INDIRI4
EQI4 $519
ADDRLP4 0
INDIRP4
CNSTI4 488
ADDP4
INDIRI4
ADDRLP4 12
INDIRI4
EQI4 $517
LABELV $519
line 980
;980:				continue;
ADDRGP4 $512
JUMPV
LABELV $517
line 982
;981:			}
;982:			if ( Q_stricmp( ci->skinName, match->skinName ) ||
ADDRLP4 16
CNSTI4 232
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
ARGP4
ADDRLP4 20
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
NEI4 $523
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
LTI4 $520
ADDRLP4 24
CNSTI4 68
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 24
INDIRI4
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
ADDRLP4 24
INDIRI4
ADDP4
INDIRI4
EQI4 $520
LABELV $523
line 983
;983:				(cgs.gametype >= GT_TEAM && ci->team != match->team) ) {
line 984
;984:				continue;
ADDRGP4 $512
JUMPV
LABELV $520
line 986
;985:			}
;986:			ci->deferred = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 488
ADDP4
CNSTI4 1
ASGNI4
line 987
;987:			CG_CopyClientInfoModel( match, ci );
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_CopyClientInfoModel
CALLV
pop
line 988
;988:			return;
ADDRGP4 $493
JUMPV
LABELV $512
line 977
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $514
ADDRLP4 4
INDIRI4
ADDRGP4 cgs+31480
INDIRI4
LTI4 $511
line 994
;989:		}
;990:		// load the full model, because we don't ever want to show
;991:		// an improper team skin.  This will cause a hitch for the first
;992:		// player, when the second enters.  Combat shouldn't be going on
;993:		// yet, so it shouldn't matter
;994:		CG_LoadClientInfo( ci );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_LoadClientInfo
CALLV
pop
line 995
;995:		return;
ADDRGP4 $493
JUMPV
LABELV $508
line 999
;996:	}
;997:
;998:	// find the first valid clientinfo and grab its stuff
;999:	for ( i = 0 ; i < cgs.maxclients ; i++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $527
JUMPV
LABELV $524
line 1000
;1000:		match = &cgs.clientinfo[ i ];
ADDRLP4 0
CNSTI4 1740
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 cgs+40972
ADDP4
ASGNP4
line 1001
;1001:		if ( !match->infoValid ) {
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 0
NEI4 $530
line 1002
;1002:			continue;
ADDRGP4 $525
JUMPV
LABELV $530
line 1005
;1003:		}
;1004:
;1005:		ci->deferred = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 488
ADDP4
CNSTI4 1
ASGNI4
line 1006
;1006:		CG_CopyClientInfoModel( match, ci );
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_CopyClientInfoModel
CALLV
pop
line 1007
;1007:		return;
ADDRGP4 $493
JUMPV
LABELV $525
line 999
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $527
ADDRLP4 4
INDIRI4
ADDRGP4 cgs+31480
INDIRI4
LTI4 $524
line 1011
;1008:	}
;1009:
;1010:	// we should never get here...
;1011:	CG_Printf( "CG_SetDeferredClientInfo: no valid clients!\n" );
ADDRGP4 $532
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 1013
;1012:
;1013:	CG_LoadClientInfo( ci );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_LoadClientInfo
CALLV
pop
line 1014
;1014:}
LABELV $493
endproc CG_SetDeferredClientInfo 36 8
export CG_NewClientInfo
proc CG_NewClientInfo 1920 12
line 1022
;1015:
;1016:
;1017:/*
;1018:======================
;1019:CG_NewClientInfo
;1020:======================
;1021:*/
;1022:void CG_NewClientInfo( int clientNum ) {
line 1029
;1023:	clientInfo_t *ci;
;1024:	clientInfo_t newInfo;
;1025:	const char	*configstring;
;1026:	const char	*v;
;1027:	char		*slash;
;1028:
;1029:	ci = &cgs.clientinfo[clientNum];
ADDRLP4 1752
CNSTI4 1740
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 cgs+40972
ADDP4
ASGNP4
line 1031
;1030:
;1031:	configstring = CG_ConfigString( clientNum + CS_PLAYERS );
ADDRFP4 0
INDIRI4
CNSTI4 544
ADDI4
ARGI4
ADDRLP4 1756
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 1744
ADDRLP4 1756
INDIRP4
ASGNP4
line 1032
;1032:	if ( !configstring[0] ) {
ADDRLP4 1744
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $535
line 1033
;1033:		memset( ci, 0, sizeof( *ci ) );
ADDRLP4 1752
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 1740
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1034
;1034:		return;		// player just left
ADDRGP4 $533
JUMPV
LABELV $535
line 1039
;1035:	}
;1036:
;1037:	// build into a temp buffer so the defer checks can use
;1038:	// the old value
;1039:	memset( &newInfo, 0, sizeof( newInfo ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 1740
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1042
;1040:
;1041:	// isolate the player's name
;1042:	v = Info_ValueForKey(configstring, "n");
ADDRLP4 1744
INDIRP4
ARGP4
ADDRGP4 $537
ARGP4
ADDRLP4 1760
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 1740
ADDRLP4 1760
INDIRP4
ASGNP4
line 1043
;1043:	Q_strncpyz( newInfo.name, v, sizeof( newInfo.name ) );
ADDRLP4 0+4
ARGP4
ADDRLP4 1740
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1046
;1044:
;1045:	// colors
;1046:	v = Info_ValueForKey( configstring, "c1" );
ADDRLP4 1744
INDIRP4
ARGP4
ADDRGP4 $540
ARGP4
ADDRLP4 1764
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 1740
ADDRLP4 1764
INDIRP4
ASGNP4
line 1047
;1047:	CG_ColorFromString( v, newInfo.color1 );
ADDRLP4 1740
INDIRP4
ARGP4
ADDRLP4 0+76
ARGP4
ADDRGP4 CG_ColorFromString
CALLV
pop
line 1049
;1048:
;1049:	v = Info_ValueForKey( configstring, "c2" );
ADDRLP4 1744
INDIRP4
ARGP4
ADDRGP4 $542
ARGP4
ADDRLP4 1768
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 1740
ADDRLP4 1768
INDIRP4
ASGNP4
line 1050
;1050:	CG_ColorFromString( v, newInfo.color2 );
ADDRLP4 1740
INDIRP4
ARGP4
ADDRLP4 0+88
ARGP4
ADDRGP4 CG_ColorFromString
CALLV
pop
line 1053
;1051:
;1052:	// bot skill
;1053:	v = Info_ValueForKey( configstring, "skill" );
ADDRLP4 1744
INDIRP4
ARGP4
ADDRGP4 $544
ARGP4
ADDRLP4 1772
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 1740
ADDRLP4 1772
INDIRP4
ASGNP4
line 1054
;1054:	newInfo.botSkill = atoi( v );
ADDRLP4 1740
INDIRP4
ARGP4
ADDRLP4 1776
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0+72
ADDRLP4 1776
INDIRI4
ASGNI4
line 1057
;1055:
;1056:	// handicap
;1057:	v = Info_ValueForKey( configstring, "hc" );
ADDRLP4 1744
INDIRP4
ARGP4
ADDRGP4 $546
ARGP4
ADDRLP4 1780
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 1740
ADDRLP4 1780
INDIRP4
ASGNP4
line 1058
;1058:	newInfo.handicap = atoi( v );
ADDRLP4 1740
INDIRP4
ARGP4
ADDRLP4 1784
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0+120
ADDRLP4 1784
INDIRI4
ASGNI4
line 1061
;1059:
;1060:	// wins
;1061:	v = Info_ValueForKey( configstring, "w" );
ADDRLP4 1744
INDIRP4
ARGP4
ADDRGP4 $548
ARGP4
ADDRLP4 1788
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 1740
ADDRLP4 1788
INDIRP4
ASGNP4
line 1062
;1062:	newInfo.wins = atoi( v );
ADDRLP4 1740
INDIRP4
ARGP4
ADDRLP4 1792
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0+124
ADDRLP4 1792
INDIRI4
ASGNI4
line 1065
;1063:
;1064:	// losses
;1065:	v = Info_ValueForKey( configstring, "l" );
ADDRLP4 1744
INDIRP4
ARGP4
ADDRGP4 $550
ARGP4
ADDRLP4 1796
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 1740
ADDRLP4 1796
INDIRP4
ASGNP4
line 1066
;1066:	newInfo.losses = atoi( v );
ADDRLP4 1740
INDIRP4
ARGP4
ADDRLP4 1800
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0+128
ADDRLP4 1800
INDIRI4
ASGNI4
line 1069
;1067:
;1068:	// team
;1069:	v = Info_ValueForKey( configstring, "t" );
ADDRLP4 1744
INDIRP4
ARGP4
ADDRGP4 $552
ARGP4
ADDRLP4 1804
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 1740
ADDRLP4 1804
INDIRP4
ASGNP4
line 1070
;1070:	newInfo.team = atoi( v );
ADDRLP4 1740
INDIRP4
ARGP4
ADDRLP4 1808
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0+68
ADDRLP4 1808
INDIRI4
ASGNI4
line 1073
;1071:
;1072:	// team task
;1073:	v = Info_ValueForKey( configstring, "tt" );
ADDRLP4 1744
INDIRP4
ARGP4
ADDRGP4 $554
ARGP4
ADDRLP4 1812
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 1740
ADDRLP4 1812
INDIRP4
ASGNP4
line 1074
;1074:	newInfo.teamTask = atoi(v);
ADDRLP4 1740
INDIRP4
ARGP4
ADDRLP4 1816
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0+132
ADDRLP4 1816
INDIRI4
ASGNI4
line 1077
;1075:
;1076:	// team leader
;1077:	v = Info_ValueForKey( configstring, "tl" );
ADDRLP4 1744
INDIRP4
ARGP4
ADDRGP4 $556
ARGP4
ADDRLP4 1820
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 1740
ADDRLP4 1820
INDIRP4
ASGNP4
line 1078
;1078:	newInfo.teamLeader = atoi(v);
ADDRLP4 1740
INDIRP4
ARGP4
ADDRLP4 1824
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0+136
ADDRLP4 1824
INDIRI4
ASGNI4
line 1080
;1079:
;1080:	v = Info_ValueForKey( configstring, "g_redteam" );
ADDRLP4 1744
INDIRP4
ARGP4
ADDRGP4 $558
ARGP4
ADDRLP4 1828
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 1740
ADDRLP4 1828
INDIRP4
ASGNP4
line 1081
;1081:	Q_strncpyz(newInfo.redTeam, v, MAX_TEAMNAME);
ADDRLP4 0+424
ARGP4
ADDRLP4 1740
INDIRP4
ARGP4
CNSTI4 32
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1083
;1082:
;1083:	v = Info_ValueForKey( configstring, "g_blueteam" );
ADDRLP4 1744
INDIRP4
ARGP4
ADDRGP4 $560
ARGP4
ADDRLP4 1832
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 1740
ADDRLP4 1832
INDIRP4
ASGNP4
line 1084
;1084:	Q_strncpyz(newInfo.blueTeam, v, MAX_TEAMNAME);
ADDRLP4 0+456
ARGP4
ADDRLP4 1740
INDIRP4
ARGP4
CNSTI4 32
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1087
;1085:
;1086:	// model
;1087:	v = Info_ValueForKey( configstring, "model" );
ADDRLP4 1744
INDIRP4
ARGP4
ADDRGP4 $562
ARGP4
ADDRLP4 1836
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 1740
ADDRLP4 1836
INDIRP4
ASGNP4
line 1088
;1088:	if ( cg_forceModel.integer ) {
ADDRGP4 cg_forceModel+12
INDIRI4
CNSTI4 0
EQI4 $563
line 1094
;1089:		// forcemodel makes everyone use a single model
;1090:		// to prevent load hitches
;1091:		char modelStr[MAX_QPATH];
;1092:		char *skin;
;1093:
;1094:		if( cgs.gametype >= GT_TEAM ) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
LTI4 $566
line 1095
;1095:			Q_strncpyz( newInfo.modelName, DEFAULT_TEAM_MODEL, sizeof( newInfo.modelName ) );
ADDRLP4 0+168
ARGP4
ADDRGP4 $444
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1096
;1096:			Q_strncpyz( newInfo.skinName, "default", sizeof( newInfo.skinName ) );
ADDRLP4 0+232
ARGP4
ADDRGP4 $140
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1097
;1097:		} else {
ADDRGP4 $567
JUMPV
LABELV $566
line 1098
;1098:			trap_Cvar_VariableStringBuffer( "model", modelStr, sizeof( modelStr ) );
ADDRGP4 $562
ARGP4
ADDRLP4 1840
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 trap_Cvar_VariableStringBuffer
CALLV
pop
line 1099
;1099:			if ( ( skin = strchr( modelStr, '/' ) ) == NULL) {
ADDRLP4 1840
ARGP4
CNSTI4 47
ARGI4
ADDRLP4 1908
ADDRGP4 strchr
CALLP4
ASGNP4
ADDRLP4 1904
ADDRLP4 1908
INDIRP4
ASGNP4
ADDRLP4 1908
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $573
line 1100
;1100:				skin = "default";
ADDRLP4 1904
ADDRGP4 $140
ASGNP4
line 1101
;1101:			} else {
ADDRGP4 $574
JUMPV
LABELV $573
line 1102
;1102:				*skin++ = 0;
ADDRLP4 1912
ADDRLP4 1904
INDIRP4
ASGNP4
ADDRLP4 1904
ADDRLP4 1912
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 1912
INDIRP4
CNSTI1 0
ASGNI1
line 1103
;1103:			}
LABELV $574
line 1105
;1104:
;1105:			Q_strncpyz( newInfo.skinName, skin, sizeof( newInfo.skinName ) );
ADDRLP4 0+232
ARGP4
ADDRLP4 1904
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1106
;1106:			Q_strncpyz( newInfo.modelName, modelStr, sizeof( newInfo.modelName ) );
ADDRLP4 0+168
ARGP4
ADDRLP4 1840
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1107
;1107:		}
LABELV $567
line 1109
;1108:
;1109:		if ( cgs.gametype >= GT_TEAM ) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
LTI4 $564
line 1111
;1110:			// keep skin name
;1111:			slash = strchr( v, '/' );
ADDRLP4 1740
INDIRP4
ARGP4
CNSTI4 47
ARGI4
ADDRLP4 1908
ADDRGP4 strchr
CALLP4
ASGNP4
ADDRLP4 1748
ADDRLP4 1908
INDIRP4
ASGNP4
line 1112
;1112:			if ( slash ) {
ADDRLP4 1748
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $564
line 1113
;1113:				Q_strncpyz( newInfo.skinName, slash + 1, sizeof( newInfo.skinName ) );
ADDRLP4 0+232
ARGP4
ADDRLP4 1748
INDIRP4
CNSTI4 1
ADDP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1114
;1114:			}
line 1115
;1115:		}
line 1116
;1116:	} else {
ADDRGP4 $564
JUMPV
LABELV $563
line 1117
;1117:		Q_strncpyz( newInfo.modelName, v, sizeof( newInfo.modelName ) );
ADDRLP4 0+168
ARGP4
ADDRLP4 1740
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1119
;1118:
;1119:		slash = strchr( newInfo.modelName, '/' );
ADDRLP4 0+168
ARGP4
CNSTI4 47
ARGI4
ADDRLP4 1840
ADDRGP4 strchr
CALLP4
ASGNP4
ADDRLP4 1748
ADDRLP4 1840
INDIRP4
ASGNP4
line 1120
;1120:		if ( !slash ) {
ADDRLP4 1748
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $589
line 1122
;1121:			// modelName didn not include a skin name
;1122:			Q_strncpyz( newInfo.skinName, "default", sizeof( newInfo.skinName ) );
ADDRLP4 0+232
ARGP4
ADDRGP4 $140
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1123
;1123:		} else {
ADDRGP4 $590
JUMPV
LABELV $589
line 1124
;1124:			Q_strncpyz( newInfo.skinName, slash + 1, sizeof( newInfo.skinName ) );
ADDRLP4 0+232
ARGP4
ADDRLP4 1748
INDIRP4
CNSTI4 1
ADDP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1126
;1125:			// truncate modelName
;1126:			*slash = 0;
ADDRLP4 1748
INDIRP4
CNSTI1 0
ASGNI1
line 1127
;1127:		}
LABELV $590
line 1128
;1128:	}
LABELV $564
line 1131
;1129:
;1130:	// head model
;1131:	v = Info_ValueForKey( configstring, "hmodel" );
ADDRLP4 1744
INDIRP4
ARGP4
ADDRGP4 $595
ARGP4
ADDRLP4 1840
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 1740
ADDRLP4 1840
INDIRP4
ASGNP4
line 1132
;1132:	if ( cg_forceModel.integer ) {
ADDRGP4 cg_forceModel+12
INDIRI4
CNSTI4 0
EQI4 $596
line 1138
;1133:		// forcemodel makes everyone use a single model
;1134:		// to prevent load hitches
;1135:		char modelStr[MAX_QPATH];
;1136:		char *skin;
;1137:
;1138:		if( cgs.gametype >= GT_TEAM ) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
LTI4 $599
line 1139
;1139:			Q_strncpyz( newInfo.headModelName, DEFAULT_TEAM_MODEL, sizeof( newInfo.headModelName ) );
ADDRLP4 0+296
ARGP4
ADDRGP4 $444
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1140
;1140:			Q_strncpyz( newInfo.headSkinName, "default", sizeof( newInfo.headSkinName ) );
ADDRLP4 0+360
ARGP4
ADDRGP4 $140
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1141
;1141:		} else {
ADDRGP4 $600
JUMPV
LABELV $599
line 1142
;1142:			trap_Cvar_VariableStringBuffer( "headmodel", modelStr, sizeof( modelStr ) );
ADDRGP4 $606
ARGP4
ADDRLP4 1844
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 trap_Cvar_VariableStringBuffer
CALLV
pop
line 1143
;1143:			if ( ( skin = strchr( modelStr, '/' ) ) == NULL) {
ADDRLP4 1844
ARGP4
CNSTI4 47
ARGI4
ADDRLP4 1912
ADDRGP4 strchr
CALLP4
ASGNP4
ADDRLP4 1908
ADDRLP4 1912
INDIRP4
ASGNP4
ADDRLP4 1912
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $607
line 1144
;1144:				skin = "default";
ADDRLP4 1908
ADDRGP4 $140
ASGNP4
line 1145
;1145:			} else {
ADDRGP4 $608
JUMPV
LABELV $607
line 1146
;1146:				*skin++ = 0;
ADDRLP4 1916
ADDRLP4 1908
INDIRP4
ASGNP4
ADDRLP4 1908
ADDRLP4 1916
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 1916
INDIRP4
CNSTI1 0
ASGNI1
line 1147
;1147:			}
LABELV $608
line 1149
;1148:
;1149:			Q_strncpyz( newInfo.headSkinName, skin, sizeof( newInfo.headSkinName ) );
ADDRLP4 0+360
ARGP4
ADDRLP4 1908
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1150
;1150:			Q_strncpyz( newInfo.headModelName, modelStr, sizeof( newInfo.headModelName ) );
ADDRLP4 0+296
ARGP4
ADDRLP4 1844
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1151
;1151:		}
LABELV $600
line 1153
;1152:
;1153:		if ( cgs.gametype >= GT_TEAM ) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
LTI4 $597
line 1155
;1154:			// keep skin name
;1155:			slash = strchr( v, '/' );
ADDRLP4 1740
INDIRP4
ARGP4
CNSTI4 47
ARGI4
ADDRLP4 1912
ADDRGP4 strchr
CALLP4
ASGNP4
ADDRLP4 1748
ADDRLP4 1912
INDIRP4
ASGNP4
line 1156
;1156:			if ( slash ) {
ADDRLP4 1748
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $597
line 1157
;1157:				Q_strncpyz( newInfo.headSkinName, slash + 1, sizeof( newInfo.headSkinName ) );
ADDRLP4 0+360
ARGP4
ADDRLP4 1748
INDIRP4
CNSTI4 1
ADDP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1158
;1158:			}
line 1159
;1159:		}
line 1160
;1160:	} else {
ADDRGP4 $597
JUMPV
LABELV $596
line 1161
;1161:		Q_strncpyz( newInfo.headModelName, v, sizeof( newInfo.headModelName ) );
ADDRLP4 0+296
ARGP4
ADDRLP4 1740
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1163
;1162:
;1163:		slash = strchr( newInfo.headModelName, '/' );
ADDRLP4 0+296
ARGP4
CNSTI4 47
ARGI4
ADDRLP4 1844
ADDRGP4 strchr
CALLP4
ASGNP4
ADDRLP4 1748
ADDRLP4 1844
INDIRP4
ASGNP4
line 1164
;1164:		if ( !slash ) {
ADDRLP4 1748
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $623
line 1166
;1165:			// modelName didn not include a skin name
;1166:			Q_strncpyz( newInfo.headSkinName, "default", sizeof( newInfo.headSkinName ) );
ADDRLP4 0+360
ARGP4
ADDRGP4 $140
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1167
;1167:		} else {
ADDRGP4 $624
JUMPV
LABELV $623
line 1168
;1168:			Q_strncpyz( newInfo.headSkinName, slash + 1, sizeof( newInfo.headSkinName ) );
ADDRLP4 0+360
ARGP4
ADDRLP4 1748
INDIRP4
CNSTI4 1
ADDP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1170
;1169:			// truncate modelName
;1170:			*slash = 0;
ADDRLP4 1748
INDIRP4
CNSTI1 0
ASGNI1
line 1171
;1171:		}
LABELV $624
line 1172
;1172:	}
LABELV $597
line 1176
;1173:
;1174:	// scan for an existing clientinfo that matches this modelname
;1175:	// so we can avoid loading checks if possible
;1176:	if ( !CG_ScanForExistingClientInfo( &newInfo ) ) {
ADDRLP4 0
ARGP4
ADDRLP4 1844
ADDRGP4 CG_ScanForExistingClientInfo
CALLI4
ASGNI4
ADDRLP4 1844
INDIRI4
CNSTI4 0
NEI4 $629
line 1179
;1177:		qboolean	forceDefer;
;1178:
;1179:		forceDefer = trap_MemoryRemaining() < 4000000;
ADDRLP4 1856
ADDRGP4 trap_MemoryRemaining
CALLI4
ASGNI4
ADDRLP4 1856
INDIRI4
CNSTI4 4000000
GEI4 $632
ADDRLP4 1852
CNSTI4 1
ASGNI4
ADDRGP4 $633
JUMPV
LABELV $632
ADDRLP4 1852
CNSTI4 0
ASGNI4
LABELV $633
ADDRLP4 1848
ADDRLP4 1852
INDIRI4
ASGNI4
line 1182
;1180:
;1181:		// if we are defering loads, just have it pick the first valid
;1182:		if ( forceDefer || (cg_deferPlayers.integer && !cg_buildScript.integer && !cg.loading ) ) {
ADDRLP4 1860
CNSTI4 0
ASGNI4
ADDRLP4 1848
INDIRI4
ADDRLP4 1860
INDIRI4
NEI4 $639
ADDRGP4 cg_deferPlayers+12
INDIRI4
ADDRLP4 1860
INDIRI4
EQI4 $634
ADDRGP4 cg_buildScript+12
INDIRI4
ADDRLP4 1860
INDIRI4
NEI4 $634
ADDRGP4 cg+20
INDIRI4
ADDRLP4 1860
INDIRI4
NEI4 $634
LABELV $639
line 1184
;1183:			// keep whatever they had if it won't violate team skins
;1184:			CG_SetDeferredClientInfo( &newInfo );
ADDRLP4 0
ARGP4
ADDRGP4 CG_SetDeferredClientInfo
CALLV
pop
line 1186
;1185:			// if we are low on memory, leave them with this model
;1186:			if ( forceDefer ) {
ADDRLP4 1848
INDIRI4
CNSTI4 0
EQI4 $635
line 1187
;1187:				CG_Printf( "Memory is low.  Using deferred model.\n" );
ADDRGP4 $642
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 1188
;1188:				newInfo.deferred = qfalse;
ADDRLP4 0+488
CNSTI4 0
ASGNI4
line 1189
;1189:			}
line 1190
;1190:		} else {
ADDRGP4 $635
JUMPV
LABELV $634
line 1191
;1191:			CG_LoadClientInfo( &newInfo );
ADDRLP4 0
ARGP4
ADDRGP4 CG_LoadClientInfo
CALLV
pop
line 1192
;1192:		}
LABELV $635
line 1193
;1193:	}
LABELV $629
line 1196
;1194:
;1195:	// replace whatever was there with the new one
;1196:	newInfo.infoValid = qtrue;
ADDRLP4 0
CNSTI4 1
ASGNI4
line 1197
;1197:	*ci = newInfo;
ADDRLP4 1752
INDIRP4
ADDRLP4 0
INDIRB
ASGNB 1740
line 1198
;1198:}
LABELV $533
endproc CG_NewClientInfo 1920 12
export CG_LoadDeferredPlayers
proc CG_LoadDeferredPlayers 20 4
line 1211
;1199:
;1200:
;1201:
;1202:/*
;1203:======================
;1204:CG_LoadDeferredPlayers
;1205:
;1206:Called each frame when a player is dead
;1207:and the scoreboard is up
;1208:so deferred players can be loaded
;1209:======================
;1210:*/
;1211:void CG_LoadDeferredPlayers( void ) {
line 1216
;1212:	int		i;
;1213:	clientInfo_t	*ci;
;1214:
;1215:	// scan for a deferred player to load
;1216:	for ( i = 0, ci = cgs.clientinfo ; i < cgs.maxclients ; i++, ci++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRLP4 0
ADDRGP4 cgs+40972
ASGNP4
ADDRGP4 $648
JUMPV
LABELV $645
line 1217
;1217:		if ( ci->infoValid && ci->deferred ) {
ADDRLP4 12
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRP4
INDIRI4
ADDRLP4 12
INDIRI4
EQI4 $651
ADDRLP4 0
INDIRP4
CNSTI4 488
ADDP4
INDIRI4
ADDRLP4 12
INDIRI4
EQI4 $651
line 1219
;1218:			// if we are low on memory, leave it deferred
;1219:			if ( trap_MemoryRemaining() < 4000000 ) {
ADDRLP4 16
ADDRGP4 trap_MemoryRemaining
CALLI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 4000000
GEI4 $653
line 1220
;1220:				CG_Printf( "Memory is low.  Using deferred model.\n" );
ADDRGP4 $642
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 1221
;1221:				ci->deferred = qfalse;
ADDRLP4 0
INDIRP4
CNSTI4 488
ADDP4
CNSTI4 0
ASGNI4
line 1222
;1222:				continue;
ADDRGP4 $646
JUMPV
LABELV $653
line 1224
;1223:			}
;1224:			CG_LoadClientInfo( ci );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_LoadClientInfo
CALLV
pop
line 1226
;1225://			break;
;1226:		}
LABELV $651
line 1227
;1227:	}
LABELV $646
line 1216
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 1740
ADDP4
ASGNP4
LABELV $648
ADDRLP4 4
INDIRI4
ADDRGP4 cgs+31480
INDIRI4
LTI4 $645
line 1228
;1228:}
LABELV $644
endproc CG_LoadDeferredPlayers 20 4
proc CG_SetLerpFrameAnimation 12 8
line 1246
;1229:
;1230:/*
;1231:=============================================================================
;1232:
;1233:PLAYER ANIMATION
;1234:
;1235:=============================================================================
;1236:*/
;1237:
;1238:
;1239:/*
;1240:===============
;1241:CG_SetLerpFrameAnimation
;1242:
;1243:may include ANIM_TOGGLEBIT
;1244:===============
;1245:*/
;1246:static void CG_SetLerpFrameAnimation( clientInfo_t *ci, lerpFrame_t *lf, int newAnimation ) {
line 1249
;1247:	animation_t	*anim;
;1248:
;1249:	lf->animationNumber = newAnimation;
ADDRFP4 4
INDIRP4
CNSTI4 36
ADDP4
ADDRFP4 8
INDIRI4
ASGNI4
line 1250
;1250:	newAnimation &= ~ANIM_TOGGLEBIT;
ADDRFP4 8
ADDRFP4 8
INDIRI4
CNSTI4 -129
BANDI4
ASGNI4
line 1252
;1251:
;1252:	if ( newAnimation < 0 || newAnimation >= MAX_TOTALANIMATIONS ) {
ADDRLP4 4
ADDRFP4 8
INDIRI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
LTI4 $658
ADDRLP4 4
INDIRI4
CNSTI4 37
LTI4 $656
LABELV $658
line 1253
;1253:		CG_Error( "Bad animation number: %i", newAnimation );
ADDRGP4 $659
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRGP4 CG_Error
CALLV
pop
line 1254
;1254:	}
LABELV $656
line 1256
;1255:
;1256:	anim = &ci->animations[ newAnimation ];
ADDRLP4 0
CNSTI4 28
ADDRFP4 8
INDIRI4
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
ADDP4
ASGNP4
line 1258
;1257:
;1258:	lf->animation = anim;
ADDRFP4 4
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 0
INDIRP4
ASGNP4
line 1259
;1259:	lf->animationTime = lf->frameTime + anim->initialLerp;
ADDRLP4 8
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 8
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ADDI4
ASGNI4
line 1261
;1260:
;1261:	if ( cg_debugAnim.integer ) {
ADDRGP4 cg_debugAnim+12
INDIRI4
CNSTI4 0
EQI4 $660
line 1262
;1262:		CG_Printf( "Anim: %i\n", newAnimation );
ADDRGP4 $663
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRGP4 CG_Printf
CALLV
pop
line 1263
;1263:	}
LABELV $660
line 1264
;1264:}
LABELV $655
endproc CG_SetLerpFrameAnimation 12 8
proc CG_RunLerpFrame 44 12
line 1274
;1265:
;1266:/*
;1267:===============
;1268:CG_RunLerpFrame
;1269:
;1270:Sets cg.snap, cg.oldFrame, and cg.backlerp
;1271:cg.time should be between oldFrameTime and frameTime after exit
;1272:===============
;1273:*/
;1274:static void CG_RunLerpFrame( clientInfo_t *ci, lerpFrame_t *lf, int newAnimation, float speedScale ) {
line 1279
;1275:	int			f, numFrames;
;1276:	animation_t	*anim;
;1277:
;1278:	// debugging tool to get no animations
;1279:	if ( cg_animSpeed.integer == 0 ) {
ADDRGP4 cg_animSpeed+12
INDIRI4
CNSTI4 0
NEI4 $665
line 1280
;1280:		lf->oldFrame = lf->frame = lf->backlerp = 0;
ADDRLP4 12
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 16
CNSTF4 0
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 16
ADDP4
ADDRLP4 16
INDIRF4
ASGNF4
ADDRLP4 20
ADDRLP4 16
INDIRF4
CVFI4 4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 20
INDIRI4
ASGNI4
ADDRLP4 12
INDIRP4
ADDRLP4 20
INDIRI4
ASGNI4
line 1281
;1281:		return;
ADDRGP4 $664
JUMPV
LABELV $665
line 1285
;1282:	}
;1283:
;1284:	// see if the animation sequence is switching
;1285:	if ( newAnimation != lf->animationNumber || !lf->animation ) {
ADDRLP4 12
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 8
INDIRI4
ADDRLP4 12
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
NEI4 $670
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $668
LABELV $670
line 1286
;1286:		CG_SetLerpFrameAnimation( ci, lf, newAnimation );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRGP4 CG_SetLerpFrameAnimation
CALLV
pop
line 1287
;1287:	}
LABELV $668
line 1291
;1288:
;1289:	// if we have passed the current frame, move it to
;1290:	// oldFrame and calculate a new frame
;1291:	if ( cg.time >= lf->frameTime ) {
ADDRGP4 cg+109652
INDIRI4
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
LTI4 $671
line 1292
;1292:		lf->oldFrame = lf->frame;
ADDRLP4 16
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ASGNI4
line 1293
;1293:		lf->oldFrameTime = lf->frameTime;
ADDRLP4 20
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 20
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ASGNI4
line 1296
;1294:
;1295:		// get the next frame based on the animation
;1296:		anim = lf->animation;
ADDRLP4 0
ADDRFP4 4
INDIRP4
CNSTI4 40
ADDP4
INDIRP4
ASGNP4
line 1297
;1297:		if ( !anim->frameLerp ) {
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 0
NEI4 $674
line 1298
;1298:			return;		// shouldn't happen
ADDRGP4 $664
JUMPV
LABELV $674
line 1300
;1299:		}
;1300:		if ( cg.time < lf->animationTime ) {
ADDRGP4 cg+109652
INDIRI4
ADDRFP4 4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
GEI4 $676
line 1301
;1301:			lf->frameTime = lf->animationTime;		// initial lerp
ADDRLP4 24
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 24
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
ASGNI4
line 1302
;1302:		} else {
ADDRGP4 $677
JUMPV
LABELV $676
line 1303
;1303:			lf->frameTime = lf->oldFrameTime + anim->frameLerp;
ADDRLP4 24
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 28
CNSTI4 12
ASGNI4
ADDRLP4 24
INDIRP4
ADDRLP4 28
INDIRI4
ADDP4
ADDRLP4 24
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
ADDRLP4 28
INDIRI4
ADDP4
INDIRI4
ADDI4
ASGNI4
line 1304
;1304:		}
LABELV $677
line 1305
;1305:		f = ( lf->frameTime - lf->animationTime ) / anim->frameLerp;
ADDRLP4 24
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 28
CNSTI4 12
ASGNI4
ADDRLP4 4
ADDRLP4 24
INDIRP4
ADDRLP4 28
INDIRI4
ADDP4
INDIRI4
ADDRLP4 24
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
SUBI4
ADDRLP4 0
INDIRP4
ADDRLP4 28
INDIRI4
ADDP4
INDIRI4
DIVI4
ASGNI4
line 1306
;1306:		f *= speedScale;		// adjust for haste, etc
ADDRLP4 4
ADDRLP4 4
INDIRI4
CVIF4 4
ADDRFP4 12
INDIRF4
MULF4
CVFI4 4
ASGNI4
line 1308
;1307:
;1308:		numFrames = anim->numFrames;
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 1309
;1309:		if (anim->flipflop) {
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
CNSTI4 0
EQI4 $679
line 1310
;1310:			numFrames *= 2;
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 1
LSHI4
ASGNI4
line 1311
;1311:		}
LABELV $679
line 1312
;1312:		if ( f >= numFrames ) {
ADDRLP4 4
INDIRI4
ADDRLP4 8
INDIRI4
LTI4 $681
line 1313
;1313:			f -= numFrames;
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 8
INDIRI4
SUBI4
ASGNI4
line 1314
;1314:			if ( anim->loopFrames ) {
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 0
EQI4 $683
line 1315
;1315:				f %= anim->loopFrames;
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
MODI4
ASGNI4
line 1316
;1316:				f += anim->numFrames - anim->loopFrames;
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
SUBI4
ADDI4
ASGNI4
line 1317
;1317:			} else {
ADDRGP4 $684
JUMPV
LABELV $683
line 1318
;1318:				f = numFrames - 1;
ADDRLP4 4
ADDRLP4 8
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 1321
;1319:				// the animation is stuck at the end, so it
;1320:				// can immediately transition to another sequence
;1321:				lf->frameTime = cg.time;
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ADDRGP4 cg+109652
INDIRI4
ASGNI4
line 1322
;1322:			}
LABELV $684
line 1323
;1323:		}
LABELV $681
line 1324
;1324:		if ( anim->reversed ) {
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CNSTI4 0
EQI4 $686
line 1325
;1325:			lf->frame = anim->firstFrame + anim->numFrames - 1 - f;
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 0
INDIRP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ADDI4
CNSTI4 1
SUBI4
ADDRLP4 4
INDIRI4
SUBI4
ASGNI4
line 1326
;1326:		}
ADDRGP4 $687
JUMPV
LABELV $686
line 1327
;1327:		else if (anim->flipflop && f>=anim->numFrames) {
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
CNSTI4 0
EQI4 $688
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
LTI4 $688
line 1328
;1328:			lf->frame = anim->firstFrame + anim->numFrames - 1 - (f%anim->numFrames);
ADDRLP4 40
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 0
INDIRP4
INDIRI4
ADDRLP4 40
INDIRI4
ADDI4
CNSTI4 1
SUBI4
ADDRLP4 4
INDIRI4
ADDRLP4 40
INDIRI4
MODI4
SUBI4
ASGNI4
line 1329
;1329:		}
ADDRGP4 $689
JUMPV
LABELV $688
line 1330
;1330:		else {
line 1331
;1331:			lf->frame = anim->firstFrame + f;
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 0
INDIRP4
INDIRI4
ADDRLP4 4
INDIRI4
ADDI4
ASGNI4
line 1332
;1332:		}
LABELV $689
LABELV $687
line 1333
;1333:		if ( cg.time > lf->frameTime ) {
ADDRGP4 cg+109652
INDIRI4
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
LEI4 $690
line 1334
;1334:			lf->frameTime = cg.time;
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ADDRGP4 cg+109652
INDIRI4
ASGNI4
line 1335
;1335:			if ( cg_debugAnim.integer ) {
ADDRGP4 cg_debugAnim+12
INDIRI4
CNSTI4 0
EQI4 $694
line 1336
;1336:				CG_Printf( "Clamp lf->frameTime\n");
ADDRGP4 $697
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 1337
;1337:			}
LABELV $694
line 1338
;1338:		}
LABELV $690
line 1339
;1339:	}
LABELV $671
line 1341
;1340:
;1341:	if ( lf->frameTime > cg.time + 200 ) {
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ADDRGP4 cg+109652
INDIRI4
CNSTI4 200
ADDI4
LEI4 $698
line 1342
;1342:		lf->frameTime = cg.time;
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ADDRGP4 cg+109652
INDIRI4
ASGNI4
line 1343
;1343:	}
LABELV $698
line 1345
;1344:
;1345:	if ( lf->oldFrameTime > cg.time ) {
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ADDRGP4 cg+109652
INDIRI4
LEI4 $702
line 1346
;1346:		lf->oldFrameTime = cg.time;
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+109652
INDIRI4
ASGNI4
line 1347
;1347:	}
LABELV $702
line 1349
;1348:	// calculate current lerp value
;1349:	if ( lf->frameTime == lf->oldFrameTime ) {
ADDRLP4 16
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
NEI4 $706
line 1350
;1350:		lf->backlerp = 0;
ADDRFP4 4
INDIRP4
CNSTI4 16
ADDP4
CNSTF4 0
ASGNF4
line 1351
;1351:	} else {
ADDRGP4 $707
JUMPV
LABELV $706
line 1352
;1352:		lf->backlerp = 1.0 - (float)( cg.time - lf->oldFrameTime ) / ( lf->frameTime - lf->oldFrameTime );
ADDRLP4 20
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 24
ADDRLP4 20
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
ADDRLP4 20
INDIRP4
CNSTI4 16
ADDP4
CNSTF4 1065353216
ADDRGP4 cg+109652
INDIRI4
ADDRLP4 24
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 20
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ADDRLP4 24
INDIRI4
SUBI4
CVIF4 4
DIVF4
SUBF4
ASGNF4
line 1353
;1353:	}
LABELV $707
line 1354
;1354:}
LABELV $664
endproc CG_RunLerpFrame 44 12
proc CG_ClearLerpFrame 16 12
line 1362
;1355:
;1356:
;1357:/*
;1358:===============
;1359:CG_ClearLerpFrame
;1360:===============
;1361:*/
;1362:static void CG_ClearLerpFrame( clientInfo_t *ci, lerpFrame_t *lf, int animationNumber ) {
line 1363
;1363:	lf->frameTime = lf->oldFrameTime = cg.time;
ADDRLP4 0
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRGP4 cg+109652
INDIRI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 4
INDIRI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 4
INDIRI4
ASGNI4
line 1364
;1364:	CG_SetLerpFrameAnimation( ci, lf, animationNumber );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRGP4 CG_SetLerpFrameAnimation
CALLV
pop
line 1365
;1365:	lf->oldFrame = lf->frame = lf->animation->firstFrame;
ADDRLP4 8
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 8
INDIRP4
CNSTI4 40
ADDP4
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 12
INDIRI4
ASGNI4
ADDRLP4 8
INDIRP4
ADDRLP4 12
INDIRI4
ASGNI4
line 1366
;1366:}
LABELV $709
endproc CG_ClearLerpFrame 16 12
proc CG_PlayerAnimation 20 16
line 1375
;1367:
;1368:
;1369:/*
;1370:===============
;1371:CG_PlayerAnimation
;1372:===============
;1373:*/
;1374:static void CG_PlayerAnimation( centity_t *cent, int *legsOld, int *legs, float *legsBackLerp,
;1375:						int *torsoOld, int *torso, float *torsoBackLerp ) {
line 1380
;1376:	clientInfo_t	*ci;
;1377:	int				clientNum;
;1378:	float			speedScale;
;1379:
;1380:	clientNum = cent->currentState.clientNum;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
ASGNI4
line 1382
;1381:
;1382:	if ( cg_noPlayerAnims.integer ) {
ADDRGP4 cg_noPlayerAnims+12
INDIRI4
CNSTI4 0
EQI4 $712
line 1383
;1383:		*legsOld = *legs = *torsoOld = *torso = 0;
ADDRLP4 12
CNSTI4 0
ASGNI4
ADDRFP4 20
INDIRP4
ADDRLP4 12
INDIRI4
ASGNI4
ADDRFP4 16
INDIRP4
ADDRLP4 12
INDIRI4
ASGNI4
ADDRFP4 8
INDIRP4
ADDRLP4 12
INDIRI4
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 12
INDIRI4
ASGNI4
line 1384
;1384:		return;
ADDRGP4 $711
JUMPV
LABELV $712
line 1387
;1385:	}
;1386:
;1387:	if ( cent->currentState.powerups & ( 1 << PW_HASTE ) ) {
ADDRFP4 0
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
EQI4 $715
line 1388
;1388:		speedScale = 1.5;
ADDRLP4 4
CNSTF4 1069547520
ASGNF4
line 1389
;1389:	} else {
ADDRGP4 $716
JUMPV
LABELV $715
line 1390
;1390:		speedScale = 1;
ADDRLP4 4
CNSTF4 1065353216
ASGNF4
line 1391
;1391:	}
LABELV $716
line 1393
;1392:
;1393:	ci = &cgs.clientinfo[ clientNum ];
ADDRLP4 0
CNSTI4 1740
ADDRLP4 8
INDIRI4
MULI4
ADDRGP4 cgs+40972
ADDP4
ASGNP4
line 1396
;1394:
;1395:	// do the shuffle turn frames locally
;1396:	if ( cent->pe.legs.yawing && ( cent->currentState.legsAnim & ~ANIM_TOGGLEBIT ) == LEGS_IDLE ) {
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 484
ADDP4
INDIRI4
CNSTI4 0
EQI4 $718
ADDRLP4 12
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
CNSTI4 -129
BANDI4
CNSTI4 22
NEI4 $718
line 1397
;1397:		CG_RunLerpFrame( ci, &cent->pe.legs, LEGS_TURN, speedScale );
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 460
ADDP4
ARGP4
CNSTI4 24
ARGI4
ADDRLP4 4
INDIRF4
ARGF4
ADDRGP4 CG_RunLerpFrame
CALLV
pop
line 1398
;1398:	} else {
ADDRGP4 $719
JUMPV
LABELV $718
line 1399
;1399:		CG_RunLerpFrame( ci, &cent->pe.legs, cent->currentState.legsAnim, speedScale );
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 460
ADDP4
ARGP4
ADDRLP4 16
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
ARGI4
ADDRLP4 4
INDIRF4
ARGF4
ADDRGP4 CG_RunLerpFrame
CALLV
pop
line 1400
;1400:	}
LABELV $719
line 1402
;1401:
;1402:	*legsOld = cent->pe.legs.oldFrame;
ADDRFP4 4
INDIRP4
ADDRFP4 0
INDIRP4
CNSTI4 460
ADDP4
INDIRI4
ASGNI4
line 1403
;1403:	*legs = cent->pe.legs.frame;
ADDRFP4 8
INDIRP4
ADDRFP4 0
INDIRP4
CNSTI4 468
ADDP4
INDIRI4
ASGNI4
line 1404
;1404:	*legsBackLerp = cent->pe.legs.backlerp;
ADDRFP4 12
INDIRP4
ADDRFP4 0
INDIRP4
CNSTI4 476
ADDP4
INDIRF4
ASGNF4
line 1406
;1405:
;1406:	CG_RunLerpFrame( ci, &cent->pe.torso, cent->currentState.torsoAnim, speedScale );
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 508
ADDP4
ARGP4
ADDRLP4 16
INDIRP4
CNSTI4 200
ADDP4
INDIRI4
ARGI4
ADDRLP4 4
INDIRF4
ARGF4
ADDRGP4 CG_RunLerpFrame
CALLV
pop
line 1408
;1407:
;1408:	*torsoOld = cent->pe.torso.oldFrame;
ADDRFP4 16
INDIRP4
ADDRFP4 0
INDIRP4
CNSTI4 508
ADDP4
INDIRI4
ASGNI4
line 1409
;1409:	*torso = cent->pe.torso.frame;
ADDRFP4 20
INDIRP4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRI4
ASGNI4
line 1410
;1410:	*torsoBackLerp = cent->pe.torso.backlerp;
ADDRFP4 24
INDIRP4
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRF4
ASGNF4
line 1411
;1411:}
LABELV $711
endproc CG_PlayerAnimation 20 16
proc CG_SwingAngles 28 8
line 1427
;1412:
;1413:/*
;1414:=============================================================================
;1415:
;1416:PLAYER ANGLES
;1417:
;1418:=============================================================================
;1419:*/
;1420:
;1421:/*
;1422:==================
;1423:CG_SwingAngles
;1424:==================
;1425:*/
;1426:static void CG_SwingAngles( float destination, float swingTolerance, float clampTolerance,
;1427:					float speed, float *angle, qboolean *swinging ) {
line 1432
;1428:	float	swing;
;1429:	float	move;
;1430:	float	scale;
;1431:
;1432:	if ( !*swinging ) {
ADDRFP4 20
INDIRP4
INDIRI4
CNSTI4 0
NEI4 $721
line 1434
;1433:		// see if a swing should be started
;1434:		swing = AngleSubtract( *angle, destination );
ADDRFP4 16
INDIRP4
INDIRF4
ARGF4
ADDRFP4 0
INDIRF4
ARGF4
ADDRLP4 12
ADDRGP4 AngleSubtract
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 12
INDIRF4
ASGNF4
line 1435
;1435:		if ( swing > swingTolerance || swing < -swingTolerance ) {
ADDRLP4 20
ADDRFP4 4
INDIRF4
ASGNF4
ADDRLP4 0
INDIRF4
ADDRLP4 20
INDIRF4
GTF4 $725
ADDRLP4 0
INDIRF4
ADDRLP4 20
INDIRF4
NEGF4
GEF4 $723
LABELV $725
line 1436
;1436:			*swinging = qtrue;
ADDRFP4 20
INDIRP4
CNSTI4 1
ASGNI4
line 1437
;1437:		}
LABELV $723
line 1438
;1438:	}
LABELV $721
line 1440
;1439:
;1440:	if ( !*swinging ) {
ADDRFP4 20
INDIRP4
INDIRI4
CNSTI4 0
NEI4 $726
line 1441
;1441:		return;
ADDRGP4 $720
JUMPV
LABELV $726
line 1446
;1442:	}
;1443:	
;1444:	// modify the speed depending on the delta
;1445:	// so it doesn't seem so linear
;1446:	swing = AngleSubtract( destination, *angle );
ADDRFP4 0
INDIRF4
ARGF4
ADDRFP4 16
INDIRP4
INDIRF4
ARGF4
ADDRLP4 12
ADDRGP4 AngleSubtract
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 12
INDIRF4
ASGNF4
line 1447
;1447:	scale = fabs( swing );
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 16
ADDRGP4 fabs
CALLF4
ASGNF4
ADDRLP4 4
ADDRLP4 16
INDIRF4
ASGNF4
line 1448
;1448:	if ( scale < swingTolerance * 0.5 ) {
ADDRLP4 4
INDIRF4
CNSTF4 1056964608
ADDRFP4 4
INDIRF4
MULF4
GEF4 $728
line 1449
;1449:		scale = 0.5;
ADDRLP4 4
CNSTF4 1056964608
ASGNF4
line 1450
;1450:	} else if ( scale < swingTolerance ) {
ADDRGP4 $729
JUMPV
LABELV $728
ADDRLP4 4
INDIRF4
ADDRFP4 4
INDIRF4
GEF4 $730
line 1451
;1451:		scale = 1.0;
ADDRLP4 4
CNSTF4 1065353216
ASGNF4
line 1452
;1452:	} else {
ADDRGP4 $731
JUMPV
LABELV $730
line 1453
;1453:		scale = 2.0;
ADDRLP4 4
CNSTF4 1073741824
ASGNF4
line 1454
;1454:	}
LABELV $731
LABELV $729
line 1457
;1455:
;1456:	// swing towards the destination angle
;1457:	if ( swing >= 0 ) {
ADDRLP4 0
INDIRF4
CNSTF4 0
LTF4 $732
line 1458
;1458:		move = cg.frametime * scale * speed;
ADDRLP4 8
ADDRGP4 cg+109648
INDIRI4
CVIF4 4
ADDRLP4 4
INDIRF4
MULF4
ADDRFP4 12
INDIRF4
MULF4
ASGNF4
line 1459
;1459:		if ( move >= swing ) {
ADDRLP4 8
INDIRF4
ADDRLP4 0
INDIRF4
LTF4 $735
line 1460
;1460:			move = swing;
ADDRLP4 8
ADDRLP4 0
INDIRF4
ASGNF4
line 1461
;1461:			*swinging = qfalse;
ADDRFP4 20
INDIRP4
CNSTI4 0
ASGNI4
line 1462
;1462:		}
LABELV $735
line 1463
;1463:		*angle = AngleMod( *angle + move );
ADDRLP4 20
ADDRFP4 16
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
INDIRF4
ADDRLP4 8
INDIRF4
ADDF4
ARGF4
ADDRLP4 24
ADDRGP4 AngleMod
CALLF4
ASGNF4
ADDRLP4 20
INDIRP4
ADDRLP4 24
INDIRF4
ASGNF4
line 1464
;1464:	} else if ( swing < 0 ) {
ADDRGP4 $733
JUMPV
LABELV $732
ADDRLP4 0
INDIRF4
CNSTF4 0
GEF4 $737
line 1465
;1465:		move = cg.frametime * scale * -speed;
ADDRLP4 8
ADDRGP4 cg+109648
INDIRI4
CVIF4 4
ADDRLP4 4
INDIRF4
MULF4
ADDRFP4 12
INDIRF4
NEGF4
MULF4
ASGNF4
line 1466
;1466:		if ( move <= swing ) {
ADDRLP4 8
INDIRF4
ADDRLP4 0
INDIRF4
GTF4 $740
line 1467
;1467:			move = swing;
ADDRLP4 8
ADDRLP4 0
INDIRF4
ASGNF4
line 1468
;1468:			*swinging = qfalse;
ADDRFP4 20
INDIRP4
CNSTI4 0
ASGNI4
line 1469
;1469:		}
LABELV $740
line 1470
;1470:		*angle = AngleMod( *angle + move );
ADDRLP4 20
ADDRFP4 16
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
INDIRF4
ADDRLP4 8
INDIRF4
ADDF4
ARGF4
ADDRLP4 24
ADDRGP4 AngleMod
CALLF4
ASGNF4
ADDRLP4 20
INDIRP4
ADDRLP4 24
INDIRF4
ASGNF4
line 1471
;1471:	}
LABELV $737
LABELV $733
line 1474
;1472:
;1473:	// clamp to no more than tolerance
;1474:	swing = AngleSubtract( destination, *angle );
ADDRFP4 0
INDIRF4
ARGF4
ADDRFP4 16
INDIRP4
INDIRF4
ARGF4
ADDRLP4 20
ADDRGP4 AngleSubtract
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 20
INDIRF4
ASGNF4
line 1475
;1475:	if ( swing > clampTolerance ) {
ADDRLP4 0
INDIRF4
ADDRFP4 8
INDIRF4
LEF4 $742
line 1476
;1476:		*angle = AngleMod( destination - (clampTolerance - 1) );
ADDRFP4 0
INDIRF4
ADDRFP4 8
INDIRF4
CNSTF4 1065353216
SUBF4
SUBF4
ARGF4
ADDRLP4 24
ADDRGP4 AngleMod
CALLF4
ASGNF4
ADDRFP4 16
INDIRP4
ADDRLP4 24
INDIRF4
ASGNF4
line 1477
;1477:	} else if ( swing < -clampTolerance ) {
ADDRGP4 $743
JUMPV
LABELV $742
ADDRLP4 0
INDIRF4
ADDRFP4 8
INDIRF4
NEGF4
GEF4 $744
line 1478
;1478:		*angle = AngleMod( destination + (clampTolerance - 1) );
ADDRFP4 0
INDIRF4
ADDRFP4 8
INDIRF4
CNSTF4 1065353216
SUBF4
ADDF4
ARGF4
ADDRLP4 24
ADDRGP4 AngleMod
CALLF4
ASGNF4
ADDRFP4 16
INDIRP4
ADDRLP4 24
INDIRF4
ASGNF4
line 1479
;1479:	}
LABELV $744
LABELV $743
line 1480
;1480:}
LABELV $720
endproc CG_SwingAngles 28 8
proc CG_AddPainTwitch 12 0
line 1487
;1481:
;1482:/*
;1483:=================
;1484:CG_AddPainTwitch
;1485:=================
;1486:*/
;1487:static void CG_AddPainTwitch( centity_t *cent, vec3_t torsoAngles ) {
line 1491
;1488:	int		t;
;1489:	float	f;
;1490:
;1491:	t = cg.time - cent->pe.painTime;
ADDRLP4 0
ADDRGP4 cg+109652
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 604
ADDP4
INDIRI4
SUBI4
ASGNI4
line 1492
;1492:	if ( t >= PAIN_TWITCH_TIME ) {
ADDRLP4 0
INDIRI4
CNSTI4 200
LTI4 $748
line 1493
;1493:		return;
ADDRGP4 $746
JUMPV
LABELV $748
line 1496
;1494:	}
;1495:
;1496:	f = 1.0 - (float)t / PAIN_TWITCH_TIME;
ADDRLP4 4
CNSTF4 1065353216
ADDRLP4 0
INDIRI4
CVIF4 4
CNSTF4 1128792064
DIVF4
SUBF4
ASGNF4
line 1498
;1497:
;1498:	if ( cent->pe.painDirection ) {
ADDRFP4 0
INDIRP4
CNSTI4 608
ADDP4
INDIRI4
CNSTI4 0
EQI4 $750
line 1499
;1499:		torsoAngles[ROLL] += 20 * f;
ADDRLP4 8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRF4
CNSTF4 1101004800
ADDRLP4 4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1500
;1500:	} else {
ADDRGP4 $751
JUMPV
LABELV $750
line 1501
;1501:		torsoAngles[ROLL] -= 20 * f;
ADDRLP4 8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRF4
CNSTF4 1101004800
ADDRLP4 4
INDIRF4
MULF4
SUBF4
ASGNF4
line 1502
;1502:	}
LABELV $751
line 1503
;1503:}
LABELV $746
endproc CG_AddPainTwitch 12 0
data
align 4
LABELV $753
byte 4 0
byte 4 22
byte 4 45
byte 4 -22
byte 4 0
byte 4 22
byte 4 -45
byte 4 -22
code
proc CG_PlayerAngles 148 24
line 1520
;1504:
;1505:
;1506:/*
;1507:===============
;1508:CG_PlayerAngles
;1509:
;1510:Handles seperate torso motion
;1511:
;1512:  legs pivot based on direction of movement
;1513:
;1514:  head always looks exactly at cent->lerpAngles
;1515:
;1516:  if motion < 20 degrees, show in head only
;1517:  if < 45 degrees, also show in torso
;1518:===============
;1519:*/
;1520:static void CG_PlayerAngles( centity_t *cent, vec3_t legs[3], vec3_t torso[3], vec3_t head[3] ) {
line 1529
;1521:	vec3_t		legsAngles, torsoAngles, headAngles;
;1522:	float		dest;
;1523:	static	int	movementOffsets[8] = { 0, 22, 45, -22, 0, 22, -45, -22 };
;1524:	vec3_t		velocity;
;1525:	float		speed;
;1526:	int			dir, clientNum;
;1527:	clientInfo_t	*ci;
;1528:
;1529:	VectorCopy( cent->lerpAngles, headAngles );
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 728
ADDP4
INDIRB
ASGNB 12
line 1530
;1530:	headAngles[YAW] = AngleMod( headAngles[YAW] );
ADDRLP4 24+4
INDIRF4
ARGF4
ADDRLP4 68
ADDRGP4 AngleMod
CALLF4
ASGNF4
ADDRLP4 24+4
ADDRLP4 68
INDIRF4
ASGNF4
line 1531
;1531:	VectorClear( legsAngles );
ADDRLP4 72
CNSTF4 0
ASGNF4
ADDRLP4 12+8
ADDRLP4 72
INDIRF4
ASGNF4
ADDRLP4 12+4
ADDRLP4 72
INDIRF4
ASGNF4
ADDRLP4 12
ADDRLP4 72
INDIRF4
ASGNF4
line 1532
;1532:	VectorClear( torsoAngles );
ADDRLP4 76
CNSTF4 0
ASGNF4
ADDRLP4 0+8
ADDRLP4 76
INDIRF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 76
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 76
INDIRF4
ASGNF4
line 1537
;1533:
;1534:	// --------- yaw -------------
;1535:
;1536:	// allow yaw to drift a bit
;1537:	if ( ( cent->currentState.legsAnim & ~ANIM_TOGGLEBIT ) != LEGS_IDLE 
ADDRLP4 80
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 84
CNSTI4 -129
ASGNI4
ADDRLP4 80
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
ADDRLP4 84
INDIRI4
BANDI4
CNSTI4 22
NEI4 $762
ADDRLP4 80
INDIRP4
CNSTI4 200
ADDP4
INDIRI4
ADDRLP4 84
INDIRI4
BANDI4
CNSTI4 11
EQI4 $760
LABELV $762
line 1538
;1538:		|| ( cent->currentState.torsoAnim & ~ANIM_TOGGLEBIT ) != TORSO_STAND  ) {
line 1540
;1539:		// if not standing still, always point all in the same direction
;1540:		cent->pe.torso.yawing = qtrue;	// always center
ADDRFP4 0
INDIRP4
CNSTI4 532
ADDP4
CNSTI4 1
ASGNI4
line 1541
;1541:		cent->pe.torso.pitching = qtrue;	// always center
ADDRFP4 0
INDIRP4
CNSTI4 540
ADDP4
CNSTI4 1
ASGNI4
line 1542
;1542:		cent->pe.legs.yawing = qtrue;	// always center
ADDRFP4 0
INDIRP4
CNSTI4 484
ADDP4
CNSTI4 1
ASGNI4
line 1543
;1543:	}
LABELV $760
line 1546
;1544:
;1545:	// adjust legs for movement dir
;1546:	if ( cent->currentState.eFlags & EF_DEAD ) {
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $763
line 1548
;1547:		// don't let dead bodies twitch
;1548:		dir = 0;
ADDRLP4 52
CNSTI4 0
ASGNI4
line 1549
;1549:	} else {
ADDRGP4 $764
JUMPV
LABELV $763
line 1550
;1550:		dir = cent->currentState.angles2[YAW];
ADDRLP4 52
ADDRFP4 0
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
CVFI4 4
ASGNI4
line 1551
;1551:		if ( dir < 0 || dir > 7 ) {
ADDRLP4 52
INDIRI4
CNSTI4 0
LTI4 $767
ADDRLP4 52
INDIRI4
CNSTI4 7
LEI4 $765
LABELV $767
line 1552
;1552:			CG_Error( "Bad player movement angle" );
ADDRGP4 $768
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 1553
;1553:		}
LABELV $765
line 1554
;1554:	}
LABELV $764
line 1555
;1555:	legsAngles[YAW] = headAngles[YAW] + movementOffsets[ dir ];
ADDRLP4 12+4
ADDRLP4 24+4
INDIRF4
ADDRLP4 52
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $753
ADDP4
INDIRI4
CVIF4 4
ADDF4
ASGNF4
line 1556
;1556:	torsoAngles[YAW] = headAngles[YAW] + 0.25 * movementOffsets[ dir ];
ADDRLP4 0+4
ADDRLP4 24+4
INDIRF4
CNSTF4 1048576000
ADDRLP4 52
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $753
ADDP4
INDIRI4
CVIF4 4
MULF4
ADDF4
ASGNF4
line 1559
;1557:
;1558:	// torso
;1559:	CG_SwingAngles( torsoAngles[YAW], 25, 90, cg_swingSpeed.value, &cent->pe.torso.yawAngle, &cent->pe.torso.yawing );
ADDRLP4 0+4
INDIRF4
ARGF4
CNSTF4 1103626240
ARGF4
CNSTF4 1119092736
ARGF4
ADDRGP4 cg_swingSpeed+8
INDIRF4
ARGF4
ADDRLP4 88
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 88
INDIRP4
CNSTI4 528
ADDP4
ARGP4
ADDRLP4 88
INDIRP4
CNSTI4 532
ADDP4
ARGP4
ADDRGP4 CG_SwingAngles
CALLV
pop
line 1560
;1560:	CG_SwingAngles( legsAngles[YAW], 40, 90, cg_swingSpeed.value, &cent->pe.legs.yawAngle, &cent->pe.legs.yawing );
ADDRLP4 12+4
INDIRF4
ARGF4
CNSTF4 1109393408
ARGF4
CNSTF4 1119092736
ARGF4
ADDRGP4 cg_swingSpeed+8
INDIRF4
ARGF4
ADDRLP4 92
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 92
INDIRP4
CNSTI4 480
ADDP4
ARGP4
ADDRLP4 92
INDIRP4
CNSTI4 484
ADDP4
ARGP4
ADDRGP4 CG_SwingAngles
CALLV
pop
line 1562
;1561:
;1562:	torsoAngles[YAW] = cent->pe.torso.yawAngle;
ADDRLP4 0+4
ADDRFP4 0
INDIRP4
CNSTI4 528
ADDP4
INDIRF4
ASGNF4
line 1563
;1563:	legsAngles[YAW] = cent->pe.legs.yawAngle;
ADDRLP4 12+4
ADDRFP4 0
INDIRP4
CNSTI4 480
ADDP4
INDIRF4
ASGNF4
line 1569
;1564:
;1565:
;1566:	// --------- pitch -------------
;1567:
;1568:	// only show a fraction of the pitch angle in the torso
;1569:	if ( headAngles[PITCH] > 180 ) {
ADDRLP4 24
INDIRF4
CNSTF4 1127481344
LEF4 $779
line 1570
;1570:		dest = (-360 + headAngles[PITCH]) * 0.75f;
ADDRLP4 60
CNSTF4 1061158912
ADDRLP4 24
INDIRF4
CNSTF4 3283353600
ADDF4
MULF4
ASGNF4
line 1571
;1571:	} else {
ADDRGP4 $780
JUMPV
LABELV $779
line 1572
;1572:		dest = headAngles[PITCH] * 0.75f;
ADDRLP4 60
CNSTF4 1061158912
ADDRLP4 24
INDIRF4
MULF4
ASGNF4
line 1573
;1573:	}
LABELV $780
line 1574
;1574:	CG_SwingAngles( dest, 15, 30, 0.1f, &cent->pe.torso.pitchAngle, &cent->pe.torso.pitching );
ADDRLP4 60
INDIRF4
ARGF4
CNSTF4 1097859072
ARGF4
CNSTF4 1106247680
ARGF4
CNSTF4 1036831949
ARGF4
ADDRLP4 96
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 96
INDIRP4
CNSTI4 536
ADDP4
ARGP4
ADDRLP4 96
INDIRP4
CNSTI4 540
ADDP4
ARGP4
ADDRGP4 CG_SwingAngles
CALLV
pop
line 1575
;1575:	torsoAngles[PITCH] = cent->pe.torso.pitchAngle;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 536
ADDP4
INDIRF4
ASGNF4
line 1578
;1576:
;1577:	//
;1578:	clientNum = cent->currentState.clientNum;
ADDRLP4 36
ADDRFP4 0
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
ASGNI4
line 1579
;1579:	if ( clientNum >= 0 && clientNum < MAX_CLIENTS ) {
ADDRLP4 36
INDIRI4
CNSTI4 0
LTI4 $781
ADDRLP4 36
INDIRI4
CNSTI4 64
GEI4 $781
line 1580
;1580:		ci = &cgs.clientinfo[ clientNum ];
ADDRLP4 64
CNSTI4 1740
ADDRLP4 36
INDIRI4
MULI4
ADDRGP4 cgs+40972
ADDP4
ASGNP4
line 1581
;1581:		if ( ci->fixedtorso ) {
ADDRLP4 64
INDIRP4
CNSTI4 500
ADDP4
INDIRI4
CNSTI4 0
EQI4 $784
line 1582
;1582:			torsoAngles[PITCH] = 0.0f;
ADDRLP4 0
CNSTF4 0
ASGNF4
line 1583
;1583:		}
LABELV $784
line 1584
;1584:	}
LABELV $781
line 1590
;1585:
;1586:	// --------- roll -------------
;1587:
;1588:
;1589:	// lean towards the direction of travel
;1590:	VectorCopy( cent->currentState.pos.trDelta, velocity );
ADDRLP4 40
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
INDIRB
ASGNB 12
line 1591
;1591:	speed = VectorNormalize( velocity );
ADDRLP4 40
ARGP4
ADDRLP4 104
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 56
ADDRLP4 104
INDIRF4
ASGNF4
line 1592
;1592:	if ( speed ) {
ADDRLP4 56
INDIRF4
CNSTF4 0
EQF4 $786
line 1596
;1593:		vec3_t	axis[3];
;1594:		float	side;
;1595:
;1596:		speed *= 0.05f;
ADDRLP4 56
CNSTF4 1028443341
ADDRLP4 56
INDIRF4
MULF4
ASGNF4
line 1598
;1597:
;1598:		AnglesToAxis( legsAngles, axis );
ADDRLP4 12
ARGP4
ADDRLP4 108
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1599
;1599:		side = speed * DotProduct( velocity, axis[1] );
ADDRLP4 144
ADDRLP4 56
INDIRF4
ADDRLP4 40
INDIRF4
ADDRLP4 108+12
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 108+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 108+12+8
INDIRF4
MULF4
ADDF4
MULF4
ASGNF4
line 1600
;1600:		legsAngles[ROLL] -= side;
ADDRLP4 12+8
ADDRLP4 12+8
INDIRF4
ADDRLP4 144
INDIRF4
SUBF4
ASGNF4
line 1602
;1601:
;1602:		side = speed * DotProduct( velocity, axis[0] );
ADDRLP4 144
ADDRLP4 56
INDIRF4
ADDRLP4 40
INDIRF4
ADDRLP4 108
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 108+4
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 108+8
INDIRF4
MULF4
ADDF4
MULF4
ASGNF4
line 1603
;1603:		legsAngles[PITCH] += side;
ADDRLP4 12
ADDRLP4 12
INDIRF4
ADDRLP4 144
INDIRF4
ADDF4
ASGNF4
line 1604
;1604:	}
LABELV $786
line 1607
;1605:
;1606:	//
;1607:	clientNum = cent->currentState.clientNum;
ADDRLP4 36
ADDRFP4 0
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
ASGNI4
line 1608
;1608:	if ( clientNum >= 0 && clientNum < MAX_CLIENTS ) {
ADDRLP4 36
INDIRI4
CNSTI4 0
LTI4 $800
ADDRLP4 36
INDIRI4
CNSTI4 64
GEI4 $800
line 1609
;1609:		ci = &cgs.clientinfo[ clientNum ];
ADDRLP4 64
CNSTI4 1740
ADDRLP4 36
INDIRI4
MULI4
ADDRGP4 cgs+40972
ADDP4
ASGNP4
line 1610
;1610:		if ( ci->fixedlegs ) {
ADDRLP4 64
INDIRP4
CNSTI4 496
ADDP4
INDIRI4
CNSTI4 0
EQI4 $803
line 1611
;1611:			legsAngles[YAW] = torsoAngles[YAW];
ADDRLP4 12+4
ADDRLP4 0+4
INDIRF4
ASGNF4
line 1612
;1612:			legsAngles[PITCH] = 0.0f;
ADDRLP4 12
CNSTF4 0
ASGNF4
line 1613
;1613:			legsAngles[ROLL] = 0.0f;
ADDRLP4 12+8
CNSTF4 0
ASGNF4
line 1614
;1614:		}
LABELV $803
line 1615
;1615:	}
LABELV $800
line 1618
;1616:
;1617:	// pain twitch
;1618:	CG_AddPainTwitch( cent, torsoAngles );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 CG_AddPainTwitch
CALLV
pop
line 1621
;1619:
;1620:	// pull the angles back out of the hierarchial chain
;1621:	AnglesSubtract( headAngles, torsoAngles, headAngles );
ADDRLP4 24
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 24
ARGP4
ADDRGP4 AnglesSubtract
CALLV
pop
line 1622
;1622:	AnglesSubtract( torsoAngles, legsAngles, torsoAngles );
ADDRLP4 0
ARGP4
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 AnglesSubtract
CALLV
pop
line 1623
;1623:	AnglesToAxis( legsAngles, legs );
ADDRLP4 12
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1624
;1624:	AnglesToAxis( torsoAngles, torso );
ADDRLP4 0
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1625
;1625:	AnglesToAxis( headAngles, head );
ADDRLP4 24
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1626
;1626:}
LABELV $752
endproc CG_PlayerAngles 148 24
proc CG_HasteTrail 40 48
line 1636
;1627:
;1628:
;1629://==========================================================================
;1630:
;1631:/*
;1632:===============
;1633:CG_HasteTrail
;1634:===============
;1635:*/
;1636:static void CG_HasteTrail( centity_t *cent ) {
line 1641
;1637:	localEntity_t	*smoke;
;1638:	vec3_t			origin;
;1639:	int				anim;
;1640:
;1641:	if ( cent->trailTime > cg.time ) {
ADDRFP4 0
INDIRP4
CNSTI4 444
ADDP4
INDIRI4
ADDRGP4 cg+109652
INDIRI4
LEI4 $809
line 1642
;1642:		return;
ADDRGP4 $808
JUMPV
LABELV $809
line 1644
;1643:	}
;1644:	anim = cent->pe.legs.animationNumber & ~ANIM_TOGGLEBIT;
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 496
ADDP4
INDIRI4
CNSTI4 -129
BANDI4
ASGNI4
line 1645
;1645:	if ( anim != LEGS_RUN && anim != LEGS_BACK ) {
ADDRLP4 12
INDIRI4
CNSTI4 15
EQI4 $812
ADDRLP4 12
INDIRI4
CNSTI4 16
EQI4 $812
line 1646
;1646:		return;
ADDRGP4 $808
JUMPV
LABELV $812
line 1649
;1647:	}
;1648:
;1649:	cent->trailTime += 100;
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 444
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRI4
CNSTI4 100
ADDI4
ASGNI4
line 1650
;1650:	if ( cent->trailTime < cg.time ) {
ADDRFP4 0
INDIRP4
CNSTI4 444
ADDP4
INDIRI4
ADDRGP4 cg+109652
INDIRI4
GEI4 $814
line 1651
;1651:		cent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 444
ADDP4
ADDRGP4 cg+109652
INDIRI4
ASGNI4
line 1652
;1652:	}
LABELV $814
line 1654
;1653:
;1654:	VectorCopy( cent->lerpOrigin, origin );
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 716
ADDP4
INDIRB
ASGNB 12
line 1655
;1655:	origin[2] -= 16;
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
CNSTF4 1098907648
SUBF4
ASGNF4
line 1657
;1656:
;1657:	smoke = CG_SmokePuff( origin, vec3_origin, 
ADDRLP4 0
ARGP4
ADDRGP4 vec3_origin
ARGP4
CNSTF4 1090519040
ARGF4
ADDRLP4 28
CNSTF4 1065353216
ASGNF4
ADDRLP4 28
INDIRF4
ARGF4
ADDRLP4 28
INDIRF4
ARGF4
ADDRLP4 28
INDIRF4
ARGF4
ADDRLP4 28
INDIRF4
ARGF4
CNSTF4 1140457472
ARGF4
ADDRGP4 cg+109652
INDIRI4
ARGI4
ADDRLP4 32
CNSTI4 0
ASGNI4
ADDRLP4 32
INDIRI4
ARGI4
ADDRLP4 32
INDIRI4
ARGI4
ADDRGP4 cgs+154388+452
INDIRI4
ARGI4
ADDRLP4 36
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 16
ADDRLP4 36
INDIRP4
ASGNP4
line 1667
;1658:				  8, 
;1659:				  1, 1, 1, 1,
;1660:				  500, 
;1661:				  cg.time,
;1662:				  0,
;1663:				  0,
;1664:				  cgs.media.hastePuffShader );
;1665:
;1666:	// use the optimized local entity add
;1667:	smoke->leType = LE_SCALE_FADE;
ADDRLP4 16
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 7
ASGNI4
line 1668
;1668:}
LABELV $808
endproc CG_HasteTrail 40 48
proc CG_TrailItem 188 12
line 1763
;1669:
;1670:#ifdef MISSIONPACK
;1671:/*
;1672:===============
;1673:CG_BreathPuffs
;1674:===============
;1675:*/
;1676:static void CG_BreathPuffs( centity_t *cent, refEntity_t *head) {
;1677:	clientInfo_t *ci;
;1678:	vec3_t up, origin;
;1679:	int contents;
;1680:
;1681:	ci = &cgs.clientinfo[ cent->currentState.number ];
;1682:
;1683:	if (!cg_enableBreath.integer) {
;1684:		return;
;1685:	}
;1686:	if ( cent->currentState.number == cg.snap->ps.clientNum && !cg.renderingThirdPerson) {
;1687:		return;
;1688:	}
;1689:	if ( cent->currentState.eFlags & EF_DEAD ) {
;1690:		return;
;1691:	}
;1692:	contents = trap_CM_PointContents( head->origin, 0 );
;1693:	if ( contents & ( CONTENTS_WATER | CONTENTS_SLIME | CONTENTS_LAVA ) ) {
;1694:		return;
;1695:	}
;1696:	if ( ci->breathPuffTime > cg.time ) {
;1697:		return;
;1698:	}
;1699:
;1700:	VectorSet( up, 0, 0, 8 );
;1701:	VectorMA(head->origin, 8, head->axis[0], origin);
;1702:	VectorMA(origin, -4, head->axis[2], origin);
;1703:	CG_SmokePuff( origin, up, 16, 1, 1, 1, 0.66f, 1500, cg.time, cg.time + 400, LEF_PUFF_DONT_SCALE, cgs.media.shotgunSmokePuffShader );
;1704:	ci->breathPuffTime = cg.time + 2000;
;1705:}
;1706:
;1707:/*
;1708:===============
;1709:CG_DustTrail
;1710:===============
;1711:*/
;1712:static void CG_DustTrail( centity_t *cent ) {
;1713:	int				anim;
;1714:	localEntity_t	*dust;
;1715:	vec3_t end, vel;
;1716:	trace_t tr;
;1717:
;1718:	if (!cg_enableDust.integer)
;1719:		return;
;1720:
;1721:	if ( cent->dustTrailTime > cg.time ) {
;1722:		return;
;1723:	}
;1724:
;1725:	anim = cent->pe.legs.animationNumber & ~ANIM_TOGGLEBIT;
;1726:	if ( anim != LEGS_LANDB && anim != LEGS_LAND ) {
;1727:		return;
;1728:	}
;1729:
;1730:	cent->dustTrailTime += 40;
;1731:	if ( cent->dustTrailTime < cg.time ) {
;1732:		cent->dustTrailTime = cg.time;
;1733:	}
;1734:
;1735:	VectorCopy(cent->currentState.pos.trBase, end);
;1736:	end[2] -= 64;
;1737:	CG_Trace( &tr, cent->currentState.pos.trBase, NULL, NULL, end, cent->currentState.number, MASK_PLAYERSOLID );
;1738:
;1739:	if ( !(tr.surfaceFlags & SURF_DUST) )
;1740:		return;
;1741:
;1742:	VectorCopy( cent->currentState.pos.trBase, end );
;1743:	end[2] -= 16;
;1744:
;1745:	VectorSet(vel, 0, 0, -30);
;1746:	dust = CG_SmokePuff( end, vel,
;1747:				  24,
;1748:				  .8f, .8f, 0.7f, 0.33f,
;1749:				  500,
;1750:				  cg.time,
;1751:				  0,
;1752:				  0,
;1753:				  cgs.media.dustPuffShader );
;1754:}
;1755:
;1756:#endif
;1757:
;1758:/*
;1759:===============
;1760:CG_TrailItem
;1761:===============
;1762:*/
;1763:static void CG_TrailItem( centity_t *cent, qhandle_t hModel ) {
line 1768
;1764:	refEntity_t		ent;
;1765:	vec3_t			angles;
;1766:	vec3_t			axis[3];
;1767:
;1768:	VectorCopy( cent->lerpAngles, angles );
ADDRLP4 140
ADDRFP4 0
INDIRP4
CNSTI4 728
ADDP4
INDIRB
ASGNB 12
line 1769
;1769:	angles[PITCH] = 0;
ADDRLP4 140
CNSTF4 0
ASGNF4
line 1770
;1770:	angles[ROLL] = 0;
ADDRLP4 140+8
CNSTF4 0
ASGNF4
line 1771
;1771:	AnglesToAxis( angles, axis );
ADDRLP4 140
ARGP4
ADDRLP4 152
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1773
;1772:
;1773:	memset( &ent, 0, sizeof( ent ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1774
;1774:	VectorMA( cent->lerpOrigin, -16, axis[0], ent.origin );
ADDRLP4 0+68
ADDRFP4 0
INDIRP4
CNSTI4 716
ADDP4
INDIRF4
CNSTF4 3246391296
ADDRLP4 152
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRFP4 0
INDIRP4
CNSTI4 720
ADDP4
INDIRF4
CNSTF4 3246391296
ADDRLP4 152+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRFP4 0
INDIRP4
CNSTI4 724
ADDP4
INDIRF4
CNSTF4 3246391296
ADDRLP4 152+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1775
;1775:	ent.origin[2] += 16;
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
CNSTF4 1098907648
ADDF4
ASGNF4
line 1776
;1776:	angles[YAW] += 90;
ADDRLP4 140+4
ADDRLP4 140+4
INDIRF4
CNSTF4 1119092736
ADDF4
ASGNF4
line 1777
;1777:	AnglesToAxis( angles, ent.axis );
ADDRLP4 140
ARGP4
ADDRLP4 0+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1779
;1778:
;1779:	ent.hModel = hModel;
ADDRLP4 0+8
ADDRFP4 4
INDIRI4
ASGNI4
line 1780
;1780:	trap_R_AddRefEntityToScene( &ent );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1781
;1781:}
LABELV $822
endproc CG_TrailItem 188 12
proc CG_PlayerFlag 356 24
line 1789
;1782:
;1783:
;1784:/*
;1785:===============
;1786:CG_PlayerFlag
;1787:===============
;1788:*/
;1789:static void CG_PlayerFlag( centity_t *cent, qhandle_t hSkin, refEntity_t *torso ) {
line 1798
;1790:	clientInfo_t	*ci;
;1791:	refEntity_t	pole;
;1792:	refEntity_t	flag;
;1793:	vec3_t		angles, dir;
;1794:	int			legsAnim, flagAnim, updateangles;
;1795:	float		angle, d;
;1796:
;1797:	// show the flag pole model
;1798:	memset( &pole, 0, sizeof(pole) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1799
;1799:	pole.hModel = cgs.media.flagPoleModel;
ADDRLP4 0+8
ADDRGP4 cgs+154388+88
INDIRI4
ASGNI4
line 1800
;1800:	VectorCopy( torso->lightingOrigin, pole.lightingOrigin );
ADDRLP4 0+12
ADDRFP4 8
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 1801
;1801:	pole.shadowPlane = torso->shadowPlane;
ADDRLP4 0+24
ADDRFP4 8
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 1802
;1802:	pole.renderfx = torso->renderfx;
ADDRLP4 0+4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 1803
;1803:	CG_PositionEntityOnTag( &pole, torso, torso->hModel, "tag_flag" );
ADDRLP4 0
ARGP4
ADDRLP4 328
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 328
INDIRP4
ARGP4
ADDRLP4 328
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ARGI4
ADDRGP4 $453
ARGP4
ADDRGP4 CG_PositionEntityOnTag
CALLV
pop
line 1804
;1804:	trap_R_AddRefEntityToScene( &pole );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1807
;1805:
;1806:	// show the flag model
;1807:	memset( &flag, 0, sizeof(flag) );
ADDRLP4 140
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1808
;1808:	flag.hModel = cgs.media.flagFlapModel;
ADDRLP4 140+8
ADDRGP4 cgs+154388+92
INDIRI4
ASGNI4
line 1809
;1809:	flag.customSkin = hSkin;
ADDRLP4 140+108
ADDRFP4 4
INDIRI4
ASGNI4
line 1810
;1810:	VectorCopy( torso->lightingOrigin, flag.lightingOrigin );
ADDRLP4 140+12
ADDRFP4 8
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 1811
;1811:	flag.shadowPlane = torso->shadowPlane;
ADDRLP4 140+24
ADDRFP4 8
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 1812
;1812:	flag.renderfx = torso->renderfx;
ADDRLP4 140+4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 1814
;1813:
;1814:	VectorClear(angles);
ADDRLP4 332
CNSTF4 0
ASGNF4
ADDRLP4 280+8
ADDRLP4 332
INDIRF4
ASGNF4
ADDRLP4 280+4
ADDRLP4 332
INDIRF4
ASGNF4
ADDRLP4 280
ADDRLP4 332
INDIRF4
ASGNF4
line 1816
;1815:
;1816:	updateangles = qfalse;
ADDRLP4 312
CNSTI4 0
ASGNI4
line 1817
;1817:	legsAnim = cent->currentState.legsAnim & ~ANIM_TOGGLEBIT;
ADDRLP4 304
ADDRFP4 0
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
CNSTI4 -129
BANDI4
ASGNI4
line 1818
;1818:	if( legsAnim == LEGS_IDLE || legsAnim == LEGS_IDLECR ) {
ADDRLP4 304
INDIRI4
CNSTI4 22
EQI4 $854
ADDRLP4 304
INDIRI4
CNSTI4 23
NEI4 $852
LABELV $854
line 1819
;1819:		flagAnim = FLAG_STAND;
ADDRLP4 320
CNSTI4 35
ASGNI4
line 1820
;1820:	} else if ( legsAnim == LEGS_WALK || legsAnim == LEGS_WALKCR ) {
ADDRGP4 $853
JUMPV
LABELV $852
ADDRLP4 304
INDIRI4
CNSTI4 14
EQI4 $857
ADDRLP4 304
INDIRI4
CNSTI4 13
NEI4 $855
LABELV $857
line 1821
;1821:		flagAnim = FLAG_STAND;
ADDRLP4 320
CNSTI4 35
ASGNI4
line 1822
;1822:		updateangles = qtrue;
ADDRLP4 312
CNSTI4 1
ASGNI4
line 1823
;1823:	} else {
ADDRGP4 $856
JUMPV
LABELV $855
line 1824
;1824:		flagAnim = FLAG_RUN;
ADDRLP4 320
CNSTI4 34
ASGNI4
line 1825
;1825:		updateangles = qtrue;
ADDRLP4 312
CNSTI4 1
ASGNI4
line 1826
;1826:	}
LABELV $856
LABELV $853
line 1828
;1827:
;1828:	if ( updateangles ) {
ADDRLP4 312
INDIRI4
CNSTI4 0
EQI4 $858
line 1830
;1829:
;1830:		VectorCopy( cent->currentState.pos.trDelta, dir );
ADDRLP4 292
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
INDIRB
ASGNB 12
line 1832
;1831:		// add gravity
;1832:		dir[2] += 100;
ADDRLP4 292+8
ADDRLP4 292+8
INDIRF4
CNSTF4 1120403456
ADDF4
ASGNF4
line 1833
;1833:		VectorNormalize( dir );
ADDRLP4 292
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 1834
;1834:		d = DotProduct(pole.axis[2], dir);
ADDRLP4 308
ADDRLP4 0+28+24
INDIRF4
ADDRLP4 292
INDIRF4
MULF4
ADDRLP4 0+28+24+4
INDIRF4
ADDRLP4 292+4
INDIRF4
MULF4
ADDF4
ADDRLP4 0+28+24+8
INDIRF4
ADDRLP4 292+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1836
;1835:		// if there is anough movement orthogonal to the flag pole
;1836:		if (fabs(d) < 0.9) {
ADDRLP4 308
INDIRF4
ARGF4
ADDRLP4 344
ADDRGP4 fabs
CALLF4
ASGNF4
ADDRLP4 344
INDIRF4
CNSTF4 1063675494
GEF4 $871
line 1838
;1837:			//
;1838:			d = DotProduct(pole.axis[0], dir);
ADDRLP4 308
ADDRLP4 0+28
INDIRF4
ADDRLP4 292
INDIRF4
MULF4
ADDRLP4 0+28+4
INDIRF4
ADDRLP4 292+4
INDIRF4
MULF4
ADDF4
ADDRLP4 0+28+8
INDIRF4
ADDRLP4 292+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1839
;1839:			if (d > 1.0f) {
ADDRLP4 308
INDIRF4
CNSTF4 1065353216
LEF4 $880
line 1840
;1840:				d = 1.0f;
ADDRLP4 308
CNSTF4 1065353216
ASGNF4
line 1841
;1841:			}
ADDRGP4 $881
JUMPV
LABELV $880
line 1842
;1842:			else if (d < -1.0f) {
ADDRLP4 308
INDIRF4
CNSTF4 3212836864
GEF4 $882
line 1843
;1843:				d = -1.0f;
ADDRLP4 308
CNSTF4 3212836864
ASGNF4
line 1844
;1844:			}
LABELV $882
LABELV $881
line 1845
;1845:			angle = acos(d);
ADDRLP4 308
INDIRF4
ARGF4
ADDRLP4 348
ADDRGP4 acos
CALLF4
ASGNF4
ADDRLP4 324
ADDRLP4 348
INDIRF4
ASGNF4
line 1847
;1846:
;1847:			d = DotProduct(pole.axis[1], dir);
ADDRLP4 308
ADDRLP4 0+28+12
INDIRF4
ADDRLP4 292
INDIRF4
MULF4
ADDRLP4 0+28+12+4
INDIRF4
ADDRLP4 292+4
INDIRF4
MULF4
ADDF4
ADDRLP4 0+28+12+8
INDIRF4
ADDRLP4 292+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1848
;1848:			if (d < 0) {
ADDRLP4 308
INDIRF4
CNSTF4 0
GEF4 $894
line 1849
;1849:				angles[YAW] = 360 - angle * 180 / M_PI;
ADDRLP4 280+4
CNSTF4 1135869952
CNSTF4 1127481344
ADDRLP4 324
INDIRF4
MULF4
CNSTF4 1078530011
DIVF4
SUBF4
ASGNF4
line 1850
;1850:			}
ADDRGP4 $895
JUMPV
LABELV $894
line 1851
;1851:			else {
line 1852
;1852:				angles[YAW] = angle * 180 / M_PI;
ADDRLP4 280+4
CNSTF4 1127481344
ADDRLP4 324
INDIRF4
MULF4
CNSTF4 1078530011
DIVF4
ASGNF4
line 1853
;1853:			}
LABELV $895
line 1854
;1854:			if (angles[YAW] < 0)
ADDRLP4 280+4
INDIRF4
CNSTF4 0
GEF4 $898
line 1855
;1855:				angles[YAW] += 360;
ADDRLP4 280+4
ADDRLP4 280+4
INDIRF4
CNSTF4 1135869952
ADDF4
ASGNF4
LABELV $898
line 1856
;1856:			if (angles[YAW] > 360)
ADDRLP4 280+4
INDIRF4
CNSTF4 1135869952
LEF4 $902
line 1857
;1857:				angles[YAW] -= 360;
ADDRLP4 280+4
ADDRLP4 280+4
INDIRF4
CNSTF4 1135869952
SUBF4
ASGNF4
LABELV $902
line 1862
;1858:
;1859:			//vectoangles( cent->currentState.pos.trDelta, tmpangles );
;1860:			//angles[YAW] = tmpangles[YAW] + 45 - cent->pe.torso.yawAngle;
;1861:			// change the yaw angle
;1862:			CG_SwingAngles( angles[YAW], 25, 90, 0.15f, &cent->pe.flag.yawAngle, &cent->pe.flag.yawing );
ADDRLP4 280+4
INDIRF4
ARGF4
CNSTF4 1103626240
ARGF4
CNSTF4 1119092736
ARGF4
CNSTF4 1041865114
ARGF4
ADDRLP4 352
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 352
INDIRP4
CNSTI4 576
ADDP4
ARGP4
ADDRLP4 352
INDIRP4
CNSTI4 580
ADDP4
ARGP4
ADDRGP4 CG_SwingAngles
CALLV
pop
line 1863
;1863:		}
LABELV $871
line 1883
;1864:
;1865:		/*
;1866:		d = DotProduct(pole.axis[2], dir);
;1867:		angle = Q_acos(d);
;1868:
;1869:		d = DotProduct(pole.axis[1], dir);
;1870:		if (d < 0) {
;1871:			angle = 360 - angle * 180 / M_PI;
;1872:		}
;1873:		else {
;1874:			angle = angle * 180 / M_PI;
;1875:		}
;1876:		if (angle > 340 && angle < 20) {
;1877:			flagAnim = FLAG_RUNUP;
;1878:		}
;1879:		if (angle > 160 && angle < 200) {
;1880:			flagAnim = FLAG_RUNDOWN;
;1881:		}
;1882:		*/
;1883:	}
LABELV $858
line 1886
;1884:
;1885:	// set the yaw angle
;1886:	angles[YAW] = cent->pe.flag.yawAngle;
ADDRLP4 280+4
ADDRFP4 0
INDIRP4
CNSTI4 576
ADDP4
INDIRF4
ASGNF4
line 1888
;1887:	// lerp the flag animation frames
;1888:	ci = &cgs.clientinfo[ cent->currentState.clientNum ];
ADDRLP4 316
CNSTI4 1740
ADDRFP4 0
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+40972
ADDP4
ASGNP4
line 1889
;1889:	CG_RunLerpFrame( ci, &cent->pe.flag, flagAnim, 1 );
ADDRLP4 316
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
ARGP4
ADDRLP4 320
INDIRI4
ARGI4
CNSTF4 1065353216
ARGF4
ADDRGP4 CG_RunLerpFrame
CALLV
pop
line 1890
;1890:	flag.oldframe = cent->pe.flag.oldFrame;
ADDRLP4 140+96
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRI4
ASGNI4
line 1891
;1891:	flag.frame = cent->pe.flag.frame;
ADDRLP4 140+80
ADDRFP4 0
INDIRP4
CNSTI4 564
ADDP4
INDIRI4
ASGNI4
line 1892
;1892:	flag.backlerp = cent->pe.flag.backlerp;
ADDRLP4 140+100
ADDRFP4 0
INDIRP4
CNSTI4 572
ADDP4
INDIRF4
ASGNF4
line 1894
;1893:
;1894:	AnglesToAxis( angles, flag.axis );
ADDRLP4 280
ARGP4
ADDRLP4 140+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1895
;1895:	CG_PositionRotatedEntityOnTag( &flag, &pole, pole.hModel, "tag_flag" );
ADDRLP4 140
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 0+8
INDIRI4
ARGI4
ADDRGP4 $453
ARGP4
ADDRGP4 CG_PositionRotatedEntityOnTag
CALLV
pop
line 1897
;1896:
;1897:	trap_R_AddRefEntityToScene( &flag );
ADDRLP4 140
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1898
;1898:}
LABELV $836
endproc CG_PlayerFlag 356 24
proc CG_PlayerPowerups 56 20
line 1975
;1899:
;1900:
;1901:#ifdef MISSIONPACK // bk001204
;1902:/*
;1903:===============
;1904:CG_PlayerTokens
;1905:===============
;1906:*/
;1907:static void CG_PlayerTokens( centity_t *cent, int renderfx ) {
;1908:	int			tokens, i, j;
;1909:	float		angle;
;1910:	refEntity_t	ent;
;1911:	vec3_t		dir, origin;
;1912:	skulltrail_t *trail;
;1913:	trail = &cg.skulltrails[cent->currentState.number];
;1914:	tokens = cent->currentState.generic1;
;1915:	if ( !tokens ) {
;1916:		trail->numpositions = 0;
;1917:		return;
;1918:	}
;1919:
;1920:	if ( tokens > MAX_SKULLTRAIL ) {
;1921:		tokens = MAX_SKULLTRAIL;
;1922:	}
;1923:
;1924:	// add skulls if there are more than last time
;1925:	for (i = 0; i < tokens - trail->numpositions; i++) {
;1926:		for (j = trail->numpositions; j > 0; j--) {
;1927:			VectorCopy(trail->positions[j-1], trail->positions[j]);
;1928:		}
;1929:		VectorCopy(cent->lerpOrigin, trail->positions[0]);
;1930:	}
;1931:	trail->numpositions = tokens;
;1932:
;1933:	// move all the skulls along the trail
;1934:	VectorCopy(cent->lerpOrigin, origin);
;1935:	for (i = 0; i < trail->numpositions; i++) {
;1936:		VectorSubtract(trail->positions[i], origin, dir);
;1937:		if (VectorNormalize(dir) > 30) {
;1938:			VectorMA(origin, 30, dir, trail->positions[i]);
;1939:		}
;1940:		VectorCopy(trail->positions[i], origin);
;1941:	}
;1942:
;1943:	memset( &ent, 0, sizeof( ent ) );
;1944:	if( cgs.clientinfo[ cent->currentState.clientNum ].team == TEAM_BLUE ) {
;1945:		ent.hModel = cgs.media.redCubeModel;
;1946:	} else {
;1947:		ent.hModel = cgs.media.blueCubeModel;
;1948:	}
;1949:	ent.renderfx = renderfx;
;1950:
;1951:	VectorCopy(cent->lerpOrigin, origin);
;1952:	for (i = 0; i < trail->numpositions; i++) {
;1953:		VectorSubtract(origin, trail->positions[i], ent.axis[0]);
;1954:		ent.axis[0][2] = 0;
;1955:		VectorNormalize(ent.axis[0]);
;1956:		VectorSet(ent.axis[2], 0, 0, 1);
;1957:		CrossProduct(ent.axis[0], ent.axis[2], ent.axis[1]);
;1958:
;1959:		VectorCopy(trail->positions[i], ent.origin);
;1960:		angle = (((cg.time + 500 * MAX_SKULLTRAIL - 500 * i) / 16) & 255) * (M_PI * 2) / 255;
;1961:		ent.origin[2] += sin(angle) * 10;
;1962:		trap_R_AddRefEntityToScene( &ent );
;1963:		VectorCopy(trail->positions[i], origin);
;1964:	}
;1965:}
;1966:#endif
;1967:
;1968:
;1969:/*
;1970:===============
;1971:CG_PlayerPowerups
;1972:===============
;1973:*/
;1974:static void CG_PlayerPowerups( centity_t *cent, refEntity_t *torso ) 
;1975:{
line 1981
;1976:	int		powerups;
;1977:	clientInfo_t	*ci;
;1978:	entityState_t	*state;
;1979:	float	r1, r2, r3;
;1980:	
;1981:	powerups = cent->currentState.powerups;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ASGNI4
line 1982
;1982:	ci		 = &cgs.clientinfo[ cent->currentState.clientNum ];
ADDRLP4 4
CNSTI4 1740
ADDRFP4 0
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+40972
ADDP4
ASGNP4
line 1983
;1983:	state	 = &cent->currentState;
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
line 1985
;1984:		
;1985:	if ( state->time2 == 9 || ci->cgimmobilized == qtrue ) 
ADDRLP4 8
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
CNSTI4 9
EQI4 $918
ADDRLP4 4
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 1
NEI4 $916
LABELV $918
line 1986
;1986:	{ // Special immobilized dlight :P -Vincent
line 1988
;1987:		// Display only to the actual immobilized player -Vincent
;1988:		if ( state->number == cg.snap->ps.clientNum )
ADDRLP4 8
INDIRP4
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
NEI4 $919
line 1989
;1989:		{
line 1990
;1990:		CG_CenterPrint( "^3You have been immobilized!", SCREEN_HEIGHT * 0.30, BIGCHAR_WIDTH );
ADDRGP4 $922
ARGP4
CNSTI4 144
ARGI4
CNSTI4 16
ARGI4
ADDRGP4 CG_CenterPrint
CALLV
pop
line 1991
;1991:		}
LABELV $919
line 1992
;1992:		if ( ci->immobi >= 0 && ci->immobi <= 74 )
ADDRLP4 24
ADDRLP4 4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
ASGNI4
ADDRLP4 24
INDIRI4
CNSTI4 0
LTI4 $923
ADDRLP4 24
INDIRI4
CNSTI4 74
GTI4 $923
line 1993
;1993:		{
line 1994
;1994:		r1 = 0.6f;
ADDRLP4 12
CNSTF4 1058642330
ASGNF4
line 1995
;1995:		r2 = 0.2f;
ADDRLP4 16
CNSTF4 1045220557
ASGNF4
line 1996
;1996:		r3 = 0.6f;
ADDRLP4 20
CNSTF4 1058642330
ASGNF4
line 1997
;1997:		}
ADDRGP4 $924
JUMPV
LABELV $923
line 1998
;1998:		else if ( ci->immobi >= 75 && ci->immobi <= 149 )
ADDRLP4 28
ADDRLP4 4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
ASGNI4
ADDRLP4 28
INDIRI4
CNSTI4 75
LTI4 $925
ADDRLP4 28
INDIRI4
CNSTI4 149
GTI4 $925
line 1999
;1999:		{
line 2000
;2000:		r1 = 0.2f;
ADDRLP4 12
CNSTF4 1045220557
ASGNF4
line 2001
;2001:		r2 = 0.2f;
ADDRLP4 16
CNSTF4 1045220557
ASGNF4
line 2002
;2002:		r3 = 1;
ADDRLP4 20
CNSTF4 1065353216
ASGNF4
line 2003
;2003:		}
ADDRGP4 $926
JUMPV
LABELV $925
line 2004
;2004:		else if ( ci->immobi >= 150 &&ci->immobi <= 224 )
ADDRLP4 32
ADDRLP4 4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
ASGNI4
ADDRLP4 32
INDIRI4
CNSTI4 150
LTI4 $927
ADDRLP4 32
INDIRI4
CNSTI4 224
GTI4 $927
line 2005
;2005:		{
line 2006
;2006:		r1 = 0.2f;
ADDRLP4 12
CNSTF4 1045220557
ASGNF4
line 2007
;2007:		r2 = 0.6f;
ADDRLP4 16
CNSTF4 1058642330
ASGNF4
line 2008
;2008:		r3 = 0.6f;
ADDRLP4 20
CNSTF4 1058642330
ASGNF4
line 2009
;2009:		}
ADDRGP4 $928
JUMPV
LABELV $927
line 2010
;2010:		else if ( ci->immobi >= 225 && ci->immobi <= 299 )		
ADDRLP4 36
ADDRLP4 4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
ASGNI4
ADDRLP4 36
INDIRI4
CNSTI4 225
LTI4 $929
ADDRLP4 36
INDIRI4
CNSTI4 299
GTI4 $929
line 2011
;2011:		{
line 2012
;2012:		r1 = 0.2f;
ADDRLP4 12
CNSTF4 1045220557
ASGNF4
line 2013
;2013:		r2 = 1;
ADDRLP4 16
CNSTF4 1065353216
ASGNF4
line 2014
;2014:		r3 = 0.2f;
ADDRLP4 20
CNSTF4 1045220557
ASGNF4
line 2015
;2015:		}
ADDRGP4 $930
JUMPV
LABELV $929
line 2016
;2016:		else if ( ci->immobi >= 300 && ci->immobi <= 374 )
ADDRLP4 40
ADDRLP4 4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
ASGNI4
ADDRLP4 40
INDIRI4
CNSTI4 300
LTI4 $931
ADDRLP4 40
INDIRI4
CNSTI4 374
GTI4 $931
line 2017
;2017:		{
line 2018
;2018:		r1 = 0.6f;
ADDRLP4 12
CNSTF4 1058642330
ASGNF4
line 2019
;2019:		r2 = 0.6f;
ADDRLP4 16
CNSTF4 1058642330
ASGNF4
line 2020
;2020:		r3 = 0.2f;
ADDRLP4 20
CNSTF4 1045220557
ASGNF4
line 2021
;2021:		}
ADDRGP4 $932
JUMPV
LABELV $931
line 2022
;2022:		else if ( ci->immobi >= 375 && ci->immobi <= 448 )
ADDRLP4 44
ADDRLP4 4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
ASGNI4
ADDRLP4 44
INDIRI4
CNSTI4 375
LTI4 $933
ADDRLP4 44
INDIRI4
CNSTI4 448
GTI4 $933
line 2023
;2023:		{
line 2024
;2024:		r1 = 1;
ADDRLP4 12
CNSTF4 1065353216
ASGNF4
line 2025
;2025:		r2 = 0.2f;
ADDRLP4 16
CNSTF4 1045220557
ASGNF4
line 2026
;2026:		r3 = 0.2f;
ADDRLP4 20
CNSTF4 1045220557
ASGNF4
line 2027
;2027:		}
ADDRGP4 $934
JUMPV
LABELV $933
line 2029
;2028:		else
;2029:		{ // Reset
line 2030
;2030:		ci->immobi = 0;
ADDRLP4 4
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 0
ASGNI4
line 2031
;2031:		}
LABELV $934
LABELV $932
LABELV $930
LABELV $928
LABELV $926
LABELV $924
line 2032
;2032:	ci->immobi++;
ADDRLP4 48
ADDRLP4 4
INDIRP4
CNSTI4 148
ADDP4
ASGNP4
ADDRLP4 48
INDIRP4
ADDRLP4 48
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 2033
;2033:	trap_R_AddLightToScene( torso->origin, 250 + (rand()&31), r1, r2, r3 );
ADDRLP4 52
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
ARGP4
ADDRLP4 52
INDIRI4
CNSTI4 31
BANDI4
CNSTI4 250
ADDI4
CVIF4 4
ARGF4
ADDRLP4 12
INDIRF4
ARGF4
ADDRLP4 16
INDIRF4
ARGF4
ADDRLP4 20
INDIRF4
ARGF4
ADDRGP4 trap_R_AddLightToScene
CALLV
pop
line 2034
;2034:	}
LABELV $916
line 2038
;2035:
;2036:	
;2037:	// quad gives a dlight
;2038:	if ( powerups & ( 1 << PW_QUAD ) ) {
ADDRLP4 0
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $935
line 2039
;2039:		trap_R_AddLightToScene( cent->lerpOrigin, 250 + (rand()&31), 0.2f, 0.2f, 1 );
ADDRLP4 24
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 716
ADDP4
ARGP4
ADDRLP4 24
INDIRI4
CNSTI4 31
BANDI4
CNSTI4 250
ADDI4
CVIF4 4
ARGF4
ADDRLP4 28
CNSTF4 1045220557
ASGNF4
ADDRLP4 28
INDIRF4
ARGF4
ADDRLP4 28
INDIRF4
ARGF4
CNSTF4 1065353216
ARGF4
ADDRGP4 trap_R_AddLightToScene
CALLV
pop
line 2040
;2040:	}
LABELV $935
line 2043
;2041:
;2042:	// flight plays a looped sound
;2043:	if ( powerups & ( 1 << PW_FLIGHT ) ) {
ADDRLP4 0
INDIRI4
CNSTI4 64
BANDI4
CNSTI4 0
EQI4 $937
line 2044
;2044:		trap_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, vec3_origin, cgs.media.flightSound );
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
INDIRI4
ARGI4
ADDRLP4 24
INDIRP4
CNSTI4 716
ADDP4
ARGP4
ADDRGP4 vec3_origin
ARGP4
ADDRGP4 cgs+154388+940
INDIRI4
ARGI4
ADDRGP4 trap_S_AddLoopingSound
CALLV
pop
line 2045
;2045:	}
LABELV $937
line 2048
;2046:
;2047:	// redflag
;2048:	if ( powerups & ( 1 << PW_REDFLAG ) ) {
ADDRLP4 0
INDIRI4
CNSTI4 128
BANDI4
CNSTI4 0
EQI4 $941
line 2049
;2049:		if (ci->newAnims) {
ADDRLP4 4
INDIRP4
CNSTI4 492
ADDP4
INDIRI4
CNSTI4 0
EQI4 $943
line 2050
;2050:			CG_PlayerFlag( cent, cgs.media.redFlagFlapSkin, torso );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 cgs+154388+96
INDIRI4
ARGI4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 CG_PlayerFlag
CALLV
pop
line 2051
;2051:		}
ADDRGP4 $944
JUMPV
LABELV $943
line 2052
;2052:		else {
line 2053
;2053:			CG_TrailItem( cent, cgs.media.redFlagModel );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 cgs+154388+36
INDIRI4
ARGI4
ADDRGP4 CG_TrailItem
CALLV
pop
line 2054
;2054:		}
LABELV $944
line 2055
;2055:		trap_R_AddLightToScene( cent->lerpOrigin, 250 + (rand()&31), 1.0, 0.2f, 0.2f );
ADDRLP4 24
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 716
ADDP4
ARGP4
ADDRLP4 24
INDIRI4
CNSTI4 31
BANDI4
CNSTI4 250
ADDI4
CVIF4 4
ARGF4
CNSTF4 1065353216
ARGF4
ADDRLP4 28
CNSTF4 1045220557
ASGNF4
ADDRLP4 28
INDIRF4
ARGF4
ADDRLP4 28
INDIRF4
ARGF4
ADDRGP4 trap_R_AddLightToScene
CALLV
pop
line 2056
;2056:	}
LABELV $941
line 2059
;2057:
;2058:	// blueflag
;2059:	if ( powerups & ( 1 << PW_BLUEFLAG ) ) {
ADDRLP4 0
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $949
line 2060
;2060:		if (ci->newAnims){
ADDRLP4 4
INDIRP4
CNSTI4 492
ADDP4
INDIRI4
CNSTI4 0
EQI4 $951
line 2061
;2061:			CG_PlayerFlag( cent, cgs.media.blueFlagFlapSkin, torso );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 cgs+154388+100
INDIRI4
ARGI4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 CG_PlayerFlag
CALLV
pop
line 2062
;2062:		}
ADDRGP4 $952
JUMPV
LABELV $951
line 2063
;2063:		else {
line 2064
;2064:			CG_TrailItem( cent, cgs.media.blueFlagModel );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 cgs+154388+40
INDIRI4
ARGI4
ADDRGP4 CG_TrailItem
CALLV
pop
line 2065
;2065:		}
LABELV $952
line 2066
;2066:		trap_R_AddLightToScene( cent->lerpOrigin, 250 + (rand()&31), 0.2f, 0.2f, 1.0 );
ADDRLP4 24
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 716
ADDP4
ARGP4
ADDRLP4 24
INDIRI4
CNSTI4 31
BANDI4
CNSTI4 250
ADDI4
CVIF4 4
ARGF4
ADDRLP4 28
CNSTF4 1045220557
ASGNF4
ADDRLP4 28
INDIRF4
ARGF4
ADDRLP4 28
INDIRF4
ARGF4
CNSTF4 1065353216
ARGF4
ADDRGP4 trap_R_AddLightToScene
CALLV
pop
line 2067
;2067:	}
LABELV $949
line 2070
;2068:
;2069:	// neutralflag
;2070:	if ( powerups & ( 1 << PW_NEUTRALFLAG ) ) {
ADDRLP4 0
INDIRI4
CNSTI4 512
BANDI4
CNSTI4 0
EQI4 $957
line 2071
;2071:		if (ci->newAnims) {
ADDRLP4 4
INDIRP4
CNSTI4 492
ADDP4
INDIRI4
CNSTI4 0
EQI4 $959
line 2072
;2072:			CG_PlayerFlag( cent, cgs.media.neutralFlagFlapSkin, torso );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 cgs+154388+104
INDIRI4
ARGI4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 CG_PlayerFlag
CALLV
pop
line 2073
;2073:		}
ADDRGP4 $960
JUMPV
LABELV $959
line 2074
;2074:		else {
line 2075
;2075:			CG_TrailItem( cent, cgs.media.neutralFlagModel );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 cgs+154388+44
INDIRI4
ARGI4
ADDRGP4 CG_TrailItem
CALLV
pop
line 2076
;2076:		}
LABELV $960
line 2077
;2077:		trap_R_AddLightToScene( cent->lerpOrigin, 250 + (rand()&31), 1.0, 1.0, 1.0 );
ADDRLP4 24
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 716
ADDP4
ARGP4
ADDRLP4 24
INDIRI4
CNSTI4 31
BANDI4
CNSTI4 250
ADDI4
CVIF4 4
ARGF4
ADDRLP4 28
CNSTF4 1065353216
ASGNF4
ADDRLP4 28
INDIRF4
ARGF4
ADDRLP4 28
INDIRF4
ARGF4
ADDRLP4 28
INDIRF4
ARGF4
ADDRGP4 trap_R_AddLightToScene
CALLV
pop
line 2078
;2078:	}
LABELV $957
line 2081
;2079:
;2080:	// haste leaves smoke trails
;2081:	if ( powerups & ( 1 << PW_HASTE ) ) {
ADDRLP4 0
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
EQI4 $965
line 2082
;2082:		CG_HasteTrail( cent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_HasteTrail
CALLV
pop
line 2083
;2083:	}
LABELV $965
line 2084
;2084:}
LABELV $914
endproc CG_PlayerPowerups 56 20
proc CG_PlayerFloatSprite 144 12
line 2094
;2085:
;2086:
;2087:/*
;2088:===============
;2089:CG_PlayerFloatSprite
;2090:
;2091:Float a sprite over the player's head
;2092:===============
;2093:*/
;2094:static void CG_PlayerFloatSprite( centity_t *cent, qhandle_t shader ) {
line 2098
;2095:	int				rf;
;2096:	refEntity_t		ent;
;2097:
;2098:	if ( cent->currentState.number == cg.snap->ps.clientNum && !cg.renderingThirdPerson ) {
ADDRFP4 0
INDIRP4
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
NEI4 $968
ADDRGP4 cg+109676
INDIRI4
CNSTI4 0
NEI4 $968
line 2099
;2099:		rf = RF_THIRD_PERSON;		// only show in mirrors
ADDRLP4 140
CNSTI4 2
ASGNI4
line 2100
;2100:	} else {
ADDRGP4 $969
JUMPV
LABELV $968
line 2101
;2101:		rf = 0;
ADDRLP4 140
CNSTI4 0
ASGNI4
line 2102
;2102:	}
LABELV $969
line 2104
;2103:
;2104:	memset( &ent, 0, sizeof( ent ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 2105
;2105:	VectorCopy( cent->lerpOrigin, ent.origin );
ADDRLP4 0+68
ADDRFP4 0
INDIRP4
CNSTI4 716
ADDP4
INDIRB
ASGNB 12
line 2106
;2106:	ent.origin[2] += 48;
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
CNSTF4 1111490560
ADDF4
ASGNF4
line 2107
;2107:	ent.reType = RT_SPRITE;
ADDRLP4 0
CNSTI4 2
ASGNI4
line 2108
;2108:	ent.customShader = shader;
ADDRLP4 0+112
ADDRFP4 4
INDIRI4
ASGNI4
line 2109
;2109:	ent.radius = 10;
ADDRLP4 0+132
CNSTF4 1092616192
ASGNF4
line 2110
;2110:	ent.renderfx = rf;
ADDRLP4 0+4
ADDRLP4 140
INDIRI4
ASGNI4
line 2111
;2111:	ent.shaderRGBA[0] = 255;
ADDRLP4 0+116
CNSTU1 255
ASGNU1
line 2112
;2112:	ent.shaderRGBA[1] = 255;
ADDRLP4 0+116+1
CNSTU1 255
ASGNU1
line 2113
;2113:	ent.shaderRGBA[2] = 255;
ADDRLP4 0+116+2
CNSTU1 255
ASGNU1
line 2114
;2114:	ent.shaderRGBA[3] = 255;
ADDRLP4 0+116+3
CNSTU1 255
ASGNU1
line 2115
;2115:	trap_R_AddRefEntityToScene( &ent );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 2116
;2116:}
LABELV $967
endproc CG_PlayerFloatSprite 144 12
export CG_PlayerSprites
proc CG_PlayerSprites 8 8
line 2127
;2117:
;2118:
;2119:
;2120:/*
;2121:===============
;2122:CG_PlayerSprites
;2123:
;2124:Float sprites over the player's head
;2125:===============
;2126:*/
;2127:void CG_PlayerSprites( centity_t *cent ) {
line 2132
;2128:	int		team;
;2129:
;2130:
;2131:	// Any Buildable Object That is your team needs a cute little sprite too
;2132:	if (cent->currentState.eType == ET_BUILDABLE)
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 13
NEI4 $986
line 2133
;2133:	{
line 2134
;2134:			team = cent->currentState.team;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 208
ADDP4
INDIRI4
ASGNI4
line 2135
;2135:			if ( cg.snap->ps.persistant[PERS_TEAM] == team) 
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
ADDRLP4 0
INDIRI4
NEI4 $985
line 2136
;2136:			{
line 2137
;2137:				CG_PlayerFloatSprite( cent, cgs.media.friendShader );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 cgs+154388+212
INDIRI4
ARGI4
ADDRGP4 CG_PlayerFloatSprite
CALLV
pop
line 2138
;2138:			}
line 2139
;2139:			return;
ADDRGP4 $985
JUMPV
LABELV $986
line 2143
;2140:	}
;2141:		
;2142:	
;2143:	if ( cent->currentState.eFlags & EF_CONNECTION ) {
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 8192
BANDI4
CNSTI4 0
EQI4 $993
line 2144
;2144:		CG_PlayerFloatSprite( cent, cgs.media.connectionShader );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 cgs+154388+220
INDIRI4
ARGI4
ADDRGP4 CG_PlayerFloatSprite
CALLV
pop
line 2145
;2145:		return;
ADDRGP4 $985
JUMPV
LABELV $993
line 2148
;2146:	}
;2147:
;2148:	if ( cent->currentState.eFlags & EF_TALK ) {
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $997
line 2149
;2149:		CG_PlayerFloatSprite( cent, cgs.media.balloonShader );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 cgs+154388+216
INDIRI4
ARGI4
ADDRGP4 CG_PlayerFloatSprite
CALLV
pop
line 2150
;2150:		return;
ADDRGP4 $985
JUMPV
LABELV $997
line 2153
;2151:	}
;2152:
;2153:	if ( cent->currentState.eFlags & EF_AWARD_IMPRESSIVE ) {
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 32768
BANDI4
CNSTI4 0
EQI4 $1001
line 2154
;2154:		CG_PlayerFloatSprite( cent, cgs.media.medalImpressive );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 cgs+154388+576
INDIRI4
ARGI4
ADDRGP4 CG_PlayerFloatSprite
CALLV
pop
line 2155
;2155:		return;
ADDRGP4 $985
JUMPV
LABELV $1001
line 2158
;2156:	}
;2157:
;2158:	if ( cent->currentState.eFlags & EF_AWARD_EXCELLENT ) {
ADDRLP4 4
CNSTI4 8
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 4
INDIRI4
ADDP4
INDIRI4
ADDRLP4 4
INDIRI4
BANDI4
CNSTI4 0
EQI4 $1005
line 2159
;2159:		CG_PlayerFloatSprite( cent, cgs.media.medalExcellent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 cgs+154388+580
INDIRI4
ARGI4
ADDRGP4 CG_PlayerFloatSprite
CALLV
pop
line 2160
;2160:		return;
ADDRGP4 $985
JUMPV
LABELV $1005
line 2163
;2161:	}
;2162:
;2163:	if ( cent->currentState.eFlags & EF_AWARD_GAUNTLET ) {
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 64
BANDI4
CNSTI4 0
EQI4 $1009
line 2164
;2164:		CG_PlayerFloatSprite( cent, cgs.media.medalGauntlet );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 cgs+154388+584
INDIRI4
ARGI4
ADDRGP4 CG_PlayerFloatSprite
CALLV
pop
line 2165
;2165:		return;
ADDRGP4 $985
JUMPV
LABELV $1009
line 2168
;2166:	}
;2167:
;2168:	if ( cent->currentState.eFlags & EF_AWARD_DEFEND ) {
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 65536
BANDI4
CNSTI4 0
EQI4 $1013
line 2169
;2169:		CG_PlayerFloatSprite( cent, cgs.media.medalDefend );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 cgs+154388+588
INDIRI4
ARGI4
ADDRGP4 CG_PlayerFloatSprite
CALLV
pop
line 2170
;2170:		return;
ADDRGP4 $985
JUMPV
LABELV $1013
line 2173
;2171:	}
;2172:
;2173:	if ( cent->currentState.eFlags & EF_AWARD_ASSIST ) {
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 131072
BANDI4
CNSTI4 0
EQI4 $1017
line 2174
;2174:		CG_PlayerFloatSprite( cent, cgs.media.medalAssist );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 cgs+154388+592
INDIRI4
ARGI4
ADDRGP4 CG_PlayerFloatSprite
CALLV
pop
line 2175
;2175:		return;
ADDRGP4 $985
JUMPV
LABELV $1017
line 2178
;2176:	}
;2177:
;2178:	if ( cent->currentState.eFlags & EF_AWARD_CAP ) {
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 2048
BANDI4
CNSTI4 0
EQI4 $1021
line 2179
;2179:		CG_PlayerFloatSprite( cent, cgs.media.medalCapture );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 cgs+154388+596
INDIRI4
ARGI4
ADDRGP4 CG_PlayerFloatSprite
CALLV
pop
line 2180
;2180:		return;
ADDRGP4 $985
JUMPV
LABELV $1021
line 2183
;2181:	}
;2182:
;2183:	team = cgs.clientinfo[ cent->currentState.clientNum ].team;
ADDRLP4 0
CNSTI4 1740
ADDRFP4 0
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+40972+68
ADDP4
INDIRI4
ASGNI4
line 2185
;2184:
;2185:	if ( !(cent->currentState.eFlags & EF_DEAD) && 
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
NEI4 $1027
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
ADDRLP4 0
INDIRI4
NEI4 $1027
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
LTI4 $1027
line 2187
;2186:		cg.snap->ps.persistant[PERS_TEAM] == team &&
;2187:		cgs.gametype >= GT_TEAM) {
line 2188
;2188:		if (cg_drawFriend.integer) {
ADDRGP4 cg_drawFriend+12
INDIRI4
CNSTI4 0
EQI4 $985
line 2189
;2189:			CG_PlayerFloatSprite( cent, cgs.media.friendShader );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 cgs+154388+212
INDIRI4
ARGI4
ADDRGP4 CG_PlayerFloatSprite
CALLV
pop
line 2190
;2190:		}
line 2191
;2191:		return;
LABELV $1027
line 2193
;2192:	}
;2193:}
LABELV $985
endproc CG_PlayerSprites 8 8
lit
align 4
LABELV $1037
byte 4 3245342720
byte 4 3245342720
byte 4 0
align 4
LABELV $1038
byte 4 1097859072
byte 4 1097859072
byte 4 1073741824
code
proc CG_PlayerShadow 104 44
line 2205
;2194:
;2195:/*
;2196:===============
;2197:CG_PlayerShadow
;2198:
;2199:Returns the Z component of the surface being shadowed
;2200:
;2201:  should it return a full plane instead of a Z?
;2202:===============
;2203:*/
;2204:#define	SHADOW_DISTANCE		128
;2205:static qboolean CG_PlayerShadow( centity_t *cent, float *shadowPlane ) {
line 2206
;2206:	vec3_t		end, mins = {-15, -15, 0}, maxs = {15, 15, 2};
ADDRLP4 72
ADDRGP4 $1037
INDIRB
ASGNB 12
ADDRLP4 84
ADDRGP4 $1038
INDIRB
ASGNB 12
line 2210
;2207:	trace_t		trace;
;2208:	float		alpha;
;2209:
;2210:	*shadowPlane = 0;
ADDRFP4 4
INDIRP4
CNSTF4 0
ASGNF4
line 2212
;2211:
;2212:	if ( cg_shadows.integer == 0 ) {
ADDRGP4 cg_shadows+12
INDIRI4
CNSTI4 0
NEI4 $1039
line 2213
;2213:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $1036
JUMPV
LABELV $1039
line 2217
;2214:	}
;2215:
;2216:	// no shadows when invisible
;2217:	if ( cent->currentState.powerups & ( 1 << PW_INVIS ) ) {
ADDRFP4 0
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $1042
line 2218
;2218:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $1036
JUMPV
LABELV $1042
line 2222
;2219:	}
;2220:
;2221:	// send a trace down from the player to the ground
;2222:	VectorCopy( cent->lerpOrigin, end );
ADDRLP4 60
ADDRFP4 0
INDIRP4
CNSTI4 716
ADDP4
INDIRB
ASGNB 12
line 2223
;2223:	end[2] -= SHADOW_DISTANCE;
ADDRLP4 60+8
ADDRLP4 60+8
INDIRF4
CNSTF4 1124073472
SUBF4
ASGNF4
line 2225
;2224:
;2225:	trap_CM_BoxTrace( &trace, cent->lerpOrigin, end, mins, maxs, 0, MASK_PLAYERSOLID );
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 716
ADDP4
ARGP4
ADDRLP4 60
ARGP4
ADDRLP4 72
ARGP4
ADDRLP4 84
ARGP4
CNSTI4 0
ARGI4
CNSTI4 33619969
ARGI4
ADDRGP4 trap_CM_BoxTrace
CALLV
pop
line 2228
;2226:
;2227:	// no shadow if too high
;2228:	if ( trace.fraction == 1.0 || trace.startsolid || trace.allsolid ) {
ADDRLP4 0+8
INDIRF4
CNSTF4 1065353216
EQF4 $1050
ADDRLP4 96
CNSTI4 0
ASGNI4
ADDRLP4 0+4
INDIRI4
ADDRLP4 96
INDIRI4
NEI4 $1050
ADDRLP4 0
INDIRI4
ADDRLP4 96
INDIRI4
EQI4 $1045
LABELV $1050
line 2229
;2229:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $1036
JUMPV
LABELV $1045
line 2232
;2230:	}
;2231:
;2232:	*shadowPlane = trace.endpos[2] + 1;
ADDRFP4 4
INDIRP4
ADDRLP4 0+12+8
INDIRF4
CNSTF4 1065353216
ADDF4
ASGNF4
line 2234
;2233:
;2234:	if ( cg_shadows.integer != 1 ) {	// no mark for stencil or projection shadows
ADDRGP4 cg_shadows+12
INDIRI4
CNSTI4 1
EQI4 $1053
line 2235
;2235:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $1036
JUMPV
LABELV $1053
line 2239
;2236:	}
;2237:
;2238:	// fade the shadow out with height
;2239:	alpha = 1.0 - trace.fraction;
ADDRLP4 56
CNSTF4 1065353216
ADDRLP4 0+8
INDIRF4
SUBF4
ASGNF4
line 2246
;2240:
;2241:	// bk0101022 - hack / FPE - bogus planes?
;2242:	//assert( DotProduct( trace.plane.normal, trace.plane.normal ) != 0.0f ) 
;2243:
;2244:	// add the mark as a temporary, so it goes directly to the renderer
;2245:	// without taking a spot in the cg_marks array
;2246:	CG_ImpactMark( cgs.media.shadowMarkShader, trace.endpos, trace.plane.normal, 
ADDRGP4 cgs+154388+368
INDIRI4
ARGI4
ADDRLP4 0+12
ARGP4
ADDRLP4 0+24
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 480
ADDP4
INDIRF4
ARGF4
ADDRLP4 56
INDIRF4
ARGF4
ADDRLP4 56
INDIRF4
ARGF4
ADDRLP4 56
INDIRF4
ARGF4
CNSTF4 1065353216
ARGF4
CNSTI4 0
ARGI4
CNSTF4 1103101952
ARGF4
CNSTI4 1
ARGI4
ADDRGP4 CG_ImpactMark
CALLV
pop
line 2249
;2247:		cent->pe.legs.yawAngle, alpha,alpha,alpha,1, qfalse, 24, qtrue );
;2248:
;2249:	return qtrue;
CNSTI4 1
RETI4
LABELV $1036
endproc CG_PlayerShadow 104 44
proc CG_PlayerSplash 192 28
line 2260
;2250:}
;2251:
;2252:
;2253:/*
;2254:===============
;2255:CG_PlayerSplash
;2256:
;2257:Draw a mark at the water surface
;2258:===============
;2259:*/
;2260:static void CG_PlayerSplash( centity_t *cent ) {
line 2266
;2261:	vec3_t		start, end;
;2262:	trace_t		trace;
;2263:	int			contents;
;2264:	polyVert_t	verts[4];
;2265:
;2266:	if ( !cg_shadows.integer ) {
ADDRGP4 cg_shadows+12
INDIRI4
CNSTI4 0
NEI4 $1062
line 2267
;2267:		return;
ADDRGP4 $1061
JUMPV
LABELV $1062
line 2270
;2268:	}
;2269:
;2270:	VectorCopy( cent->lerpOrigin, end );
ADDRLP4 164
ADDRFP4 0
INDIRP4
CNSTI4 716
ADDP4
INDIRB
ASGNB 12
line 2271
;2271:	end[2] -= 24;
ADDRLP4 164+8
ADDRLP4 164+8
INDIRF4
CNSTF4 1103101952
SUBF4
ASGNF4
line 2275
;2272:
;2273:	// if the feet aren't in liquid, don't make a mark
;2274:	// this won't handle moving water brushes, but they wouldn't draw right anyway...
;2275:	contents = trap_CM_PointContents( end, 0 );
ADDRLP4 164
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 180
ADDRGP4 trap_CM_PointContents
CALLI4
ASGNI4
ADDRLP4 176
ADDRLP4 180
INDIRI4
ASGNI4
line 2276
;2276:	if ( !( contents & ( CONTENTS_WATER | CONTENTS_SLIME | CONTENTS_LAVA ) ) ) {
ADDRLP4 176
INDIRI4
CNSTI4 56
BANDI4
CNSTI4 0
NEI4 $1066
line 2277
;2277:		return;
ADDRGP4 $1061
JUMPV
LABELV $1066
line 2280
;2278:	}
;2279:
;2280:	VectorCopy( cent->lerpOrigin, start );
ADDRLP4 152
ADDRFP4 0
INDIRP4
CNSTI4 716
ADDP4
INDIRB
ASGNB 12
line 2281
;2281:	start[2] += 32;
ADDRLP4 152+8
ADDRLP4 152+8
INDIRF4
CNSTF4 1107296256
ADDF4
ASGNF4
line 2284
;2282:
;2283:	// if the head isn't out of liquid, don't make a mark
;2284:	contents = trap_CM_PointContents( start, 0 );
ADDRLP4 152
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 184
ADDRGP4 trap_CM_PointContents
CALLI4
ASGNI4
ADDRLP4 176
ADDRLP4 184
INDIRI4
ASGNI4
line 2285
;2285:	if ( contents & ( CONTENTS_SOLID | CONTENTS_WATER | CONTENTS_SLIME | CONTENTS_LAVA ) ) {
ADDRLP4 176
INDIRI4
CNSTI4 57
BANDI4
CNSTI4 0
EQI4 $1069
line 2286
;2286:		return;
ADDRGP4 $1061
JUMPV
LABELV $1069
line 2290
;2287:	}
;2288:
;2289:	// trace down to find the surface
;2290:	trap_CM_BoxTrace( &trace, start, end, NULL, NULL, 0, ( CONTENTS_WATER | CONTENTS_SLIME | CONTENTS_LAVA ) );
ADDRLP4 96
ARGP4
ADDRLP4 152
ARGP4
ADDRLP4 164
ARGP4
ADDRLP4 188
CNSTP4 0
ASGNP4
ADDRLP4 188
INDIRP4
ARGP4
ADDRLP4 188
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 56
ARGI4
ADDRGP4 trap_CM_BoxTrace
CALLV
pop
line 2292
;2291:
;2292:	if ( trace.fraction == 1.0 ) {
ADDRLP4 96+8
INDIRF4
CNSTF4 1065353216
NEF4 $1071
line 2293
;2293:		return;
ADDRGP4 $1061
JUMPV
LABELV $1071
line 2297
;2294:	}
;2295:
;2296:	// create a mark polygon
;2297:	VectorCopy( trace.endpos, verts[0].xyz );
ADDRLP4 0
ADDRLP4 96+12
INDIRB
ASGNB 12
line 2298
;2298:	verts[0].xyz[0] -= 32;
ADDRLP4 0
ADDRLP4 0
INDIRF4
CNSTF4 1107296256
SUBF4
ASGNF4
line 2299
;2299:	verts[0].xyz[1] -= 32;
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
CNSTF4 1107296256
SUBF4
ASGNF4
line 2300
;2300:	verts[0].st[0] = 0;
ADDRLP4 0+12
CNSTF4 0
ASGNF4
line 2301
;2301:	verts[0].st[1] = 0;
ADDRLP4 0+12+4
CNSTF4 0
ASGNF4
line 2302
;2302:	verts[0].modulate[0] = 255;
ADDRLP4 0+20
CNSTU1 255
ASGNU1
line 2303
;2303:	verts[0].modulate[1] = 255;
ADDRLP4 0+20+1
CNSTU1 255
ASGNU1
line 2304
;2304:	verts[0].modulate[2] = 255;
ADDRLP4 0+20+2
CNSTU1 255
ASGNU1
line 2305
;2305:	verts[0].modulate[3] = 255;
ADDRLP4 0+20+3
CNSTU1 255
ASGNU1
line 2307
;2306:
;2307:	VectorCopy( trace.endpos, verts[1].xyz );
ADDRLP4 0+24
ADDRLP4 96+12
INDIRB
ASGNB 12
line 2308
;2308:	verts[1].xyz[0] -= 32;
ADDRLP4 0+24
ADDRLP4 0+24
INDIRF4
CNSTF4 1107296256
SUBF4
ASGNF4
line 2309
;2309:	verts[1].xyz[1] += 32;
ADDRLP4 0+24+4
ADDRLP4 0+24+4
INDIRF4
CNSTF4 1107296256
ADDF4
ASGNF4
line 2310
;2310:	verts[1].st[0] = 0;
ADDRLP4 0+24+12
CNSTF4 0
ASGNF4
line 2311
;2311:	verts[1].st[1] = 1;
ADDRLP4 0+24+12+4
CNSTF4 1065353216
ASGNF4
line 2312
;2312:	verts[1].modulate[0] = 255;
ADDRLP4 0+24+20
CNSTU1 255
ASGNU1
line 2313
;2313:	verts[1].modulate[1] = 255;
ADDRLP4 0+24+20+1
CNSTU1 255
ASGNU1
line 2314
;2314:	verts[1].modulate[2] = 255;
ADDRLP4 0+24+20+2
CNSTU1 255
ASGNU1
line 2315
;2315:	verts[1].modulate[3] = 255;
ADDRLP4 0+24+20+3
CNSTU1 255
ASGNU1
line 2317
;2316:
;2317:	VectorCopy( trace.endpos, verts[2].xyz );
ADDRLP4 0+48
ADDRLP4 96+12
INDIRB
ASGNB 12
line 2318
;2318:	verts[2].xyz[0] += 32;
ADDRLP4 0+48
ADDRLP4 0+48
INDIRF4
CNSTF4 1107296256
ADDF4
ASGNF4
line 2319
;2319:	verts[2].xyz[1] += 32;
ADDRLP4 0+48+4
ADDRLP4 0+48+4
INDIRF4
CNSTF4 1107296256
ADDF4
ASGNF4
line 2320
;2320:	verts[2].st[0] = 1;
ADDRLP4 0+48+12
CNSTF4 1065353216
ASGNF4
line 2321
;2321:	verts[2].st[1] = 1;
ADDRLP4 0+48+12+4
CNSTF4 1065353216
ASGNF4
line 2322
;2322:	verts[2].modulate[0] = 255;
ADDRLP4 0+48+20
CNSTU1 255
ASGNU1
line 2323
;2323:	verts[2].modulate[1] = 255;
ADDRLP4 0+48+20+1
CNSTU1 255
ASGNU1
line 2324
;2324:	verts[2].modulate[2] = 255;
ADDRLP4 0+48+20+2
CNSTU1 255
ASGNU1
line 2325
;2325:	verts[2].modulate[3] = 255;
ADDRLP4 0+48+20+3
CNSTU1 255
ASGNU1
line 2327
;2326:
;2327:	VectorCopy( trace.endpos, verts[3].xyz );
ADDRLP4 0+72
ADDRLP4 96+12
INDIRB
ASGNB 12
line 2328
;2328:	verts[3].xyz[0] += 32;
ADDRLP4 0+72
ADDRLP4 0+72
INDIRF4
CNSTF4 1107296256
ADDF4
ASGNF4
line 2329
;2329:	verts[3].xyz[1] -= 32;
ADDRLP4 0+72+4
ADDRLP4 0+72+4
INDIRF4
CNSTF4 1107296256
SUBF4
ASGNF4
line 2330
;2330:	verts[3].st[0] = 1;
ADDRLP4 0+72+12
CNSTF4 1065353216
ASGNF4
line 2331
;2331:	verts[3].st[1] = 0;
ADDRLP4 0+72+12+4
CNSTF4 0
ASGNF4
line 2332
;2332:	verts[3].modulate[0] = 255;
ADDRLP4 0+72+20
CNSTU1 255
ASGNU1
line 2333
;2333:	verts[3].modulate[1] = 255;
ADDRLP4 0+72+20+1
CNSTU1 255
ASGNU1
line 2334
;2334:	verts[3].modulate[2] = 255;
ADDRLP4 0+72+20+2
CNSTU1 255
ASGNU1
line 2335
;2335:	verts[3].modulate[3] = 255;
ADDRLP4 0+72+20+3
CNSTU1 255
ASGNU1
line 2337
;2336:
;2337:	trap_R_AddPolyToScene( cgs.media.wakeMarkShader, 4, verts );
ADDRGP4 cgs+154388+392
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddPolyToScene
CALLV
pop
line 2338
;2338:}
LABELV $1061
endproc CG_PlayerSplash 192 28
export CG_AddRefEntityWithPowerups
proc CG_AddRefEntityWithPowerups 8 4
line 2351
;2339:
;2340:
;2341:
;2342:/*
;2343:===============
;2344:CG_AddRefEntityWithPowerups
;2345:
;2346:Adds a piece with modifications or duplications for powerups
;2347:Also called by CG_Missile for quad rockets, but nobody can tell...
;2348:===============
;2349:*/
;2350:void CG_AddRefEntityWithPowerups( refEntity_t *ent, entityState_t *state, int team, centity_t *cent ) 
;2351:{
line 2354
;2352:	clientInfo_t	*ci;
;2353:	int				clientNum;
;2354:	clientNum =		cent->currentState.clientNum;
ADDRLP4 0
ADDRFP4 12
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
ASGNI4
line 2355
;2355:	ci		  =		&cgs.clientinfo[ clientNum ];
ADDRLP4 4
CNSTI4 1740
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cgs+40972
ADDP4
ASGNP4
line 2357
;2356:
;2357:	if ( state->powerups & ( 1 << PW_INVIS ) ) {
ADDRFP4 4
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $1153
line 2358
;2358:		ent->customShader = cgs.media.invisShader;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+154388+436
INDIRI4
ASGNI4
line 2359
;2359:		trap_R_AddRefEntityToScene( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 2360
;2360:	} else {
ADDRGP4 $1154
JUMPV
LABELV $1153
line 2370
;2361:		/*
;2362:		if ( state->eFlags & EF_KAMIKAZE ) {
;2363:			if (team == TEAM_BLUE)
;2364:				ent->customShader = cgs.media.blueKamikazeShader;
;2365:			else
;2366:				ent->customShader = cgs.media.redKamikazeShader;
;2367:			trap_R_AddRefEntityToScene( ent );
;2368:		}
;2369:		else {*/
;2370:			trap_R_AddRefEntityToScene( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 2373
;2371:		//}
;2372:
;2373:		if ( state->powerups & ( 1 << PW_QUAD ) )
ADDRFP4 4
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $1157
line 2374
;2374:		{
line 2375
;2375:			if (team == TEAM_RED)
ADDRFP4 8
INDIRI4
CNSTI4 1
NEI4 $1159
line 2376
;2376:				ent->customShader = cgs.media.redQuadShader;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+154388+420
INDIRI4
ASGNI4
ADDRGP4 $1160
JUMPV
LABELV $1159
line 2378
;2377:			else
;2378:				ent->customShader = cgs.media.redQuadShader;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+154388+420
INDIRI4
ASGNI4
LABELV $1160
line 2379
;2379:			trap_R_AddRefEntityToScene( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 2380
;2380:		}
LABELV $1157
line 2381
;2381:		if ( state->powerups & ( 1 << PW_REGEN ) ) {
ADDRFP4 4
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $1165
line 2382
;2382:			if ( ( ( cg.time / 100 ) % 10 ) == 1 ) {
ADDRGP4 cg+109652
INDIRI4
CNSTI4 100
DIVI4
CNSTI4 10
MODI4
CNSTI4 1
NEI4 $1167
line 2383
;2383:				ent->customShader = cgs.media.regenShader;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+154388+440
INDIRI4
ASGNI4
line 2384
;2384:				trap_R_AddRefEntityToScene( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 2385
;2385:			}
LABELV $1167
line 2386
;2386:		}
LABELV $1165
line 2387
;2387:		if ( state->powerups & ( 1 << PW_BATTLESUIT ) ) {
ADDRFP4 4
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $1172
line 2388
;2388:			ent->customShader = cgs.media.battleSuitShader;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+154388+444
INDIRI4
ASGNI4
line 2389
;2389:			trap_R_AddRefEntityToScene( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 2390
;2390:		}
LABELV $1172
line 2392
;2391:		
;2392:		if ( state->time2 == 9 || ci->cgimmobilized == qtrue ) 
ADDRFP4 4
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
CNSTI4 9
EQI4 $1178
ADDRLP4 4
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 1
NEI4 $1176
LABELV $1178
line 2393
;2393:		{ //-Vincent
line 2394
;2394:		ent->customShader = cgs.media.immobilizedShader;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+154388+464
INDIRI4
ASGNI4
line 2395
;2395:		trap_R_AddRefEntityToScene( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 2396
;2396:		}
LABELV $1176
line 2398
;2397:
;2398:		if ( state->powerups & ( 1 << PW_INVULNERABILITY ) ) {
ADDRFP4 4
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
CNSTI4 16384
BANDI4
CNSTI4 0
EQI4 $1181
line 2399
;2399:			ent->customShader = cgs.media.buildShader;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+154388+424
INDIRI4
ASGNI4
line 2400
;2400:			trap_R_AddRefEntityToScene( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 2401
;2401:		}
LABELV $1181
line 2402
;2402:	}
LABELV $1154
line 2403
;2403:}
LABELV $1151
endproc CG_AddRefEntityWithPowerups 8 4
export CG_LightVerts
proc CG_LightVerts 88 16
line 2411
;2404:
;2405:/*
;2406:=================
;2407:CG_LightVerts
;2408:=================
;2409:*/
;2410:int CG_LightVerts( vec3_t normal, int numVerts, polyVert_t *verts )
;2411:{
line 2418
;2412:	int				i, j;
;2413:	float			incoming;
;2414:	vec3_t			ambientLight;
;2415:	vec3_t			lightDir;
;2416:	vec3_t			directedLight;
;2417:
;2418:	trap_R_LightForPoint( verts[0].xyz, ambientLight, directedLight, lightDir );
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 12
ARGP4
ADDRLP4 36
ARGP4
ADDRLP4 24
ARGP4
ADDRGP4 trap_R_LightForPoint
CALLI4
pop
line 2420
;2419:
;2420:	for (i = 0; i < numVerts; i++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $1189
JUMPV
LABELV $1186
line 2421
;2421:		incoming = DotProduct (normal, lightDir);
ADDRLP4 48
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
ADDRLP4 48
INDIRP4
INDIRF4
ADDRLP4 24
INDIRF4
MULF4
ADDRLP4 48
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 24+4
INDIRF4
MULF4
ADDF4
ADDRLP4 48
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 2422
;2422:		if ( incoming <= 0 ) {
ADDRLP4 8
INDIRF4
CNSTF4 0
GTF4 $1192
line 2423
;2423:			verts[i].modulate[0] = ambientLight[0];
ADDRLP4 56
ADDRLP4 12
INDIRF4
ASGNF4
ADDRLP4 60
CNSTF4 1325400064
ASGNF4
ADDRLP4 56
INDIRF4
ADDRLP4 60
INDIRF4
LTF4 $1195
ADDRLP4 52
ADDRLP4 56
INDIRF4
ADDRLP4 60
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1196
JUMPV
LABELV $1195
ADDRLP4 52
ADDRLP4 56
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1196
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRFP4 8
INDIRP4
ADDP4
CNSTI4 20
ADDP4
ADDRLP4 52
INDIRU4
CVUU1 4
ASGNU1
line 2424
;2424:			verts[i].modulate[1] = ambientLight[1];
ADDRLP4 68
ADDRLP4 12+4
INDIRF4
ASGNF4
ADDRLP4 72
CNSTF4 1325400064
ASGNF4
ADDRLP4 68
INDIRF4
ADDRLP4 72
INDIRF4
LTF4 $1199
ADDRLP4 64
ADDRLP4 68
INDIRF4
ADDRLP4 72
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1200
JUMPV
LABELV $1199
ADDRLP4 64
ADDRLP4 68
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1200
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRFP4 8
INDIRP4
ADDP4
CNSTI4 21
ADDP4
ADDRLP4 64
INDIRU4
CVUU1 4
ASGNU1
line 2425
;2425:			verts[i].modulate[2] = ambientLight[2];
ADDRLP4 80
ADDRLP4 12+8
INDIRF4
ASGNF4
ADDRLP4 84
CNSTF4 1325400064
ASGNF4
ADDRLP4 80
INDIRF4
ADDRLP4 84
INDIRF4
LTF4 $1203
ADDRLP4 76
ADDRLP4 80
INDIRF4
ADDRLP4 84
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1204
JUMPV
LABELV $1203
ADDRLP4 76
ADDRLP4 80
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1204
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRFP4 8
INDIRP4
ADDP4
CNSTI4 22
ADDP4
ADDRLP4 76
INDIRU4
CVUU1 4
ASGNU1
line 2426
;2426:			verts[i].modulate[3] = 255;
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRFP4 8
INDIRP4
ADDP4
CNSTI4 23
ADDP4
CNSTU1 255
ASGNU1
line 2427
;2427:			continue;
ADDRGP4 $1187
JUMPV
LABELV $1192
line 2429
;2428:		} 
;2429:		j = ( ambientLight[0] + incoming * directedLight[0] );
ADDRLP4 0
ADDRLP4 12
INDIRF4
ADDRLP4 8
INDIRF4
ADDRLP4 36
INDIRF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 2430
;2430:		if ( j > 255 ) {
ADDRLP4 0
INDIRI4
CNSTI4 255
LEI4 $1205
line 2431
;2431:			j = 255;
ADDRLP4 0
CNSTI4 255
ASGNI4
line 2432
;2432:		}
LABELV $1205
line 2433
;2433:		verts[i].modulate[0] = j;
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRFP4 8
INDIRP4
ADDP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRI4
CVIU4 4
CVUU1 4
ASGNU1
line 2435
;2434:
;2435:		j = ( ambientLight[1] + incoming * directedLight[1] );
ADDRLP4 0
ADDRLP4 12+4
INDIRF4
ADDRLP4 8
INDIRF4
ADDRLP4 36+4
INDIRF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 2436
;2436:		if ( j > 255 ) {
ADDRLP4 0
INDIRI4
CNSTI4 255
LEI4 $1209
line 2437
;2437:			j = 255;
ADDRLP4 0
CNSTI4 255
ASGNI4
line 2438
;2438:		}
LABELV $1209
line 2439
;2439:		verts[i].modulate[1] = j;
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRFP4 8
INDIRP4
ADDP4
CNSTI4 21
ADDP4
ADDRLP4 0
INDIRI4
CVIU4 4
CVUU1 4
ASGNU1
line 2441
;2440:
;2441:		j = ( ambientLight[2] + incoming * directedLight[2] );
ADDRLP4 0
ADDRLP4 12+8
INDIRF4
ADDRLP4 8
INDIRF4
ADDRLP4 36+8
INDIRF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 2442
;2442:		if ( j > 255 ) {
ADDRLP4 0
INDIRI4
CNSTI4 255
LEI4 $1213
line 2443
;2443:			j = 255;
ADDRLP4 0
CNSTI4 255
ASGNI4
line 2444
;2444:		}
LABELV $1213
line 2445
;2445:		verts[i].modulate[2] = j;
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRFP4 8
INDIRP4
ADDP4
CNSTI4 22
ADDP4
ADDRLP4 0
INDIRI4
CVIU4 4
CVUU1 4
ASGNU1
line 2447
;2446:
;2447:		verts[i].modulate[3] = 255;
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRFP4 8
INDIRP4
ADDP4
CNSTI4 23
ADDP4
CNSTU1 255
ASGNU1
line 2448
;2448:	}
LABELV $1187
line 2420
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $1189
ADDRLP4 4
INDIRI4
ADDRFP4 4
INDIRI4
LTI4 $1186
line 2449
;2449:	return qtrue;
CNSTI4 1
RETI4
LABELV $1185
endproc CG_LightVerts 88 16
export CG_Player
proc CG_Player 460 28
line 2457
;2450:}
;2451:
;2452:/*
;2453:===============
;2454:CG_Player
;2455:===============
;2456:*/
;2457:void CG_Player( centity_t *cent ) {
line 2478
;2458:	clientInfo_t	*ci;
;2459:	refEntity_t		legs;
;2460:	refEntity_t		torso;
;2461:	refEntity_t		head;
;2462:	int				clientNum;
;2463:	int				renderfx;
;2464:	qboolean		shadow;
;2465:	float			shadowPlane;
;2466:#ifdef MISSIONPACK
;2467:	refEntity_t		skull;
;2468:	refEntity_t		powerup;
;2469:	int				t;
;2470:	float			c;
;2471:	float			angle;
;2472:	vec3_t			dir, angles;
;2473:#endif
;2474:
;2475:	// the client number is stored in clientNum.  It can't be derived
;2476:	// from the entity number, because a single client may have
;2477:	// multiple corpses on the level using the same clientinfo
;2478:	clientNum = cent->currentState.clientNum;
ADDRLP4 428
ADDRFP4 0
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
ASGNI4
line 2479
;2479:	if ( clientNum < 0 || clientNum >= MAX_CLIENTS ) {
ADDRLP4 428
INDIRI4
CNSTI4 0
LTI4 $1218
ADDRLP4 428
INDIRI4
CNSTI4 64
LTI4 $1216
LABELV $1218
line 2480
;2480:		CG_Error( "Bad clientNum on player entity");
ADDRGP4 $1219
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 2481
;2481:	}
LABELV $1216
line 2482
;2482:	ci = &cgs.clientinfo[ clientNum ];
ADDRLP4 280
CNSTI4 1740
ADDRLP4 428
INDIRI4
MULI4
ADDRGP4 cgs+40972
ADDP4
ASGNP4
line 2486
;2483:
;2484:	// it is possible to see corpses from disconnected players that may
;2485:	// not have valid clientinfo
;2486:	if ( !ci->infoValid ) {
ADDRLP4 280
INDIRP4
INDIRI4
CNSTI4 0
NEI4 $1221
line 2487
;2487:		return;
ADDRGP4 $1215
JUMPV
LABELV $1221
line 2491
;2488:	}
;2489:
;2490:	// get the player model information
;2491:	renderfx = 0;
ADDRLP4 424
CNSTI4 0
ASGNI4
line 2492
;2492:	if ( cent->currentState.number == cg.snap->ps.clientNum) {
ADDRFP4 0
INDIRP4
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
NEI4 $1223
line 2493
;2493:		if (!cg.renderingThirdPerson) {
ADDRGP4 cg+109676
INDIRI4
CNSTI4 0
NEI4 $1226
line 2494
;2494:			renderfx = RF_THIRD_PERSON;			// only draw in mirrors
ADDRLP4 424
CNSTI4 2
ASGNI4
line 2495
;2495:		} else {
ADDRGP4 $1227
JUMPV
LABELV $1226
line 2496
;2496:			if (cg_cameraMode.integer) {
ADDRGP4 cg_cameraMode+12
INDIRI4
CNSTI4 0
EQI4 $1229
line 2497
;2497:				return;
ADDRGP4 $1215
JUMPV
LABELV $1229
line 2499
;2498:			}
;2499:		}
LABELV $1227
line 2500
;2500:	}
LABELV $1223
line 2503
;2501:
;2502:
;2503:	memset( &legs, 0, sizeof(legs) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 2504
;2504:	memset( &torso, 0, sizeof(torso) );
ADDRLP4 140
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 2505
;2505:	memset( &head, 0, sizeof(head) );
ADDRLP4 284
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 2508
;2506:
;2507:	// get the rotation information
;2508:	CG_PlayerAngles( cent, legs.axis, torso.axis, head.axis );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0+28
ARGP4
ADDRLP4 140+28
ARGP4
ADDRLP4 284+28
ARGP4
ADDRGP4 CG_PlayerAngles
CALLV
pop
line 2511
;2509:	
;2510:	// get the animation state (after rotation, to allow feet shuffle)
;2511:	CG_PlayerAnimation( cent, &legs.oldframe, &legs.frame, &legs.backlerp,
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0+96
ARGP4
ADDRLP4 0+80
ARGP4
ADDRLP4 0+100
ARGP4
ADDRLP4 140+96
ARGP4
ADDRLP4 140+80
ARGP4
ADDRLP4 140+100
ARGP4
ADDRGP4 CG_PlayerAnimation
CALLV
pop
line 2515
;2512:		 &torso.oldframe, &torso.frame, &torso.backlerp );
;2513:
;2514:	// add the talk baloon or disconnect icon
;2515:	CG_PlayerSprites( cent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_PlayerSprites
CALLV
pop
line 2518
;2516:
;2517:	// add the shadow
;2518:	shadow = CG_PlayerShadow( cent, &shadowPlane );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 432
ARGP4
ADDRLP4 444
ADDRGP4 CG_PlayerShadow
CALLI4
ASGNI4
ADDRLP4 436
ADDRLP4 444
INDIRI4
ASGNI4
line 2521
;2519:
;2520:	// add a water splash if partially in and out of water
;2521:	CG_PlayerSplash( cent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_PlayerSplash
CALLV
pop
line 2523
;2522:
;2523:	if ( cg_shadows.integer == 3 && shadow ) {
ADDRGP4 cg_shadows+12
INDIRI4
CNSTI4 3
NEI4 $1241
ADDRLP4 436
INDIRI4
CNSTI4 0
EQI4 $1241
line 2524
;2524:		renderfx |= RF_SHADOW_PLANE;
ADDRLP4 424
ADDRLP4 424
INDIRI4
CNSTI4 256
BORI4
ASGNI4
line 2525
;2525:	}
LABELV $1241
line 2526
;2526:	renderfx |= RF_LIGHTING_ORIGIN;			// use the same origin for all
ADDRLP4 424
ADDRLP4 424
INDIRI4
CNSTI4 128
BORI4
ASGNI4
line 2535
;2527:#ifdef MISSIONPACK
;2528:	if( cgs.gametype == GT_HARVESTER ) {
;2529:		CG_PlayerTokens( cent, renderfx );
;2530:	}
;2531:#endif
;2532:	//
;2533:	// add the legs
;2534:	//
;2535:	legs.hModel = ci->legsModel;
ADDRLP4 0+8
ADDRLP4 280
INDIRP4
CNSTI4 528
ADDP4
INDIRI4
ASGNI4
line 2536
;2536:	legs.customSkin = ci->legsSkin;
ADDRLP4 0+108
ADDRLP4 280
INDIRP4
CNSTI4 532
ADDP4
INDIRI4
ASGNI4
line 2538
;2537:
;2538:	VectorCopy( cent->lerpOrigin, legs.origin );
ADDRLP4 0+68
ADDRFP4 0
INDIRP4
CNSTI4 716
ADDP4
INDIRB
ASGNB 12
line 2540
;2539:
;2540:	VectorCopy( cent->lerpOrigin, legs.lightingOrigin );
ADDRLP4 0+12
ADDRFP4 0
INDIRP4
CNSTI4 716
ADDP4
INDIRB
ASGNB 12
line 2541
;2541:	legs.shadowPlane = shadowPlane;
ADDRLP4 0+24
ADDRLP4 432
INDIRF4
ASGNF4
line 2542
;2542:	legs.renderfx = renderfx;
ADDRLP4 0+4
ADDRLP4 424
INDIRI4
ASGNI4
line 2543
;2543:	VectorCopy (legs.origin, legs.oldorigin);	// don't positionally lerp at all
ADDRLP4 0+84
ADDRLP4 0+68
INDIRB
ASGNB 12
line 2545
;2544:
;2545:	CG_AddRefEntityWithPowerups( &legs, &cent->currentState, ci->team, cent );
ADDRLP4 0
ARGP4
ADDRLP4 448
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 448
INDIRP4
ARGP4
ADDRLP4 280
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
ARGI4
ADDRLP4 448
INDIRP4
ARGP4
ADDRGP4 CG_AddRefEntityWithPowerups
CALLV
pop
line 2548
;2546:
;2547:	// if the model failed, allow the default nullmodel to be displayed
;2548:	if (!legs.hModel) {
ADDRLP4 0+8
INDIRI4
CNSTI4 0
NEI4 $1252
line 2549
;2549:		return;
ADDRGP4 $1215
JUMPV
LABELV $1252
line 2555
;2550:	}
;2551:
;2552:	//
;2553:	// add the torso
;2554:	//
;2555:	torso.hModel = ci->torsoModel;
ADDRLP4 140+8
ADDRLP4 280
INDIRP4
CNSTI4 536
ADDP4
INDIRI4
ASGNI4
line 2556
;2556:	if (!torso.hModel) {
ADDRLP4 140+8
INDIRI4
CNSTI4 0
NEI4 $1256
line 2557
;2557:		return;
ADDRGP4 $1215
JUMPV
LABELV $1256
line 2560
;2558:	}
;2559:
;2560:	torso.customSkin = ci->torsoSkin;
ADDRLP4 140+108
ADDRLP4 280
INDIRP4
CNSTI4 540
ADDP4
INDIRI4
ASGNI4
line 2562
;2561:
;2562:	VectorCopy( cent->lerpOrigin, torso.lightingOrigin );
ADDRLP4 140+12
ADDRFP4 0
INDIRP4
CNSTI4 716
ADDP4
INDIRB
ASGNB 12
line 2564
;2563:
;2564:	CG_PositionRotatedEntityOnTag( &torso, &legs, ci->legsModel, "tag_torso");
ADDRLP4 140
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 280
INDIRP4
CNSTI4 528
ADDP4
INDIRI4
ARGI4
ADDRGP4 $1261
ARGP4
ADDRGP4 CG_PositionRotatedEntityOnTag
CALLV
pop
line 2566
;2565:
;2566:	torso.shadowPlane = shadowPlane;
ADDRLP4 140+24
ADDRLP4 432
INDIRF4
ASGNF4
line 2567
;2567:	torso.renderfx = renderfx;
ADDRLP4 140+4
ADDRLP4 424
INDIRI4
ASGNI4
line 2569
;2568:
;2569:	CG_AddRefEntityWithPowerups( &torso, &cent->currentState, ci->team, cent );
ADDRLP4 140
ARGP4
ADDRLP4 452
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 452
INDIRP4
ARGP4
ADDRLP4 280
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
ARGI4
ADDRLP4 452
INDIRP4
ARGP4
ADDRGP4 CG_AddRefEntityWithPowerups
CALLV
pop
line 2779
;2570:
;2571:#ifdef MISSIONPACK
;2572:	if ( cent->currentState.eFlags & EF_KAMIKAZE ) {
;2573:
;2574:		memset( &skull, 0, sizeof(skull) );
;2575:
;2576:		VectorCopy( cent->lerpOrigin, skull.lightingOrigin );
;2577:		skull.shadowPlane = shadowPlane;
;2578:		skull.renderfx = renderfx;
;2579:
;2580:		if ( cent->currentState.eFlags & EF_DEAD ) {
;2581:			// one skull bobbing above the dead body
;2582:			angle = ((cg.time / 7) & 255) * (M_PI * 2) / 255;
;2583:			if (angle > M_PI * 2)
;2584:				angle -= (float)M_PI * 2;
;2585:			dir[0] = sin(angle) * 20;
;2586:			dir[1] = cos(angle) * 20;
;2587:			angle = ((cg.time / 4) & 255) * (M_PI * 2) / 255;
;2588:			dir[2] = 15 + sin(angle) * 8;
;2589:			VectorAdd(torso.origin, dir, skull.origin);
;2590:			
;2591:			dir[2] = 0;
;2592:			VectorCopy(dir, skull.axis[1]);
;2593:			VectorNormalize(skull.axis[1]);
;2594:			VectorSet(skull.axis[2], 0, 0, 1);
;2595:			CrossProduct(skull.axis[1], skull.axis[2], skull.axis[0]);
;2596:
;2597:			skull.hModel = cgs.media.kamikazeHeadModel;
;2598:			trap_R_AddRefEntityToScene( &skull );
;2599:			skull.hModel = cgs.media.kamikazeHeadTrail;
;2600:			trap_R_AddRefEntityToScene( &skull );
;2601:		}
;2602:		else {
;2603:			// three skulls spinning around the player
;2604:			angle = ((cg.time / 4) & 255) * (M_PI * 2) / 255;
;2605:			dir[0] = cos(angle) * 20;
;2606:			dir[1] = sin(angle) * 20;
;2607:			dir[2] = cos(angle) * 20;
;2608:			VectorAdd(torso.origin, dir, skull.origin);
;2609:
;2610:			angles[0] = sin(angle) * 30;
;2611:			angles[1] = (angle * 180 / M_PI) + 90;
;2612:			if (angles[1] > 360)
;2613:				angles[1] -= 360;
;2614:			angles[2] = 0;
;2615:			AnglesToAxis( angles, skull.axis );
;2616:
;2617:			/*
;2618:			dir[2] = 0;
;2619:			VectorInverse(dir);
;2620:			VectorCopy(dir, skull.axis[1]);
;2621:			VectorNormalize(skull.axis[1]);
;2622:			VectorSet(skull.axis[2], 0, 0, 1);
;2623:			CrossProduct(skull.axis[1], skull.axis[2], skull.axis[0]);
;2624:			*/
;2625:
;2626:			skull.hModel = cgs.media.kamikazeHeadModel;
;2627:			trap_R_AddRefEntityToScene( &skull );
;2628:			// flip the trail because this skull is spinning in the other direction
;2629:			VectorInverse(skull.axis[1]);
;2630:			skull.hModel = cgs.media.kamikazeHeadTrail;
;2631:			trap_R_AddRefEntityToScene( &skull );
;2632:
;2633:			angle = ((cg.time / 4) & 255) * (M_PI * 2) / 255 + M_PI;
;2634:			if (angle > M_PI * 2)
;2635:				angle -= (float)M_PI * 2;
;2636:			dir[0] = sin(angle) * 20;
;2637:			dir[1] = cos(angle) * 20;
;2638:			dir[2] = cos(angle) * 20;
;2639:			VectorAdd(torso.origin, dir, skull.origin);
;2640:
;2641:			angles[0] = cos(angle - 0.5 * M_PI) * 30;
;2642:			angles[1] = 360 - (angle * 180 / M_PI);
;2643:			if (angles[1] > 360)
;2644:				angles[1] -= 360;
;2645:			angles[2] = 0;
;2646:			AnglesToAxis( angles, skull.axis );
;2647:
;2648:			/*
;2649:			dir[2] = 0;
;2650:			VectorCopy(dir, skull.axis[1]);
;2651:			VectorNormalize(skull.axis[1]);
;2652:			VectorSet(skull.axis[2], 0, 0, 1);
;2653:			CrossProduct(skull.axis[1], skull.axis[2], skull.axis[0]);
;2654:			*/
;2655:
;2656:			skull.hModel = cgs.media.kamikazeHeadModel;
;2657:			trap_R_AddRefEntityToScene( &skull );
;2658:			skull.hModel = cgs.media.kamikazeHeadTrail;
;2659:			trap_R_AddRefEntityToScene( &skull );
;2660:
;2661:			angle = ((cg.time / 3) & 255) * (M_PI * 2) / 255 + 0.5 * M_PI;
;2662:			if (angle > M_PI * 2)
;2663:				angle -= (float)M_PI * 2;
;2664:			dir[0] = sin(angle) * 20;
;2665:			dir[1] = cos(angle) * 20;
;2666:			dir[2] = 0;
;2667:			VectorAdd(torso.origin, dir, skull.origin);
;2668:			
;2669:			VectorCopy(dir, skull.axis[1]);
;2670:			VectorNormalize(skull.axis[1]);
;2671:			VectorSet(skull.axis[2], 0, 0, 1);
;2672:			CrossProduct(skull.axis[1], skull.axis[2], skull.axis[0]);
;2673:
;2674:			skull.hModel = cgs.media.kamikazeHeadModel;
;2675:			trap_R_AddRefEntityToScene( &skull );
;2676:			skull.hModel = cgs.media.kamikazeHeadTrail;
;2677:			trap_R_AddRefEntityToScene( &skull );
;2678:		}
;2679:	}
;2680:
;2681:	if ( cent->currentState.powerups & ( 1 << PW_GUARD ) ) {
;2682:		memcpy(&powerup, &torso, sizeof(torso));
;2683:		powerup.hModel = cgs.media.guardPowerupModel;
;2684:		powerup.frame = 0;
;2685:		powerup.oldframe = 0;
;2686:		powerup.customSkin = 0;
;2687:		trap_R_AddRefEntityToScene( &powerup );
;2688:	}
;2689:	if ( cent->currentState.powerups & ( 1 << PW_SCOUT ) ) {
;2690:		memcpy(&powerup, &torso, sizeof(torso));
;2691:		powerup.hModel = cgs.media.scoutPowerupModel;
;2692:		powerup.frame = 0;
;2693:		powerup.oldframe = 0;
;2694:		powerup.customSkin = 0;
;2695:		trap_R_AddRefEntityToScene( &powerup );
;2696:	}
;2697:	if ( cent->currentState.powerups & ( 1 << PW_DOUBLER ) ) {
;2698:		memcpy(&powerup, &torso, sizeof(torso));
;2699:		powerup.hModel = cgs.media.doublerPowerupModel;
;2700:		powerup.frame = 0;
;2701:		powerup.oldframe = 0;
;2702:		powerup.customSkin = 0;
;2703:		trap_R_AddRefEntityToScene( &powerup );
;2704:	}
;2705:	if ( cent->currentState.powerups & ( 1 << PW_AMMOREGEN ) ) {
;2706:		memcpy(&powerup, &torso, sizeof(torso));
;2707:		powerup.hModel = cgs.media.ammoRegenPowerupModel;
;2708:		powerup.frame = 0;
;2709:		powerup.oldframe = 0;
;2710:		powerup.customSkin = 0;
;2711:		trap_R_AddRefEntityToScene( &powerup );
;2712:	}
;2713:	if ( cent->currentState.powerups & ( 1 << PW_INVULNERABILITY ) ) {
;2714:		if ( !ci->invulnerabilityStartTime ) {
;2715:			ci->invulnerabilityStartTime = cg.time;
;2716:		}
;2717:		ci->invulnerabilityStopTime = cg.time;
;2718:	}
;2719:	else {
;2720:		ci->invulnerabilityStartTime = 0;
;2721:	}
;2722:	if ( (cent->currentState.powerups & ( 1 << PW_INVULNERABILITY ) ) ||
;2723:		cg.time - ci->invulnerabilityStopTime < 250 ) {
;2724:
;2725:		memcpy(&powerup, &torso, sizeof(torso));
;2726:		powerup.hModel = cgs.media.invulnerabilityPowerupModel;
;2727:		powerup.customSkin = 0;
;2728:		// always draw
;2729:		powerup.renderfx &= ~RF_THIRD_PERSON;
;2730:		VectorCopy(cent->lerpOrigin, powerup.origin);
;2731:
;2732:		if ( cg.time - ci->invulnerabilityStartTime < 250 ) {
;2733:			c = (float) (cg.time - ci->invulnerabilityStartTime) / 250;
;2734:		}
;2735:		else if (cg.time - ci->invulnerabilityStopTime < 250 ) {
;2736:			c = (float) (250 - (cg.time - ci->invulnerabilityStopTime)) / 250;
;2737:		}
;2738:		else {
;2739:			c = 1;
;2740:		}
;2741:		VectorSet( powerup.axis[0], c, 0, 0 );
;2742:		VectorSet( powerup.axis[1], 0, c, 0 );
;2743:		VectorSet( powerup.axis[2], 0, 0, c );
;2744:		trap_R_AddRefEntityToScene( &powerup );
;2745:	}
;2746:
;2747:	t = cg.time - ci->medkitUsageTime;
;2748:	if ( ci->medkitUsageTime && t < 500 ) {
;2749:		memcpy(&powerup, &torso, sizeof(torso));
;2750:		powerup.hModel = cgs.media.medkitUsageModel;
;2751:		powerup.customSkin = 0;
;2752:		// always draw
;2753:		powerup.renderfx &= ~RF_THIRD_PERSON;
;2754:		VectorClear(angles);
;2755:		AnglesToAxis(angles, powerup.axis);
;2756:		VectorCopy(cent->lerpOrigin, powerup.origin);
;2757:		powerup.origin[2] += -24 + (float) t * 80 / 500;
;2758:		if ( t > 400 ) {
;2759:			c = (float) (t - 1000) * 0xff / 100;
;2760:			powerup.shaderRGBA[0] = 0xff - c;
;2761:			powerup.shaderRGBA[1] = 0xff - c;
;2762:			powerup.shaderRGBA[2] = 0xff - c;
;2763:			powerup.shaderRGBA[3] = 0xff - c;
;2764:		}
;2765:		else {
;2766:			powerup.shaderRGBA[0] = 0xff;
;2767:			powerup.shaderRGBA[1] = 0xff;
;2768:			powerup.shaderRGBA[2] = 0xff;
;2769:			powerup.shaderRGBA[3] = 0xff;
;2770:		}
;2771:		trap_R_AddRefEntityToScene( &powerup );
;2772:	}
;2773:#endif // MISSIONPACK
;2774:
;2775:	//
;2776:	// add the head
;2777:	//
;2778:	// Shafe - Trep - This is all new code for headshots
;2779:	if(!cent->pe.noHead)
ADDRFP4 0
INDIRP4
CNSTI4 644
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1264
line 2780
;2780:	{
line 2781
;2781:		head.hModel = ci->headModel;
ADDRLP4 284+8
ADDRLP4 280
INDIRP4
CNSTI4 544
ADDP4
INDIRI4
ASGNI4
line 2782
;2782:		if (!head.hModel) 
ADDRLP4 284+8
INDIRI4
CNSTI4 0
NEI4 $1267
line 2783
;2783:		{
line 2784
;2784:			return;
ADDRGP4 $1215
JUMPV
LABELV $1267
line 2786
;2785:		}
;2786:		head.customSkin = ci->headSkin;
ADDRLP4 284+108
ADDRLP4 280
INDIRP4
CNSTI4 548
ADDP4
INDIRI4
ASGNI4
line 2788
;2787:
;2788:		VectorCopy( cent->lerpOrigin, head.lightingOrigin );
ADDRLP4 284+12
ADDRFP4 0
INDIRP4
CNSTI4 716
ADDP4
INDIRB
ASGNB 12
line 2790
;2789:
;2790:		CG_PositionRotatedEntityOnTag( &head, &torso, ci->torsoModel, "tag_head");
ADDRLP4 284
ARGP4
ADDRLP4 140
ARGP4
ADDRLP4 280
INDIRP4
CNSTI4 536
ADDP4
INDIRI4
ARGI4
ADDRGP4 $1272
ARGP4
ADDRGP4 CG_PositionRotatedEntityOnTag
CALLV
pop
line 2792
;2791:
;2792:		head.shadowPlane = shadowPlane;
ADDRLP4 284+24
ADDRLP4 432
INDIRF4
ASGNF4
line 2793
;2793:		head.renderfx = renderfx;
ADDRLP4 284+4
ADDRLP4 424
INDIRI4
ASGNI4
line 2795
;2794:
;2795:		CG_AddRefEntityWithPowerups( &head, &cent->currentState, ci->team, cent );
ADDRLP4 284
ARGP4
ADDRLP4 456
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 456
INDIRP4
ARGP4
ADDRLP4 280
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
ARGI4
ADDRLP4 456
INDIRP4
ARGP4
ADDRGP4 CG_AddRefEntityWithPowerups
CALLV
pop
line 2796
;2796:	}
LABELV $1264
line 2825
;2797:
;2798:	/*  Shafe - Trep - This is the original code -- Fuck.. Lets hope we dont end up compiling with MISSIONPACK!
;2799:	head.hModel = ci->headModel;
;2800:	if (!head.hModel) {
;2801:		return;
;2802:	}
;2803:	head.customSkin = ci->headSkin;
;2804:
;2805:	VectorCopy( cent->lerpOrigin, head.lightingOrigin );
;2806:
;2807:	CG_PositionRotatedEntityOnTag( &head, &torso, ci->torsoModel, "tag_head");
;2808:
;2809:	head.shadowPlane = shadowPlane;
;2810:	head.renderfx = renderfx;
;2811:
;2812:	CG_AddRefEntityWithPowerups( &head, &cent->currentState, ci->team, cent );
;2813:	*/
;2814:
;2815:
;2816:#ifdef MISSIONPACK
;2817:	CG_BreathPuffs(cent, &head);
;2818:
;2819:	CG_DustTrail(cent);
;2820:#endif
;2821:
;2822:	//
;2823:	// add the gun / barrel / flash
;2824:	//
;2825:	CG_AddPlayerWeapon( &torso, NULL, cent, ci->team );
ADDRLP4 140
ARGP4
CNSTP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 280
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_AddPlayerWeapon
CALLV
pop
line 2828
;2826:
;2827:	// add powerups floating behind the player
;2828:	CG_PlayerPowerups( cent, &torso );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 140
ARGP4
ADDRGP4 CG_PlayerPowerups
CALLV
pop
line 2832
;2829:
;2830://unlagged - client options
;2831:	// add the bounding box (if cg_drawBBox is 1)
;2832:	CG_AddBoundingBox( cent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddBoundingBox
CALLV
pop
line 2834
;2833://unlagged - client options
;2834:}
LABELV $1215
endproc CG_Player 460 28
export CG_ResetPlayerEntity
proc CG_ResetPlayerEntity 40 12
line 2846
;2835:
;2836:
;2837://=====================================================================
;2838:
;2839:/*
;2840:===============
;2841:CG_ResetPlayerEntity
;2842:
;2843:A player just came into view or teleported, so reset all animation info
;2844:===============
;2845:*/
;2846:void CG_ResetPlayerEntity( centity_t *cent ) {
line 2847
;2847:	cent->errorTime = -99999;		// guarantee no error decay added
ADDRFP4 0
INDIRP4
CNSTI4 648
ADDP4
CNSTI4 -99999
ASGNI4
line 2848
;2848:	cent->extrapolated = qfalse;	
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
CNSTI4 0
ASGNI4
line 2850
;2849:
;2850:	CG_ClearLerpFrame( &cgs.clientinfo[ cent->currentState.clientNum ], &cent->pe.legs, cent->currentState.legsAnim );
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
CNSTI4 1740
ADDRLP4 0
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+40972
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 460
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_ClearLerpFrame
CALLV
pop
line 2851
;2851:	CG_ClearLerpFrame( &cgs.clientinfo[ cent->currentState.clientNum ], &cent->pe.torso, cent->currentState.torsoAnim );
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
CNSTI4 1740
ADDRLP4 4
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+40972
ADDP4
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 508
ADDP4
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 200
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_ClearLerpFrame
CALLV
pop
line 2853
;2852:
;2853:	BG_EvaluateTrajectory( &cent->currentState.pos, cg.time, cent->lerpOrigin );
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 cg+109652
INDIRI4
ARGI4
ADDRLP4 8
INDIRP4
CNSTI4 716
ADDP4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 2854
;2854:	BG_EvaluateTrajectory( &cent->currentState.apos, cg.time, cent->lerpAngles );
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
ARGP4
ADDRGP4 cg+109652
INDIRI4
ARGI4
ADDRLP4 12
INDIRP4
CNSTI4 728
ADDP4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 2856
;2855:
;2856:	VectorCopy( cent->lerpOrigin, cent->rawOrigin );
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 680
ADDP4
ADDRLP4 16
INDIRP4
CNSTI4 716
ADDP4
INDIRB
ASGNB 12
line 2857
;2857:	VectorCopy( cent->lerpAngles, cent->rawAngles );
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 692
ADDP4
ADDRLP4 20
INDIRP4
CNSTI4 728
ADDP4
INDIRB
ASGNB 12
line 2859
;2858:
;2859:	memset( &cent->pe.legs, 0, sizeof( cent->pe.legs ) );
ADDRFP4 0
INDIRP4
CNSTI4 460
ADDP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 48
ARGI4
ADDRGP4 memset
CALLP4
pop
line 2860
;2860:	cent->pe.legs.yawAngle = cent->rawAngles[YAW];
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTI4 480
ADDP4
ADDRLP4 24
INDIRP4
CNSTI4 696
ADDP4
INDIRF4
ASGNF4
line 2861
;2861:	cent->pe.legs.yawing = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 484
ADDP4
CNSTI4 0
ASGNI4
line 2862
;2862:	cent->pe.legs.pitchAngle = 0;
ADDRFP4 0
INDIRP4
CNSTI4 488
ADDP4
CNSTF4 0
ASGNF4
line 2863
;2863:	cent->pe.legs.pitching = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 492
ADDP4
CNSTI4 0
ASGNI4
line 2865
;2864:
;2865:	memset( &cent->pe.torso, 0, sizeof( cent->pe.legs ) );
ADDRFP4 0
INDIRP4
CNSTI4 508
ADDP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 48
ARGI4
ADDRGP4 memset
CALLP4
pop
line 2866
;2866:	cent->pe.torso.yawAngle = cent->rawAngles[YAW];
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 528
ADDP4
ADDRLP4 28
INDIRP4
CNSTI4 696
ADDP4
INDIRF4
ASGNF4
line 2867
;2867:	cent->pe.torso.yawing = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 532
ADDP4
CNSTI4 0
ASGNI4
line 2868
;2868:	cent->pe.torso.pitchAngle = cent->rawAngles[PITCH];
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 536
ADDP4
ADDRLP4 32
INDIRP4
CNSTI4 692
ADDP4
INDIRF4
ASGNF4
line 2869
;2869:	cent->pe.torso.pitching = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 540
ADDP4
CNSTI4 0
ASGNI4
line 2871
;2870:
;2871:	cent->pe.noHead = qfalse; // Shafe - Trep - Part of the headshot code
ADDRFP4 0
INDIRP4
CNSTI4 644
ADDP4
CNSTI4 0
ASGNI4
line 2873
;2872:
;2873:	if ( cg_debugPosition.integer ) {
ADDRGP4 cg_debugPosition+12
INDIRI4
CNSTI4 0
EQI4 $1280
line 2874
;2874:		CG_Printf("%i ResetPlayerEntity yaw=%i\n", cent->currentState.number, cent->pe.torso.yawAngle );
ADDRGP4 $1283
ARGP4
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
INDIRI4
ARGI4
ADDRLP4 36
INDIRP4
CNSTI4 528
ADDP4
INDIRF4
ARGF4
ADDRGP4 CG_Printf
CALLV
pop
line 2875
;2875:	}
LABELV $1280
line 2876
;2876:}
LABELV $1275
endproc CG_ResetPlayerEntity 40 12
import CG_DrawScanner
import CG_ScannerOff_f
import CG_ScannerOn_f
import CG_NewParticleArea
import initparticles
import CG_ParticleExplosion
import CG_ParticleMisc
import CG_ParticleDust
import CG_ParticleSparks
import CG_ParticleBulletDebris
import CG_ParticleSnowFlurry
import CG_AddParticleShrapnel
import CG_ParticleSmoke
import CG_ParticleSnow
import CG_AddParticles
import CG_ClearParticles
import trap_GetEntityToken
import trap_getCameraInfo
import trap_startCamera
import trap_loadCamera
import trap_SnapVector
import trap_CIN_SetExtents
import trap_CIN_DrawCinematic
import trap_CIN_RunCinematic
import trap_CIN_StopCinematic
import trap_CIN_PlayCinematic
import trap_Key_GetKey
import trap_Key_SetCatcher
import trap_Key_GetCatcher
import trap_Key_IsDown
import trap_R_RegisterFont
import trap_MemoryRemaining
import testPrintFloat
import testPrintInt
import trap_SetUserCmdValue
import trap_GetUserCmd
import trap_GetCurrentCmdNumber
import trap_GetServerCommand
import trap_GetSnapshot
import trap_GetCurrentSnapshotNumber
import trap_GetGameState
import trap_GetGlconfig
import trap_R_RemapShader
import trap_R_LerpTag
import trap_R_ModelBounds
import trap_R_DrawStretchPic
import trap_R_SetColor
import trap_R_RenderScene
import trap_R_LightForPoint
import trap_R_AddLightToScene
import trap_R_AddPolysToScene
import trap_R_AddPolyToScene
import trap_R_AddRefEntityToScene
import trap_R_ClearScene
import trap_R_RegisterShaderNoMip
import trap_R_RegisterShader
import trap_R_RegisterSkin
import trap_R_RegisterModel
import trap_R_LoadWorldMap
import trap_S_StopBackgroundTrack
import trap_S_StartBackgroundTrack
import trap_S_RegisterSound
import trap_S_Respatialize
import trap_S_UpdateEntityPosition
import trap_S_AddRealLoopingSound
import trap_S_AddLoopingSound
import trap_S_ClearLoopingSounds
import trap_S_StartLocalSound
import trap_S_StopLoopingSound
import trap_S_StartSound
import trap_CM_MarkFragments
import trap_CM_TransformedBoxTrace
import trap_CM_BoxTrace
import trap_CM_TransformedPointContents
import trap_CM_PointContents
import trap_CM_TempBoxModel
import trap_CM_InlineModel
import trap_CM_NumInlineModels
import trap_CM_LoadMap
import trap_UpdateScreen
import trap_SendClientCommand
import trap_AddCommand
import trap_SendConsoleCommand
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_Cvar_VariableStringBuffer
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_Milliseconds
import trap_Error
import trap_Print
import CG_CheckChangedPredictableEvents
import CG_TransitionPlayerState
import CG_Respawn
import CG_PlayBufferedVoiceChats
import CG_VoiceChatLocal
import CG_ShaderStateChanged
import CG_LoadVoiceChats
import CG_SetConfigValues
import CG_ParseServerinfo
import CG_ExecuteNewServerCommands
import CG_InitConsoleCommands
import CG_ConsoleCommand
import CG_DrawOldTourneyScoreboard
import CG_DrawOldScoreboard
import CG_DrawInformation
import CG_LoadingClient
import CG_LoadingItem
import CG_LoadingString
import CG_TransitionEntity
import CG_ProcessSnapshots
import CG_MakeExplosion
import CG_Bleed
import CG_BigExplode
import CG_GibPlayerHeadshot
import CG_BreakGlass
import CG_GibPlayer
import CG_ScorePlum
import CG_SpawnEffect
import CG_ShotgunTrail
import CG_BubbleTrail
import CG_SmokePuff
import CG_AddLocalEntities
import CG_AllocLocalEntity
import CG_InitLocalEntities
import CG_ImpactMark
import CG_AddMarks
import CG_InitMarkPolys
import CG_OutOfAmmoChange
import CG_DrawWeaponSelect
import CG_AddPlayerWeapon
import CG_AddViewWeapon
import CG_GrappleTrail
import CG_RailTrail
import CG_Bullet
import CG_ShotgunFire
import CG_MissileHitPlayer
import CG_MissileHitWall
import CG_FireWeapon2
import CG_FireWeapon
import CG_RegisterItemVisuals
import CG_RegisterWeapon
import CG_Weapon_f
import CG_PrevWeapon_f
import CG_NextWeapon_f
import CG_PositionRotatedEntityOnTag
import CG_PositionEntityOnTag
import CG_AdjustPositionForMover
import CG_Beam
import CG_AddPacketEntities
import CG_SetEntitySoundPosition
import CG_PainEvent
import CG_EntityEvent
import CG_PlaceString
import CG_CheckEvents
import CG_PredictPlayerState
import CG_Trace
import CG_PointContents
import CG_BuildSolidList
import CG_StatusHandle
import CG_OtherTeamHasFlag
import CG_YourTeamHasFlag
import CG_GameTypeString
import CG_CheckOrderPending
import CG_Text_PaintChar
import CG_Draw3DModel
import CG_GetKillerText
import CG_GetGameStatusText
import CG_GetTeamColor
import CG_InitTeamChat
import CG_SetPrintString
import CG_ShowResponseHead
import CG_RunMenuScript
import CG_OwnerDrawVisible
import CG_GetValue
import CG_SelectNextPlayer
import CG_SelectPrevPlayer
import CG_Text_Height
import CG_Text_Width
import CG_Text_Paint
import CG_OwnerDraw
import CG_DrawTeamBackground
import CG_DrawFlagModel
import CG_DrawActive
import CG_DrawHead
import CG_CenterPrint
import CG_AddLagometerSnapshotInfo
import CG_AddLagometerFrameInfo
import teamChat2
import teamChat1
import systemChat
import drawTeamOverlayModificationCount
import numSortedTeamPlayers
import sortedTeamPlayers
import CG_DrawTopBottom
import CG_DrawSides
import CG_DrawRect
import UI_DrawProportionalString
import CG_GetColorForHealth
import CG_ColorForHealth
import CG_TileClear
import CG_TeamColor
import CG_FadeColor
import CG_DrawStrlen
import CG_DrawSmallStringColor
import CG_DrawSmallString
import CG_DrawBigStringColor
import CG_DrawBigString
import CG_DrawStringExt
import CG_DrawString
import CG_DrawPic
import CG_FillRect
import CG_AdjustFrom640
import CG_DrawActiveFrame
import CG_AddBufferedSound
import CG_ResetZoom
import CG_ZoomUp_f
import CG_ZoomDown_f
import CG_TestModelPrevSkin_f
import CG_TestModelNextSkin_f
import CG_TestModelPrevFrame_f
import CG_TestModelNextFrame_f
import CG_TestGun_f
import CG_TestModel_f
import CG_BuildSpectatorString
import CG_GetSelectedScore
import CG_SetScoreSelection
import CG_RankRunFrame
import CG_EventHandling
import CG_MouseEvent
import CG_KeyEvent
import CG_LoadMenus
import CG_LastAttacker
import CG_CrosshairPlayer
import CG_UpdateCvars
import CG_StartMusic
import CG_Error
import CG_Printf
import CG_Argv
import CG_ConfigString
import CG_Cvar_ClampInt
import CG_AddBoundingBox
import CG_PredictWeaponEffects
import cg_playerOrigins
import cg_RedMC
import cg_BlueMC
import cg_GameMode
import cg_plOut
import cg_latentCmds
import cg_latentSnaps
import cl_timeNudge
import cg_optimizePrediction
import cg_projectileNudge
import sv_fps
import cg_cmdTimeNudge
import cg_drawBBox
import cg_debugDelag
import cg_delag
import cg_trueLightning
import cg_oldPlasma
import cg_oldRocket
import cg_oldRail
import cg_noProjectileTrail
import cg_noTaunt
import cg_bigFont
import cg_smallFont
import cg_cameraMode
import cg_timescale
import cg_timescaleFadeSpeed
import cg_timescaleFadeEnd
import cg_cameraOrbitDelay
import cg_cameraOrbit
import pmove_msec
import pmove_fixed
import cg_scorePlum
import cg_noVoiceText
import cg_noVoiceChats
import cg_teamChatsOnly
import cg_drawFriend
import cg_deferPlayers
import cg_predictItems
import cg_blood
import cg_paused
import cg_buildScript
import cg_forceModel
import cg_stats
import cg_teamChatHeight
import cg_teamChatTime
import cg_synchronousClients
import cg_drawAttacker
import cg_lagometer
import cg_stereoSeparation
import cg_thirdPerson
import cg_thirdPersonAngle
import cg_thirdPersonRange
import cg_zoomFov
import cg_fov
import cg_simpleItems
import cg_ignore
import cg_autoswitch
import cg_tracerLength
import cg_tracerWidth
import cg_tracerChance
import cg_viewsize
import cg_drawGun
import cg_gun_z
import cg_gun_y
import cg_gun_x
import cg_gun_frame
import cg_brassTime
import cg_addMarks
import cg_footsteps
import cg_showmiss
import cg_noPlayerAnims
import cg_nopredict
import cg_errorDecay
import cg_railTrailTime
import cg_debugEvents
import cg_debugPosition
import cg_debugAnim
import cg_animSpeed
import cg_draw2D
import cg_drawStatus
import cg_crosshairHealth
import cg_crosshairSize
import cg_crosshairY
import cg_crosshairX
import cg_teamOverlayUserinfo
import cg_drawTeamOverlay
import cg_drawRewards
import cg_drawCrosshairNames
import cg_drawCrosshair
import cg_drawAmmoWarning
import cg_drawIcons
import cg_draw3dIcons
import cg_drawSnapshot
import cg_drawFPS
import cg_drawTimer
import cg_gibs
import cg_shadows
import cg_swingSpeed
import cg_bobroll
import cg_bobpitch
import cg_bobup
import cg_runroll
import cg_runpitch
import cg_centertime
import cg_markPolys
import cg_items
import cg_weapons
import cg_entities
import cg
import cgs
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import Max_Ammo
import BG_CanItemBeGrabbed
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import Com_Printf
import Com_Error
import Info_NextPair
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_RemoveKey_big
import Info_RemoveKey
import Info_ValueForKey
import va
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import irandom
import flrandom
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import SnapVectorTowards
import tonextint
import init_tonextint
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Com_Memcpy
import Com_Memset
import Hunk_Alloc
import FloatSwap
import LongSwap
import ShortSwap
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import sscanf
import vsprintf
import _atoi
import atoi
import _atof
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $1283
byte 1 37
byte 1 105
byte 1 32
byte 1 82
byte 1 101
byte 1 115
byte 1 101
byte 1 116
byte 1 80
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 69
byte 1 110
byte 1 116
byte 1 105
byte 1 116
byte 1 121
byte 1 32
byte 1 121
byte 1 97
byte 1 119
byte 1 61
byte 1 37
byte 1 105
byte 1 10
byte 1 0
align 1
LABELV $1272
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 104
byte 1 101
byte 1 97
byte 1 100
byte 1 0
align 1
LABELV $1261
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 116
byte 1 111
byte 1 114
byte 1 115
byte 1 111
byte 1 0
align 1
LABELV $1219
byte 1 66
byte 1 97
byte 1 100
byte 1 32
byte 1 99
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 78
byte 1 117
byte 1 109
byte 1 32
byte 1 111
byte 1 110
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 32
byte 1 101
byte 1 110
byte 1 116
byte 1 105
byte 1 116
byte 1 121
byte 1 0
align 1
LABELV $922
byte 1 94
byte 1 51
byte 1 89
byte 1 111
byte 1 117
byte 1 32
byte 1 104
byte 1 97
byte 1 118
byte 1 101
byte 1 32
byte 1 98
byte 1 101
byte 1 101
byte 1 110
byte 1 32
byte 1 105
byte 1 109
byte 1 109
byte 1 111
byte 1 98
byte 1 105
byte 1 108
byte 1 105
byte 1 122
byte 1 101
byte 1 100
byte 1 33
byte 1 0
align 1
LABELV $768
byte 1 66
byte 1 97
byte 1 100
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 32
byte 1 109
byte 1 111
byte 1 118
byte 1 101
byte 1 109
byte 1 101
byte 1 110
byte 1 116
byte 1 32
byte 1 97
byte 1 110
byte 1 103
byte 1 108
byte 1 101
byte 1 0
align 1
LABELV $697
byte 1 67
byte 1 108
byte 1 97
byte 1 109
byte 1 112
byte 1 32
byte 1 108
byte 1 102
byte 1 45
byte 1 62
byte 1 102
byte 1 114
byte 1 97
byte 1 109
byte 1 101
byte 1 84
byte 1 105
byte 1 109
byte 1 101
byte 1 10
byte 1 0
align 1
LABELV $663
byte 1 65
byte 1 110
byte 1 105
byte 1 109
byte 1 58
byte 1 32
byte 1 37
byte 1 105
byte 1 10
byte 1 0
align 1
LABELV $659
byte 1 66
byte 1 97
byte 1 100
byte 1 32
byte 1 97
byte 1 110
byte 1 105
byte 1 109
byte 1 97
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 32
byte 1 110
byte 1 117
byte 1 109
byte 1 98
byte 1 101
byte 1 114
byte 1 58
byte 1 32
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $642
byte 1 77
byte 1 101
byte 1 109
byte 1 111
byte 1 114
byte 1 121
byte 1 32
byte 1 105
byte 1 115
byte 1 32
byte 1 108
byte 1 111
byte 1 119
byte 1 46
byte 1 32
byte 1 32
byte 1 85
byte 1 115
byte 1 105
byte 1 110
byte 1 103
byte 1 32
byte 1 100
byte 1 101
byte 1 102
byte 1 101
byte 1 114
byte 1 114
byte 1 101
byte 1 100
byte 1 32
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 46
byte 1 10
byte 1 0
align 1
LABELV $606
byte 1 104
byte 1 101
byte 1 97
byte 1 100
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 0
align 1
LABELV $595
byte 1 104
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 0
align 1
LABELV $562
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 0
align 1
LABELV $560
byte 1 103
byte 1 95
byte 1 98
byte 1 108
byte 1 117
byte 1 101
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 0
align 1
LABELV $558
byte 1 103
byte 1 95
byte 1 114
byte 1 101
byte 1 100
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 0
align 1
LABELV $556
byte 1 116
byte 1 108
byte 1 0
align 1
LABELV $554
byte 1 116
byte 1 116
byte 1 0
align 1
LABELV $552
byte 1 116
byte 1 0
align 1
LABELV $550
byte 1 108
byte 1 0
align 1
LABELV $548
byte 1 119
byte 1 0
align 1
LABELV $546
byte 1 104
byte 1 99
byte 1 0
align 1
LABELV $544
byte 1 115
byte 1 107
byte 1 105
byte 1 108
byte 1 108
byte 1 0
align 1
LABELV $542
byte 1 99
byte 1 50
byte 1 0
align 1
LABELV $540
byte 1 99
byte 1 49
byte 1 0
align 1
LABELV $537
byte 1 110
byte 1 0
align 1
LABELV $532
byte 1 67
byte 1 71
byte 1 95
byte 1 83
byte 1 101
byte 1 116
byte 1 68
byte 1 101
byte 1 102
byte 1 101
byte 1 114
byte 1 114
byte 1 101
byte 1 100
byte 1 67
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 73
byte 1 110
byte 1 102
byte 1 111
byte 1 58
byte 1 32
byte 1 110
byte 1 111
byte 1 32
byte 1 118
byte 1 97
byte 1 108
byte 1 105
byte 1 100
byte 1 32
byte 1 99
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 115
byte 1 33
byte 1 10
byte 1 0
align 1
LABELV $467
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 118
byte 1 111
byte 1 105
byte 1 99
byte 1 101
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 109
byte 1 105
byte 1 115
byte 1 99
byte 1 47
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $466
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $453
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 0
align 1
LABELV $448
byte 1 68
byte 1 69
byte 1 70
byte 1 65
byte 1 85
byte 1 76
byte 1 84
byte 1 95
byte 1 77
byte 1 79
byte 1 68
byte 1 69
byte 1 76
byte 1 32
byte 1 40
byte 1 37
byte 1 115
byte 1 41
byte 1 32
byte 1 102
byte 1 97
byte 1 105
byte 1 108
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 114
byte 1 101
byte 1 103
byte 1 105
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $445
byte 1 68
byte 1 69
byte 1 70
byte 1 65
byte 1 85
byte 1 76
byte 1 84
byte 1 95
byte 1 84
byte 1 69
byte 1 65
byte 1 77
byte 1 95
byte 1 77
byte 1 79
byte 1 68
byte 1 69
byte 1 76
byte 1 32
byte 1 47
byte 1 32
byte 1 115
byte 1 107
byte 1 105
byte 1 110
byte 1 32
byte 1 40
byte 1 37
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 41
byte 1 32
byte 1 102
byte 1 97
byte 1 105
byte 1 108
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 114
byte 1 101
byte 1 103
byte 1 105
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $444
byte 1 115
byte 1 97
byte 1 114
byte 1 103
byte 1 101
byte 1 0
align 1
LABELV $436
byte 1 67
byte 1 71
byte 1 95
byte 1 82
byte 1 101
byte 1 103
byte 1 105
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 67
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 77
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 110
byte 1 97
byte 1 109
byte 1 101
byte 1 40
byte 1 32
byte 1 37
byte 1 115
byte 1 44
byte 1 32
byte 1 37
byte 1 115
byte 1 44
byte 1 32
byte 1 37
byte 1 115
byte 1 44
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 41
byte 1 32
byte 1 102
byte 1 97
byte 1 105
byte 1 108
byte 1 101
byte 1 100
byte 1 0
align 1
LABELV $419
byte 1 67
byte 1 71
byte 1 95
byte 1 82
byte 1 101
byte 1 103
byte 1 105
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 67
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 77
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 110
byte 1 97
byte 1 109
byte 1 101
byte 1 58
byte 1 32
byte 1 70
byte 1 97
byte 1 105
byte 1 108
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 73
byte 1 99
byte 1 111
byte 1 110
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $416
byte 1 116
byte 1 103
byte 1 97
byte 1 0
align 1
LABELV $413
byte 1 105
byte 1 99
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $410
byte 1 67
byte 1 71
byte 1 95
byte 1 82
byte 1 101
byte 1 103
byte 1 105
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 67
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 77
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 110
byte 1 97
byte 1 109
byte 1 101
byte 1 58
byte 1 32
byte 1 70
byte 1 97
byte 1 105
byte 1 108
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 32
byte 1 97
byte 1 110
byte 1 105
byte 1 109
byte 1 97
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 32
byte 1 102
byte 1 105
byte 1 108
byte 1 101
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $407
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 50
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 97
byte 1 110
byte 1 105
byte 1 109
byte 1 97
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 46
byte 1 99
byte 1 102
byte 1 103
byte 1 0
align 1
LABELV $404
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 99
byte 1 104
byte 1 97
byte 1 114
byte 1 97
byte 1 99
byte 1 116
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 97
byte 1 110
byte 1 105
byte 1 109
byte 1 97
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 46
byte 1 99
byte 1 102
byte 1 103
byte 1 0
align 1
LABELV $401
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 97
byte 1 110
byte 1 105
byte 1 109
byte 1 97
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 46
byte 1 99
byte 1 102
byte 1 103
byte 1 0
align 1
LABELV $400
byte 1 67
byte 1 71
byte 1 95
byte 1 82
byte 1 101
byte 1 103
byte 1 105
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 67
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 77
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 110
byte 1 97
byte 1 109
byte 1 101
byte 1 58
byte 1 32
byte 1 70
byte 1 97
byte 1 105
byte 1 108
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 32
byte 1 115
byte 1 107
byte 1 105
byte 1 110
byte 1 32
byte 1 102
byte 1 105
byte 1 108
byte 1 101
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 44
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $399
byte 1 67
byte 1 71
byte 1 95
byte 1 82
byte 1 101
byte 1 103
byte 1 105
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 67
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 77
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 110
byte 1 97
byte 1 109
byte 1 101
byte 1 58
byte 1 32
byte 1 70
byte 1 97
byte 1 105
byte 1 108
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 32
byte 1 115
byte 1 107
byte 1 105
byte 1 110
byte 1 32
byte 1 102
byte 1 105
byte 1 108
byte 1 101
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 44
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $396
byte 1 83
byte 1 116
byte 1 114
byte 1 111
byte 1 103
byte 1 103
byte 1 115
byte 1 0
align 1
LABELV $395
byte 1 80
byte 1 97
byte 1 103
byte 1 97
byte 1 110
byte 1 115
byte 1 0
align 1
LABELV $394
byte 1 37
byte 1 115
byte 1 47
byte 1 0
align 1
LABELV $391
byte 1 70
byte 1 97
byte 1 105
byte 1 108
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 32
byte 1 115
byte 1 107
byte 1 105
byte 1 110
byte 1 32
byte 1 102
byte 1 105
byte 1 108
byte 1 101
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 44
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $384
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 50
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 104
byte 1 101
byte 1 97
byte 1 100
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $379
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 104
byte 1 101
byte 1 97
byte 1 100
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $378
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 104
byte 1 101
byte 1 97
byte 1 100
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $373
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 50
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 117
byte 1 112
byte 1 112
byte 1 101
byte 1 114
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $370
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 50
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 117
byte 1 112
byte 1 112
byte 1 101
byte 1 114
byte 1 46
byte 1 109
byte 1 100
byte 1 114
byte 1 0
align 1
LABELV $367
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 99
byte 1 104
byte 1 97
byte 1 114
byte 1 97
byte 1 99
byte 1 116
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 117
byte 1 112
byte 1 112
byte 1 101
byte 1 114
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $364
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 117
byte 1 112
byte 1 112
byte 1 101
byte 1 114
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $363
byte 1 67
byte 1 71
byte 1 95
byte 1 82
byte 1 101
byte 1 103
byte 1 105
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 67
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 77
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 110
byte 1 97
byte 1 109
byte 1 101
byte 1 58
byte 1 32
byte 1 70
byte 1 97
byte 1 105
byte 1 108
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 32
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 32
byte 1 102
byte 1 105
byte 1 108
byte 1 101
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $360
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 50
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 108
byte 1 111
byte 1 119
byte 1 101
byte 1 114
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $357
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 50
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 108
byte 1 111
byte 1 119
byte 1 101
byte 1 114
byte 1 46
byte 1 109
byte 1 100
byte 1 114
byte 1 0
align 1
LABELV $354
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 99
byte 1 104
byte 1 97
byte 1 114
byte 1 97
byte 1 99
byte 1 116
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 108
byte 1 111
byte 1 119
byte 1 101
byte 1 114
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $351
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 108
byte 1 111
byte 1 119
byte 1 101
byte 1 114
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $343
byte 1 72
byte 1 101
byte 1 97
byte 1 100
byte 1 32
byte 1 115
byte 1 107
byte 1 105
byte 1 110
byte 1 32
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 32
byte 1 102
byte 1 97
byte 1 105
byte 1 108
byte 1 117
byte 1 114
byte 1 101
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $340
byte 1 104
byte 1 101
byte 1 97
byte 1 100
byte 1 0
align 1
LABELV $337
byte 1 84
byte 1 111
byte 1 114
byte 1 115
byte 1 111
byte 1 32
byte 1 115
byte 1 107
byte 1 105
byte 1 110
byte 1 32
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 32
byte 1 102
byte 1 97
byte 1 105
byte 1 108
byte 1 117
byte 1 114
byte 1 101
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $334
byte 1 117
byte 1 112
byte 1 112
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $331
byte 1 76
byte 1 101
byte 1 103
byte 1 32
byte 1 115
byte 1 107
byte 1 105
byte 1 110
byte 1 32
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 32
byte 1 102
byte 1 97
byte 1 105
byte 1 108
byte 1 117
byte 1 114
byte 1 101
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $328
byte 1 115
byte 1 107
byte 1 105
byte 1 110
byte 1 0
align 1
LABELV $327
byte 1 108
byte 1 111
byte 1 119
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $298
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 50
byte 1 47
byte 1 37
byte 1 115
byte 1 37
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 95
byte 1 37
byte 1 115
byte 1 46
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $297
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 50
byte 1 47
byte 1 37
byte 1 115
byte 1 37
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 37
byte 1 115
byte 1 95
byte 1 37
byte 1 115
byte 1 46
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $292
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 37
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 95
byte 1 37
byte 1 115
byte 1 46
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $291
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 37
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 37
byte 1 115
byte 1 95
byte 1 37
byte 1 115
byte 1 46
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $281
byte 1 104
byte 1 101
byte 1 97
byte 1 100
byte 1 115
byte 1 47
byte 1 0
align 1
LABELV $270
byte 1 99
byte 1 104
byte 1 97
byte 1 114
byte 1 97
byte 1 99
byte 1 116
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 0
align 1
LABELV $260
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 50
byte 1 47
byte 1 37
byte 1 115
byte 1 37
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 95
byte 1 37
byte 1 115
byte 1 46
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $259
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 50
byte 1 47
byte 1 37
byte 1 115
byte 1 37
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 37
byte 1 115
byte 1 95
byte 1 37
byte 1 115
byte 1 46
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $249
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 37
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 95
byte 1 37
byte 1 115
byte 1 46
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $248
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 37
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 37
byte 1 115
byte 1 95
byte 1 37
byte 1 115
byte 1 46
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $240
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 50
byte 1 47
byte 1 37
byte 1 115
byte 1 37
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 95
byte 1 37
byte 1 115
byte 1 95
byte 1 37
byte 1 115
byte 1 46
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $239
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 50
byte 1 47
byte 1 37
byte 1 115
byte 1 37
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 37
byte 1 115
byte 1 95
byte 1 37
byte 1 115
byte 1 95
byte 1 37
byte 1 115
byte 1 46
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $234
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 37
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 95
byte 1 37
byte 1 115
byte 1 95
byte 1 37
byte 1 115
byte 1 46
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $233
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 37
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 37
byte 1 115
byte 1 95
byte 1 37
byte 1 115
byte 1 95
byte 1 37
byte 1 115
byte 1 46
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $223
byte 1 0
align 1
LABELV $222
byte 1 114
byte 1 101
byte 1 100
byte 1 0
align 1
LABELV $221
byte 1 98
byte 1 108
byte 1 117
byte 1 101
byte 1 0
align 1
LABELV $209
byte 1 69
byte 1 114
byte 1 114
byte 1 111
byte 1 114
byte 1 32
byte 1 112
byte 1 97
byte 1 114
byte 1 115
byte 1 105
byte 1 110
byte 1 103
byte 1 32
byte 1 97
byte 1 110
byte 1 105
byte 1 109
byte 1 97
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 32
byte 1 102
byte 1 105
byte 1 108
byte 1 101
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $184
byte 1 117
byte 1 110
byte 1 107
byte 1 110
byte 1 111
byte 1 119
byte 1 110
byte 1 32
byte 1 116
byte 1 111
byte 1 107
byte 1 101
byte 1 110
byte 1 32
byte 1 39
byte 1 37
byte 1 115
byte 1 39
byte 1 32
byte 1 105
byte 1 115
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $181
byte 1 102
byte 1 105
byte 1 120
byte 1 101
byte 1 100
byte 1 116
byte 1 111
byte 1 114
byte 1 115
byte 1 111
byte 1 0
align 1
LABELV $178
byte 1 102
byte 1 105
byte 1 120
byte 1 101
byte 1 100
byte 1 108
byte 1 101
byte 1 103
byte 1 115
byte 1 0
align 1
LABELV $167
byte 1 115
byte 1 101
byte 1 120
byte 1 0
align 1
LABELV $158
byte 1 104
byte 1 101
byte 1 97
byte 1 100
byte 1 111
byte 1 102
byte 1 102
byte 1 115
byte 1 101
byte 1 116
byte 1 0
align 1
LABELV $155
byte 1 66
byte 1 97
byte 1 100
byte 1 32
byte 1 102
byte 1 111
byte 1 111
byte 1 116
byte 1 115
byte 1 116
byte 1 101
byte 1 112
byte 1 115
byte 1 32
byte 1 112
byte 1 97
byte 1 114
byte 1 109
byte 1 32
byte 1 105
byte 1 110
byte 1 32
byte 1 37
byte 1 115
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 82
byte 1 101
byte 1 118
byte 1 101
byte 1 114
byte 1 116
byte 1 105
byte 1 110
byte 1 103
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 70
byte 1 97
byte 1 108
byte 1 108
byte 1 98
byte 1 97
byte 1 99
byte 1 107
byte 1 10
byte 1 0
align 1
LABELV $154
byte 1 101
byte 1 110
byte 1 101
byte 1 114
byte 1 103
byte 1 121
byte 1 0
align 1
LABELV $151
byte 1 109
byte 1 101
byte 1 99
byte 1 104
byte 1 0
align 1
LABELV $148
byte 1 102
byte 1 108
byte 1 101
byte 1 115
byte 1 104
byte 1 0
align 1
LABELV $145
byte 1 98
byte 1 111
byte 1 111
byte 1 116
byte 1 0
align 1
LABELV $141
byte 1 110
byte 1 111
byte 1 114
byte 1 109
byte 1 97
byte 1 108
byte 1 0
align 1
LABELV $140
byte 1 100
byte 1 101
byte 1 102
byte 1 97
byte 1 117
byte 1 108
byte 1 116
byte 1 0
align 1
LABELV $135
byte 1 102
byte 1 111
byte 1 111
byte 1 116
byte 1 115
byte 1 116
byte 1 101
byte 1 112
byte 1 115
byte 1 0
align 1
LABELV $127
byte 1 70
byte 1 105
byte 1 108
byte 1 101
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 116
byte 1 111
byte 1 111
byte 1 32
byte 1 108
byte 1 111
byte 1 110
byte 1 103
byte 1 10
byte 1 0
align 1
LABELV $121
byte 1 85
byte 1 110
byte 1 107
byte 1 110
byte 1 111
byte 1 119
byte 1 110
byte 1 32
byte 1 99
byte 1 117
byte 1 115
byte 1 116
byte 1 111
byte 1 109
byte 1 32
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $106
byte 1 42
byte 1 116
byte 1 97
byte 1 117
byte 1 110
byte 1 116
byte 1 53
byte 1 46
byte 1 109
byte 1 112
byte 1 51
byte 1 0
align 1
LABELV $105
byte 1 42
byte 1 116
byte 1 97
byte 1 117
byte 1 110
byte 1 116
byte 1 52
byte 1 46
byte 1 109
byte 1 112
byte 1 51
byte 1 0
align 1
LABELV $104
byte 1 42
byte 1 116
byte 1 97
byte 1 117
byte 1 110
byte 1 116
byte 1 51
byte 1 46
byte 1 109
byte 1 112
byte 1 51
byte 1 0
align 1
LABELV $103
byte 1 42
byte 1 116
byte 1 97
byte 1 117
byte 1 110
byte 1 116
byte 1 50
byte 1 46
byte 1 109
byte 1 112
byte 1 51
byte 1 0
align 1
LABELV $102
byte 1 42
byte 1 116
byte 1 97
byte 1 117
byte 1 110
byte 1 116
byte 1 49
byte 1 46
byte 1 109
byte 1 112
byte 1 51
byte 1 0
align 1
LABELV $101
byte 1 42
byte 1 116
byte 1 97
byte 1 117
byte 1 110
byte 1 116
byte 1 46
byte 1 109
byte 1 112
byte 1 51
byte 1 0
align 1
LABELV $100
byte 1 42
byte 1 102
byte 1 97
byte 1 108
byte 1 108
byte 1 49
byte 1 46
byte 1 109
byte 1 112
byte 1 51
byte 1 0
align 1
LABELV $99
byte 1 42
byte 1 100
byte 1 114
byte 1 111
byte 1 119
byte 1 110
byte 1 46
byte 1 109
byte 1 112
byte 1 51
byte 1 0
align 1
LABELV $98
byte 1 42
byte 1 103
byte 1 97
byte 1 115
byte 1 112
byte 1 46
byte 1 109
byte 1 112
byte 1 51
byte 1 0
align 1
LABELV $97
byte 1 42
byte 1 102
byte 1 97
byte 1 108
byte 1 108
byte 1 105
byte 1 110
byte 1 103
byte 1 49
byte 1 46
byte 1 109
byte 1 112
byte 1 51
byte 1 0
align 1
LABELV $96
byte 1 42
byte 1 112
byte 1 97
byte 1 105
byte 1 110
byte 1 49
byte 1 48
byte 1 48
byte 1 95
byte 1 49
byte 1 46
byte 1 109
byte 1 112
byte 1 51
byte 1 0
align 1
LABELV $95
byte 1 42
byte 1 112
byte 1 97
byte 1 105
byte 1 110
byte 1 55
byte 1 53
byte 1 95
byte 1 49
byte 1 46
byte 1 109
byte 1 112
byte 1 51
byte 1 0
align 1
LABELV $94
byte 1 42
byte 1 112
byte 1 97
byte 1 105
byte 1 110
byte 1 53
byte 1 48
byte 1 95
byte 1 49
byte 1 46
byte 1 109
byte 1 112
byte 1 51
byte 1 0
align 1
LABELV $93
byte 1 42
byte 1 112
byte 1 97
byte 1 105
byte 1 110
byte 1 50
byte 1 53
byte 1 95
byte 1 49
byte 1 46
byte 1 109
byte 1 112
byte 1 51
byte 1 0
align 1
LABELV $92
byte 1 42
byte 1 106
byte 1 117
byte 1 109
byte 1 112
byte 1 49
byte 1 46
byte 1 109
byte 1 112
byte 1 51
byte 1 0
align 1
LABELV $91
byte 1 42
byte 1 100
byte 1 101
byte 1 97
byte 1 116
byte 1 104
byte 1 51
byte 1 46
byte 1 109
byte 1 112
byte 1 51
byte 1 0
align 1
LABELV $90
byte 1 42
byte 1 100
byte 1 101
byte 1 97
byte 1 116
byte 1 104
byte 1 50
byte 1 46
byte 1 109
byte 1 112
byte 1 51
byte 1 0
align 1
LABELV $89
byte 1 42
byte 1 116
byte 1 97
byte 1 117
byte 1 110
byte 1 116
byte 1 53
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 42
byte 1 100
byte 1 101
byte 1 97
byte 1 116
byte 1 104
byte 1 49
byte 1 46
byte 1 109
byte 1 112
byte 1 51
byte 1 0
align 1
LABELV $88
byte 1 42
byte 1 116
byte 1 97
byte 1 117
byte 1 110
byte 1 116
byte 1 52
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $87
byte 1 42
byte 1 116
byte 1 97
byte 1 117
byte 1 110
byte 1 116
byte 1 51
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $86
byte 1 42
byte 1 116
byte 1 97
byte 1 117
byte 1 110
byte 1 116
byte 1 50
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $85
byte 1 42
byte 1 116
byte 1 97
byte 1 117
byte 1 110
byte 1 116
byte 1 49
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $84
byte 1 42
byte 1 116
byte 1 97
byte 1 117
byte 1 110
byte 1 116
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $83
byte 1 42
byte 1 102
byte 1 97
byte 1 108
byte 1 108
byte 1 49
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $82
byte 1 42
byte 1 100
byte 1 114
byte 1 111
byte 1 119
byte 1 110
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $81
byte 1 42
byte 1 103
byte 1 97
byte 1 115
byte 1 112
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $80
byte 1 42
byte 1 102
byte 1 97
byte 1 108
byte 1 108
byte 1 105
byte 1 110
byte 1 103
byte 1 49
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $79
byte 1 42
byte 1 112
byte 1 97
byte 1 105
byte 1 110
byte 1 49
byte 1 48
byte 1 48
byte 1 95
byte 1 49
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $78
byte 1 42
byte 1 112
byte 1 97
byte 1 105
byte 1 110
byte 1 55
byte 1 53
byte 1 95
byte 1 49
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $77
byte 1 42
byte 1 112
byte 1 97
byte 1 105
byte 1 110
byte 1 53
byte 1 48
byte 1 95
byte 1 49
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $76
byte 1 42
byte 1 112
byte 1 97
byte 1 105
byte 1 110
byte 1 50
byte 1 53
byte 1 95
byte 1 49
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $75
byte 1 42
byte 1 106
byte 1 117
byte 1 109
byte 1 112
byte 1 49
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $74
byte 1 42
byte 1 100
byte 1 101
byte 1 97
byte 1 116
byte 1 104
byte 1 51
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $73
byte 1 42
byte 1 100
byte 1 101
byte 1 97
byte 1 116
byte 1 104
byte 1 50
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $72
byte 1 42
byte 1 100
byte 1 101
byte 1 97
byte 1 116
byte 1 104
byte 1 49
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
