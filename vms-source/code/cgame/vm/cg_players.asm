data
export cg_customSoundNames
align 4
LABELV cg_customSoundNames
address $72
address $73
address $74
address $75
address $76
address $77
address $78
address $79
address $80
address $81
address $82
address $83
address $84
address $85
address $86
address $87
address $88
address $89
skip 56
export CG_CustomSound
code
proc CG_CustomSound 16 8
file "../cg_players.c"
line 34
;1:// Copyright (C) 1999-2000 Id Software, Inc.
;2://
;3:// cg_players.c -- handle the media and animation for player entities
;4:#include "cg_local.h"
;5:
;6:char	*cg_customSoundNames[MAX_CUSTOM_SOUNDS] = {
;7:	"*death1.wav",
;8:	"*death2.wav",
;9:	"*death3.wav",
;10:	"*jump1.wav",
;11:	"*pain25_1.wav",
;12:	"*pain50_1.wav",
;13:	"*pain75_1.wav",
;14:	"*pain100_1.wav",
;15:	"*falling1.wav",
;16:	"*gasp.wav",
;17:	"*drown.wav",
;18:	"*fall1.wav",
;19:	"*taunt.wav",
;20:	"*taunt1.wav",
;21:	"*taunt2.wav",
;22:	"*taunt3.wav",
;23:	"*taunt4.wav",
;24:	"*taunt5.wav"
;25:};
;26:
;27:
;28:/*
;29:================
;30:CG_CustomSound
;31:
;32:================
;33:*/
;34:sfxHandle_t	CG_CustomSound( int clientNum, const char *soundName ) {
line 38
;35:	clientInfo_t *ci;
;36:	int			i;
;37:
;38:	if ( soundName[0] != '*' ) {
ADDRFP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 42
EQI4 $91
line 39
;39:		return trap_S_RegisterSound( soundName, qfalse );
ADDRFP4 4
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 8
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
RETI4
ADDRGP4 $90
JUMPV
LABELV $91
line 42
;40:	}
;41:
;42:	if ( clientNum < 0 || clientNum >= MAX_CLIENTS ) {
ADDRLP4 8
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
LTI4 $95
ADDRLP4 8
INDIRI4
CNSTI4 64
LTI4 $93
LABELV $95
line 43
;43:		clientNum = 0;
ADDRFP4 0
CNSTI4 0
ASGNI4
line 44
;44:	}
LABELV $93
line 45
;45:	ci = &cgs.clientinfo[ clientNum ];
ADDRLP4 4
CNSTI4 1716
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 cgs+40972
ADDP4
ASGNP4
line 47
;46:
;47:	for ( i = 0 ; i < MAX_CUSTOM_SOUNDS && cg_customSoundNames[i] ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $100
JUMPV
LABELV $97
line 48
;48:		if ( !strcmp( soundName, cg_customSoundNames[i] ) ) {
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg_customSoundNames
ADDP4
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
NEI4 $101
line 49
;49:			return ci->sounds[i];
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 1584
ADDP4
ADDP4
INDIRI4
RETI4
ADDRGP4 $90
JUMPV
LABELV $101
line 51
;50:		}
;51:	}
LABELV $98
line 47
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $100
ADDRLP4 0
INDIRI4
CNSTI4 32
GEI4 $103
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg_customSoundNames
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $97
LABELV $103
line 53
;52:
;53:	CG_Error( "Unknown custom sound: %s", soundName );
ADDRGP4 $104
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 54
;54:	return 0;
CNSTI4 0
RETI4
LABELV $90
endproc CG_CustomSound 16 8
proc CG_ParseAnimationFile 20084 12
line 75
;55:}
;56:
;57:
;58:
;59:/*
;60:=============================================================================
;61:
;62:CLIENT INFO
;63:
;64:=============================================================================
;65:*/
;66:
;67:/*
;68:======================
;69:CG_ParseAnimationFile
;70:
;71:Read a configuration file containing animation coutns and rates
;72:models/players/visor/animation.cfg, etc
;73:======================
;74:*/
;75:static qboolean	CG_ParseAnimationFile( const char *filename, clientInfo_t *ci ) {
line 86
;76:	char		*text_p, *prev;
;77:	int			len;
;78:	int			i;
;79:	char		*token;
;80:	float		fps;
;81:	int			skip;
;82:	char		text[20000];
;83:	fileHandle_t	f;
;84:	animation_t *animations;
;85:
;86:	animations = ci->animations;
ADDRLP4 8
ADDRFP4 4
INDIRP4
CNSTI4 548
ADDP4
ASGNP4
line 89
;87:
;88:	// load the file
;89:	len = trap_FS_FOpenFile( filename, &f, FS_READ );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 20032
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 20036
ADDRGP4 trap_FS_FOpenFile
CALLI4
ASGNI4
ADDRLP4 28
ADDRLP4 20036
INDIRI4
ASGNI4
line 90
;90:	if ( len <= 0 ) {
ADDRLP4 28
INDIRI4
CNSTI4 0
GTI4 $106
line 91
;91:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $105
JUMPV
LABELV $106
line 93
;92:	}
;93:	if ( len >= sizeof( text ) - 1 ) {
ADDRLP4 28
INDIRI4
CVIU4 4
CNSTU4 19999
LTU4 $108
line 94
;94:		CG_Printf( "File %s too long\n", filename );
ADDRGP4 $110
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 95
;95:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $105
JUMPV
LABELV $108
line 97
;96:	}
;97:	trap_FS_Read( text, len, f );
ADDRLP4 32
ARGP4
ADDRLP4 28
INDIRI4
ARGI4
ADDRLP4 20032
INDIRI4
ARGI4
ADDRGP4 trap_FS_Read
CALLV
pop
line 98
;98:	text[len] = 0;
ADDRLP4 28
INDIRI4
ADDRLP4 32
ADDP4
CNSTI1 0
ASGNI1
line 99
;99:	trap_FS_FCloseFile( f );
ADDRLP4 20032
INDIRI4
ARGI4
ADDRGP4 trap_FS_FCloseFile
CALLV
pop
line 102
;100:
;101:	// parse the text
;102:	text_p = text;
ADDRLP4 12
ADDRLP4 32
ASGNP4
line 103
;103:	skip = 0;	// quite the compiler warning
ADDRLP4 24
CNSTI4 0
ASGNI4
line 105
;104:
;105:	ci->footsteps = FOOTSTEP_NORMAL;
ADDRFP4 4
INDIRP4
CNSTI4 508
ADDP4
CNSTI4 0
ASGNI4
line 106
;106:	VectorClear( ci->headOffset );
ADDRLP4 20040
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 20044
CNSTF4 0
ASGNF4
ADDRLP4 20040
INDIRP4
CNSTI4 504
ADDP4
ADDRLP4 20044
INDIRF4
ASGNF4
ADDRLP4 20040
INDIRP4
CNSTI4 500
ADDP4
ADDRLP4 20044
INDIRF4
ASGNF4
ADDRLP4 20040
INDIRP4
CNSTI4 496
ADDP4
ADDRLP4 20044
INDIRF4
ASGNF4
line 107
;107:	ci->gender = GENDER_MALE;
ADDRFP4 4
INDIRP4
CNSTI4 512
ADDP4
CNSTI4 0
ASGNI4
line 108
;108:	ci->fixedlegs = qfalse;
ADDRFP4 4
INDIRP4
CNSTI4 488
ADDP4
CNSTI4 0
ASGNI4
line 109
;109:	ci->fixedtorso = qfalse;
ADDRFP4 4
INDIRP4
CNSTI4 492
ADDP4
CNSTI4 0
ASGNI4
ADDRGP4 $112
JUMPV
LABELV $111
line 112
;110:
;111:	// read optional parameters
;112:	while ( 1 ) {
line 113
;113:		prev = text_p;	// so we can unget
ADDRLP4 20
ADDRLP4 12
INDIRP4
ASGNP4
line 114
;114:		token = COM_Parse( &text_p );
ADDRLP4 12
ARGP4
ADDRLP4 20048
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20048
INDIRP4
ASGNP4
line 115
;115:		if ( !token ) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $114
line 116
;116:			break;
ADDRGP4 $113
JUMPV
LABELV $114
line 118
;117:		}
;118:		if ( !Q_stricmp( token, "footsteps" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $118
ARGP4
ADDRLP4 20052
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20052
INDIRI4
CNSTI4 0
NEI4 $116
line 119
;119:			token = COM_Parse( &text_p );
ADDRLP4 12
ARGP4
ADDRLP4 20056
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20056
INDIRP4
ASGNP4
line 120
;120:			if ( !token ) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $119
line 121
;121:				break;
ADDRGP4 $113
JUMPV
LABELV $119
line 123
;122:			}
;123:			if ( !Q_stricmp( token, "default" ) || !Q_stricmp( token, "normal" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $123
ARGP4
ADDRLP4 20060
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20060
INDIRI4
CNSTI4 0
EQI4 $125
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $124
ARGP4
ADDRLP4 20064
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20064
INDIRI4
CNSTI4 0
NEI4 $121
LABELV $125
line 124
;124:				ci->footsteps = FOOTSTEP_NORMAL;
ADDRFP4 4
INDIRP4
CNSTI4 508
ADDP4
CNSTI4 0
ASGNI4
line 125
;125:			} else if ( !Q_stricmp( token, "boot" ) ) {
ADDRGP4 $112
JUMPV
LABELV $121
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $128
ARGP4
ADDRLP4 20068
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20068
INDIRI4
CNSTI4 0
NEI4 $126
line 126
;126:				ci->footsteps = FOOTSTEP_BOOT;
ADDRFP4 4
INDIRP4
CNSTI4 508
ADDP4
CNSTI4 1
ASGNI4
line 127
;127:			} else if ( !Q_stricmp( token, "flesh" ) ) {
ADDRGP4 $112
JUMPV
LABELV $126
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $131
ARGP4
ADDRLP4 20072
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20072
INDIRI4
CNSTI4 0
NEI4 $129
line 128
;128:				ci->footsteps = FOOTSTEP_FLESH;
ADDRFP4 4
INDIRP4
CNSTI4 508
ADDP4
CNSTI4 2
ASGNI4
line 129
;129:			} else if ( !Q_stricmp( token, "mech" ) ) {
ADDRGP4 $112
JUMPV
LABELV $129
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $134
ARGP4
ADDRLP4 20076
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20076
INDIRI4
CNSTI4 0
NEI4 $132
line 130
;130:				ci->footsteps = FOOTSTEP_MECH;
ADDRFP4 4
INDIRP4
CNSTI4 508
ADDP4
CNSTI4 3
ASGNI4
line 131
;131:			} else if ( !Q_stricmp( token, "energy" ) ) {
ADDRGP4 $112
JUMPV
LABELV $132
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $137
ARGP4
ADDRLP4 20080
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20080
INDIRI4
CNSTI4 0
NEI4 $135
line 132
;132:				ci->footsteps = FOOTSTEP_ENERGY;
ADDRFP4 4
INDIRP4
CNSTI4 508
ADDP4
CNSTI4 4
ASGNI4
line 133
;133:			} else {
ADDRGP4 $112
JUMPV
LABELV $135
line 134
;134:				CG_Printf( "Bad footsteps parm in %s: %s\n", filename, token );
ADDRGP4 $138
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 135
;135:			}
line 136
;136:			continue;
ADDRGP4 $112
JUMPV
LABELV $116
line 137
;137:		} else if ( !Q_stricmp( token, "headoffset" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $141
ARGP4
ADDRLP4 20056
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20056
INDIRI4
CNSTI4 0
NEI4 $139
line 138
;138:			for ( i = 0 ; i < 3 ; i++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $142
line 139
;139:				token = COM_Parse( &text_p );
ADDRLP4 12
ARGP4
ADDRLP4 20060
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20060
INDIRP4
ASGNP4
line 140
;140:				if ( !token ) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $146
line 141
;141:					break;
ADDRGP4 $112
JUMPV
LABELV $146
line 143
;142:				}
;143:				ci->headOffset[i] = atof( token );
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 20064
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
CNSTI4 496
ADDP4
ADDP4
ADDRLP4 20064
INDIRF4
ASGNF4
line 144
;144:			}
LABELV $143
line 138
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 3
LTI4 $142
line 145
;145:			continue;
ADDRGP4 $112
JUMPV
LABELV $139
line 146
;146:		} else if ( !Q_stricmp( token, "sex" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $150
ARGP4
ADDRLP4 20060
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20060
INDIRI4
CNSTI4 0
NEI4 $148
line 147
;147:			token = COM_Parse( &text_p );
ADDRLP4 12
ARGP4
ADDRLP4 20064
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20064
INDIRP4
ASGNP4
line 148
;148:			if ( !token ) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $151
line 149
;149:				break;
ADDRGP4 $113
JUMPV
LABELV $151
line 151
;150:			}
;151:			if ( token[0] == 'f' || token[0] == 'F' ) {
ADDRLP4 20068
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 20068
INDIRI4
CNSTI4 102
EQI4 $155
ADDRLP4 20068
INDIRI4
CNSTI4 70
NEI4 $153
LABELV $155
line 152
;152:				ci->gender = GENDER_FEMALE;
ADDRFP4 4
INDIRP4
CNSTI4 512
ADDP4
CNSTI4 1
ASGNI4
line 153
;153:			} else if ( token[0] == 'n' || token[0] == 'N' ) {
ADDRGP4 $112
JUMPV
LABELV $153
ADDRLP4 20072
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 20072
INDIRI4
CNSTI4 110
EQI4 $158
ADDRLP4 20072
INDIRI4
CNSTI4 78
NEI4 $156
LABELV $158
line 154
;154:				ci->gender = GENDER_NEUTER;
ADDRFP4 4
INDIRP4
CNSTI4 512
ADDP4
CNSTI4 2
ASGNI4
line 155
;155:			} else {
ADDRGP4 $112
JUMPV
LABELV $156
line 156
;156:				ci->gender = GENDER_MALE;
ADDRFP4 4
INDIRP4
CNSTI4 512
ADDP4
CNSTI4 0
ASGNI4
line 157
;157:			}
line 158
;158:			continue;
ADDRGP4 $112
JUMPV
LABELV $148
line 159
;159:		} else if ( !Q_stricmp( token, "fixedlegs" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $161
ARGP4
ADDRLP4 20064
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20064
INDIRI4
CNSTI4 0
NEI4 $159
line 160
;160:			ci->fixedlegs = qtrue;
ADDRFP4 4
INDIRP4
CNSTI4 488
ADDP4
CNSTI4 1
ASGNI4
line 161
;161:			continue;
ADDRGP4 $112
JUMPV
LABELV $159
line 162
;162:		} else if ( !Q_stricmp( token, "fixedtorso" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $164
ARGP4
ADDRLP4 20068
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20068
INDIRI4
CNSTI4 0
NEI4 $162
line 163
;163:			ci->fixedtorso = qtrue;
ADDRFP4 4
INDIRP4
CNSTI4 492
ADDP4
CNSTI4 1
ASGNI4
line 164
;164:			continue;
ADDRGP4 $112
JUMPV
LABELV $162
line 168
;165:		}
;166:
;167:		// if it is a number, start parsing animations
;168:		if ( token[0] >= '0' && token[0] <= '9' ) {
ADDRLP4 20072
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 20072
INDIRI4
CNSTI4 48
LTI4 $165
ADDRLP4 20072
INDIRI4
CNSTI4 57
GTI4 $165
line 169
;169:			text_p = prev;	// unget the token
ADDRLP4 12
ADDRLP4 20
INDIRP4
ASGNP4
line 170
;170:			break;
ADDRGP4 $113
JUMPV
LABELV $165
line 172
;171:		}
;172:		Com_Printf( "unknown token '%s' is %s\n", token, filename );
ADDRGP4 $167
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 Com_Printf
CALLV
pop
line 173
;173:	}
LABELV $112
line 112
ADDRGP4 $111
JUMPV
LABELV $113
line 176
;174:
;175:	// read information for each frame
;176:	for ( i = 0 ; i < MAX_ANIMATIONS ; i++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $168
line 178
;177:
;178:		token = COM_Parse( &text_p );
ADDRLP4 12
ARGP4
ADDRLP4 20048
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20048
INDIRP4
ASGNP4
line 179
;179:		if ( !*token ) {
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $172
line 180
;180:			if( i >= TORSO_GETFLAG && i <= TORSO_NEGATIVE ) {
ADDRLP4 4
INDIRI4
CNSTI4 25
LTI4 $170
ADDRLP4 4
INDIRI4
CNSTI4 30
GTI4 $170
line 181
;181:				animations[i].firstFrame = animations[TORSO_GESTURE].firstFrame;
CNSTI4 28
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8
INDIRP4
ADDP4
ADDRLP4 8
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
ASGNI4
line 182
;182:				animations[i].frameLerp = animations[TORSO_GESTURE].frameLerp;
CNSTI4 28
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8
INDIRP4
ADDP4
CNSTI4 12
ADDP4
ADDRLP4 8
INDIRP4
CNSTI4 180
ADDP4
INDIRI4
ASGNI4
line 183
;183:				animations[i].initialLerp = animations[TORSO_GESTURE].initialLerp;
CNSTI4 28
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8
INDIRP4
ADDP4
CNSTI4 16
ADDP4
ADDRLP4 8
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ASGNI4
line 184
;184:				animations[i].loopFrames = animations[TORSO_GESTURE].loopFrames;
CNSTI4 28
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8
INDIRP4
ADDP4
CNSTI4 8
ADDP4
ADDRLP4 8
INDIRP4
CNSTI4 176
ADDP4
INDIRI4
ASGNI4
line 185
;185:				animations[i].numFrames = animations[TORSO_GESTURE].numFrames;
CNSTI4 28
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8
INDIRP4
ADDP4
CNSTI4 4
ADDP4
ADDRLP4 8
INDIRP4
CNSTI4 172
ADDP4
INDIRI4
ASGNI4
line 186
;186:				animations[i].reversed = qfalse;
CNSTI4 28
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8
INDIRP4
ADDP4
CNSTI4 20
ADDP4
CNSTI4 0
ASGNI4
line 187
;187:				animations[i].flipflop = qfalse;
CNSTI4 28
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8
INDIRP4
ADDP4
CNSTI4 24
ADDP4
CNSTI4 0
ASGNI4
line 188
;188:				continue;
ADDRGP4 $169
JUMPV
line 190
;189:			}
;190:			break;
LABELV $172
line 192
;191:		}
;192:		animations[i].firstFrame = atoi( token );
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 20052
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 28
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8
INDIRP4
ADDP4
ADDRLP4 20052
INDIRI4
ASGNI4
line 194
;193:		// leg only frames are adjusted to not count the upper body only frames
;194:		if ( i == LEGS_WALKCR ) {
ADDRLP4 4
INDIRI4
CNSTI4 13
NEI4 $176
line 195
;195:			skip = animations[LEGS_WALKCR].firstFrame - animations[TORSO_GESTURE].firstFrame;
ADDRLP4 24
ADDRLP4 8
INDIRP4
CNSTI4 364
ADDP4
INDIRI4
ADDRLP4 8
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
SUBI4
ASGNI4
line 196
;196:		}
LABELV $176
line 197
;197:		if ( i >= LEGS_WALKCR && i<TORSO_GETFLAG) {
ADDRLP4 4
INDIRI4
CNSTI4 13
LTI4 $178
ADDRLP4 4
INDIRI4
CNSTI4 25
GEI4 $178
line 198
;198:			animations[i].firstFrame -= skip;
ADDRLP4 20060
CNSTI4 28
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8
INDIRP4
ADDP4
ASGNP4
ADDRLP4 20060
INDIRP4
ADDRLP4 20060
INDIRP4
INDIRI4
ADDRLP4 24
INDIRI4
SUBI4
ASGNI4
line 199
;199:		}
LABELV $178
line 201
;200:
;201:		token = COM_Parse( &text_p );
ADDRLP4 12
ARGP4
ADDRLP4 20060
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20060
INDIRP4
ASGNP4
line 202
;202:		if ( !*token ) {
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $180
line 203
;203:			break;
ADDRGP4 $170
JUMPV
LABELV $180
line 205
;204:		}
;205:		animations[i].numFrames = atoi( token );
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 20064
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 28
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8
INDIRP4
ADDP4
CNSTI4 4
ADDP4
ADDRLP4 20064
INDIRI4
ASGNI4
line 207
;206:
;207:		animations[i].reversed = qfalse;
CNSTI4 28
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8
INDIRP4
ADDP4
CNSTI4 20
ADDP4
CNSTI4 0
ASGNI4
line 208
;208:		animations[i].flipflop = qfalse;
CNSTI4 28
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8
INDIRP4
ADDP4
CNSTI4 24
ADDP4
CNSTI4 0
ASGNI4
line 210
;209:		// if numFrames is negative the animation is reversed
;210:		if (animations[i].numFrames < 0) {
CNSTI4 28
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8
INDIRP4
ADDP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 0
GEI4 $182
line 211
;211:			animations[i].numFrames = -animations[i].numFrames;
ADDRLP4 20068
CNSTI4 28
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8
INDIRP4
ADDP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 20068
INDIRP4
ADDRLP4 20068
INDIRP4
INDIRI4
NEGI4
ASGNI4
line 212
;212:			animations[i].reversed = qtrue;
CNSTI4 28
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8
INDIRP4
ADDP4
CNSTI4 20
ADDP4
CNSTI4 1
ASGNI4
line 213
;213:		}
LABELV $182
line 215
;214:
;215:		token = COM_Parse( &text_p );
ADDRLP4 12
ARGP4
ADDRLP4 20068
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20068
INDIRP4
ASGNP4
line 216
;216:		if ( !*token ) {
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $184
line 217
;217:			break;
ADDRGP4 $170
JUMPV
LABELV $184
line 219
;218:		}
;219:		animations[i].loopFrames = atoi( token );
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 20072
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 28
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8
INDIRP4
ADDP4
CNSTI4 8
ADDP4
ADDRLP4 20072
INDIRI4
ASGNI4
line 221
;220:
;221:		token = COM_Parse( &text_p );
ADDRLP4 12
ARGP4
ADDRLP4 20076
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20076
INDIRP4
ASGNP4
line 222
;222:		if ( !*token ) {
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $186
line 223
;223:			break;
ADDRGP4 $170
JUMPV
LABELV $186
line 225
;224:		}
;225:		fps = atof( token );
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 20080
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 16
ADDRLP4 20080
INDIRF4
ASGNF4
line 226
;226:		if ( fps == 0 ) {
ADDRLP4 16
INDIRF4
CNSTF4 0
NEF4 $188
line 227
;227:			fps = 1;
ADDRLP4 16
CNSTF4 1065353216
ASGNF4
line 228
;228:		}
LABELV $188
line 229
;229:		animations[i].frameLerp = 1000 / fps;
CNSTI4 28
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8
INDIRP4
ADDP4
CNSTI4 12
ADDP4
CNSTF4 1148846080
ADDRLP4 16
INDIRF4
DIVF4
CVFI4 4
ASGNI4
line 230
;230:		animations[i].initialLerp = 1000 / fps;
CNSTI4 28
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8
INDIRP4
ADDP4
CNSTI4 16
ADDP4
CNSTF4 1148846080
ADDRLP4 16
INDIRF4
DIVF4
CVFI4 4
ASGNI4
line 231
;231:	}
LABELV $169
line 176
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 31
LTI4 $168
LABELV $170
line 233
;232:
;233:	if ( i != MAX_ANIMATIONS ) {
ADDRLP4 4
INDIRI4
CNSTI4 31
EQI4 $190
line 234
;234:		CG_Printf( "Error parsing animation file: %s", filename );
ADDRGP4 $192
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 235
;235:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $105
JUMPV
LABELV $190
line 239
;236:	}
;237:
;238:	// crouch backward animation
;239:	memcpy(&animations[LEGS_BACKCR], &animations[LEGS_WALKCR], sizeof(animation_t));
ADDRLP4 8
INDIRP4
CNSTI4 896
ADDP4
ARGP4
ADDRLP4 8
INDIRP4
CNSTI4 364
ADDP4
ARGP4
CNSTI4 28
ARGI4
ADDRGP4 memcpy
CALLP4
pop
line 240
;240:	animations[LEGS_BACKCR].reversed = qtrue;
ADDRLP4 8
INDIRP4
CNSTI4 916
ADDP4
CNSTI4 1
ASGNI4
line 242
;241:	// walk backward animation
;242:	memcpy(&animations[LEGS_BACKWALK], &animations[LEGS_WALK], sizeof(animation_t));
ADDRLP4 8
INDIRP4
CNSTI4 924
ADDP4
ARGP4
ADDRLP4 8
INDIRP4
CNSTI4 392
ADDP4
ARGP4
CNSTI4 28
ARGI4
ADDRGP4 memcpy
CALLP4
pop
line 243
;243:	animations[LEGS_BACKWALK].reversed = qtrue;
ADDRLP4 8
INDIRP4
CNSTI4 944
ADDP4
CNSTI4 1
ASGNI4
line 245
;244:	// flag moving fast
;245:	animations[FLAG_RUN].firstFrame = 0;
ADDRLP4 8
INDIRP4
CNSTI4 952
ADDP4
CNSTI4 0
ASGNI4
line 246
;246:	animations[FLAG_RUN].numFrames = 16;
ADDRLP4 8
INDIRP4
CNSTI4 956
ADDP4
CNSTI4 16
ASGNI4
line 247
;247:	animations[FLAG_RUN].loopFrames = 16;
ADDRLP4 8
INDIRP4
CNSTI4 960
ADDP4
CNSTI4 16
ASGNI4
line 248
;248:	animations[FLAG_RUN].frameLerp = 1000 / 15;
ADDRLP4 8
INDIRP4
CNSTI4 964
ADDP4
CNSTI4 66
ASGNI4
line 249
;249:	animations[FLAG_RUN].initialLerp = 1000 / 15;
ADDRLP4 8
INDIRP4
CNSTI4 968
ADDP4
CNSTI4 66
ASGNI4
line 250
;250:	animations[FLAG_RUN].reversed = qfalse;
ADDRLP4 8
INDIRP4
CNSTI4 972
ADDP4
CNSTI4 0
ASGNI4
line 252
;251:	// flag not moving or moving slowly
;252:	animations[FLAG_STAND].firstFrame = 16;
ADDRLP4 8
INDIRP4
CNSTI4 980
ADDP4
CNSTI4 16
ASGNI4
line 253
;253:	animations[FLAG_STAND].numFrames = 5;
ADDRLP4 8
INDIRP4
CNSTI4 984
ADDP4
CNSTI4 5
ASGNI4
line 254
;254:	animations[FLAG_STAND].loopFrames = 0;
ADDRLP4 8
INDIRP4
CNSTI4 988
ADDP4
CNSTI4 0
ASGNI4
line 255
;255:	animations[FLAG_STAND].frameLerp = 1000 / 20;
ADDRLP4 8
INDIRP4
CNSTI4 992
ADDP4
CNSTI4 50
ASGNI4
line 256
;256:	animations[FLAG_STAND].initialLerp = 1000 / 20;
ADDRLP4 8
INDIRP4
CNSTI4 996
ADDP4
CNSTI4 50
ASGNI4
line 257
;257:	animations[FLAG_STAND].reversed = qfalse;
ADDRLP4 8
INDIRP4
CNSTI4 1000
ADDP4
CNSTI4 0
ASGNI4
line 259
;258:	// flag speeding up
;259:	animations[FLAG_STAND2RUN].firstFrame = 16;
ADDRLP4 8
INDIRP4
CNSTI4 1008
ADDP4
CNSTI4 16
ASGNI4
line 260
;260:	animations[FLAG_STAND2RUN].numFrames = 5;
ADDRLP4 8
INDIRP4
CNSTI4 1012
ADDP4
CNSTI4 5
ASGNI4
line 261
;261:	animations[FLAG_STAND2RUN].loopFrames = 1;
ADDRLP4 8
INDIRP4
CNSTI4 1016
ADDP4
CNSTI4 1
ASGNI4
line 262
;262:	animations[FLAG_STAND2RUN].frameLerp = 1000 / 15;
ADDRLP4 8
INDIRP4
CNSTI4 1020
ADDP4
CNSTI4 66
ASGNI4
line 263
;263:	animations[FLAG_STAND2RUN].initialLerp = 1000 / 15;
ADDRLP4 8
INDIRP4
CNSTI4 1024
ADDP4
CNSTI4 66
ASGNI4
line 264
;264:	animations[FLAG_STAND2RUN].reversed = qtrue;
ADDRLP4 8
INDIRP4
CNSTI4 1028
ADDP4
CNSTI4 1
ASGNI4
line 274
;265:	//
;266:	// new anims changes
;267:	//
;268://	animations[TORSO_GETFLAG].flipflop = qtrue;
;269://	animations[TORSO_GUARDBASE].flipflop = qtrue;
;270://	animations[TORSO_PATROL].flipflop = qtrue;
;271://	animations[TORSO_AFFIRMATIVE].flipflop = qtrue;
;272://	animations[TORSO_NEGATIVE].flipflop = qtrue;
;273:	//
;274:	return qtrue;
CNSTI4 1
RETI4
LABELV $105
endproc CG_ParseAnimationFile 20084 12
proc CG_FileExists 8 12
line 282
;275:}
;276:
;277:/*
;278:==========================
;279:CG_FileExists
;280:==========================
;281:*/
;282:static qboolean	CG_FileExists(const char *filename) {
line 285
;283:	int len;
;284:
;285:	len = trap_FS_FOpenFile( filename, 0, FS_READ );
ADDRFP4 0
INDIRP4
ARGP4
CNSTP4 0
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 4
ADDRGP4 trap_FS_FOpenFile
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 4
INDIRI4
ASGNI4
line 286
;286:	if (len>0) {
ADDRLP4 0
INDIRI4
CNSTI4 0
LEI4 $194
line 287
;287:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $193
JUMPV
LABELV $194
line 289
;288:	}
;289:	return qfalse;
CNSTI4 0
RETI4
LABELV $193
endproc CG_FileExists 8 12
proc CG_FindClientModelFile 48 40
line 297
;290:}
;291:
;292:/*
;293:==========================
;294:CG_FindClientModelFile
;295:==========================
;296:*/
;297:static qboolean	CG_FindClientModelFile( char *filename, int length, clientInfo_t *ci, const char *teamName, const char *modelName, const char *skinName, const char *base, const char *ext ) {
line 301
;298:	char *team, *charactersFolder;
;299:	int i;
;300:
;301:	ci->efmodel = qfalse;
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
CNSTI4 0
ASGNI4
line 302
;302:	if ( cgs.gametype >= GT_TEAM ) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
LTI4 $197
line 303
;303:		switch ( ci->team ) {
ADDRLP4 12
ADDRFP4 8
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 2
EQI4 $203
ADDRGP4 $200
JUMPV
LABELV $203
line 304
;304:			case TEAM_BLUE: {
line 305
;305:				team = "blue";
ADDRLP4 8
ADDRGP4 $204
ASGNP4
line 306
;306:				break;
ADDRGP4 $198
JUMPV
LABELV $200
line 308
;307:			}
;308:			default: {
line 309
;309:				team = "red";
ADDRLP4 8
ADDRGP4 $205
ASGNP4
line 310
;310:				break;
line 313
;311:			}
;312:		}
;313:	}
ADDRGP4 $198
JUMPV
LABELV $197
line 314
;314:	else {
line 315
;315:		team = "default";
ADDRLP4 8
ADDRGP4 $123
ASGNP4
line 316
;316:	}
LABELV $198
line 317
;317:	charactersFolder = "";
ADDRLP4 4
ADDRGP4 $206
ASGNP4
ADDRGP4 $208
JUMPV
LABELV $207
line 318
;318:	while(1) {
line 319
;319:		for ( i = 0; i < 2; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $210
line 320
;320:			if ( i == 0 && teamName && *teamName ) {
ADDRLP4 12
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 12
INDIRI4
NEI4 $214
ADDRLP4 16
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $214
ADDRLP4 16
INDIRP4
INDIRI1
CVII4 1
ADDRLP4 12
INDIRI4
EQI4 $214
line 322
;321:				//								"models/players/characters/james/stroggs/lower_lily_red.skin"
;322:				Com_sprintf( filename, length, "models/players/%s%s/%s%s_%s_%s.%s", charactersFolder, modelName, teamName, base, skinName, team, ext );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $216
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRFP4 24
INDIRP4
ARGP4
ADDRFP4 20
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRFP4 28
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 325
;323:				
;324:				
;325:			}
ADDRGP4 $215
JUMPV
LABELV $214
line 326
;326:			else {
line 328
;327:				//								"models/players/characters/james/lower_lily_red.skin"
;328:				Com_sprintf( filename, length, "models/players/%s%s/%s_%s_%s.%s", charactersFolder, modelName, base, skinName, team, ext );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $217
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 24
INDIRP4
ARGP4
ADDRFP4 20
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRFP4 28
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 329
;329:			}
LABELV $215
line 330
;330:			if ( CG_FileExists( filename ) ) {
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 CG_FileExists
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
EQI4 $218
line 331
;331:				ci->efmodel = qfalse;
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
CNSTI4 0
ASGNI4
line 332
;332:				return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $196
JUMPV
LABELV $218
line 335
;333:			}
;334:			// MDR Format
;335:			if ( i == 0 && teamName && *teamName ) {
ADDRLP4 24
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 24
INDIRI4
NEI4 $220
ADDRLP4 28
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $220
ADDRLP4 28
INDIRP4
INDIRI1
CVII4 1
ADDRLP4 24
INDIRI4
EQI4 $220
line 337
;336:				//								"models/players/characters/james/stroggs/lower_lily_red.skin"
;337:				Com_sprintf( filename, length, "models/players2/%s%s/%s%s_%s_%s.%s", charactersFolder, modelName, teamName, base, skinName, team, ext );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $222
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRFP4 24
INDIRP4
ARGP4
ADDRFP4 20
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRFP4 28
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 338
;338:			}
ADDRGP4 $221
JUMPV
LABELV $220
line 339
;339:			else {
line 341
;340:				//								"models/players/characters/james/lower_lily_red.skin"
;341:				Com_sprintf( filename, length, "models/players2/%s%s/%s_%s_%s.%s", charactersFolder, modelName, base, skinName, team, ext );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $223
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 24
INDIRP4
ARGP4
ADDRFP4 20
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRFP4 28
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 342
;342:			}
LABELV $221
line 343
;343:			if ( CG_FileExists( filename ) ) {
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 32
ADDRGP4 CG_FileExists
CALLI4
ASGNI4
ADDRLP4 32
INDIRI4
CNSTI4 0
EQI4 $224
line 344
;344:				ci->efmodel = qtrue;
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
CNSTI4 1
ASGNI4
line 345
;345:				return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $196
JUMPV
LABELV $224
line 350
;346:			}
;347:
;348:
;349:
;350:			if ( cgs.gametype >= GT_TEAM ) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
LTI4 $226
line 351
;351:				if ( i == 0 && teamName && *teamName ) {
ADDRLP4 36
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 36
INDIRI4
NEI4 $229
ADDRLP4 40
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $229
ADDRLP4 40
INDIRP4
INDIRI1
CVII4 1
ADDRLP4 36
INDIRI4
EQI4 $229
line 353
;352:					//								"models/players/characters/james/stroggs/lower_red.skin"
;353:					Com_sprintf( filename, length, "models/players/%s%s/%s%s_%s.%s", charactersFolder, modelName, teamName, base, team, ext );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $231
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRFP4 24
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRFP4 28
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 354
;354:				}
ADDRGP4 $227
JUMPV
LABELV $229
line 355
;355:				else {
line 357
;356:					//								"models/players/characters/james/lower_red.skin"
;357:					Com_sprintf( filename, length, "models/players/%s%s/%s_%s.%s", charactersFolder, modelName, base, team, ext );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $232
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 24
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRFP4 28
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 358
;358:				}
line 359
;359:			}
ADDRGP4 $227
JUMPV
LABELV $226
line 360
;360:			else {
line 361
;361:				if ( i == 0 && teamName && *teamName ) {
ADDRLP4 36
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 36
INDIRI4
NEI4 $233
ADDRLP4 40
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $233
ADDRLP4 40
INDIRP4
INDIRI1
CVII4 1
ADDRLP4 36
INDIRI4
EQI4 $233
line 363
;362:					//								"models/players/characters/james/stroggs/lower_lily.skin"
;363:					Com_sprintf( filename, length, "models/players/%s%s/%s%s_%s.%s", charactersFolder, modelName, teamName, base, skinName, ext );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $231
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRFP4 24
INDIRP4
ARGP4
ADDRFP4 20
INDIRP4
ARGP4
ADDRFP4 28
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 364
;364:				}
ADDRGP4 $234
JUMPV
LABELV $233
line 365
;365:				else {
line 367
;366:					//								"models/players/characters/james/lower_lily.skin"
;367:					Com_sprintf( filename, length, "models/players/%s%s/%s_%s.%s", charactersFolder, modelName, base, skinName, ext );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $232
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 24
INDIRP4
ARGP4
ADDRFP4 20
INDIRP4
ARGP4
ADDRFP4 28
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 368
;368:				}
LABELV $234
line 369
;369:			}
LABELV $227
line 370
;370:			if ( CG_FileExists( filename ) ) {
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 36
ADDRGP4 CG_FileExists
CALLI4
ASGNI4
ADDRLP4 36
INDIRI4
CNSTI4 0
EQI4 $235
line 371
;371:				ci->efmodel = qfalse;
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
CNSTI4 0
ASGNI4
line 372
;372:				return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $196
JUMPV
LABELV $235
line 378
;373:
;374:			}
;375:
;376:
;377:			// Same thing MDR format thoguh
;378:			if ( cgs.gametype >= GT_TEAM ) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
LTI4 $237
line 379
;379:				if ( i == 0 && teamName && *teamName ) {
ADDRLP4 40
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 40
INDIRI4
NEI4 $240
ADDRLP4 44
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $240
ADDRLP4 44
INDIRP4
INDIRI1
CVII4 1
ADDRLP4 40
INDIRI4
EQI4 $240
line 381
;380:					//								"models/players/characters/james/stroggs/lower_red.skin"
;381:					Com_sprintf( filename, length, "models/players2/%s%s/%s%s_%s.%s", charactersFolder, modelName, teamName, base, team, ext );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $242
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRFP4 24
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRFP4 28
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 382
;382:				}
ADDRGP4 $238
JUMPV
LABELV $240
line 383
;383:				else {
line 385
;384:					//								"models/players/characters/james/lower_red.skin"
;385:					Com_sprintf( filename, length, "models/players2/%s%s/%s_%s.%s", charactersFolder, modelName, base, team, ext );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $243
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 24
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRFP4 28
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 386
;386:				}
line 387
;387:			}
ADDRGP4 $238
JUMPV
LABELV $237
line 388
;388:			else {
line 389
;389:				if ( i == 0 && teamName && *teamName ) {
ADDRLP4 40
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 40
INDIRI4
NEI4 $244
ADDRLP4 44
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $244
ADDRLP4 44
INDIRP4
INDIRI1
CVII4 1
ADDRLP4 40
INDIRI4
EQI4 $244
line 391
;390:					//								"models/players/characters/james/stroggs/lower_lily.skin"
;391:					Com_sprintf( filename, length, "models/players2/%s%s/%s%s_%s.%s", charactersFolder, modelName, teamName, base, skinName, ext );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $242
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRFP4 24
INDIRP4
ARGP4
ADDRFP4 20
INDIRP4
ARGP4
ADDRFP4 28
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 392
;392:				}
ADDRGP4 $245
JUMPV
LABELV $244
line 393
;393:				else {
line 395
;394:					//								"models/players/characters/james/lower_lily.skin"
;395:					Com_sprintf( filename, length, "models/players2/%s%s/%s_%s.%s", charactersFolder, modelName, base, skinName, ext );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $243
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 24
INDIRP4
ARGP4
ADDRFP4 20
INDIRP4
ARGP4
ADDRFP4 28
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 396
;396:				}
LABELV $245
line 397
;397:			}
LABELV $238
line 398
;398:			if ( CG_FileExists( filename ) ) {
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 40
ADDRGP4 CG_FileExists
CALLI4
ASGNI4
ADDRLP4 40
INDIRI4
CNSTI4 0
EQI4 $246
line 399
;399:				ci->efmodel = qtrue;
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
CNSTI4 1
ASGNI4
line 400
;400:				return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $196
JUMPV
LABELV $246
line 406
;401:			}
;402:
;403:
;404:
;405:
;406:			if ( !teamName || !*teamName ) {
ADDRLP4 44
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $250
ADDRLP4 44
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $248
LABELV $250
line 407
;407:				break;
ADDRGP4 $212
JUMPV
LABELV $248
line 409
;408:			}
;409:		}
LABELV $211
line 319
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LTI4 $210
LABELV $212
line 411
;410:		// if tried the heads folder first
;411:		if ( charactersFolder[0] ) {
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $251
line 412
;412:			break;
ADDRGP4 $209
JUMPV
LABELV $251
line 414
;413:		}
;414:		charactersFolder = "characters/";
ADDRLP4 4
ADDRGP4 $253
ASGNP4
line 415
;415:	}
LABELV $208
line 318
ADDRGP4 $207
JUMPV
LABELV $209
line 417
;416:
;417:	return qfalse;
CNSTI4 0
RETI4
LABELV $196
endproc CG_FindClientModelFile 48 40
proc CG_FindClientHeadFile 48 40
line 425
;418:}
;419:
;420:/*
;421:==========================
;422:CG_FindClientHeadFile
;423:==========================
;424:*/
;425:static qboolean	CG_FindClientHeadFile( char *filename, int length, clientInfo_t *ci, const char *teamName, const char *headModelName, const char *headSkinName, const char *base, const char *ext ) {
line 429
;426:	char *team, *headsFolder;
;427:	int i;
;428:
;429:	if ( cgs.gametype >= GT_TEAM ) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
LTI4 $255
line 430
;430:		switch ( ci->team ) {
ADDRLP4 12
ADDRFP4 8
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 2
EQI4 $261
ADDRGP4 $258
JUMPV
LABELV $261
line 431
;431:			case TEAM_BLUE: {
line 432
;432:				team = "blue";
ADDRLP4 8
ADDRGP4 $204
ASGNP4
line 433
;433:				break;
ADDRGP4 $256
JUMPV
LABELV $258
line 435
;434:			}
;435:			default: {
line 436
;436:				team = "red";
ADDRLP4 8
ADDRGP4 $205
ASGNP4
line 437
;437:				break;
line 440
;438:			}
;439:		}
;440:	}
ADDRGP4 $256
JUMPV
LABELV $255
line 441
;441:	else {
line 442
;442:		team = "default";
ADDRLP4 8
ADDRGP4 $123
ASGNP4
line 443
;443:	}
LABELV $256
line 445
;444:
;445:	if ( headModelName[0] == '*' ) {
ADDRFP4 16
INDIRP4
INDIRI1
CVII4 1
CNSTI4 42
NEI4 $262
line 446
;446:		headsFolder = "heads/";
ADDRLP4 4
ADDRGP4 $264
ASGNP4
line 447
;447:		headModelName++;
ADDRFP4 16
ADDRFP4 16
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 448
;448:	}
ADDRGP4 $266
JUMPV
LABELV $262
line 449
;449:	else {
line 450
;450:		headsFolder = "";
ADDRLP4 4
ADDRGP4 $206
ASGNP4
line 451
;451:	}
ADDRGP4 $266
JUMPV
LABELV $265
line 452
;452:	while(1) {
line 453
;453:		for ( i = 0; i < 2; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $268
line 454
;454:			if ( i == 0 && teamName && *teamName ) {
ADDRLP4 12
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 12
INDIRI4
NEI4 $272
ADDRLP4 16
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $272
ADDRLP4 16
INDIRP4
INDIRI1
CVII4 1
ADDRLP4 12
INDIRI4
EQI4 $272
line 455
;455:				Com_sprintf( filename, length, "models/players/%s%s/%s/%s%s_%s.%s", headsFolder, headModelName, headSkinName, teamName, base, team, ext );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $274
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 20
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRFP4 24
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRFP4 28
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 456
;456:			}
ADDRGP4 $273
JUMPV
LABELV $272
line 457
;457:			else {
line 458
;458:				Com_sprintf( filename, length, "models/players/%s%s/%s/%s_%s.%s", headsFolder, headModelName, headSkinName, base, team, ext );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $275
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 20
INDIRP4
ARGP4
ADDRFP4 24
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRFP4 28
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 459
;459:			}
LABELV $273
line 460
;460:			if ( CG_FileExists( filename ) ) {
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 CG_FileExists
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
EQI4 $276
line 461
;461:				return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $254
JUMPV
LABELV $276
line 465
;462:			}
;463:			
;464:			// Try EF Format
;465:			if ( i == 0 && teamName && *teamName ) {
ADDRLP4 24
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 24
INDIRI4
NEI4 $278
ADDRLP4 28
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $278
ADDRLP4 28
INDIRP4
INDIRI1
CVII4 1
ADDRLP4 24
INDIRI4
EQI4 $278
line 466
;466:				Com_sprintf( filename, length, "models/players2/%s%s/%s/%s%s_%s.%s", headsFolder, headModelName, headSkinName, teamName, base, team, ext );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $280
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 20
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRFP4 24
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRFP4 28
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 467
;467:			}
ADDRGP4 $279
JUMPV
LABELV $278
line 468
;468:			else {
line 469
;469:				Com_sprintf( filename, length, "models/players2/%s%s/%s/%s_%s.%s", headsFolder, headModelName, headSkinName, base, team, ext );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $281
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 20
INDIRP4
ARGP4
ADDRFP4 24
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRFP4 28
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 470
;470:			}
LABELV $279
line 471
;471:			if ( CG_FileExists( filename ) ) {
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 32
ADDRGP4 CG_FileExists
CALLI4
ASGNI4
ADDRLP4 32
INDIRI4
CNSTI4 0
EQI4 $282
line 472
;472:				return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $254
JUMPV
LABELV $282
line 476
;473:			}
;474:
;475:			// q3 format
;476:			if ( cgs.gametype >= GT_TEAM ) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
LTI4 $284
line 477
;477:				if ( i == 0 &&  teamName && *teamName ) {
ADDRLP4 36
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 36
INDIRI4
NEI4 $287
ADDRLP4 40
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $287
ADDRLP4 40
INDIRP4
INDIRI1
CVII4 1
ADDRLP4 36
INDIRI4
EQI4 $287
line 478
;478:					Com_sprintf( filename, length, "models/players/%s%s/%s%s_%s.%s", headsFolder, headModelName, teamName, base, team, ext );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $231
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRFP4 24
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRFP4 28
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 479
;479:				}
ADDRGP4 $285
JUMPV
LABELV $287
line 480
;480:				else {
line 481
;481:					Com_sprintf( filename, length, "models/players/%s%s/%s_%s.%s", headsFolder, headModelName, base, team, ext );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $232
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 24
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRFP4 28
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 482
;482:				}
line 483
;483:			}
ADDRGP4 $285
JUMPV
LABELV $284
line 484
;484:			else {
line 485
;485:				if ( i == 0 && teamName && *teamName ) {
ADDRLP4 36
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 36
INDIRI4
NEI4 $289
ADDRLP4 40
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $289
ADDRLP4 40
INDIRP4
INDIRI1
CVII4 1
ADDRLP4 36
INDIRI4
EQI4 $289
line 486
;486:					Com_sprintf( filename, length, "models/players/%s%s/%s%s_%s.%s", headsFolder, headModelName, teamName, base, headSkinName, ext );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $231
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRFP4 24
INDIRP4
ARGP4
ADDRFP4 20
INDIRP4
ARGP4
ADDRFP4 28
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 487
;487:				}
ADDRGP4 $290
JUMPV
LABELV $289
line 488
;488:				else {
line 489
;489:					Com_sprintf( filename, length, "models/players/%s%s/%s_%s.%s", headsFolder, headModelName, base, headSkinName, ext );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $232
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 24
INDIRP4
ARGP4
ADDRFP4 20
INDIRP4
ARGP4
ADDRFP4 28
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 490
;490:				}
LABELV $290
line 491
;491:			}
LABELV $285
line 493
;492:
;493:			if ( CG_FileExists( filename ) ) {
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 36
ADDRGP4 CG_FileExists
CALLI4
ASGNI4
ADDRLP4 36
INDIRI4
CNSTI4 0
EQI4 $291
line 494
;494:				return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $254
JUMPV
LABELV $291
line 498
;495:			} 
;496:
;497:			// EF Format
;498:			if ( cgs.gametype >= GT_TEAM ) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
LTI4 $293
line 499
;499:				if ( i == 0 &&  teamName && *teamName ) {
ADDRLP4 40
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 40
INDIRI4
NEI4 $296
ADDRLP4 44
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $296
ADDRLP4 44
INDIRP4
INDIRI1
CVII4 1
ADDRLP4 40
INDIRI4
EQI4 $296
line 500
;500:					Com_sprintf( filename, length, "models/players2/%s%s/%s%s_%s.%s", headsFolder, headModelName, teamName, base, team, ext );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $242
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRFP4 24
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRFP4 28
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 501
;501:				}
ADDRGP4 $294
JUMPV
LABELV $296
line 502
;502:				else {
line 503
;503:					Com_sprintf( filename, length, "models/players2/%s%s/%s_%s.%s", headsFolder, headModelName, base, team, ext );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $243
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 24
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRFP4 28
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 504
;504:				}
line 505
;505:			}
ADDRGP4 $294
JUMPV
LABELV $293
line 506
;506:			else {
line 507
;507:				if ( i == 0 && teamName && *teamName ) {
ADDRLP4 40
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 40
INDIRI4
NEI4 $298
ADDRLP4 44
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $298
ADDRLP4 44
INDIRP4
INDIRI1
CVII4 1
ADDRLP4 40
INDIRI4
EQI4 $298
line 508
;508:					Com_sprintf( filename, length, "models/players2/%s%s/%s%s_%s.%s", headsFolder, headModelName, teamName, base, headSkinName, ext );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $242
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRFP4 24
INDIRP4
ARGP4
ADDRFP4 20
INDIRP4
ARGP4
ADDRFP4 28
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 509
;509:				}
ADDRGP4 $299
JUMPV
LABELV $298
line 510
;510:				else {
line 511
;511:					Com_sprintf( filename, length, "models/players2/%s%s/%s_%s.%s", headsFolder, headModelName, base, headSkinName, ext );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $243
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 24
INDIRP4
ARGP4
ADDRFP4 20
INDIRP4
ARGP4
ADDRFP4 28
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 512
;512:				}
LABELV $299
line 513
;513:			}
LABELV $294
line 515
;514:
;515:			if ( CG_FileExists( filename ) ) {
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 40
ADDRGP4 CG_FileExists
CALLI4
ASGNI4
ADDRLP4 40
INDIRI4
CNSTI4 0
EQI4 $300
line 516
;516:				return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $254
JUMPV
LABELV $300
line 521
;517:			} 
;518:
;519:
;520:
;521:			if ( !teamName || !*teamName ) {
ADDRLP4 44
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $304
ADDRLP4 44
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $302
LABELV $304
line 522
;522:				break;
ADDRGP4 $270
JUMPV
LABELV $302
line 524
;523:			}
;524:		}
LABELV $269
line 453
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LTI4 $268
LABELV $270
line 526
;525:		// if tried the heads folder first
;526:		if ( headsFolder[0] ) {
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $305
line 527
;527:			break;
ADDRGP4 $267
JUMPV
LABELV $305
line 529
;528:		}
;529:		headsFolder = "heads/";
ADDRLP4 4
ADDRGP4 $264
ASGNP4
line 530
;530:	}
LABELV $266
line 452
ADDRGP4 $265
JUMPV
LABELV $267
line 532
;531:
;532:	return qfalse;
CNSTI4 0
RETI4
LABELV $254
endproc CG_FindClientHeadFile 48 40
proc CG_RegisterClientSkin 84 32
line 540
;533:}
;534:
;535:/*
;536:==========================
;537:CG_RegisterClientSkin
;538:==========================
;539:*/
;540:static qboolean	CG_RegisterClientSkin( clientInfo_t *ci, const char *teamName, const char *modelName, const char *skinName, const char *headModelName, const char *headSkinName ) {
line 565
;541:	char filename[MAX_QPATH];
;542:
;543:	/*
;544:	Com_sprintf( filename, sizeof( filename ), "models/players/%s/%slower_%s.skin", modelName, teamName, skinName );
;545:	ci->legsSkin = trap_R_RegisterSkin( filename );
;546:	if (!ci->legsSkin) {
;547:		Com_sprintf( filename, sizeof( filename ), "models/players/characters/%s/%slower_%s.skin", modelName, teamName, skinName );
;548:		ci->legsSkin = trap_R_RegisterSkin( filename );
;549:		if (!ci->legsSkin) {
;550:			Com_Printf( "Leg skin load failure: %s\n", filename );
;551:		}
;552:	}
;553:
;554:
;555:	Com_sprintf( filename, sizeof( filename ), "models/players/%s/%supper_%s.skin", modelName, teamName, skinName );
;556:	ci->torsoSkin = trap_R_RegisterSkin( filename );
;557:	if (!ci->torsoSkin) {
;558:		Com_sprintf( filename, sizeof( filename ), "models/players/characters/%s/%supper_%s.skin", modelName, teamName, skinName );
;559:		ci->torsoSkin = trap_R_RegisterSkin( filename );
;560:		if (!ci->torsoSkin) {
;561:			Com_Printf( "Torso skin load failure: %s\n", filename );
;562:		}
;563:	}
;564:	*/
;565:	if ( CG_FindClientModelFile( filename, sizeof(filename), ci, teamName, modelName, skinName, "lower", "skin" ) ) {
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRGP4 $310
ARGP4
ADDRGP4 $311
ARGP4
ADDRLP4 64
ADDRGP4 CG_FindClientModelFile
CALLI4
ASGNI4
ADDRLP4 64
INDIRI4
CNSTI4 0
EQI4 $308
line 566
;566:		ci->legsSkin = trap_R_RegisterSkin( filename );
ADDRLP4 0
ARGP4
ADDRLP4 68
ADDRGP4 trap_R_RegisterSkin
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
ADDRLP4 68
INDIRI4
ASGNI4
line 567
;567:	}
LABELV $308
line 568
;568:	if (!ci->legsSkin) {
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRI4
CNSTI4 0
NEI4 $312
line 569
;569:		Com_Printf( "Leg skin load failure: %s\n", filename );
ADDRGP4 $314
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 Com_Printf
CALLV
pop
line 570
;570:	}
LABELV $312
line 572
;571:
;572:	if ( CG_FindClientModelFile( filename, sizeof(filename), ci, teamName, modelName, skinName, "upper", "skin" ) ) {
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRGP4 $317
ARGP4
ADDRGP4 $311
ARGP4
ADDRLP4 68
ADDRGP4 CG_FindClientModelFile
CALLI4
ASGNI4
ADDRLP4 68
INDIRI4
CNSTI4 0
EQI4 $315
line 573
;573:		ci->torsoSkin = trap_R_RegisterSkin( filename );
ADDRLP4 0
ARGP4
ADDRLP4 72
ADDRGP4 trap_R_RegisterSkin
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 532
ADDP4
ADDRLP4 72
INDIRI4
ASGNI4
line 574
;574:	}
LABELV $315
line 575
;575:	if (!ci->torsoSkin) {
ADDRFP4 0
INDIRP4
CNSTI4 532
ADDP4
INDIRI4
CNSTI4 0
NEI4 $318
line 576
;576:		Com_Printf( "Torso skin load failure: %s\n", filename );
ADDRGP4 $320
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 Com_Printf
CALLV
pop
line 577
;577:	}
LABELV $318
line 579
;578:
;579:	if ( CG_FindClientHeadFile( filename, sizeof(filename), ci, teamName, headModelName, headSkinName, "head", "skin" ) ) {
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 20
INDIRP4
ARGP4
ADDRGP4 $323
ARGP4
ADDRGP4 $311
ARGP4
ADDRLP4 72
ADDRGP4 CG_FindClientHeadFile
CALLI4
ASGNI4
ADDRLP4 72
INDIRI4
CNSTI4 0
EQI4 $321
line 580
;580:		ci->headSkin = trap_R_RegisterSkin( filename );
ADDRLP4 0
ARGP4
ADDRLP4 76
ADDRGP4 trap_R_RegisterSkin
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 540
ADDP4
ADDRLP4 76
INDIRI4
ASGNI4
line 581
;581:	}
LABELV $321
line 582
;582:	if (!ci->headSkin) {
ADDRFP4 0
INDIRP4
CNSTI4 540
ADDP4
INDIRI4
CNSTI4 0
NEI4 $324
line 583
;583:		Com_Printf( "Head skin load failure: %s\n", filename );
ADDRGP4 $326
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 Com_Printf
CALLV
pop
line 584
;584:	}
LABELV $324
line 587
;585:
;586:	// if any skins failed to load
;587:	if ( !ci->legsSkin || !ci->torsoSkin || !ci->headSkin ) {
ADDRLP4 76
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 80
CNSTI4 0
ASGNI4
ADDRLP4 76
INDIRP4
CNSTI4 524
ADDP4
INDIRI4
ADDRLP4 80
INDIRI4
EQI4 $330
ADDRLP4 76
INDIRP4
CNSTI4 532
ADDP4
INDIRI4
ADDRLP4 80
INDIRI4
EQI4 $330
ADDRLP4 76
INDIRP4
CNSTI4 540
ADDP4
INDIRI4
ADDRLP4 80
INDIRI4
NEI4 $327
LABELV $330
line 590
;588:		// Try EF Folders
;589:
;590:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $307
JUMPV
LABELV $327
line 592
;591:	}
;592:	return qtrue;
CNSTI4 1
RETI4
LABELV $307
endproc CG_RegisterClientSkin 84 32
proc CG_RegisterClientModelname 292 32
line 600
;593:}
;594:
;595:/*
;596:==========================
;597:CG_RegisterClientModelname
;598:==========================
;599:*/
;600:static qboolean CG_RegisterClientModelname( clientInfo_t *ci, const char *modelName, const char *skinName, const char *headModelName, const char *headSkinName, const char *teamName ) {
line 605
;601:	char	filename[MAX_QPATH*2];
;602:	const char		*headName;
;603:	char newTeamName[MAX_QPATH*2];
;604:
;605:	if ( headModelName[0] == '\0' ) {
ADDRFP4 12
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $332
line 606
;606:		headName = modelName;
ADDRLP4 128
ADDRFP4 4
INDIRP4
ASGNP4
line 607
;607:	}
ADDRGP4 $333
JUMPV
LABELV $332
line 608
;608:	else {
line 609
;609:		headName = headModelName;
ADDRLP4 128
ADDRFP4 12
INDIRP4
ASGNP4
line 610
;610:	}
LABELV $333
line 612
;611:	
;612:	Com_sprintf( filename, sizeof( filename ), "models/players/%s/lower.md3", modelName );
ADDRLP4 0
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $334
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 613
;613:	ci->legsModel = trap_R_RegisterModel( filename );
ADDRLP4 0
ARGP4
ADDRLP4 260
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 520
ADDP4
ADDRLP4 260
INDIRI4
ASGNI4
line 614
;614:	ci->efmodel = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
CNSTI4 0
ASGNI4
line 615
;615:	if ( !ci->legsModel ) {
ADDRFP4 0
INDIRP4
CNSTI4 520
ADDP4
INDIRI4
CNSTI4 0
NEI4 $335
line 616
;616:		Com_sprintf( filename, sizeof( filename ), "models/players/characters/%s/lower.md3", modelName );
ADDRLP4 0
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $337
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 617
;617:		ci->legsModel = trap_R_RegisterModel( filename );
ADDRLP4 0
ARGP4
ADDRLP4 264
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 520
ADDP4
ADDRLP4 264
INDIRI4
ASGNI4
line 618
;618:		ci->efmodel = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
CNSTI4 0
ASGNI4
line 619
;619:		if ( !ci->legsModel ) {
ADDRFP4 0
INDIRP4
CNSTI4 520
ADDP4
INDIRI4
CNSTI4 0
NEI4 $338
line 621
;620:			// Now Try Md4/MDr format Shafe - Trep 
;621:			Com_sprintf( filename, sizeof( filename ), "models/players2/%s/lower.mdr", modelName );
ADDRLP4 0
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $340
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 622
;622:			ci->efmodel = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
CNSTI4 1
ASGNI4
line 623
;623:			ci->legsModel = trap_R_RegisterModel( filename );
ADDRLP4 0
ARGP4
ADDRLP4 268
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 520
ADDP4
ADDRLP4 268
INDIRI4
ASGNI4
line 624
;624:			if ( !ci->legsModel ) {
ADDRFP4 0
INDIRP4
CNSTI4 520
ADDP4
INDIRI4
CNSTI4 0
NEI4 $341
line 626
;625:				// Now Try Md3 in the players 2 folder format Shafe - Trep 
;626:				Com_sprintf( filename, sizeof( filename ), "models/players2/%s/lower.md3", modelName );
ADDRLP4 0
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $343
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 627
;627:				ci->legsModel = trap_R_RegisterModel( filename );
ADDRLP4 0
ARGP4
ADDRLP4 272
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 520
ADDP4
ADDRLP4 272
INDIRI4
ASGNI4
line 628
;628:				ci->efmodel = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
CNSTI4 1
ASGNI4
line 629
;629:				if ( !ci->legsModel ) {
ADDRFP4 0
INDIRP4
CNSTI4 520
ADDP4
INDIRI4
CNSTI4 0
NEI4 $344
line 630
;630:					Com_Printf( "CG_RegisterClientModelname: Failed to load model file %s\n", filename );
ADDRGP4 $346
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 Com_Printf
CALLV
pop
line 631
;631:					return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $331
JUMPV
LABELV $344
line 633
;632:				}
;633:			}
LABELV $341
line 634
;634:		}
LABELV $338
line 635
;635:	}
LABELV $335
line 637
;636:
;637:	Com_sprintf( filename, sizeof( filename ), "models/players/%s/upper.md3", modelName );
ADDRLP4 0
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $347
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 638
;638:	ci->torsoModel = trap_R_RegisterModel( filename );
ADDRLP4 0
ARGP4
ADDRLP4 264
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 528
ADDP4
ADDRLP4 264
INDIRI4
ASGNI4
line 639
;639:	if ( !ci->torsoModel ) {
ADDRFP4 0
INDIRP4
CNSTI4 528
ADDP4
INDIRI4
CNSTI4 0
NEI4 $348
line 640
;640:		Com_sprintf( filename, sizeof( filename ), "models/players/characters/%s/upper.md3", modelName );
ADDRLP4 0
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $350
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 641
;641:		ci->torsoModel = trap_R_RegisterModel( filename );
ADDRLP4 0
ARGP4
ADDRLP4 268
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 528
ADDP4
ADDRLP4 268
INDIRI4
ASGNI4
line 642
;642:		if ( !ci->torsoModel ) {
ADDRFP4 0
INDIRP4
CNSTI4 528
ADDP4
INDIRI4
CNSTI4 0
NEI4 $351
line 644
;643:			// Try MDR/MD4 Shafe - Trep
;644:			Com_sprintf( filename, sizeof( filename ), "models/players2/%s/upper.mdr", modelName );
ADDRLP4 0
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $353
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 645
;645:			ci->torsoModel = trap_R_RegisterModel( filename );
ADDRLP4 0
ARGP4
ADDRLP4 272
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 528
ADDP4
ADDRLP4 272
INDIRI4
ASGNI4
line 646
;646:			if ( !ci->torsoModel ) {
ADDRFP4 0
INDIRP4
CNSTI4 528
ADDP4
INDIRI4
CNSTI4 0
NEI4 $354
line 647
;647:				Com_sprintf( filename, sizeof( filename ), "models/players2/%s/upper.md3", modelName );
ADDRLP4 0
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $356
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 648
;648:				ci->torsoModel = trap_R_RegisterModel( filename );
ADDRLP4 0
ARGP4
ADDRLP4 276
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 528
ADDP4
ADDRLP4 276
INDIRI4
ASGNI4
line 649
;649:				if ( !ci->torsoModel ) {
ADDRFP4 0
INDIRP4
CNSTI4 528
ADDP4
INDIRI4
CNSTI4 0
NEI4 $357
line 650
;650:					Com_Printf( "CG_RegisterClientModelname: Failed to load model file %s\n", filename );
ADDRGP4 $346
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 Com_Printf
CALLV
pop
line 651
;651:					return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $331
JUMPV
LABELV $357
line 653
;652:				}		
;653:			}		
LABELV $354
line 654
;654:		}
LABELV $351
line 655
;655:	}
LABELV $348
line 657
;656:
;657:if( headName[0] == '*' ) {
ADDRLP4 128
INDIRP4
INDIRI1
CVII4 1
CNSTI4 42
NEI4 $359
line 658
;658:		Com_sprintf( filename, sizeof( filename ), "models/players/heads/%s/%s.md3", &headModelName[1], &headModelName[1] );
ADDRLP4 0
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $361
ARGP4
ADDRLP4 268
ADDRFP4 12
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 268
INDIRP4
ARGP4
ADDRLP4 268
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 659
;659:	}
ADDRGP4 $360
JUMPV
LABELV $359
line 660
;660:	else {
line 661
;661:		Com_sprintf( filename, sizeof( filename ), "models/players/%s/head.md3", headName );
ADDRLP4 0
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $362
ARGP4
ADDRLP4 128
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 662
;662:	}
LABELV $360
line 664
;663:
;664:	ci->headModel = trap_R_RegisterModel( filename );
ADDRLP4 0
ARGP4
ADDRLP4 268
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 536
ADDP4
ADDRLP4 268
INDIRI4
ASGNI4
line 666
;665:	// if the head model could not be found and we didn't load from the heads folder try to load from there
;666:	if ( !ci->headModel && headName[0] != '*' ) {
ADDRFP4 0
INDIRP4
CNSTI4 536
ADDP4
INDIRI4
CNSTI4 0
NEI4 $363
ADDRLP4 128
INDIRP4
INDIRI1
CVII4 1
CNSTI4 42
EQI4 $363
line 667
;667:		Com_sprintf( filename, sizeof( filename ), "models/players/heads/%s/%s.md3", headModelName, headModelName );
ADDRLP4 0
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $361
ARGP4
ADDRLP4 272
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 272
INDIRP4
ARGP4
ADDRLP4 272
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 668
;668:		ci->headModel = trap_R_RegisterModel( filename );
ADDRLP4 0
ARGP4
ADDRLP4 276
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 536
ADDP4
ADDRLP4 276
INDIRI4
ASGNI4
line 669
;669:	}
LABELV $363
line 670
;670:	if ( !ci->headModel ) {
ADDRFP4 0
INDIRP4
CNSTI4 536
ADDP4
INDIRI4
CNSTI4 0
NEI4 $365
line 671
;671:		Com_sprintf( filename, sizeof( filename ), "models/players2/%s/head.md3", headName );
ADDRLP4 0
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $367
ARGP4
ADDRLP4 128
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 672
;672:		ci->headModel = trap_R_RegisterModel( filename );
ADDRLP4 0
ARGP4
ADDRLP4 272
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 536
ADDP4
ADDRLP4 272
INDIRI4
ASGNI4
line 674
;673:		
;674:		if ( !ci->headModel ) {
ADDRFP4 0
INDIRP4
CNSTI4 536
ADDP4
INDIRI4
CNSTI4 0
NEI4 $368
line 675
;675:			Com_Printf( "CG_RegisterClientModelname: Failed to load model file %s\n", filename );
ADDRGP4 $346
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 Com_Printf
CALLV
pop
line 676
;676:			return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $331
JUMPV
LABELV $368
line 678
;677:		}
;678:	}
LABELV $365
line 681
;679:
;680:	// if any skins failed to load, return failure
;681:	if ( !CG_RegisterClientSkin( ci, teamName, modelName, skinName, headName, headSkinName ) ) {
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 20
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 128
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRLP4 272
ADDRGP4 CG_RegisterClientSkin
CALLI4
ASGNI4
ADDRLP4 272
INDIRI4
CNSTI4 0
NEI4 $370
line 682
;682:		if ( teamName && *teamName) {
ADDRLP4 276
ADDRFP4 20
INDIRP4
ASGNP4
ADDRLP4 276
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $372
ADDRLP4 276
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $372
line 683
;683:			Com_Printf( "Failed to load skin file: %s : %s : %s, %s : %s\n", teamName, modelName, skinName, headName, headSkinName );
ADDRGP4 $374
ARGP4
ADDRFP4 20
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 128
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRGP4 Com_Printf
CALLV
pop
line 684
;684:			if( ci->team == TEAM_BLUE ) {
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
CNSTI4 2
NEI4 $375
line 685
;685:				Com_sprintf(newTeamName, sizeof(newTeamName), "%s/", DEFAULT_BLUETEAM_NAME);
ADDRLP4 132
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $377
ARGP4
ADDRGP4 $378
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 686
;686:			}
ADDRGP4 $376
JUMPV
LABELV $375
line 687
;687:			else {
line 688
;688:				Com_sprintf(newTeamName, sizeof(newTeamName), "%s/", DEFAULT_REDTEAM_NAME);
ADDRLP4 132
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $377
ARGP4
ADDRGP4 $379
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 689
;689:			}
LABELV $376
line 690
;690:			if ( !CG_RegisterClientSkin( ci, newTeamName, modelName, skinName, headName, headSkinName ) ) {
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 132
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 128
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRLP4 280
ADDRGP4 CG_RegisterClientSkin
CALLI4
ASGNI4
ADDRLP4 280
INDIRI4
CNSTI4 0
NEI4 $373
line 691
;691:				Com_Printf( "CG_RegisterClientModelname: Failed to load skin file: %s : %s : %s, %s : %s\n", newTeamName, modelName, skinName, headName, headSkinName );
ADDRGP4 $382
ARGP4
ADDRLP4 132
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 128
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRGP4 Com_Printf
CALLV
pop
line 692
;692:				return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $331
JUMPV
line 694
;693:			}
;694:		} else {
LABELV $372
line 695
;695:			Com_Printf( "CG_RegisterClientModelname: Failed to load skin file: %s : %s, %s : %s\n", modelName, skinName, headName, headSkinName );
ADDRGP4 $383
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 128
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRGP4 Com_Printf
CALLV
pop
line 696
;696:			return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $331
JUMPV
LABELV $373
line 698
;697:		}
;698:	}
LABELV $370
line 701
;699:
;700:	// load the animations
;701:	Com_sprintf( filename, sizeof( filename ), "models/players/%s/animation.cfg", modelName );
ADDRLP4 0
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $384
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 702
;702:	if ( !CG_ParseAnimationFile( filename, ci ) ) {
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 276
ADDRGP4 CG_ParseAnimationFile
CALLI4
ASGNI4
ADDRLP4 276
INDIRI4
CNSTI4 0
NEI4 $385
line 703
;703:		Com_sprintf( filename, sizeof( filename ), "models/players/characters/%s/animation.cfg", modelName );
ADDRLP4 0
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $387
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 704
;704:		if ( !CG_ParseAnimationFile( filename, ci ) ) {
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 280
ADDRGP4 CG_ParseAnimationFile
CALLI4
ASGNI4
ADDRLP4 280
INDIRI4
CNSTI4 0
NEI4 $388
line 705
;705:			Com_sprintf( filename, sizeof( filename ), "models/players2/%s/animation.cfg", modelName );
ADDRLP4 0
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $390
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 706
;706:			if ( !CG_ParseAnimationFile( filename, ci ) ) {
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 284
ADDRGP4 CG_ParseAnimationFile
CALLI4
ASGNI4
ADDRLP4 284
INDIRI4
CNSTI4 0
NEI4 $391
line 707
;707:				Com_Printf( "CG_RegisterClientModelname: Failed to load animation file %s\n", filename );
ADDRGP4 $393
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 Com_Printf
CALLV
pop
line 708
;708:				return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $331
JUMPV
LABELV $391
line 710
;709:			}
;710:		}
LABELV $388
line 711
;711:	}
LABELV $385
line 713
;712:
;713:	if ( CG_FindClientHeadFile( filename, sizeof(filename), ci, teamName, headName, headSkinName, "icon", "skin" ) ) {
ADDRLP4 0
ARGP4
CNSTI4 128
ARGI4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 20
INDIRP4
ARGP4
ADDRLP4 128
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRGP4 $396
ARGP4
ADDRGP4 $311
ARGP4
ADDRLP4 280
ADDRGP4 CG_FindClientHeadFile
CALLI4
ASGNI4
ADDRLP4 280
INDIRI4
CNSTI4 0
EQI4 $394
line 714
;714:		ci->modelIcon = trap_R_RegisterShaderNoMip( filename );
ADDRLP4 0
ARGP4
ADDRLP4 284
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 544
ADDP4
ADDRLP4 284
INDIRI4
ASGNI4
line 715
;715:	}
ADDRGP4 $395
JUMPV
LABELV $394
line 716
;716:	else if ( CG_FindClientHeadFile( filename, sizeof(filename), ci, teamName, headName, headSkinName, "icon", "tga" ) ) {
ADDRLP4 0
ARGP4
CNSTI4 128
ARGI4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 20
INDIRP4
ARGP4
ADDRLP4 128
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRGP4 $396
ARGP4
ADDRGP4 $399
ARGP4
ADDRLP4 284
ADDRGP4 CG_FindClientHeadFile
CALLI4
ASGNI4
ADDRLP4 284
INDIRI4
CNSTI4 0
EQI4 $397
line 717
;717:		ci->modelIcon = trap_R_RegisterShaderNoMip( filename );
ADDRLP4 0
ARGP4
ADDRLP4 288
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 544
ADDP4
ADDRLP4 288
INDIRI4
ASGNI4
line 718
;718:	}
LABELV $397
LABELV $395
line 720
;719:
;720:	if ( !ci->modelIcon ) {
ADDRFP4 0
INDIRP4
CNSTI4 544
ADDP4
INDIRI4
CNSTI4 0
NEI4 $400
line 721
;721:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $331
JUMPV
LABELV $400
line 724
;722:	}
;723:
;724:	return qtrue;
CNSTI4 1
RETI4
LABELV $331
endproc CG_RegisterClientModelname 292 32
proc CG_ColorFromString 20 4
line 732
;725:}
;726:
;727:/*
;728:====================
;729:CG_ColorFromString
;730:====================
;731:*/
;732:static void CG_ColorFromString( const char *v, vec3_t color ) {
line 735
;733:	int val;
;734:
;735:	VectorClear( color );
ADDRLP4 4
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 8
CNSTF4 0
ASGNF4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 8
INDIRF4
ASGNF4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 8
INDIRF4
ASGNF4
ADDRLP4 4
INDIRP4
ADDRLP4 8
INDIRF4
ASGNF4
line 737
;736:
;737:	val = atoi( v );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 12
INDIRI4
ASGNI4
line 739
;738:
;739:	if ( val < 1 || val > 7 ) {
ADDRLP4 0
INDIRI4
CNSTI4 1
LTI4 $405
ADDRLP4 0
INDIRI4
CNSTI4 7
LEI4 $403
LABELV $405
line 740
;740:		VectorSet( color, 1, 1, 1 );
ADDRFP4 4
INDIRP4
CNSTF4 1065353216
ASGNF4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
CNSTF4 1065353216
ASGNF4
line 741
;741:		return;
ADDRGP4 $402
JUMPV
LABELV $403
line 744
;742:	}
;743:
;744:	if ( val & 1 ) {
ADDRLP4 0
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $406
line 745
;745:		color[2] = 1.0f;
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
CNSTF4 1065353216
ASGNF4
line 746
;746:	}
LABELV $406
line 747
;747:	if ( val & 2 ) {
ADDRLP4 0
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $408
line 748
;748:		color[1] = 1.0f;
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
CNSTF4 1065353216
ASGNF4
line 749
;749:	}
LABELV $408
line 750
;750:	if ( val & 4 ) {
ADDRLP4 0
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $410
line 751
;751:		color[0] = 1.0f;
ADDRFP4 4
INDIRP4
CNSTF4 1065353216
ASGNF4
line 752
;752:	}
LABELV $410
line 753
;753:}
LABELV $402
endproc CG_ColorFromString 20 4
proc CG_LoadClientInfo 364 24
line 763
;754:
;755:/*
;756:===================
;757:CG_LoadClientInfo
;758:
;759:Load it now, taking the disk hits.
;760:This will usually be deferred to a safe time
;761:===================
;762:*/
;763:static void CG_LoadClientInfo( clientInfo_t *ci ) {
line 773
;764:	const char	*dir, *fallback;
;765:	int			i, modelloaded;
;766:	const char	*s;
;767:	int			clientNum;
;768:	char		teamname[MAX_QPATH];
;769:	char		*filename;
;770:	char		temp_string[200];
;771:	qboolean	noMoreTaunts, loadingTaunt;
;772:
;773:	teamname[0] = 0;
ADDRLP4 16
CNSTI1 0
ASGNI1
line 786
;774:#ifdef MISSIONPACK
;775:	if( cgs.gametype >= GT_TEAM) {
;776:		if( ci->team == TEAM_BLUE ) {
;777:			Q_strncpyz(teamname, cg_blueTeamName.string, sizeof(teamname) );
;778:		} else {
;779:			Q_strncpyz(teamname, cg_redTeamName.string, sizeof(teamname) );
;780:		}
;781:	}
;782:	if( teamname[0] ) {
;783:		strcat( teamname, "/" );
;784:	}
;785:#endif
;786:	modelloaded = qtrue;
ADDRLP4 80
CNSTI4 1
ASGNI4
line 787
;787:	if ( !CG_RegisterClientModelname( ci, ci->modelName, ci->skinName, ci->headModelName, ci->headSkinName, teamname ) ) {
ADDRLP4 300
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 300
INDIRP4
ARGP4
ADDRLP4 300
INDIRP4
CNSTI4 160
ADDP4
ARGP4
ADDRLP4 300
INDIRP4
CNSTI4 224
ADDP4
ARGP4
ADDRLP4 300
INDIRP4
CNSTI4 288
ADDP4
ARGP4
ADDRLP4 300
INDIRP4
CNSTI4 352
ADDP4
ARGP4
ADDRLP4 16
ARGP4
ADDRLP4 304
ADDRGP4 CG_RegisterClientModelname
CALLI4
ASGNI4
ADDRLP4 304
INDIRI4
CNSTI4 0
NEI4 $413
line 788
;788:		if ( cg_buildScript.integer ) {
ADDRGP4 cg_buildScript+12
INDIRI4
CNSTI4 0
EQI4 $415
line 789
;789:			CG_Error( "CG_RegisterClientModelname( %s, %s, %s, %s %s ) failed", ci->modelName, ci->skinName, ci->headModelName, ci->headSkinName, teamname );
ADDRGP4 $418
ARGP4
ADDRLP4 308
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 308
INDIRP4
CNSTI4 160
ADDP4
ARGP4
ADDRLP4 308
INDIRP4
CNSTI4 224
ADDP4
ARGP4
ADDRLP4 308
INDIRP4
CNSTI4 288
ADDP4
ARGP4
ADDRLP4 308
INDIRP4
CNSTI4 352
ADDP4
ARGP4
ADDRLP4 16
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 790
;790:		}
LABELV $415
line 793
;791:
;792:		// fall back to default team name
;793:		if( cgs.gametype >= GT_TEAM) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
LTI4 $419
line 795
;794:			// keep skin name
;795:			if( ci->team == TEAM_BLUE ) {
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
CNSTI4 2
NEI4 $422
line 796
;796:				Q_strncpyz(teamname, DEFAULT_BLUETEAM_NAME, sizeof(teamname) );
ADDRLP4 16
ARGP4
ADDRGP4 $378
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 797
;797:			} else {
ADDRGP4 $423
JUMPV
LABELV $422
line 798
;798:				Q_strncpyz(teamname, DEFAULT_REDTEAM_NAME, sizeof(teamname) );
ADDRLP4 16
ARGP4
ADDRGP4 $379
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 799
;799:			}
LABELV $423
line 800
;800:			if ( !CG_RegisterClientModelname( ci, DEFAULT_TEAM_MODEL, ci->skinName, DEFAULT_TEAM_HEAD, ci->skinName, teamname ) ) {
ADDRLP4 308
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 308
INDIRP4
ARGP4
ADDRLP4 312
ADDRGP4 $426
ASGNP4
ADDRLP4 312
INDIRP4
ARGP4
ADDRLP4 316
ADDRLP4 308
INDIRP4
CNSTI4 224
ADDP4
ASGNP4
ADDRLP4 316
INDIRP4
ARGP4
ADDRLP4 312
INDIRP4
ARGP4
ADDRLP4 316
INDIRP4
ARGP4
ADDRLP4 16
ARGP4
ADDRLP4 320
ADDRGP4 CG_RegisterClientModelname
CALLI4
ASGNI4
ADDRLP4 320
INDIRI4
CNSTI4 0
NEI4 $420
line 801
;801:				CG_Error( "DEFAULT_TEAM_MODEL / skin (%s/%s) failed to register", DEFAULT_TEAM_MODEL, ci->skinName );
ADDRGP4 $427
ARGP4
ADDRGP4 $426
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 224
ADDP4
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 802
;802:			}
line 803
;803:		} else {
ADDRGP4 $420
JUMPV
LABELV $419
line 804
;804:			if ( !CG_RegisterClientModelname( ci, DEFAULT_MODEL, "default", DEFAULT_MODEL, "default", teamname ) ) {
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 308
ADDRGP4 $426
ASGNP4
ADDRLP4 308
INDIRP4
ARGP4
ADDRLP4 312
ADDRGP4 $123
ASGNP4
ADDRLP4 312
INDIRP4
ARGP4
ADDRLP4 308
INDIRP4
ARGP4
ADDRLP4 312
INDIRP4
ARGP4
ADDRLP4 16
ARGP4
ADDRLP4 316
ADDRGP4 CG_RegisterClientModelname
CALLI4
ASGNI4
ADDRLP4 316
INDIRI4
CNSTI4 0
NEI4 $428
line 805
;805:				CG_Error( "DEFAULT_MODEL (%s) failed to register", DEFAULT_MODEL );
ADDRGP4 $430
ARGP4
ADDRGP4 $426
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 806
;806:			}
LABELV $428
line 807
;807:		}
LABELV $420
line 808
;808:		modelloaded = qfalse;
ADDRLP4 80
CNSTI4 0
ASGNI4
line 809
;809:	}
LABELV $413
line 811
;810:
;811:	ci->newAnims = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 484
ADDP4
CNSTI4 0
ASGNI4
line 812
;812:	if ( ci->torsoModel ) {
ADDRFP4 0
INDIRP4
CNSTI4 528
ADDP4
INDIRI4
CNSTI4 0
EQI4 $431
line 815
;813:		orientation_t tag;
;814:		// if the torso model has the "tag_flag"
;815:		if ( trap_R_LerpTag( &tag, ci->torsoModel, 0, 0, 1, "tag_flag" ) ) {
ADDRLP4 308
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 528
ADDP4
INDIRI4
ARGI4
ADDRLP4 356
CNSTI4 0
ASGNI4
ADDRLP4 356
INDIRI4
ARGI4
ADDRLP4 356
INDIRI4
ARGI4
CNSTF4 1065353216
ARGF4
ADDRGP4 $435
ARGP4
ADDRLP4 360
ADDRGP4 trap_R_LerpTag
CALLI4
ASGNI4
ADDRLP4 360
INDIRI4
CNSTI4 0
EQI4 $433
line 816
;816:			ci->newAnims = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 484
ADDP4
CNSTI4 1
ASGNI4
line 817
;817:		}
LABELV $433
line 818
;818:	}
LABELV $431
line 821
;819:
;820:	// sounds
;821:	dir = ci->modelName;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 160
ADDP4
ASGNP4
line 822
;822:	fallback = (cgs.gametype >= GT_TEAM) ? DEFAULT_TEAM_MODEL : DEFAULT_MODEL;
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
LTI4 $438
ADDRLP4 308
ADDRGP4 $426
ASGNP4
ADDRGP4 $439
JUMPV
LABELV $438
ADDRLP4 308
ADDRGP4 $426
ASGNP4
LABELV $439
ADDRLP4 84
ADDRLP4 308
INDIRP4
ASGNP4
line 824
;823:
;824:	for ( i = 0 ; i < MAX_CUSTOM_SOUNDS ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $440
line 825
;825:		s = cg_customSoundNames[i];
ADDRLP4 4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg_customSoundNames
ADDP4
INDIRP4
ASGNP4
line 826
;826:		if ( !s ) {
ADDRLP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $444
line 827
;827:			break;
ADDRGP4 $442
JUMPV
LABELV $444
line 837
;828:		}
;829:
;830:		/*
;831:		if ( strstr( s, "taunt" ) != NULL ) {
;832:			if ( noMoreTaunts )	{continue;}
;833:			loadingTaunt = qtrue;
;834:		} else {loadingTaunt=qfalse;}
;835:		*/
;836:
;837:		ci->sounds[i] = 0;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 1584
ADDP4
ADDP4
CNSTI4 0
ASGNI4
line 838
;838:		if (ci->efmodel == qtrue)
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRI4
CNSTI4 1
NEI4 $446
line 839
;839:		{
line 840
;840:			ci->sounds[i] = trap_S_RegisterSound( va("sound/voice/%s/misc/%s", dir, s + 1), qfalse );
ADDRGP4 $448
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 1
ADDP4
ARGP4
ADDRLP4 312
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 312
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 316
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 1584
ADDP4
ADDP4
ADDRLP4 316
INDIRI4
ASGNI4
line 841
;841:		} 
ADDRGP4 $447
JUMPV
LABELV $446
line 843
;842:		else
;843:		{
line 844
;844:			ci->sounds[i] = trap_S_RegisterSound( va("sound/player/%s/%s", dir, s + 1), qfalse );
ADDRGP4 $449
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 1
ADDP4
ARGP4
ADDRLP4 312
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 312
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 316
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 1584
ADDP4
ADDP4
ADDRLP4 316
INDIRI4
ASGNI4
line 845
;845:		}
LABELV $447
line 868
;846:				
;847:		
;848:		//if (modelloaded) {	
;849:		//		ci->sounds[i] = trap_S_RegisterSound( va("sound/voice/%s/misc/%s", dir, s + 1), qfalse );
;850:		//}
;851:
;852:		// if the model didn't load use the sounds of the default model
;853:
;854:		/*
;855:		if ( !ci->sounds[i] ) {
;856:			ci->sounds[i] = trap_S_RegisterSound( va("sound/player/%s/%s", fallback, s + 1), qfalse );
;857:		}
;858:		*/
;859:
;860:		/*
;861:		if ( loadingTaunt ) {//NOTE: this requires the taunts to not have any gaps
;862:			if ( ci->sounds[i] ) {ci->numTaunts++;}
;863:			else {noMoreTaunts=qtrue;}
;864:		}
;865:		*/
;866:		
;867:
;868:	}
LABELV $441
line 824
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 32
LTI4 $440
LABELV $442
line 870
;869:
;870:	ci->deferred = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 480
ADDP4
CNSTI4 0
ASGNI4
line 874
;871:
;872:	// reset any existing players and bodies, because they might be in bad
;873:	// frames for this new model
;874:	clientNum = ci - cgs.clientinfo;
ADDRLP4 12
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 cgs+40972
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 1716
DIVI4
ASGNI4
line 875
;875:	for ( i = 0 ; i < MAX_GENTITIES ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $451
line 876
;876:		if ( cg_entities[i].currentState.clientNum == clientNum
ADDRLP4 312
CNSTI4 732
ADDRLP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 312
INDIRI4
ADDRGP4 cg_entities+168
ADDP4
INDIRI4
ADDRLP4 12
INDIRI4
NEI4 $455
ADDRLP4 312
INDIRI4
ADDRGP4 cg_entities+4
ADDP4
INDIRI4
CNSTI4 1
NEI4 $455
line 877
;877:			&& cg_entities[i].currentState.eType == ET_PLAYER ) {
line 878
;878:			CG_ResetPlayerEntity( &cg_entities[i] );
CNSTI4 732
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg_entities
ADDP4
ARGP4
ADDRGP4 CG_ResetPlayerEntity
CALLV
pop
line 879
;879:		}
LABELV $455
line 880
;880:	}
LABELV $452
line 875
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 1024
LTI4 $451
line 881
;881:}
LABELV $412
endproc CG_LoadClientInfo 364 24
proc CG_CopyClientInfoModel 56 12
line 888
;882:
;883:/*
;884:======================
;885:CG_CopyClientInfoModel
;886:======================
;887:*/
;888:static void CG_CopyClientInfoModel( clientInfo_t *from, clientInfo_t *to ) {
line 889
;889:	VectorCopy( from->headOffset, to->headOffset );
ADDRLP4 0
CNSTI4 496
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 0
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 0
INDIRI4
ADDP4
INDIRB
ASGNB 12
line 890
;890:	to->footsteps = from->footsteps;
ADDRLP4 4
CNSTI4 508
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 4
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 4
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 891
;891:	to->gender = from->gender;
ADDRLP4 8
CNSTI4 512
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 8
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 8
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 892
;892:	to->numTaunts = from->numTaunts;
ADDRLP4 12
CNSTI4 1712
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 12
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 12
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 894
;893:
;894:	to->legsModel = from->legsModel;
ADDRLP4 16
CNSTI4 520
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 895
;895:	to->legsSkin = from->legsSkin;
ADDRLP4 20
CNSTI4 524
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 20
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 20
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 896
;896:	to->torsoModel = from->torsoModel;
ADDRLP4 24
CNSTI4 528
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 24
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 24
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 897
;897:	to->torsoSkin = from->torsoSkin;
ADDRLP4 28
CNSTI4 532
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 28
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 28
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 898
;898:	to->headModel = from->headModel;
ADDRLP4 32
CNSTI4 536
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 32
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 32
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 899
;899:	to->headSkin = from->headSkin;
ADDRLP4 36
CNSTI4 540
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 36
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 36
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 900
;900:	to->modelIcon = from->modelIcon;
ADDRLP4 40
CNSTI4 544
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 40
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 40
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 902
;901:
;902:	to->newAnims = from->newAnims;
ADDRLP4 44
CNSTI4 484
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 44
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 44
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 904
;903:
;904:	memcpy( to->animations, from->animations, sizeof( to->animations ) );
ADDRLP4 48
CNSTI4 548
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 48
INDIRI4
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
ADDRLP4 48
INDIRI4
ADDP4
ARGP4
CNSTI4 1036
ARGI4
ADDRGP4 memcpy
CALLP4
pop
line 905
;905:	memcpy( to->sounds, from->sounds, sizeof( to->sounds ) );
ADDRLP4 52
CNSTI4 1584
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 52
INDIRI4
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
ADDRLP4 52
INDIRI4
ADDP4
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 memcpy
CALLP4
pop
line 906
;906:}
LABELV $459
endproc CG_CopyClientInfoModel 56 12
proc CG_ScanForExistingClientInfo 60 8
line 913
;907:
;908:/*
;909:======================
;910:CG_ScanForExistingClientInfo
;911:======================
;912:*/
;913:static qboolean CG_ScanForExistingClientInfo( clientInfo_t *ci ) {
line 917
;914:	int		i;
;915:	clientInfo_t	*match;
;916:
;917:	for ( i = 0 ; i < cgs.maxclients ; i++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $464
JUMPV
LABELV $461
line 918
;918:		match = &cgs.clientinfo[ i ];
ADDRLP4 0
CNSTI4 1716
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 cgs+40972
ADDP4
ASGNP4
line 919
;919:		if ( !match->infoValid ) {
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 0
NEI4 $467
line 920
;920:			continue;
ADDRGP4 $462
JUMPV
LABELV $467
line 922
;921:		}
;922:		if ( match->deferred ) {
ADDRLP4 0
INDIRP4
CNSTI4 480
ADDP4
INDIRI4
CNSTI4 0
EQI4 $469
line 923
;923:			continue;
ADDRGP4 $462
JUMPV
LABELV $469
line 925
;924:		}
;925:		if ( !Q_stricmp( ci->modelName, match->modelName )
ADDRLP4 8
CNSTI4 160
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 8
INDIRI4
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
ADDRLP4 8
INDIRI4
ADDP4
ARGP4
ADDRLP4 12
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
NEI4 $471
ADDRLP4 16
CNSTI4 224
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
ARGP4
ADDRLP4 20
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
NEI4 $471
ADDRLP4 24
CNSTI4 288
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 24
INDIRI4
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
ADDRLP4 24
INDIRI4
ADDP4
ARGP4
ADDRLP4 28
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 28
INDIRI4
CNSTI4 0
NEI4 $471
ADDRLP4 32
CNSTI4 352
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 32
INDIRI4
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
ADDRLP4 32
INDIRI4
ADDP4
ARGP4
ADDRLP4 36
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 36
INDIRI4
CNSTI4 0
NEI4 $471
ADDRLP4 40
CNSTI4 448
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 40
INDIRI4
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
ADDRLP4 40
INDIRI4
ADDP4
ARGP4
ADDRLP4 44
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 44
INDIRI4
CNSTI4 0
NEI4 $471
ADDRLP4 48
CNSTI4 416
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 48
INDIRI4
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
ADDRLP4 48
INDIRI4
ADDP4
ARGP4
ADDRLP4 52
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 52
INDIRI4
CNSTI4 0
NEI4 $471
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
LTI4 $474
ADDRLP4 56
CNSTI4 68
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 56
INDIRI4
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
ADDRLP4 56
INDIRI4
ADDP4
INDIRI4
NEI4 $471
LABELV $474
line 931
;926:			&& !Q_stricmp( ci->skinName, match->skinName )
;927:			&& !Q_stricmp( ci->headModelName, match->headModelName )
;928:			&& !Q_stricmp( ci->headSkinName, match->headSkinName ) 
;929:			&& !Q_stricmp( ci->blueTeam, match->blueTeam ) 
;930:			&& !Q_stricmp( ci->redTeam, match->redTeam )
;931:			&& (cgs.gametype < GT_TEAM || ci->team == match->team) ) {
line 934
;932:			// this clientinfo is identical, so use it's handles
;933:
;934:			ci->deferred = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 480
ADDP4
CNSTI4 0
ASGNI4
line 936
;935:
;936:			CG_CopyClientInfoModel( match, ci );
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_CopyClientInfoModel
CALLV
pop
line 938
;937:
;938:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $460
JUMPV
LABELV $471
line 940
;939:		}
;940:	}
LABELV $462
line 917
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $464
ADDRLP4 4
INDIRI4
ADDRGP4 cgs+31480
INDIRI4
LTI4 $461
line 943
;941:
;942:	// nothing matches, so defer the load
;943:	return qfalse;
CNSTI4 0
RETI4
LABELV $460
endproc CG_ScanForExistingClientInfo 60 8
proc CG_SetDeferredClientInfo 36 8
line 954
;944:}
;945:
;946:/*
;947:======================
;948:CG_SetDeferredClientInfo
;949:
;950:We aren't going to load it now, so grab some other
;951:client's info to use until we have some spare time.
;952:======================
;953:*/
;954:static void CG_SetDeferredClientInfo( clientInfo_t *ci ) {
line 960
;955:	int		i;
;956:	clientInfo_t	*match;
;957:
;958:	// if someone else is already the same models and skins we
;959:	// can just load the client info
;960:	for ( i = 0 ; i < cgs.maxclients ; i++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $479
JUMPV
LABELV $476
line 961
;961:		match = &cgs.clientinfo[ i ];
ADDRLP4 0
CNSTI4 1716
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 cgs+40972
ADDP4
ASGNP4
line 962
;962:		if ( !match->infoValid || match->deferred ) {
ADDRLP4 12
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRP4
INDIRI4
ADDRLP4 12
INDIRI4
EQI4 $484
ADDRLP4 0
INDIRP4
CNSTI4 480
ADDP4
INDIRI4
ADDRLP4 12
INDIRI4
EQI4 $482
LABELV $484
line 963
;963:			continue;
ADDRGP4 $477
JUMPV
LABELV $482
line 965
;964:		}
;965:		if ( Q_stricmp( ci->skinName, match->skinName ) ||
ADDRLP4 16
CNSTI4 224
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
ARGP4
ADDRLP4 20
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
NEI4 $489
ADDRLP4 24
CNSTI4 160
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 24
INDIRI4
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
ADDRLP4 24
INDIRI4
ADDP4
ARGP4
ADDRLP4 28
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 28
INDIRI4
CNSTI4 0
NEI4 $489
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
LTI4 $485
ADDRLP4 32
CNSTI4 68
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 32
INDIRI4
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
ADDRLP4 32
INDIRI4
ADDP4
INDIRI4
EQI4 $485
LABELV $489
line 969
;966:			 Q_stricmp( ci->modelName, match->modelName ) ||
;967://			 Q_stricmp( ci->headModelName, match->headModelName ) ||
;968://			 Q_stricmp( ci->headSkinName, match->headSkinName ) ||
;969:			 (cgs.gametype >= GT_TEAM && ci->team != match->team) ) {
line 970
;970:			continue;
ADDRGP4 $477
JUMPV
LABELV $485
line 973
;971:		}
;972:		// just load the real info cause it uses the same models and skins
;973:		CG_LoadClientInfo( ci );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_LoadClientInfo
CALLV
pop
line 974
;974:		return;
ADDRGP4 $475
JUMPV
LABELV $477
line 960
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $479
ADDRLP4 4
INDIRI4
ADDRGP4 cgs+31480
INDIRI4
LTI4 $476
line 978
;975:	}
;976:
;977:	// if we are in teamplay, only grab a model if the skin is correct
;978:	if ( cgs.gametype >= GT_TEAM ) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
LTI4 $490
line 979
;979:		for ( i = 0 ; i < cgs.maxclients ; i++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $496
JUMPV
LABELV $493
line 980
;980:			match = &cgs.clientinfo[ i ];
ADDRLP4 0
CNSTI4 1716
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 cgs+40972
ADDP4
ASGNP4
line 981
;981:			if ( !match->infoValid || match->deferred ) {
ADDRLP4 12
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRP4
INDIRI4
ADDRLP4 12
INDIRI4
EQI4 $501
ADDRLP4 0
INDIRP4
CNSTI4 480
ADDP4
INDIRI4
ADDRLP4 12
INDIRI4
EQI4 $499
LABELV $501
line 982
;982:				continue;
ADDRGP4 $494
JUMPV
LABELV $499
line 984
;983:			}
;984:			if ( Q_stricmp( ci->skinName, match->skinName ) ||
ADDRLP4 16
CNSTI4 224
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
ARGP4
ADDRLP4 20
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
NEI4 $505
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
LTI4 $502
ADDRLP4 24
CNSTI4 68
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 24
INDIRI4
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
ADDRLP4 24
INDIRI4
ADDP4
INDIRI4
EQI4 $502
LABELV $505
line 985
;985:				(cgs.gametype >= GT_TEAM && ci->team != match->team) ) {
line 986
;986:				continue;
ADDRGP4 $494
JUMPV
LABELV $502
line 988
;987:			}
;988:			ci->deferred = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 480
ADDP4
CNSTI4 1
ASGNI4
line 989
;989:			CG_CopyClientInfoModel( match, ci );
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_CopyClientInfoModel
CALLV
pop
line 990
;990:			return;
ADDRGP4 $475
JUMPV
LABELV $494
line 979
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $496
ADDRLP4 4
INDIRI4
ADDRGP4 cgs+31480
INDIRI4
LTI4 $493
line 996
;991:		}
;992:		// load the full model, because we don't ever want to show
;993:		// an improper team skin.  This will cause a hitch for the first
;994:		// player, when the second enters.  Combat shouldn't be going on
;995:		// yet, so it shouldn't matter
;996:		CG_LoadClientInfo( ci );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_LoadClientInfo
CALLV
pop
line 997
;997:		return;
ADDRGP4 $475
JUMPV
LABELV $490
line 1001
;998:	}
;999:
;1000:	// find the first valid clientinfo and grab its stuff
;1001:	for ( i = 0 ; i < cgs.maxclients ; i++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $509
JUMPV
LABELV $506
line 1002
;1002:		match = &cgs.clientinfo[ i ];
ADDRLP4 0
CNSTI4 1716
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 cgs+40972
ADDP4
ASGNP4
line 1003
;1003:		if ( !match->infoValid ) {
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 0
NEI4 $512
line 1004
;1004:			continue;
ADDRGP4 $507
JUMPV
LABELV $512
line 1007
;1005:		}
;1006:
;1007:		ci->deferred = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 480
ADDP4
CNSTI4 1
ASGNI4
line 1008
;1008:		CG_CopyClientInfoModel( match, ci );
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_CopyClientInfoModel
CALLV
pop
line 1009
;1009:		return;
ADDRGP4 $475
JUMPV
LABELV $507
line 1001
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $509
ADDRLP4 4
INDIRI4
ADDRGP4 cgs+31480
INDIRI4
LTI4 $506
line 1013
;1010:	}
;1011:
;1012:	// we should never get here...
;1013:	CG_Printf( "CG_SetDeferredClientInfo: no valid clients!\n" );
ADDRGP4 $514
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 1015
;1014:
;1015:	CG_LoadClientInfo( ci );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_LoadClientInfo
CALLV
pop
line 1016
;1016:}
LABELV $475
endproc CG_SetDeferredClientInfo 36 8
export CG_NewClientInfo
proc CG_NewClientInfo 1896 12
line 1024
;1017:
;1018:
;1019:/*
;1020:======================
;1021:CG_NewClientInfo
;1022:======================
;1023:*/
;1024:void CG_NewClientInfo( int clientNum ) {
line 1031
;1025:	clientInfo_t *ci;
;1026:	clientInfo_t newInfo;
;1027:	const char	*configstring;
;1028:	const char	*v;
;1029:	char		*slash;
;1030:
;1031:	ci = &cgs.clientinfo[clientNum];
ADDRLP4 1728
CNSTI4 1716
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 cgs+40972
ADDP4
ASGNP4
line 1033
;1032:
;1033:	configstring = CG_ConfigString( clientNum + CS_PLAYERS );
ADDRFP4 0
INDIRI4
CNSTI4 544
ADDI4
ARGI4
ADDRLP4 1732
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 1720
ADDRLP4 1732
INDIRP4
ASGNP4
line 1034
;1034:	if ( !configstring[0] ) {
ADDRLP4 1720
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $517
line 1035
;1035:		memset( ci, 0, sizeof( *ci ) );
ADDRLP4 1728
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 1716
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1036
;1036:		return;		// player just left
ADDRGP4 $515
JUMPV
LABELV $517
line 1041
;1037:	}
;1038:
;1039:	// build into a temp buffer so the defer checks can use
;1040:	// the old value
;1041:	memset( &newInfo, 0, sizeof( newInfo ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 1716
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1044
;1042:
;1043:	// isolate the player's name
;1044:	v = Info_ValueForKey(configstring, "n");
ADDRLP4 1720
INDIRP4
ARGP4
ADDRGP4 $519
ARGP4
ADDRLP4 1736
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 1716
ADDRLP4 1736
INDIRP4
ASGNP4
line 1045
;1045:	Q_strncpyz( newInfo.name, v, sizeof( newInfo.name ) );
ADDRLP4 0+4
ARGP4
ADDRLP4 1716
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1048
;1046:
;1047:	// colors
;1048:	v = Info_ValueForKey( configstring, "c1" );
ADDRLP4 1720
INDIRP4
ARGP4
ADDRGP4 $522
ARGP4
ADDRLP4 1740
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 1716
ADDRLP4 1740
INDIRP4
ASGNP4
line 1049
;1049:	CG_ColorFromString( v, newInfo.color1 );
ADDRLP4 1716
INDIRP4
ARGP4
ADDRLP4 0+76
ARGP4
ADDRGP4 CG_ColorFromString
CALLV
pop
line 1051
;1050:
;1051:	v = Info_ValueForKey( configstring, "c2" );
ADDRLP4 1720
INDIRP4
ARGP4
ADDRGP4 $524
ARGP4
ADDRLP4 1744
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 1716
ADDRLP4 1744
INDIRP4
ASGNP4
line 1052
;1052:	CG_ColorFromString( v, newInfo.color2 );
ADDRLP4 1716
INDIRP4
ARGP4
ADDRLP4 0+88
ARGP4
ADDRGP4 CG_ColorFromString
CALLV
pop
line 1055
;1053:
;1054:	// bot skill
;1055:	v = Info_ValueForKey( configstring, "skill" );
ADDRLP4 1720
INDIRP4
ARGP4
ADDRGP4 $526
ARGP4
ADDRLP4 1748
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 1716
ADDRLP4 1748
INDIRP4
ASGNP4
line 1056
;1056:	newInfo.botSkill = atoi( v );
ADDRLP4 1716
INDIRP4
ARGP4
ADDRLP4 1752
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0+72
ADDRLP4 1752
INDIRI4
ASGNI4
line 1059
;1057:
;1058:	// handicap
;1059:	v = Info_ValueForKey( configstring, "hc" );
ADDRLP4 1720
INDIRP4
ARGP4
ADDRGP4 $528
ARGP4
ADDRLP4 1756
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 1716
ADDRLP4 1756
INDIRP4
ASGNP4
line 1060
;1060:	newInfo.handicap = atoi( v );
ADDRLP4 1716
INDIRP4
ARGP4
ADDRLP4 1760
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0+120
ADDRLP4 1760
INDIRI4
ASGNI4
line 1063
;1061:
;1062:	// wins
;1063:	v = Info_ValueForKey( configstring, "w" );
ADDRLP4 1720
INDIRP4
ARGP4
ADDRGP4 $530
ARGP4
ADDRLP4 1764
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 1716
ADDRLP4 1764
INDIRP4
ASGNP4
line 1064
;1064:	newInfo.wins = atoi( v );
ADDRLP4 1716
INDIRP4
ARGP4
ADDRLP4 1768
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0+124
ADDRLP4 1768
INDIRI4
ASGNI4
line 1067
;1065:
;1066:	// losses
;1067:	v = Info_ValueForKey( configstring, "l" );
ADDRLP4 1720
INDIRP4
ARGP4
ADDRGP4 $532
ARGP4
ADDRLP4 1772
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 1716
ADDRLP4 1772
INDIRP4
ASGNP4
line 1068
;1068:	newInfo.losses = atoi( v );
ADDRLP4 1716
INDIRP4
ARGP4
ADDRLP4 1776
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0+128
ADDRLP4 1776
INDIRI4
ASGNI4
line 1071
;1069:
;1070:	// team
;1071:	v = Info_ValueForKey( configstring, "t" );
ADDRLP4 1720
INDIRP4
ARGP4
ADDRGP4 $534
ARGP4
ADDRLP4 1780
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 1716
ADDRLP4 1780
INDIRP4
ASGNP4
line 1072
;1072:	newInfo.team = atoi( v );
ADDRLP4 1716
INDIRP4
ARGP4
ADDRLP4 1784
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0+68
ADDRLP4 1784
INDIRI4
ASGNI4
line 1075
;1073:
;1074:	// team task
;1075:	v = Info_ValueForKey( configstring, "tt" );
ADDRLP4 1720
INDIRP4
ARGP4
ADDRGP4 $536
ARGP4
ADDRLP4 1788
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 1716
ADDRLP4 1788
INDIRP4
ASGNP4
line 1076
;1076:	newInfo.teamTask = atoi(v);
ADDRLP4 1716
INDIRP4
ARGP4
ADDRLP4 1792
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0+132
ADDRLP4 1792
INDIRI4
ASGNI4
line 1079
;1077:
;1078:	// team leader
;1079:	v = Info_ValueForKey( configstring, "tl" );
ADDRLP4 1720
INDIRP4
ARGP4
ADDRGP4 $538
ARGP4
ADDRLP4 1796
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 1716
ADDRLP4 1796
INDIRP4
ASGNP4
line 1080
;1080:	newInfo.teamLeader = atoi(v);
ADDRLP4 1716
INDIRP4
ARGP4
ADDRLP4 1800
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0+136
ADDRLP4 1800
INDIRI4
ASGNI4
line 1082
;1081:
;1082:	v = Info_ValueForKey( configstring, "g_redteam" );
ADDRLP4 1720
INDIRP4
ARGP4
ADDRGP4 $540
ARGP4
ADDRLP4 1804
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 1716
ADDRLP4 1804
INDIRP4
ASGNP4
line 1083
;1083:	Q_strncpyz(newInfo.redTeam, v, MAX_TEAMNAME);
ADDRLP4 0+416
ARGP4
ADDRLP4 1716
INDIRP4
ARGP4
CNSTI4 32
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1085
;1084:
;1085:	v = Info_ValueForKey( configstring, "g_blueteam" );
ADDRLP4 1720
INDIRP4
ARGP4
ADDRGP4 $542
ARGP4
ADDRLP4 1808
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 1716
ADDRLP4 1808
INDIRP4
ASGNP4
line 1086
;1086:	Q_strncpyz(newInfo.blueTeam, v, MAX_TEAMNAME);
ADDRLP4 0+448
ARGP4
ADDRLP4 1716
INDIRP4
ARGP4
CNSTI4 32
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1089
;1087:
;1088:	// model
;1089:	v = Info_ValueForKey( configstring, "model" );
ADDRLP4 1720
INDIRP4
ARGP4
ADDRGP4 $544
ARGP4
ADDRLP4 1812
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 1716
ADDRLP4 1812
INDIRP4
ASGNP4
line 1090
;1090:	if ( cg_forceModel.integer ) {
ADDRGP4 cg_forceModel+12
INDIRI4
CNSTI4 0
EQI4 $545
line 1096
;1091:		// forcemodel makes everyone use a single model
;1092:		// to prevent load hitches
;1093:		char modelStr[MAX_QPATH];
;1094:		char *skin;
;1095:
;1096:		if( cgs.gametype >= GT_TEAM ) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
LTI4 $548
line 1097
;1097:			Q_strncpyz( newInfo.modelName, DEFAULT_TEAM_MODEL, sizeof( newInfo.modelName ) );
ADDRLP4 0+160
ARGP4
ADDRGP4 $426
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1098
;1098:			Q_strncpyz( newInfo.skinName, "default", sizeof( newInfo.skinName ) );
ADDRLP4 0+224
ARGP4
ADDRGP4 $123
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1099
;1099:		} else {
ADDRGP4 $549
JUMPV
LABELV $548
line 1100
;1100:			trap_Cvar_VariableStringBuffer( "model", modelStr, sizeof( modelStr ) );
ADDRGP4 $544
ARGP4
ADDRLP4 1816
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 trap_Cvar_VariableStringBuffer
CALLV
pop
line 1101
;1101:			if ( ( skin = strchr( modelStr, '/' ) ) == NULL) {
ADDRLP4 1816
ARGP4
CNSTI4 47
ARGI4
ADDRLP4 1884
ADDRGP4 strchr
CALLP4
ASGNP4
ADDRLP4 1880
ADDRLP4 1884
INDIRP4
ASGNP4
ADDRLP4 1884
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $555
line 1102
;1102:				skin = "default";
ADDRLP4 1880
ADDRGP4 $123
ASGNP4
line 1103
;1103:			} else {
ADDRGP4 $556
JUMPV
LABELV $555
line 1104
;1104:				*skin++ = 0;
ADDRLP4 1888
ADDRLP4 1880
INDIRP4
ASGNP4
ADDRLP4 1880
ADDRLP4 1888
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 1888
INDIRP4
CNSTI1 0
ASGNI1
line 1105
;1105:			}
LABELV $556
line 1107
;1106:
;1107:			Q_strncpyz( newInfo.skinName, skin, sizeof( newInfo.skinName ) );
ADDRLP4 0+224
ARGP4
ADDRLP4 1880
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1108
;1108:			Q_strncpyz( newInfo.modelName, modelStr, sizeof( newInfo.modelName ) );
ADDRLP4 0+160
ARGP4
ADDRLP4 1816
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1109
;1109:		}
LABELV $549
line 1111
;1110:
;1111:		if ( cgs.gametype >= GT_TEAM ) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
LTI4 $546
line 1113
;1112:			// keep skin name
;1113:			slash = strchr( v, '/' );
ADDRLP4 1716
INDIRP4
ARGP4
CNSTI4 47
ARGI4
ADDRLP4 1884
ADDRGP4 strchr
CALLP4
ASGNP4
ADDRLP4 1724
ADDRLP4 1884
INDIRP4
ASGNP4
line 1114
;1114:			if ( slash ) {
ADDRLP4 1724
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $546
line 1115
;1115:				Q_strncpyz( newInfo.skinName, slash + 1, sizeof( newInfo.skinName ) );
ADDRLP4 0+224
ARGP4
ADDRLP4 1724
INDIRP4
CNSTI4 1
ADDP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1116
;1116:			}
line 1117
;1117:		}
line 1118
;1118:	} else {
ADDRGP4 $546
JUMPV
LABELV $545
line 1119
;1119:		Q_strncpyz( newInfo.modelName, v, sizeof( newInfo.modelName ) );
ADDRLP4 0+160
ARGP4
ADDRLP4 1716
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1121
;1120:
;1121:		slash = strchr( newInfo.modelName, '/' );
ADDRLP4 0+160
ARGP4
CNSTI4 47
ARGI4
ADDRLP4 1816
ADDRGP4 strchr
CALLP4
ASGNP4
ADDRLP4 1724
ADDRLP4 1816
INDIRP4
ASGNP4
line 1122
;1122:		if ( !slash ) {
ADDRLP4 1724
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $571
line 1124
;1123:			// modelName didn not include a skin name
;1124:			Q_strncpyz( newInfo.skinName, "default", sizeof( newInfo.skinName ) );
ADDRLP4 0+224
ARGP4
ADDRGP4 $123
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1125
;1125:		} else {
ADDRGP4 $572
JUMPV
LABELV $571
line 1126
;1126:			Q_strncpyz( newInfo.skinName, slash + 1, sizeof( newInfo.skinName ) );
ADDRLP4 0+224
ARGP4
ADDRLP4 1724
INDIRP4
CNSTI4 1
ADDP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1128
;1127:			// truncate modelName
;1128:			*slash = 0;
ADDRLP4 1724
INDIRP4
CNSTI1 0
ASGNI1
line 1129
;1129:		}
LABELV $572
line 1130
;1130:	}
LABELV $546
line 1133
;1131:
;1132:	// head model
;1133:	v = Info_ValueForKey( configstring, "hmodel" );
ADDRLP4 1720
INDIRP4
ARGP4
ADDRGP4 $577
ARGP4
ADDRLP4 1816
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 1716
ADDRLP4 1816
INDIRP4
ASGNP4
line 1134
;1134:	if ( cg_forceModel.integer ) {
ADDRGP4 cg_forceModel+12
INDIRI4
CNSTI4 0
EQI4 $578
line 1140
;1135:		// forcemodel makes everyone use a single model
;1136:		// to prevent load hitches
;1137:		char modelStr[MAX_QPATH];
;1138:		char *skin;
;1139:
;1140:		if( cgs.gametype >= GT_TEAM ) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
LTI4 $581
line 1141
;1141:			Q_strncpyz( newInfo.headModelName, DEFAULT_TEAM_MODEL, sizeof( newInfo.headModelName ) );
ADDRLP4 0+288
ARGP4
ADDRGP4 $426
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1142
;1142:			Q_strncpyz( newInfo.headSkinName, "default", sizeof( newInfo.headSkinName ) );
ADDRLP4 0+352
ARGP4
ADDRGP4 $123
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1143
;1143:		} else {
ADDRGP4 $582
JUMPV
LABELV $581
line 1144
;1144:			trap_Cvar_VariableStringBuffer( "headmodel", modelStr, sizeof( modelStr ) );
ADDRGP4 $588
ARGP4
ADDRLP4 1820
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 trap_Cvar_VariableStringBuffer
CALLV
pop
line 1145
;1145:			if ( ( skin = strchr( modelStr, '/' ) ) == NULL) {
ADDRLP4 1820
ARGP4
CNSTI4 47
ARGI4
ADDRLP4 1888
ADDRGP4 strchr
CALLP4
ASGNP4
ADDRLP4 1884
ADDRLP4 1888
INDIRP4
ASGNP4
ADDRLP4 1888
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $589
line 1146
;1146:				skin = "default";
ADDRLP4 1884
ADDRGP4 $123
ASGNP4
line 1147
;1147:			} else {
ADDRGP4 $590
JUMPV
LABELV $589
line 1148
;1148:				*skin++ = 0;
ADDRLP4 1892
ADDRLP4 1884
INDIRP4
ASGNP4
ADDRLP4 1884
ADDRLP4 1892
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 1892
INDIRP4
CNSTI1 0
ASGNI1
line 1149
;1149:			}
LABELV $590
line 1151
;1150:
;1151:			Q_strncpyz( newInfo.headSkinName, skin, sizeof( newInfo.headSkinName ) );
ADDRLP4 0+352
ARGP4
ADDRLP4 1884
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1152
;1152:			Q_strncpyz( newInfo.headModelName, modelStr, sizeof( newInfo.headModelName ) );
ADDRLP4 0+288
ARGP4
ADDRLP4 1820
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1153
;1153:		}
LABELV $582
line 1155
;1154:
;1155:		if ( cgs.gametype >= GT_TEAM ) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
LTI4 $579
line 1157
;1156:			// keep skin name
;1157:			slash = strchr( v, '/' );
ADDRLP4 1716
INDIRP4
ARGP4
CNSTI4 47
ARGI4
ADDRLP4 1888
ADDRGP4 strchr
CALLP4
ASGNP4
ADDRLP4 1724
ADDRLP4 1888
INDIRP4
ASGNP4
line 1158
;1158:			if ( slash ) {
ADDRLP4 1724
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $579
line 1159
;1159:				Q_strncpyz( newInfo.headSkinName, slash + 1, sizeof( newInfo.headSkinName ) );
ADDRLP4 0+352
ARGP4
ADDRLP4 1724
INDIRP4
CNSTI4 1
ADDP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1160
;1160:			}
line 1161
;1161:		}
line 1162
;1162:	} else {
ADDRGP4 $579
JUMPV
LABELV $578
line 1163
;1163:		Q_strncpyz( newInfo.headModelName, v, sizeof( newInfo.headModelName ) );
ADDRLP4 0+288
ARGP4
ADDRLP4 1716
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1165
;1164:
;1165:		slash = strchr( newInfo.headModelName, '/' );
ADDRLP4 0+288
ARGP4
CNSTI4 47
ARGI4
ADDRLP4 1820
ADDRGP4 strchr
CALLP4
ASGNP4
ADDRLP4 1724
ADDRLP4 1820
INDIRP4
ASGNP4
line 1166
;1166:		if ( !slash ) {
ADDRLP4 1724
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $605
line 1168
;1167:			// modelName didn not include a skin name
;1168:			Q_strncpyz( newInfo.headSkinName, "default", sizeof( newInfo.headSkinName ) );
ADDRLP4 0+352
ARGP4
ADDRGP4 $123
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1169
;1169:		} else {
ADDRGP4 $606
JUMPV
LABELV $605
line 1170
;1170:			Q_strncpyz( newInfo.headSkinName, slash + 1, sizeof( newInfo.headSkinName ) );
ADDRLP4 0+352
ARGP4
ADDRLP4 1724
INDIRP4
CNSTI4 1
ADDP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1172
;1171:			// truncate modelName
;1172:			*slash = 0;
ADDRLP4 1724
INDIRP4
CNSTI1 0
ASGNI1
line 1173
;1173:		}
LABELV $606
line 1174
;1174:	}
LABELV $579
line 1178
;1175:
;1176:	// scan for an existing clientinfo that matches this modelname
;1177:	// so we can avoid loading checks if possible
;1178:	if ( !CG_ScanForExistingClientInfo( &newInfo ) ) {
ADDRLP4 0
ARGP4
ADDRLP4 1820
ADDRGP4 CG_ScanForExistingClientInfo
CALLI4
ASGNI4
ADDRLP4 1820
INDIRI4
CNSTI4 0
NEI4 $611
line 1181
;1179:		qboolean	forceDefer;
;1180:
;1181:		forceDefer = trap_MemoryRemaining() < 4000000;
ADDRLP4 1832
ADDRGP4 trap_MemoryRemaining
CALLI4
ASGNI4
ADDRLP4 1832
INDIRI4
CNSTI4 4000000
GEI4 $614
ADDRLP4 1828
CNSTI4 1
ASGNI4
ADDRGP4 $615
JUMPV
LABELV $614
ADDRLP4 1828
CNSTI4 0
ASGNI4
LABELV $615
ADDRLP4 1824
ADDRLP4 1828
INDIRI4
ASGNI4
line 1184
;1182:
;1183:		// if we are defering loads, just have it pick the first valid
;1184:		if ( forceDefer || (cg_deferPlayers.integer && !cg_buildScript.integer && !cg.loading ) ) {
ADDRLP4 1836
CNSTI4 0
ASGNI4
ADDRLP4 1824
INDIRI4
ADDRLP4 1836
INDIRI4
NEI4 $621
ADDRGP4 cg_deferPlayers+12
INDIRI4
ADDRLP4 1836
INDIRI4
EQI4 $616
ADDRGP4 cg_buildScript+12
INDIRI4
ADDRLP4 1836
INDIRI4
NEI4 $616
ADDRGP4 cg+20
INDIRI4
ADDRLP4 1836
INDIRI4
NEI4 $616
LABELV $621
line 1186
;1185:			// keep whatever they had if it won't violate team skins
;1186:			CG_SetDeferredClientInfo( &newInfo );
ADDRLP4 0
ARGP4
ADDRGP4 CG_SetDeferredClientInfo
CALLV
pop
line 1188
;1187:			// if we are low on memory, leave them with this model
;1188:			if ( forceDefer ) {
ADDRLP4 1824
INDIRI4
CNSTI4 0
EQI4 $617
line 1189
;1189:				CG_Printf( "Memory is low.  Using deferred model.\n" );
ADDRGP4 $624
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 1190
;1190:				newInfo.deferred = qfalse;
ADDRLP4 0+480
CNSTI4 0
ASGNI4
line 1191
;1191:			}
line 1192
;1192:		} else {
ADDRGP4 $617
JUMPV
LABELV $616
line 1193
;1193:			CG_LoadClientInfo( &newInfo );
ADDRLP4 0
ARGP4
ADDRGP4 CG_LoadClientInfo
CALLV
pop
line 1194
;1194:		}
LABELV $617
line 1195
;1195:	}
LABELV $611
line 1198
;1196:
;1197:	// replace whatever was there with the new one
;1198:	newInfo.infoValid = qtrue;
ADDRLP4 0
CNSTI4 1
ASGNI4
line 1199
;1199:	*ci = newInfo;
ADDRLP4 1728
INDIRP4
ADDRLP4 0
INDIRB
ASGNB 1716
line 1200
;1200:}
LABELV $515
endproc CG_NewClientInfo 1896 12
export CG_LoadDeferredPlayers
proc CG_LoadDeferredPlayers 20 4
line 1213
;1201:
;1202:
;1203:
;1204:/*
;1205:======================
;1206:CG_LoadDeferredPlayers
;1207:
;1208:Called each frame when a player is dead
;1209:and the scoreboard is up
;1210:so deferred players can be loaded
;1211:======================
;1212:*/
;1213:void CG_LoadDeferredPlayers( void ) {
line 1218
;1214:	int		i;
;1215:	clientInfo_t	*ci;
;1216:
;1217:	// scan for a deferred player to load
;1218:	for ( i = 0, ci = cgs.clientinfo ; i < cgs.maxclients ; i++, ci++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRLP4 0
ADDRGP4 cgs+40972
ASGNP4
ADDRGP4 $630
JUMPV
LABELV $627
line 1219
;1219:		if ( ci->infoValid && ci->deferred ) {
ADDRLP4 12
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRP4
INDIRI4
ADDRLP4 12
INDIRI4
EQI4 $633
ADDRLP4 0
INDIRP4
CNSTI4 480
ADDP4
INDIRI4
ADDRLP4 12
INDIRI4
EQI4 $633
line 1221
;1220:			// if we are low on memory, leave it deferred
;1221:			if ( trap_MemoryRemaining() < 4000000 ) {
ADDRLP4 16
ADDRGP4 trap_MemoryRemaining
CALLI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 4000000
GEI4 $635
line 1222
;1222:				CG_Printf( "Memory is low.  Using deferred model.\n" );
ADDRGP4 $624
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 1223
;1223:				ci->deferred = qfalse;
ADDRLP4 0
INDIRP4
CNSTI4 480
ADDP4
CNSTI4 0
ASGNI4
line 1224
;1224:				continue;
ADDRGP4 $628
JUMPV
LABELV $635
line 1226
;1225:			}
;1226:			CG_LoadClientInfo( ci );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_LoadClientInfo
CALLV
pop
line 1228
;1227://			break;
;1228:		}
LABELV $633
line 1229
;1229:	}
LABELV $628
line 1218
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 1716
ADDP4
ASGNP4
LABELV $630
ADDRLP4 4
INDIRI4
ADDRGP4 cgs+31480
INDIRI4
LTI4 $627
line 1230
;1230:}
LABELV $626
endproc CG_LoadDeferredPlayers 20 4
proc CG_SetLerpFrameAnimation 12 8
line 1248
;1231:
;1232:/*
;1233:=============================================================================
;1234:
;1235:PLAYER ANIMATION
;1236:
;1237:=============================================================================
;1238:*/
;1239:
;1240:
;1241:/*
;1242:===============
;1243:CG_SetLerpFrameAnimation
;1244:
;1245:may include ANIM_TOGGLEBIT
;1246:===============
;1247:*/
;1248:static void CG_SetLerpFrameAnimation( clientInfo_t *ci, lerpFrame_t *lf, int newAnimation ) {
line 1251
;1249:	animation_t	*anim;
;1250:
;1251:	lf->animationNumber = newAnimation;
ADDRFP4 4
INDIRP4
CNSTI4 36
ADDP4
ADDRFP4 8
INDIRI4
ASGNI4
line 1252
;1252:	newAnimation &= ~ANIM_TOGGLEBIT;
ADDRFP4 8
ADDRFP4 8
INDIRI4
CNSTI4 -129
BANDI4
ASGNI4
line 1254
;1253:
;1254:	if ( newAnimation < 0 || newAnimation >= MAX_TOTALANIMATIONS ) {
ADDRLP4 4
ADDRFP4 8
INDIRI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
LTI4 $640
ADDRLP4 4
INDIRI4
CNSTI4 37
LTI4 $638
LABELV $640
line 1255
;1255:		CG_Error( "Bad animation number: %i", newAnimation );
ADDRGP4 $641
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRGP4 CG_Error
CALLV
pop
line 1256
;1256:	}
LABELV $638
line 1258
;1257:
;1258:	anim = &ci->animations[ newAnimation ];
ADDRLP4 0
CNSTI4 28
ADDRFP4 8
INDIRI4
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 548
ADDP4
ADDP4
ASGNP4
line 1260
;1259:
;1260:	lf->animation = anim;
ADDRFP4 4
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 0
INDIRP4
ASGNP4
line 1261
;1261:	lf->animationTime = lf->frameTime + anim->initialLerp;
ADDRLP4 8
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 8
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ADDI4
ASGNI4
line 1263
;1262:
;1263:	if ( cg_debugAnim.integer ) {
ADDRGP4 cg_debugAnim+12
INDIRI4
CNSTI4 0
EQI4 $642
line 1264
;1264:		CG_Printf( "Anim: %i\n", newAnimation );
ADDRGP4 $645
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRGP4 CG_Printf
CALLV
pop
line 1265
;1265:	}
LABELV $642
line 1266
;1266:}
LABELV $637
endproc CG_SetLerpFrameAnimation 12 8
proc CG_RunLerpFrame 44 12
line 1276
;1267:
;1268:/*
;1269:===============
;1270:CG_RunLerpFrame
;1271:
;1272:Sets cg.snap, cg.oldFrame, and cg.backlerp
;1273:cg.time should be between oldFrameTime and frameTime after exit
;1274:===============
;1275:*/
;1276:static void CG_RunLerpFrame( clientInfo_t *ci, lerpFrame_t *lf, int newAnimation, float speedScale ) {
line 1281
;1277:	int			f, numFrames;
;1278:	animation_t	*anim;
;1279:
;1280:	// debugging tool to get no animations
;1281:	if ( cg_animSpeed.integer == 0 ) {
ADDRGP4 cg_animSpeed+12
INDIRI4
CNSTI4 0
NEI4 $647
line 1282
;1282:		lf->oldFrame = lf->frame = lf->backlerp = 0;
ADDRLP4 12
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 16
CNSTF4 0
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 16
ADDP4
ADDRLP4 16
INDIRF4
ASGNF4
ADDRLP4 20
ADDRLP4 16
INDIRF4
CVFI4 4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 20
INDIRI4
ASGNI4
ADDRLP4 12
INDIRP4
ADDRLP4 20
INDIRI4
ASGNI4
line 1283
;1283:		return;
ADDRGP4 $646
JUMPV
LABELV $647
line 1287
;1284:	}
;1285:
;1286:	// see if the animation sequence is switching
;1287:	if ( newAnimation != lf->animationNumber || !lf->animation ) {
ADDRLP4 12
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 8
INDIRI4
ADDRLP4 12
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
NEI4 $652
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $650
LABELV $652
line 1288
;1288:		CG_SetLerpFrameAnimation( ci, lf, newAnimation );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRGP4 CG_SetLerpFrameAnimation
CALLV
pop
line 1289
;1289:	}
LABELV $650
line 1293
;1290:
;1291:	// if we have passed the current frame, move it to
;1292:	// oldFrame and calculate a new frame
;1293:	if ( cg.time >= lf->frameTime ) {
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
LTI4 $653
line 1294
;1294:		lf->oldFrame = lf->frame;
ADDRLP4 16
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ASGNI4
line 1295
;1295:		lf->oldFrameTime = lf->frameTime;
ADDRLP4 20
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 20
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ASGNI4
line 1298
;1296:
;1297:		// get the next frame based on the animation
;1298:		anim = lf->animation;
ADDRLP4 0
ADDRFP4 4
INDIRP4
CNSTI4 40
ADDP4
INDIRP4
ASGNP4
line 1299
;1299:		if ( !anim->frameLerp ) {
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 0
NEI4 $656
line 1300
;1300:			return;		// shouldn't happen
ADDRGP4 $646
JUMPV
LABELV $656
line 1302
;1301:		}
;1302:		if ( cg.time < lf->animationTime ) {
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
GEI4 $658
line 1303
;1303:			lf->frameTime = lf->animationTime;		// initial lerp
ADDRLP4 24
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 24
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
ASGNI4
line 1304
;1304:		} else {
ADDRGP4 $659
JUMPV
LABELV $658
line 1305
;1305:			lf->frameTime = lf->oldFrameTime + anim->frameLerp;
ADDRLP4 24
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 28
CNSTI4 12
ASGNI4
ADDRLP4 24
INDIRP4
ADDRLP4 28
INDIRI4
ADDP4
ADDRLP4 24
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
ADDRLP4 28
INDIRI4
ADDP4
INDIRI4
ADDI4
ASGNI4
line 1306
;1306:		}
LABELV $659
line 1307
;1307:		f = ( lf->frameTime - lf->animationTime ) / anim->frameLerp;
ADDRLP4 24
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 28
CNSTI4 12
ASGNI4
ADDRLP4 4
ADDRLP4 24
INDIRP4
ADDRLP4 28
INDIRI4
ADDP4
INDIRI4
ADDRLP4 24
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
SUBI4
ADDRLP4 0
INDIRP4
ADDRLP4 28
INDIRI4
ADDP4
INDIRI4
DIVI4
ASGNI4
line 1308
;1308:		f *= speedScale;		// adjust for haste, etc
ADDRLP4 4
ADDRLP4 4
INDIRI4
CVIF4 4
ADDRFP4 12
INDIRF4
MULF4
CVFI4 4
ASGNI4
line 1310
;1309:
;1310:		numFrames = anim->numFrames;
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 1311
;1311:		if (anim->flipflop) {
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
CNSTI4 0
EQI4 $661
line 1312
;1312:			numFrames *= 2;
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 1
LSHI4
ASGNI4
line 1313
;1313:		}
LABELV $661
line 1314
;1314:		if ( f >= numFrames ) {
ADDRLP4 4
INDIRI4
ADDRLP4 8
INDIRI4
LTI4 $663
line 1315
;1315:			f -= numFrames;
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 8
INDIRI4
SUBI4
ASGNI4
line 1316
;1316:			if ( anim->loopFrames ) {
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 0
EQI4 $665
line 1317
;1317:				f %= anim->loopFrames;
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
MODI4
ASGNI4
line 1318
;1318:				f += anim->numFrames - anim->loopFrames;
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
SUBI4
ADDI4
ASGNI4
line 1319
;1319:			} else {
ADDRGP4 $666
JUMPV
LABELV $665
line 1320
;1320:				f = numFrames - 1;
ADDRLP4 4
ADDRLP4 8
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 1323
;1321:				// the animation is stuck at the end, so it
;1322:				// can immediately transition to another sequence
;1323:				lf->frameTime = cg.time;
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1324
;1324:			}
LABELV $666
line 1325
;1325:		}
LABELV $663
line 1326
;1326:		if ( anim->reversed ) {
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CNSTI4 0
EQI4 $668
line 1327
;1327:			lf->frame = anim->firstFrame + anim->numFrames - 1 - f;
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 0
INDIRP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ADDI4
CNSTI4 1
SUBI4
ADDRLP4 4
INDIRI4
SUBI4
ASGNI4
line 1328
;1328:		}
ADDRGP4 $669
JUMPV
LABELV $668
line 1329
;1329:		else if (anim->flipflop && f>=anim->numFrames) {
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
CNSTI4 0
EQI4 $670
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
LTI4 $670
line 1330
;1330:			lf->frame = anim->firstFrame + anim->numFrames - 1 - (f%anim->numFrames);
ADDRLP4 40
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 0
INDIRP4
INDIRI4
ADDRLP4 40
INDIRI4
ADDI4
CNSTI4 1
SUBI4
ADDRLP4 4
INDIRI4
ADDRLP4 40
INDIRI4
MODI4
SUBI4
ASGNI4
line 1331
;1331:		}
ADDRGP4 $671
JUMPV
LABELV $670
line 1332
;1332:		else {
line 1333
;1333:			lf->frame = anim->firstFrame + f;
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 0
INDIRP4
INDIRI4
ADDRLP4 4
INDIRI4
ADDI4
ASGNI4
line 1334
;1334:		}
LABELV $671
LABELV $669
line 1335
;1335:		if ( cg.time > lf->frameTime ) {
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
LEI4 $672
line 1336
;1336:			lf->frameTime = cg.time;
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1337
;1337:			if ( cg_debugAnim.integer ) {
ADDRGP4 cg_debugAnim+12
INDIRI4
CNSTI4 0
EQI4 $676
line 1338
;1338:				CG_Printf( "Clamp lf->frameTime\n");
ADDRGP4 $679
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 1339
;1339:			}
LABELV $676
line 1340
;1340:		}
LABELV $672
line 1341
;1341:	}
LABELV $653
line 1343
;1342:
;1343:	if ( lf->frameTime > cg.time + 200 ) {
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 200
ADDI4
LEI4 $680
line 1344
;1344:		lf->frameTime = cg.time;
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1345
;1345:	}
LABELV $680
line 1347
;1346:
;1347:	if ( lf->oldFrameTime > cg.time ) {
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
LEI4 $684
line 1348
;1348:		lf->oldFrameTime = cg.time;
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1349
;1349:	}
LABELV $684
line 1351
;1350:	// calculate current lerp value
;1351:	if ( lf->frameTime == lf->oldFrameTime ) {
ADDRLP4 16
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
NEI4 $688
line 1352
;1352:		lf->backlerp = 0;
ADDRFP4 4
INDIRP4
CNSTI4 16
ADDP4
CNSTF4 0
ASGNF4
line 1353
;1353:	} else {
ADDRGP4 $689
JUMPV
LABELV $688
line 1354
;1354:		lf->backlerp = 1.0 - (float)( cg.time - lf->oldFrameTime ) / ( lf->frameTime - lf->oldFrameTime );
ADDRLP4 20
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 24
ADDRLP4 20
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
ADDRLP4 20
INDIRP4
CNSTI4 16
ADDP4
CNSTF4 1065353216
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 24
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 20
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ADDRLP4 24
INDIRI4
SUBI4
CVIF4 4
DIVF4
SUBF4
ASGNF4
line 1355
;1355:	}
LABELV $689
line 1356
;1356:}
LABELV $646
endproc CG_RunLerpFrame 44 12
proc CG_ClearLerpFrame 16 12
line 1364
;1357:
;1358:
;1359:/*
;1360:===============
;1361:CG_ClearLerpFrame
;1362:===============
;1363:*/
;1364:static void CG_ClearLerpFrame( clientInfo_t *ci, lerpFrame_t *lf, int animationNumber ) {
line 1365
;1365:	lf->frameTime = lf->oldFrameTime = cg.time;
ADDRLP4 0
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 4
INDIRI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 4
INDIRI4
ASGNI4
line 1366
;1366:	CG_SetLerpFrameAnimation( ci, lf, animationNumber );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRGP4 CG_SetLerpFrameAnimation
CALLV
pop
line 1367
;1367:	lf->oldFrame = lf->frame = lf->animation->firstFrame;
ADDRLP4 8
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 8
INDIRP4
CNSTI4 40
ADDP4
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 12
INDIRI4
ASGNI4
ADDRLP4 8
INDIRP4
ADDRLP4 12
INDIRI4
ASGNI4
line 1368
;1368:}
LABELV $691
endproc CG_ClearLerpFrame 16 12
proc CG_PlayerAnimation 20 16
line 1377
;1369:
;1370:
;1371:/*
;1372:===============
;1373:CG_PlayerAnimation
;1374:===============
;1375:*/
;1376:static void CG_PlayerAnimation( centity_t *cent, int *legsOld, int *legs, float *legsBackLerp,
;1377:						int *torsoOld, int *torso, float *torsoBackLerp ) {
line 1382
;1378:	clientInfo_t	*ci;
;1379:	int				clientNum;
;1380:	float			speedScale;
;1381:
;1382:	clientNum = cent->currentState.clientNum;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
ASGNI4
line 1384
;1383:
;1384:	if ( cg_noPlayerAnims.integer ) {
ADDRGP4 cg_noPlayerAnims+12
INDIRI4
CNSTI4 0
EQI4 $694
line 1385
;1385:		*legsOld = *legs = *torsoOld = *torso = 0;
ADDRLP4 12
CNSTI4 0
ASGNI4
ADDRFP4 20
INDIRP4
ADDRLP4 12
INDIRI4
ASGNI4
ADDRFP4 16
INDIRP4
ADDRLP4 12
INDIRI4
ASGNI4
ADDRFP4 8
INDIRP4
ADDRLP4 12
INDIRI4
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 12
INDIRI4
ASGNI4
line 1386
;1386:		return;
ADDRGP4 $693
JUMPV
LABELV $694
line 1389
;1387:	}
;1388:
;1389:	if ( cent->currentState.powerups & ( 1 << PW_HASTE ) ) {
ADDRFP4 0
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
EQI4 $697
line 1390
;1390:		speedScale = 1.5;
ADDRLP4 4
CNSTF4 1069547520
ASGNF4
line 1391
;1391:	} else {
ADDRGP4 $698
JUMPV
LABELV $697
line 1392
;1392:		speedScale = 1;
ADDRLP4 4
CNSTF4 1065353216
ASGNF4
line 1393
;1393:	}
LABELV $698
line 1395
;1394:
;1395:	ci = &cgs.clientinfo[ clientNum ];
ADDRLP4 0
CNSTI4 1716
ADDRLP4 8
INDIRI4
MULI4
ADDRGP4 cgs+40972
ADDP4
ASGNP4
line 1398
;1396:
;1397:	// do the shuffle turn frames locally
;1398:	if ( cent->pe.legs.yawing && ( cent->currentState.legsAnim & ~ANIM_TOGGLEBIT ) == LEGS_IDLE ) {
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 476
ADDP4
INDIRI4
CNSTI4 0
EQI4 $700
ADDRLP4 12
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
CNSTI4 -129
BANDI4
CNSTI4 22
NEI4 $700
line 1399
;1399:		CG_RunLerpFrame( ci, &cent->pe.legs, LEGS_TURN, speedScale );
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 452
ADDP4
ARGP4
CNSTI4 24
ARGI4
ADDRLP4 4
INDIRF4
ARGF4
ADDRGP4 CG_RunLerpFrame
CALLV
pop
line 1400
;1400:	} else {
ADDRGP4 $701
JUMPV
LABELV $700
line 1401
;1401:		CG_RunLerpFrame( ci, &cent->pe.legs, cent->currentState.legsAnim, speedScale );
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 452
ADDP4
ARGP4
ADDRLP4 16
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
ARGI4
ADDRLP4 4
INDIRF4
ARGF4
ADDRGP4 CG_RunLerpFrame
CALLV
pop
line 1402
;1402:	}
LABELV $701
line 1404
;1403:
;1404:	*legsOld = cent->pe.legs.oldFrame;
ADDRFP4 4
INDIRP4
ADDRFP4 0
INDIRP4
CNSTI4 452
ADDP4
INDIRI4
ASGNI4
line 1405
;1405:	*legs = cent->pe.legs.frame;
ADDRFP4 8
INDIRP4
ADDRFP4 0
INDIRP4
CNSTI4 460
ADDP4
INDIRI4
ASGNI4
line 1406
;1406:	*legsBackLerp = cent->pe.legs.backlerp;
ADDRFP4 12
INDIRP4
ADDRFP4 0
INDIRP4
CNSTI4 468
ADDP4
INDIRF4
ASGNF4
line 1408
;1407:
;1408:	CG_RunLerpFrame( ci, &cent->pe.torso, cent->currentState.torsoAnim, speedScale );
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 500
ADDP4
ARGP4
ADDRLP4 16
INDIRP4
CNSTI4 200
ADDP4
INDIRI4
ARGI4
ADDRLP4 4
INDIRF4
ARGF4
ADDRGP4 CG_RunLerpFrame
CALLV
pop
line 1410
;1409:
;1410:	*torsoOld = cent->pe.torso.oldFrame;
ADDRFP4 16
INDIRP4
ADDRFP4 0
INDIRP4
CNSTI4 500
ADDP4
INDIRI4
ASGNI4
line 1411
;1411:	*torso = cent->pe.torso.frame;
ADDRFP4 20
INDIRP4
ADDRFP4 0
INDIRP4
CNSTI4 508
ADDP4
INDIRI4
ASGNI4
line 1412
;1412:	*torsoBackLerp = cent->pe.torso.backlerp;
ADDRFP4 24
INDIRP4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRF4
ASGNF4
line 1413
;1413:}
LABELV $693
endproc CG_PlayerAnimation 20 16
proc CG_SwingAngles 28 8
line 1429
;1414:
;1415:/*
;1416:=============================================================================
;1417:
;1418:PLAYER ANGLES
;1419:
;1420:=============================================================================
;1421:*/
;1422:
;1423:/*
;1424:==================
;1425:CG_SwingAngles
;1426:==================
;1427:*/
;1428:static void CG_SwingAngles( float destination, float swingTolerance, float clampTolerance,
;1429:					float speed, float *angle, qboolean *swinging ) {
line 1434
;1430:	float	swing;
;1431:	float	move;
;1432:	float	scale;
;1433:
;1434:	if ( !*swinging ) {
ADDRFP4 20
INDIRP4
INDIRI4
CNSTI4 0
NEI4 $703
line 1436
;1435:		// see if a swing should be started
;1436:		swing = AngleSubtract( *angle, destination );
ADDRFP4 16
INDIRP4
INDIRF4
ARGF4
ADDRFP4 0
INDIRF4
ARGF4
ADDRLP4 12
ADDRGP4 AngleSubtract
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 12
INDIRF4
ASGNF4
line 1437
;1437:		if ( swing > swingTolerance || swing < -swingTolerance ) {
ADDRLP4 20
ADDRFP4 4
INDIRF4
ASGNF4
ADDRLP4 0
INDIRF4
ADDRLP4 20
INDIRF4
GTF4 $707
ADDRLP4 0
INDIRF4
ADDRLP4 20
INDIRF4
NEGF4
GEF4 $705
LABELV $707
line 1438
;1438:			*swinging = qtrue;
ADDRFP4 20
INDIRP4
CNSTI4 1
ASGNI4
line 1439
;1439:		}
LABELV $705
line 1440
;1440:	}
LABELV $703
line 1442
;1441:
;1442:	if ( !*swinging ) {
ADDRFP4 20
INDIRP4
INDIRI4
CNSTI4 0
NEI4 $708
line 1443
;1443:		return;
ADDRGP4 $702
JUMPV
LABELV $708
line 1448
;1444:	}
;1445:	
;1446:	// modify the speed depending on the delta
;1447:	// so it doesn't seem so linear
;1448:	swing = AngleSubtract( destination, *angle );
ADDRFP4 0
INDIRF4
ARGF4
ADDRFP4 16
INDIRP4
INDIRF4
ARGF4
ADDRLP4 12
ADDRGP4 AngleSubtract
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 12
INDIRF4
ASGNF4
line 1449
;1449:	scale = fabs( swing );
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 16
ADDRGP4 fabs
CALLF4
ASGNF4
ADDRLP4 4
ADDRLP4 16
INDIRF4
ASGNF4
line 1450
;1450:	if ( scale < swingTolerance * 0.5 ) {
ADDRLP4 4
INDIRF4
CNSTF4 1056964608
ADDRFP4 4
INDIRF4
MULF4
GEF4 $710
line 1451
;1451:		scale = 0.5;
ADDRLP4 4
CNSTF4 1056964608
ASGNF4
line 1452
;1452:	} else if ( scale < swingTolerance ) {
ADDRGP4 $711
JUMPV
LABELV $710
ADDRLP4 4
INDIRF4
ADDRFP4 4
INDIRF4
GEF4 $712
line 1453
;1453:		scale = 1.0;
ADDRLP4 4
CNSTF4 1065353216
ASGNF4
line 1454
;1454:	} else {
ADDRGP4 $713
JUMPV
LABELV $712
line 1455
;1455:		scale = 2.0;
ADDRLP4 4
CNSTF4 1073741824
ASGNF4
line 1456
;1456:	}
LABELV $713
LABELV $711
line 1459
;1457:
;1458:	// swing towards the destination angle
;1459:	if ( swing >= 0 ) {
ADDRLP4 0
INDIRF4
CNSTF4 0
LTF4 $714
line 1460
;1460:		move = cg.frametime * scale * speed;
ADDRLP4 8
ADDRGP4 cg+107600
INDIRI4
CVIF4 4
ADDRLP4 4
INDIRF4
MULF4
ADDRFP4 12
INDIRF4
MULF4
ASGNF4
line 1461
;1461:		if ( move >= swing ) {
ADDRLP4 8
INDIRF4
ADDRLP4 0
INDIRF4
LTF4 $717
line 1462
;1462:			move = swing;
ADDRLP4 8
ADDRLP4 0
INDIRF4
ASGNF4
line 1463
;1463:			*swinging = qfalse;
ADDRFP4 20
INDIRP4
CNSTI4 0
ASGNI4
line 1464
;1464:		}
LABELV $717
line 1465
;1465:		*angle = AngleMod( *angle + move );
ADDRLP4 20
ADDRFP4 16
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
INDIRF4
ADDRLP4 8
INDIRF4
ADDF4
ARGF4
ADDRLP4 24
ADDRGP4 AngleMod
CALLF4
ASGNF4
ADDRLP4 20
INDIRP4
ADDRLP4 24
INDIRF4
ASGNF4
line 1466
;1466:	} else if ( swing < 0 ) {
ADDRGP4 $715
JUMPV
LABELV $714
ADDRLP4 0
INDIRF4
CNSTF4 0
GEF4 $719
line 1467
;1467:		move = cg.frametime * scale * -speed;
ADDRLP4 8
ADDRGP4 cg+107600
INDIRI4
CVIF4 4
ADDRLP4 4
INDIRF4
MULF4
ADDRFP4 12
INDIRF4
NEGF4
MULF4
ASGNF4
line 1468
;1468:		if ( move <= swing ) {
ADDRLP4 8
INDIRF4
ADDRLP4 0
INDIRF4
GTF4 $722
line 1469
;1469:			move = swing;
ADDRLP4 8
ADDRLP4 0
INDIRF4
ASGNF4
line 1470
;1470:			*swinging = qfalse;
ADDRFP4 20
INDIRP4
CNSTI4 0
ASGNI4
line 1471
;1471:		}
LABELV $722
line 1472
;1472:		*angle = AngleMod( *angle + move );
ADDRLP4 20
ADDRFP4 16
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
INDIRF4
ADDRLP4 8
INDIRF4
ADDF4
ARGF4
ADDRLP4 24
ADDRGP4 AngleMod
CALLF4
ASGNF4
ADDRLP4 20
INDIRP4
ADDRLP4 24
INDIRF4
ASGNF4
line 1473
;1473:	}
LABELV $719
LABELV $715
line 1476
;1474:
;1475:	// clamp to no more than tolerance
;1476:	swing = AngleSubtract( destination, *angle );
ADDRFP4 0
INDIRF4
ARGF4
ADDRFP4 16
INDIRP4
INDIRF4
ARGF4
ADDRLP4 20
ADDRGP4 AngleSubtract
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 20
INDIRF4
ASGNF4
line 1477
;1477:	if ( swing > clampTolerance ) {
ADDRLP4 0
INDIRF4
ADDRFP4 8
INDIRF4
LEF4 $724
line 1478
;1478:		*angle = AngleMod( destination - (clampTolerance - 1) );
ADDRFP4 0
INDIRF4
ADDRFP4 8
INDIRF4
CNSTF4 1065353216
SUBF4
SUBF4
ARGF4
ADDRLP4 24
ADDRGP4 AngleMod
CALLF4
ASGNF4
ADDRFP4 16
INDIRP4
ADDRLP4 24
INDIRF4
ASGNF4
line 1479
;1479:	} else if ( swing < -clampTolerance ) {
ADDRGP4 $725
JUMPV
LABELV $724
ADDRLP4 0
INDIRF4
ADDRFP4 8
INDIRF4
NEGF4
GEF4 $726
line 1480
;1480:		*angle = AngleMod( destination + (clampTolerance - 1) );
ADDRFP4 0
INDIRF4
ADDRFP4 8
INDIRF4
CNSTF4 1065353216
SUBF4
ADDF4
ARGF4
ADDRLP4 24
ADDRGP4 AngleMod
CALLF4
ASGNF4
ADDRFP4 16
INDIRP4
ADDRLP4 24
INDIRF4
ASGNF4
line 1481
;1481:	}
LABELV $726
LABELV $725
line 1482
;1482:}
LABELV $702
endproc CG_SwingAngles 28 8
proc CG_AddPainTwitch 12 0
line 1489
;1483:
;1484:/*
;1485:=================
;1486:CG_AddPainTwitch
;1487:=================
;1488:*/
;1489:static void CG_AddPainTwitch( centity_t *cent, vec3_t torsoAngles ) {
line 1493
;1490:	int		t;
;1491:	float	f;
;1492:
;1493:	t = cg.time - cent->pe.painTime;
ADDRLP4 0
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 596
ADDP4
INDIRI4
SUBI4
ASGNI4
line 1494
;1494:	if ( t >= PAIN_TWITCH_TIME ) {
ADDRLP4 0
INDIRI4
CNSTI4 200
LTI4 $730
line 1495
;1495:		return;
ADDRGP4 $728
JUMPV
LABELV $730
line 1498
;1496:	}
;1497:
;1498:	f = 1.0 - (float)t / PAIN_TWITCH_TIME;
ADDRLP4 4
CNSTF4 1065353216
ADDRLP4 0
INDIRI4
CVIF4 4
CNSTF4 1128792064
DIVF4
SUBF4
ASGNF4
line 1500
;1499:
;1500:	if ( cent->pe.painDirection ) {
ADDRFP4 0
INDIRP4
CNSTI4 600
ADDP4
INDIRI4
CNSTI4 0
EQI4 $732
line 1501
;1501:		torsoAngles[ROLL] += 20 * f;
ADDRLP4 8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRF4
CNSTF4 1101004800
ADDRLP4 4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1502
;1502:	} else {
ADDRGP4 $733
JUMPV
LABELV $732
line 1503
;1503:		torsoAngles[ROLL] -= 20 * f;
ADDRLP4 8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRF4
CNSTF4 1101004800
ADDRLP4 4
INDIRF4
MULF4
SUBF4
ASGNF4
line 1504
;1504:	}
LABELV $733
line 1505
;1505:}
LABELV $728
endproc CG_AddPainTwitch 12 0
data
align 4
LABELV $735
byte 4 0
byte 4 22
byte 4 45
byte 4 -22
byte 4 0
byte 4 22
byte 4 -45
byte 4 -22
code
proc CG_PlayerAngles 148 24
line 1522
;1506:
;1507:
;1508:/*
;1509:===============
;1510:CG_PlayerAngles
;1511:
;1512:Handles seperate torso motion
;1513:
;1514:  legs pivot based on direction of movement
;1515:
;1516:  head always looks exactly at cent->lerpAngles
;1517:
;1518:  if motion < 20 degrees, show in head only
;1519:  if < 45 degrees, also show in torso
;1520:===============
;1521:*/
;1522:static void CG_PlayerAngles( centity_t *cent, vec3_t legs[3], vec3_t torso[3], vec3_t head[3] ) {
line 1531
;1523:	vec3_t		legsAngles, torsoAngles, headAngles;
;1524:	float		dest;
;1525:	static	int	movementOffsets[8] = { 0, 22, 45, -22, 0, 22, -45, -22 };
;1526:	vec3_t		velocity;
;1527:	float		speed;
;1528:	int			dir, clientNum;
;1529:	clientInfo_t	*ci;
;1530:
;1531:	VectorCopy( cent->lerpAngles, headAngles );
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 720
ADDP4
INDIRB
ASGNB 12
line 1532
;1532:	headAngles[YAW] = AngleMod( headAngles[YAW] );
ADDRLP4 24+4
INDIRF4
ARGF4
ADDRLP4 68
ADDRGP4 AngleMod
CALLF4
ASGNF4
ADDRLP4 24+4
ADDRLP4 68
INDIRF4
ASGNF4
line 1533
;1533:	VectorClear( legsAngles );
ADDRLP4 72
CNSTF4 0
ASGNF4
ADDRLP4 12+8
ADDRLP4 72
INDIRF4
ASGNF4
ADDRLP4 12+4
ADDRLP4 72
INDIRF4
ASGNF4
ADDRLP4 12
ADDRLP4 72
INDIRF4
ASGNF4
line 1534
;1534:	VectorClear( torsoAngles );
ADDRLP4 76
CNSTF4 0
ASGNF4
ADDRLP4 0+8
ADDRLP4 76
INDIRF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 76
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 76
INDIRF4
ASGNF4
line 1539
;1535:
;1536:	// --------- yaw -------------
;1537:
;1538:	// allow yaw to drift a bit
;1539:	if ( ( cent->currentState.legsAnim & ~ANIM_TOGGLEBIT ) != LEGS_IDLE 
ADDRLP4 80
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 84
CNSTI4 -129
ASGNI4
ADDRLP4 80
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
ADDRLP4 84
INDIRI4
BANDI4
CNSTI4 22
NEI4 $744
ADDRLP4 80
INDIRP4
CNSTI4 200
ADDP4
INDIRI4
ADDRLP4 84
INDIRI4
BANDI4
CNSTI4 11
EQI4 $742
LABELV $744
line 1540
;1540:		|| ( cent->currentState.torsoAnim & ~ANIM_TOGGLEBIT ) != TORSO_STAND  ) {
line 1542
;1541:		// if not standing still, always point all in the same direction
;1542:		cent->pe.torso.yawing = qtrue;	// always center
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
CNSTI4 1
ASGNI4
line 1543
;1543:		cent->pe.torso.pitching = qtrue;	// always center
ADDRFP4 0
INDIRP4
CNSTI4 532
ADDP4
CNSTI4 1
ASGNI4
line 1544
;1544:		cent->pe.legs.yawing = qtrue;	// always center
ADDRFP4 0
INDIRP4
CNSTI4 476
ADDP4
CNSTI4 1
ASGNI4
line 1545
;1545:	}
LABELV $742
line 1548
;1546:
;1547:	// adjust legs for movement dir
;1548:	if ( cent->currentState.eFlags & EF_DEAD ) {
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $745
line 1550
;1549:		// don't let dead bodies twitch
;1550:		dir = 0;
ADDRLP4 52
CNSTI4 0
ASGNI4
line 1551
;1551:	} else {
ADDRGP4 $746
JUMPV
LABELV $745
line 1552
;1552:		dir = cent->currentState.angles2[YAW];
ADDRLP4 52
ADDRFP4 0
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
CVFI4 4
ASGNI4
line 1553
;1553:		if ( dir < 0 || dir > 7 ) {
ADDRLP4 52
INDIRI4
CNSTI4 0
LTI4 $749
ADDRLP4 52
INDIRI4
CNSTI4 7
LEI4 $747
LABELV $749
line 1554
;1554:			CG_Error( "Bad player movement angle" );
ADDRGP4 $750
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 1555
;1555:		}
LABELV $747
line 1556
;1556:	}
LABELV $746
line 1557
;1557:	legsAngles[YAW] = headAngles[YAW] + movementOffsets[ dir ];
ADDRLP4 12+4
ADDRLP4 24+4
INDIRF4
ADDRLP4 52
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $735
ADDP4
INDIRI4
CVIF4 4
ADDF4
ASGNF4
line 1558
;1558:	torsoAngles[YAW] = headAngles[YAW] + 0.25 * movementOffsets[ dir ];
ADDRLP4 0+4
ADDRLP4 24+4
INDIRF4
CNSTF4 1048576000
ADDRLP4 52
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $735
ADDP4
INDIRI4
CVIF4 4
MULF4
ADDF4
ASGNF4
line 1561
;1559:
;1560:	// torso
;1561:	CG_SwingAngles( torsoAngles[YAW], 25, 90, cg_swingSpeed.value, &cent->pe.torso.yawAngle, &cent->pe.torso.yawing );
ADDRLP4 0+4
INDIRF4
ARGF4
CNSTF4 1103626240
ARGF4
CNSTF4 1119092736
ARGF4
ADDRGP4 cg_swingSpeed+8
INDIRF4
ARGF4
ADDRLP4 88
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 88
INDIRP4
CNSTI4 520
ADDP4
ARGP4
ADDRLP4 88
INDIRP4
CNSTI4 524
ADDP4
ARGP4
ADDRGP4 CG_SwingAngles
CALLV
pop
line 1562
;1562:	CG_SwingAngles( legsAngles[YAW], 40, 90, cg_swingSpeed.value, &cent->pe.legs.yawAngle, &cent->pe.legs.yawing );
ADDRLP4 12+4
INDIRF4
ARGF4
CNSTF4 1109393408
ARGF4
CNSTF4 1119092736
ARGF4
ADDRGP4 cg_swingSpeed+8
INDIRF4
ARGF4
ADDRLP4 92
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 92
INDIRP4
CNSTI4 472
ADDP4
ARGP4
ADDRLP4 92
INDIRP4
CNSTI4 476
ADDP4
ARGP4
ADDRGP4 CG_SwingAngles
CALLV
pop
line 1564
;1563:
;1564:	torsoAngles[YAW] = cent->pe.torso.yawAngle;
ADDRLP4 0+4
ADDRFP4 0
INDIRP4
CNSTI4 520
ADDP4
INDIRF4
ASGNF4
line 1565
;1565:	legsAngles[YAW] = cent->pe.legs.yawAngle;
ADDRLP4 12+4
ADDRFP4 0
INDIRP4
CNSTI4 472
ADDP4
INDIRF4
ASGNF4
line 1571
;1566:
;1567:
;1568:	// --------- pitch -------------
;1569:
;1570:	// only show a fraction of the pitch angle in the torso
;1571:	if ( headAngles[PITCH] > 180 ) {
ADDRLP4 24
INDIRF4
CNSTF4 1127481344
LEF4 $761
line 1572
;1572:		dest = (-360 + headAngles[PITCH]) * 0.75f;
ADDRLP4 60
CNSTF4 1061158912
ADDRLP4 24
INDIRF4
CNSTF4 3283353600
ADDF4
MULF4
ASGNF4
line 1573
;1573:	} else {
ADDRGP4 $762
JUMPV
LABELV $761
line 1574
;1574:		dest = headAngles[PITCH] * 0.75f;
ADDRLP4 60
CNSTF4 1061158912
ADDRLP4 24
INDIRF4
MULF4
ASGNF4
line 1575
;1575:	}
LABELV $762
line 1576
;1576:	CG_SwingAngles( dest, 15, 30, 0.1f, &cent->pe.torso.pitchAngle, &cent->pe.torso.pitching );
ADDRLP4 60
INDIRF4
ARGF4
CNSTF4 1097859072
ARGF4
CNSTF4 1106247680
ARGF4
CNSTF4 1036831949
ARGF4
ADDRLP4 96
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 96
INDIRP4
CNSTI4 528
ADDP4
ARGP4
ADDRLP4 96
INDIRP4
CNSTI4 532
ADDP4
ARGP4
ADDRGP4 CG_SwingAngles
CALLV
pop
line 1577
;1577:	torsoAngles[PITCH] = cent->pe.torso.pitchAngle;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 528
ADDP4
INDIRF4
ASGNF4
line 1580
;1578:
;1579:	//
;1580:	clientNum = cent->currentState.clientNum;
ADDRLP4 36
ADDRFP4 0
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
ASGNI4
line 1581
;1581:	if ( clientNum >= 0 && clientNum < MAX_CLIENTS ) {
ADDRLP4 36
INDIRI4
CNSTI4 0
LTI4 $763
ADDRLP4 36
INDIRI4
CNSTI4 64
GEI4 $763
line 1582
;1582:		ci = &cgs.clientinfo[ clientNum ];
ADDRLP4 64
CNSTI4 1716
ADDRLP4 36
INDIRI4
MULI4
ADDRGP4 cgs+40972
ADDP4
ASGNP4
line 1583
;1583:		if ( ci->fixedtorso ) {
ADDRLP4 64
INDIRP4
CNSTI4 492
ADDP4
INDIRI4
CNSTI4 0
EQI4 $766
line 1584
;1584:			torsoAngles[PITCH] = 0.0f;
ADDRLP4 0
CNSTF4 0
ASGNF4
line 1585
;1585:		}
LABELV $766
line 1586
;1586:	}
LABELV $763
line 1592
;1587:
;1588:	// --------- roll -------------
;1589:
;1590:
;1591:	// lean towards the direction of travel
;1592:	VectorCopy( cent->currentState.pos.trDelta, velocity );
ADDRLP4 40
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
INDIRB
ASGNB 12
line 1593
;1593:	speed = VectorNormalize( velocity );
ADDRLP4 40
ARGP4
ADDRLP4 104
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 56
ADDRLP4 104
INDIRF4
ASGNF4
line 1594
;1594:	if ( speed ) {
ADDRLP4 56
INDIRF4
CNSTF4 0
EQF4 $768
line 1598
;1595:		vec3_t	axis[3];
;1596:		float	side;
;1597:
;1598:		speed *= 0.05f;
ADDRLP4 56
CNSTF4 1028443341
ADDRLP4 56
INDIRF4
MULF4
ASGNF4
line 1600
;1599:
;1600:		AnglesToAxis( legsAngles, axis );
ADDRLP4 12
ARGP4
ADDRLP4 108
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1601
;1601:		side = speed * DotProduct( velocity, axis[1] );
ADDRLP4 144
ADDRLP4 56
INDIRF4
ADDRLP4 40
INDIRF4
ADDRLP4 108+12
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 108+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 108+12+8
INDIRF4
MULF4
ADDF4
MULF4
ASGNF4
line 1602
;1602:		legsAngles[ROLL] -= side;
ADDRLP4 12+8
ADDRLP4 12+8
INDIRF4
ADDRLP4 144
INDIRF4
SUBF4
ASGNF4
line 1604
;1603:
;1604:		side = speed * DotProduct( velocity, axis[0] );
ADDRLP4 144
ADDRLP4 56
INDIRF4
ADDRLP4 40
INDIRF4
ADDRLP4 108
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 108+4
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 108+8
INDIRF4
MULF4
ADDF4
MULF4
ASGNF4
line 1605
;1605:		legsAngles[PITCH] += side;
ADDRLP4 12
ADDRLP4 12
INDIRF4
ADDRLP4 144
INDIRF4
ADDF4
ASGNF4
line 1606
;1606:	}
LABELV $768
line 1609
;1607:
;1608:	//
;1609:	clientNum = cent->currentState.clientNum;
ADDRLP4 36
ADDRFP4 0
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
ASGNI4
line 1610
;1610:	if ( clientNum >= 0 && clientNum < MAX_CLIENTS ) {
ADDRLP4 36
INDIRI4
CNSTI4 0
LTI4 $782
ADDRLP4 36
INDIRI4
CNSTI4 64
GEI4 $782
line 1611
;1611:		ci = &cgs.clientinfo[ clientNum ];
ADDRLP4 64
CNSTI4 1716
ADDRLP4 36
INDIRI4
MULI4
ADDRGP4 cgs+40972
ADDP4
ASGNP4
line 1612
;1612:		if ( ci->fixedlegs ) {
ADDRLP4 64
INDIRP4
CNSTI4 488
ADDP4
INDIRI4
CNSTI4 0
EQI4 $785
line 1613
;1613:			legsAngles[YAW] = torsoAngles[YAW];
ADDRLP4 12+4
ADDRLP4 0+4
INDIRF4
ASGNF4
line 1614
;1614:			legsAngles[PITCH] = 0.0f;
ADDRLP4 12
CNSTF4 0
ASGNF4
line 1615
;1615:			legsAngles[ROLL] = 0.0f;
ADDRLP4 12+8
CNSTF4 0
ASGNF4
line 1616
;1616:		}
LABELV $785
line 1617
;1617:	}
LABELV $782
line 1620
;1618:
;1619:	// pain twitch
;1620:	CG_AddPainTwitch( cent, torsoAngles );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 CG_AddPainTwitch
CALLV
pop
line 1623
;1621:
;1622:	// pull the angles back out of the hierarchial chain
;1623:	AnglesSubtract( headAngles, torsoAngles, headAngles );
ADDRLP4 24
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 24
ARGP4
ADDRGP4 AnglesSubtract
CALLV
pop
line 1624
;1624:	AnglesSubtract( torsoAngles, legsAngles, torsoAngles );
ADDRLP4 0
ARGP4
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 AnglesSubtract
CALLV
pop
line 1625
;1625:	AnglesToAxis( legsAngles, legs );
ADDRLP4 12
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1626
;1626:	AnglesToAxis( torsoAngles, torso );
ADDRLP4 0
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1627
;1627:	AnglesToAxis( headAngles, head );
ADDRLP4 24
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1628
;1628:}
LABELV $734
endproc CG_PlayerAngles 148 24
proc CG_HasteTrail 40 48
line 1638
;1629:
;1630:
;1631://==========================================================================
;1632:
;1633:/*
;1634:===============
;1635:CG_HasteTrail
;1636:===============
;1637:*/
;1638:static void CG_HasteTrail( centity_t *cent ) {
line 1643
;1639:	localEntity_t	*smoke;
;1640:	vec3_t			origin;
;1641:	int				anim;
;1642:
;1643:	if ( cent->trailTime > cg.time ) {
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
LEI4 $791
line 1644
;1644:		return;
ADDRGP4 $790
JUMPV
LABELV $791
line 1646
;1645:	}
;1646:	anim = cent->pe.legs.animationNumber & ~ANIM_TOGGLEBIT;
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 488
ADDP4
INDIRI4
CNSTI4 -129
BANDI4
ASGNI4
line 1647
;1647:	if ( anim != LEGS_RUN && anim != LEGS_BACK ) {
ADDRLP4 12
INDIRI4
CNSTI4 15
EQI4 $794
ADDRLP4 12
INDIRI4
CNSTI4 16
EQI4 $794
line 1648
;1648:		return;
ADDRGP4 $790
JUMPV
LABELV $794
line 1651
;1649:	}
;1650:
;1651:	cent->trailTime += 100;
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRI4
CNSTI4 100
ADDI4
ASGNI4
line 1652
;1652:	if ( cent->trailTime < cg.time ) {
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
GEI4 $796
line 1653
;1653:		cent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1654
;1654:	}
LABELV $796
line 1656
;1655:
;1656:	VectorCopy( cent->lerpOrigin, origin );
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 708
ADDP4
INDIRB
ASGNB 12
line 1657
;1657:	origin[2] -= 16;
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
CNSTF4 1098907648
SUBF4
ASGNF4
line 1659
;1658:
;1659:	smoke = CG_SmokePuff( origin, vec3_origin, 
ADDRLP4 0
ARGP4
ADDRGP4 vec3_origin
ARGP4
CNSTF4 1090519040
ARGF4
ADDRLP4 28
CNSTF4 1065353216
ASGNF4
ADDRLP4 28
INDIRF4
ARGF4
ADDRLP4 28
INDIRF4
ARGF4
ADDRLP4 28
INDIRF4
ARGF4
ADDRLP4 28
INDIRF4
ARGF4
CNSTF4 1140457472
ARGF4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 32
CNSTI4 0
ASGNI4
ADDRLP4 32
INDIRI4
ARGI4
ADDRLP4 32
INDIRI4
ARGI4
ADDRGP4 cgs+152852+428
INDIRI4
ARGI4
ADDRLP4 36
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 16
ADDRLP4 36
INDIRP4
ASGNP4
line 1669
;1660:				  8, 
;1661:				  1, 1, 1, 1,
;1662:				  500, 
;1663:				  cg.time,
;1664:				  0,
;1665:				  0,
;1666:				  cgs.media.hastePuffShader );
;1667:
;1668:	// use the optimized local entity add
;1669:	smoke->leType = LE_SCALE_FADE;
ADDRLP4 16
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 7
ASGNI4
line 1670
;1670:}
LABELV $790
endproc CG_HasteTrail 40 48
proc CG_TrailItem 188 12
line 1765
;1671:
;1672:#ifdef MISSIONPACK
;1673:/*
;1674:===============
;1675:CG_BreathPuffs
;1676:===============
;1677:*/
;1678:static void CG_BreathPuffs( centity_t *cent, refEntity_t *head) {
;1679:	clientInfo_t *ci;
;1680:	vec3_t up, origin;
;1681:	int contents;
;1682:
;1683:	ci = &cgs.clientinfo[ cent->currentState.number ];
;1684:
;1685:	if (!cg_enableBreath.integer) {
;1686:		return;
;1687:	}
;1688:	if ( cent->currentState.number == cg.snap->ps.clientNum && !cg.renderingThirdPerson) {
;1689:		return;
;1690:	}
;1691:	if ( cent->currentState.eFlags & EF_DEAD ) {
;1692:		return;
;1693:	}
;1694:	contents = trap_CM_PointContents( head->origin, 0 );
;1695:	if ( contents & ( CONTENTS_WATER | CONTENTS_SLIME | CONTENTS_LAVA ) ) {
;1696:		return;
;1697:	}
;1698:	if ( ci->breathPuffTime > cg.time ) {
;1699:		return;
;1700:	}
;1701:
;1702:	VectorSet( up, 0, 0, 8 );
;1703:	VectorMA(head->origin, 8, head->axis[0], origin);
;1704:	VectorMA(origin, -4, head->axis[2], origin);
;1705:	CG_SmokePuff( origin, up, 16, 1, 1, 1, 0.66f, 1500, cg.time, cg.time + 400, LEF_PUFF_DONT_SCALE, cgs.media.shotgunSmokePuffShader );
;1706:	ci->breathPuffTime = cg.time + 2000;
;1707:}
;1708:
;1709:/*
;1710:===============
;1711:CG_DustTrail
;1712:===============
;1713:*/
;1714:static void CG_DustTrail( centity_t *cent ) {
;1715:	int				anim;
;1716:	localEntity_t	*dust;
;1717:	vec3_t end, vel;
;1718:	trace_t tr;
;1719:
;1720:	if (!cg_enableDust.integer)
;1721:		return;
;1722:
;1723:	if ( cent->dustTrailTime > cg.time ) {
;1724:		return;
;1725:	}
;1726:
;1727:	anim = cent->pe.legs.animationNumber & ~ANIM_TOGGLEBIT;
;1728:	if ( anim != LEGS_LANDB && anim != LEGS_LAND ) {
;1729:		return;
;1730:	}
;1731:
;1732:	cent->dustTrailTime += 40;
;1733:	if ( cent->dustTrailTime < cg.time ) {
;1734:		cent->dustTrailTime = cg.time;
;1735:	}
;1736:
;1737:	VectorCopy(cent->currentState.pos.trBase, end);
;1738:	end[2] -= 64;
;1739:	CG_Trace( &tr, cent->currentState.pos.trBase, NULL, NULL, end, cent->currentState.number, MASK_PLAYERSOLID );
;1740:
;1741:	if ( !(tr.surfaceFlags & SURF_DUST) )
;1742:		return;
;1743:
;1744:	VectorCopy( cent->currentState.pos.trBase, end );
;1745:	end[2] -= 16;
;1746:
;1747:	VectorSet(vel, 0, 0, -30);
;1748:	dust = CG_SmokePuff( end, vel,
;1749:				  24,
;1750:				  .8f, .8f, 0.7f, 0.33f,
;1751:				  500,
;1752:				  cg.time,
;1753:				  0,
;1754:				  0,
;1755:				  cgs.media.dustPuffShader );
;1756:}
;1757:
;1758:#endif
;1759:
;1760:/*
;1761:===============
;1762:CG_TrailItem
;1763:===============
;1764:*/
;1765:static void CG_TrailItem( centity_t *cent, qhandle_t hModel ) {
line 1770
;1766:	refEntity_t		ent;
;1767:	vec3_t			angles;
;1768:	vec3_t			axis[3];
;1769:
;1770:	VectorCopy( cent->lerpAngles, angles );
ADDRLP4 140
ADDRFP4 0
INDIRP4
CNSTI4 720
ADDP4
INDIRB
ASGNB 12
line 1771
;1771:	angles[PITCH] = 0;
ADDRLP4 140
CNSTF4 0
ASGNF4
line 1772
;1772:	angles[ROLL] = 0;
ADDRLP4 140+8
CNSTF4 0
ASGNF4
line 1773
;1773:	AnglesToAxis( angles, axis );
ADDRLP4 140
ARGP4
ADDRLP4 152
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1775
;1774:
;1775:	memset( &ent, 0, sizeof( ent ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1776
;1776:	VectorMA( cent->lerpOrigin, -16, axis[0], ent.origin );
ADDRLP4 0+68
ADDRFP4 0
INDIRP4
CNSTI4 708
ADDP4
INDIRF4
CNSTF4 3246391296
ADDRLP4 152
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRFP4 0
INDIRP4
CNSTI4 712
ADDP4
INDIRF4
CNSTF4 3246391296
ADDRLP4 152+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRFP4 0
INDIRP4
CNSTI4 716
ADDP4
INDIRF4
CNSTF4 3246391296
ADDRLP4 152+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1777
;1777:	ent.origin[2] += 16;
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
CNSTF4 1098907648
ADDF4
ASGNF4
line 1778
;1778:	angles[YAW] += 90;
ADDRLP4 140+4
ADDRLP4 140+4
INDIRF4
CNSTF4 1119092736
ADDF4
ASGNF4
line 1779
;1779:	AnglesToAxis( angles, ent.axis );
ADDRLP4 140
ARGP4
ADDRLP4 0+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1781
;1780:
;1781:	ent.hModel = hModel;
ADDRLP4 0+8
ADDRFP4 4
INDIRI4
ASGNI4
line 1782
;1782:	trap_R_AddRefEntityToScene( &ent );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1783
;1783:}
LABELV $804
endproc CG_TrailItem 188 12
proc CG_PlayerFlag 356 24
line 1791
;1784:
;1785:
;1786:/*
;1787:===============
;1788:CG_PlayerFlag
;1789:===============
;1790:*/
;1791:static void CG_PlayerFlag( centity_t *cent, qhandle_t hSkin, refEntity_t *torso ) {
line 1800
;1792:	clientInfo_t	*ci;
;1793:	refEntity_t	pole;
;1794:	refEntity_t	flag;
;1795:	vec3_t		angles, dir;
;1796:	int			legsAnim, flagAnim, updateangles;
;1797:	float		angle, d;
;1798:
;1799:	// show the flag pole model
;1800:	memset( &pole, 0, sizeof(pole) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1801
;1801:	pole.hModel = cgs.media.flagPoleModel;
ADDRLP4 0+8
ADDRGP4 cgs+152852+88
INDIRI4
ASGNI4
line 1802
;1802:	VectorCopy( torso->lightingOrigin, pole.lightingOrigin );
ADDRLP4 0+12
ADDRFP4 8
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 1803
;1803:	pole.shadowPlane = torso->shadowPlane;
ADDRLP4 0+24
ADDRFP4 8
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 1804
;1804:	pole.renderfx = torso->renderfx;
ADDRLP4 0+4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 1805
;1805:	CG_PositionEntityOnTag( &pole, torso, torso->hModel, "tag_flag" );
ADDRLP4 0
ARGP4
ADDRLP4 328
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 328
INDIRP4
ARGP4
ADDRLP4 328
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ARGI4
ADDRGP4 $435
ARGP4
ADDRGP4 CG_PositionEntityOnTag
CALLV
pop
line 1806
;1806:	trap_R_AddRefEntityToScene( &pole );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1809
;1807:
;1808:	// show the flag model
;1809:	memset( &flag, 0, sizeof(flag) );
ADDRLP4 140
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1810
;1810:	flag.hModel = cgs.media.flagFlapModel;
ADDRLP4 140+8
ADDRGP4 cgs+152852+92
INDIRI4
ASGNI4
line 1811
;1811:	flag.customSkin = hSkin;
ADDRLP4 140+108
ADDRFP4 4
INDIRI4
ASGNI4
line 1812
;1812:	VectorCopy( torso->lightingOrigin, flag.lightingOrigin );
ADDRLP4 140+12
ADDRFP4 8
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 1813
;1813:	flag.shadowPlane = torso->shadowPlane;
ADDRLP4 140+24
ADDRFP4 8
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 1814
;1814:	flag.renderfx = torso->renderfx;
ADDRLP4 140+4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 1816
;1815:
;1816:	VectorClear(angles);
ADDRLP4 332
CNSTF4 0
ASGNF4
ADDRLP4 280+8
ADDRLP4 332
INDIRF4
ASGNF4
ADDRLP4 280+4
ADDRLP4 332
INDIRF4
ASGNF4
ADDRLP4 280
ADDRLP4 332
INDIRF4
ASGNF4
line 1818
;1817:
;1818:	updateangles = qfalse;
ADDRLP4 312
CNSTI4 0
ASGNI4
line 1819
;1819:	legsAnim = cent->currentState.legsAnim & ~ANIM_TOGGLEBIT;
ADDRLP4 304
ADDRFP4 0
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
CNSTI4 -129
BANDI4
ASGNI4
line 1820
;1820:	if( legsAnim == LEGS_IDLE || legsAnim == LEGS_IDLECR ) {
ADDRLP4 304
INDIRI4
CNSTI4 22
EQI4 $836
ADDRLP4 304
INDIRI4
CNSTI4 23
NEI4 $834
LABELV $836
line 1821
;1821:		flagAnim = FLAG_STAND;
ADDRLP4 320
CNSTI4 35
ASGNI4
line 1822
;1822:	} else if ( legsAnim == LEGS_WALK || legsAnim == LEGS_WALKCR ) {
ADDRGP4 $835
JUMPV
LABELV $834
ADDRLP4 304
INDIRI4
CNSTI4 14
EQI4 $839
ADDRLP4 304
INDIRI4
CNSTI4 13
NEI4 $837
LABELV $839
line 1823
;1823:		flagAnim = FLAG_STAND;
ADDRLP4 320
CNSTI4 35
ASGNI4
line 1824
;1824:		updateangles = qtrue;
ADDRLP4 312
CNSTI4 1
ASGNI4
line 1825
;1825:	} else {
ADDRGP4 $838
JUMPV
LABELV $837
line 1826
;1826:		flagAnim = FLAG_RUN;
ADDRLP4 320
CNSTI4 34
ASGNI4
line 1827
;1827:		updateangles = qtrue;
ADDRLP4 312
CNSTI4 1
ASGNI4
line 1828
;1828:	}
LABELV $838
LABELV $835
line 1830
;1829:
;1830:	if ( updateangles ) {
ADDRLP4 312
INDIRI4
CNSTI4 0
EQI4 $840
line 1832
;1831:
;1832:		VectorCopy( cent->currentState.pos.trDelta, dir );
ADDRLP4 292
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
INDIRB
ASGNB 12
line 1834
;1833:		// add gravity
;1834:		dir[2] += 100;
ADDRLP4 292+8
ADDRLP4 292+8
INDIRF4
CNSTF4 1120403456
ADDF4
ASGNF4
line 1835
;1835:		VectorNormalize( dir );
ADDRLP4 292
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 1836
;1836:		d = DotProduct(pole.axis[2], dir);
ADDRLP4 308
ADDRLP4 0+28+24
INDIRF4
ADDRLP4 292
INDIRF4
MULF4
ADDRLP4 0+28+24+4
INDIRF4
ADDRLP4 292+4
INDIRF4
MULF4
ADDF4
ADDRLP4 0+28+24+8
INDIRF4
ADDRLP4 292+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1838
;1837:		// if there is anough movement orthogonal to the flag pole
;1838:		if (fabs(d) < 0.9) {
ADDRLP4 308
INDIRF4
ARGF4
ADDRLP4 344
ADDRGP4 fabs
CALLF4
ASGNF4
ADDRLP4 344
INDIRF4
CNSTF4 1063675494
GEF4 $853
line 1840
;1839:			//
;1840:			d = DotProduct(pole.axis[0], dir);
ADDRLP4 308
ADDRLP4 0+28
INDIRF4
ADDRLP4 292
INDIRF4
MULF4
ADDRLP4 0+28+4
INDIRF4
ADDRLP4 292+4
INDIRF4
MULF4
ADDF4
ADDRLP4 0+28+8
INDIRF4
ADDRLP4 292+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1841
;1841:			if (d > 1.0f) {
ADDRLP4 308
INDIRF4
CNSTF4 1065353216
LEF4 $862
line 1842
;1842:				d = 1.0f;
ADDRLP4 308
CNSTF4 1065353216
ASGNF4
line 1843
;1843:			}
ADDRGP4 $863
JUMPV
LABELV $862
line 1844
;1844:			else if (d < -1.0f) {
ADDRLP4 308
INDIRF4
CNSTF4 3212836864
GEF4 $864
line 1845
;1845:				d = -1.0f;
ADDRLP4 308
CNSTF4 3212836864
ASGNF4
line 1846
;1846:			}
LABELV $864
LABELV $863
line 1847
;1847:			angle = acos(d);
ADDRLP4 308
INDIRF4
ARGF4
ADDRLP4 348
ADDRGP4 acos
CALLF4
ASGNF4
ADDRLP4 324
ADDRLP4 348
INDIRF4
ASGNF4
line 1849
;1848:
;1849:			d = DotProduct(pole.axis[1], dir);
ADDRLP4 308
ADDRLP4 0+28+12
INDIRF4
ADDRLP4 292
INDIRF4
MULF4
ADDRLP4 0+28+12+4
INDIRF4
ADDRLP4 292+4
INDIRF4
MULF4
ADDF4
ADDRLP4 0+28+12+8
INDIRF4
ADDRLP4 292+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1850
;1850:			if (d < 0) {
ADDRLP4 308
INDIRF4
CNSTF4 0
GEF4 $876
line 1851
;1851:				angles[YAW] = 360 - angle * 180 / M_PI;
ADDRLP4 280+4
CNSTF4 1135869952
CNSTF4 1127481344
ADDRLP4 324
INDIRF4
MULF4
CNSTF4 1078530011
DIVF4
SUBF4
ASGNF4
line 1852
;1852:			}
ADDRGP4 $877
JUMPV
LABELV $876
line 1853
;1853:			else {
line 1854
;1854:				angles[YAW] = angle * 180 / M_PI;
ADDRLP4 280+4
CNSTF4 1127481344
ADDRLP4 324
INDIRF4
MULF4
CNSTF4 1078530011
DIVF4
ASGNF4
line 1855
;1855:			}
LABELV $877
line 1856
;1856:			if (angles[YAW] < 0)
ADDRLP4 280+4
INDIRF4
CNSTF4 0
GEF4 $880
line 1857
;1857:				angles[YAW] += 360;
ADDRLP4 280+4
ADDRLP4 280+4
INDIRF4
CNSTF4 1135869952
ADDF4
ASGNF4
LABELV $880
line 1858
;1858:			if (angles[YAW] > 360)
ADDRLP4 280+4
INDIRF4
CNSTF4 1135869952
LEF4 $884
line 1859
;1859:				angles[YAW] -= 360;
ADDRLP4 280+4
ADDRLP4 280+4
INDIRF4
CNSTF4 1135869952
SUBF4
ASGNF4
LABELV $884
line 1864
;1860:
;1861:			//vectoangles( cent->currentState.pos.trDelta, tmpangles );
;1862:			//angles[YAW] = tmpangles[YAW] + 45 - cent->pe.torso.yawAngle;
;1863:			// change the yaw angle
;1864:			CG_SwingAngles( angles[YAW], 25, 90, 0.15f, &cent->pe.flag.yawAngle, &cent->pe.flag.yawing );
ADDRLP4 280+4
INDIRF4
ARGF4
CNSTF4 1103626240
ARGF4
CNSTF4 1119092736
ARGF4
CNSTF4 1041865114
ARGF4
ADDRLP4 352
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 352
INDIRP4
CNSTI4 568
ADDP4
ARGP4
ADDRLP4 352
INDIRP4
CNSTI4 572
ADDP4
ARGP4
ADDRGP4 CG_SwingAngles
CALLV
pop
line 1865
;1865:		}
LABELV $853
line 1885
;1866:
;1867:		/*
;1868:		d = DotProduct(pole.axis[2], dir);
;1869:		angle = Q_acos(d);
;1870:
;1871:		d = DotProduct(pole.axis[1], dir);
;1872:		if (d < 0) {
;1873:			angle = 360 - angle * 180 / M_PI;
;1874:		}
;1875:		else {
;1876:			angle = angle * 180 / M_PI;
;1877:		}
;1878:		if (angle > 340 && angle < 20) {
;1879:			flagAnim = FLAG_RUNUP;
;1880:		}
;1881:		if (angle > 160 && angle < 200) {
;1882:			flagAnim = FLAG_RUNDOWN;
;1883:		}
;1884:		*/
;1885:	}
LABELV $840
line 1888
;1886:
;1887:	// set the yaw angle
;1888:	angles[YAW] = cent->pe.flag.yawAngle;
ADDRLP4 280+4
ADDRFP4 0
INDIRP4
CNSTI4 568
ADDP4
INDIRF4
ASGNF4
line 1890
;1889:	// lerp the flag animation frames
;1890:	ci = &cgs.clientinfo[ cent->currentState.clientNum ];
ADDRLP4 316
CNSTI4 1716
ADDRFP4 0
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+40972
ADDP4
ASGNP4
line 1891
;1891:	CG_RunLerpFrame( ci, &cent->pe.flag, flagAnim, 1 );
ADDRLP4 316
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 548
ADDP4
ARGP4
ADDRLP4 320
INDIRI4
ARGI4
CNSTF4 1065353216
ARGF4
ADDRGP4 CG_RunLerpFrame
CALLV
pop
line 1892
;1892:	flag.oldframe = cent->pe.flag.oldFrame;
ADDRLP4 140+96
ADDRFP4 0
INDIRP4
CNSTI4 548
ADDP4
INDIRI4
ASGNI4
line 1893
;1893:	flag.frame = cent->pe.flag.frame;
ADDRLP4 140+80
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRI4
ASGNI4
line 1894
;1894:	flag.backlerp = cent->pe.flag.backlerp;
ADDRLP4 140+100
ADDRFP4 0
INDIRP4
CNSTI4 564
ADDP4
INDIRF4
ASGNF4
line 1896
;1895:
;1896:	AnglesToAxis( angles, flag.axis );
ADDRLP4 280
ARGP4
ADDRLP4 140+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1897
;1897:	CG_PositionRotatedEntityOnTag( &flag, &pole, pole.hModel, "tag_flag" );
ADDRLP4 140
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 0+8
INDIRI4
ARGI4
ADDRGP4 $435
ARGP4
ADDRGP4 CG_PositionRotatedEntityOnTag
CALLV
pop
line 1899
;1898:
;1899:	trap_R_AddRefEntityToScene( &flag );
ADDRLP4 140
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1900
;1900:}
LABELV $818
endproc CG_PlayerFlag 356 24
proc CG_PlayerPowerups 16 20
line 1976
;1901:
;1902:
;1903:#ifdef MISSIONPACK // bk001204
;1904:/*
;1905:===============
;1906:CG_PlayerTokens
;1907:===============
;1908:*/
;1909:static void CG_PlayerTokens( centity_t *cent, int renderfx ) {
;1910:	int			tokens, i, j;
;1911:	float		angle;
;1912:	refEntity_t	ent;
;1913:	vec3_t		dir, origin;
;1914:	skulltrail_t *trail;
;1915:	trail = &cg.skulltrails[cent->currentState.number];
;1916:	tokens = cent->currentState.generic1;
;1917:	if ( !tokens ) {
;1918:		trail->numpositions = 0;
;1919:		return;
;1920:	}
;1921:
;1922:	if ( tokens > MAX_SKULLTRAIL ) {
;1923:		tokens = MAX_SKULLTRAIL;
;1924:	}
;1925:
;1926:	// add skulls if there are more than last time
;1927:	for (i = 0; i < tokens - trail->numpositions; i++) {
;1928:		for (j = trail->numpositions; j > 0; j--) {
;1929:			VectorCopy(trail->positions[j-1], trail->positions[j]);
;1930:		}
;1931:		VectorCopy(cent->lerpOrigin, trail->positions[0]);
;1932:	}
;1933:	trail->numpositions = tokens;
;1934:
;1935:	// move all the skulls along the trail
;1936:	VectorCopy(cent->lerpOrigin, origin);
;1937:	for (i = 0; i < trail->numpositions; i++) {
;1938:		VectorSubtract(trail->positions[i], origin, dir);
;1939:		if (VectorNormalize(dir) > 30) {
;1940:			VectorMA(origin, 30, dir, trail->positions[i]);
;1941:		}
;1942:		VectorCopy(trail->positions[i], origin);
;1943:	}
;1944:
;1945:	memset( &ent, 0, sizeof( ent ) );
;1946:	if( cgs.clientinfo[ cent->currentState.clientNum ].team == TEAM_BLUE ) {
;1947:		ent.hModel = cgs.media.redCubeModel;
;1948:	} else {
;1949:		ent.hModel = cgs.media.blueCubeModel;
;1950:	}
;1951:	ent.renderfx = renderfx;
;1952:
;1953:	VectorCopy(cent->lerpOrigin, origin);
;1954:	for (i = 0; i < trail->numpositions; i++) {
;1955:		VectorSubtract(origin, trail->positions[i], ent.axis[0]);
;1956:		ent.axis[0][2] = 0;
;1957:		VectorNormalize(ent.axis[0]);
;1958:		VectorSet(ent.axis[2], 0, 0, 1);
;1959:		CrossProduct(ent.axis[0], ent.axis[2], ent.axis[1]);
;1960:
;1961:		VectorCopy(trail->positions[i], ent.origin);
;1962:		angle = (((cg.time + 500 * MAX_SKULLTRAIL - 500 * i) / 16) & 255) * (M_PI * 2) / 255;
;1963:		ent.origin[2] += sin(angle) * 10;
;1964:		trap_R_AddRefEntityToScene( &ent );
;1965:		VectorCopy(trail->positions[i], origin);
;1966:	}
;1967:}
;1968:#endif
;1969:
;1970:
;1971:/*
;1972:===============
;1973:CG_PlayerPowerups
;1974:===============
;1975:*/
;1976:static void CG_PlayerPowerups( centity_t *cent, refEntity_t *torso ) {
line 1980
;1977:	int		powerups;
;1978:	clientInfo_t	*ci;
;1979:
;1980:	powerups = cent->currentState.powerups;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ASGNI4
line 1981
;1981:	if ( !powerups ) {
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $897
line 1982
;1982:		return;
ADDRGP4 $896
JUMPV
LABELV $897
line 1986
;1983:	}
;1984:
;1985:	// quad gives a dlight
;1986:	if ( powerups & ( 1 << PW_QUAD ) ) {
ADDRLP4 0
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $899
line 1987
;1987:		trap_R_AddLightToScene( cent->lerpOrigin, 200 + (rand()&31), 0.2f, 0.2f, 1 );
ADDRLP4 8
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 708
ADDP4
ARGP4
ADDRLP4 8
INDIRI4
CNSTI4 31
BANDI4
CNSTI4 200
ADDI4
CVIF4 4
ARGF4
ADDRLP4 12
CNSTF4 1045220557
ASGNF4
ADDRLP4 12
INDIRF4
ARGF4
ADDRLP4 12
INDIRF4
ARGF4
CNSTF4 1065353216
ARGF4
ADDRGP4 trap_R_AddLightToScene
CALLV
pop
line 1988
;1988:	}
LABELV $899
line 1991
;1989:
;1990:	// flight plays a looped sound
;1991:	if ( powerups & ( 1 << PW_FLIGHT ) ) {
ADDRLP4 0
INDIRI4
CNSTI4 64
BANDI4
CNSTI4 0
EQI4 $901
line 1992
;1992:		trap_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, vec3_origin, cgs.media.flightSound );
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
INDIRI4
ARGI4
ADDRLP4 8
INDIRP4
CNSTI4 708
ADDP4
ARGP4
ADDRGP4 vec3_origin
ARGP4
ADDRGP4 cgs+152852+880
INDIRI4
ARGI4
ADDRGP4 trap_S_AddLoopingSound
CALLV
pop
line 1993
;1993:	}
LABELV $901
line 1995
;1994:
;1995:	ci = &cgs.clientinfo[ cent->currentState.clientNum ];
ADDRLP4 4
CNSTI4 1716
ADDRFP4 0
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+40972
ADDP4
ASGNP4
line 1997
;1996:	// redflag
;1997:	if ( powerups & ( 1 << PW_REDFLAG ) ) {
ADDRLP4 0
INDIRI4
CNSTI4 128
BANDI4
CNSTI4 0
EQI4 $906
line 1998
;1998:		if (ci->newAnims) {
ADDRLP4 4
INDIRP4
CNSTI4 484
ADDP4
INDIRI4
CNSTI4 0
EQI4 $908
line 1999
;1999:			CG_PlayerFlag( cent, cgs.media.redFlagFlapSkin, torso );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 cgs+152852+96
INDIRI4
ARGI4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 CG_PlayerFlag
CALLV
pop
line 2000
;2000:		}
ADDRGP4 $909
JUMPV
LABELV $908
line 2001
;2001:		else {
line 2002
;2002:			CG_TrailItem( cent, cgs.media.redFlagModel );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 cgs+152852+36
INDIRI4
ARGI4
ADDRGP4 CG_TrailItem
CALLV
pop
line 2003
;2003:		}
LABELV $909
line 2004
;2004:		trap_R_AddLightToScene( cent->lerpOrigin, 200 + (rand()&31), 1.0, 0.2f, 0.2f );
ADDRLP4 8
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 708
ADDP4
ARGP4
ADDRLP4 8
INDIRI4
CNSTI4 31
BANDI4
CNSTI4 200
ADDI4
CVIF4 4
ARGF4
CNSTF4 1065353216
ARGF4
ADDRLP4 12
CNSTF4 1045220557
ASGNF4
ADDRLP4 12
INDIRF4
ARGF4
ADDRLP4 12
INDIRF4
ARGF4
ADDRGP4 trap_R_AddLightToScene
CALLV
pop
line 2005
;2005:	}
LABELV $906
line 2008
;2006:
;2007:	// blueflag
;2008:	if ( powerups & ( 1 << PW_BLUEFLAG ) ) {
ADDRLP4 0
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $914
line 2009
;2009:		if (ci->newAnims){
ADDRLP4 4
INDIRP4
CNSTI4 484
ADDP4
INDIRI4
CNSTI4 0
EQI4 $916
line 2010
;2010:			CG_PlayerFlag( cent, cgs.media.blueFlagFlapSkin, torso );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 cgs+152852+100
INDIRI4
ARGI4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 CG_PlayerFlag
CALLV
pop
line 2011
;2011:		}
ADDRGP4 $917
JUMPV
LABELV $916
line 2012
;2012:		else {
line 2013
;2013:			CG_TrailItem( cent, cgs.media.blueFlagModel );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 cgs+152852+40
INDIRI4
ARGI4
ADDRGP4 CG_TrailItem
CALLV
pop
line 2014
;2014:		}
LABELV $917
line 2015
;2015:		trap_R_AddLightToScene( cent->lerpOrigin, 200 + (rand()&31), 0.2f, 0.2f, 1.0 );
ADDRLP4 8
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 708
ADDP4
ARGP4
ADDRLP4 8
INDIRI4
CNSTI4 31
BANDI4
CNSTI4 200
ADDI4
CVIF4 4
ARGF4
ADDRLP4 12
CNSTF4 1045220557
ASGNF4
ADDRLP4 12
INDIRF4
ARGF4
ADDRLP4 12
INDIRF4
ARGF4
CNSTF4 1065353216
ARGF4
ADDRGP4 trap_R_AddLightToScene
CALLV
pop
line 2016
;2016:	}
LABELV $914
line 2019
;2017:
;2018:	// neutralflag
;2019:	if ( powerups & ( 1 << PW_NEUTRALFLAG ) ) {
ADDRLP4 0
INDIRI4
CNSTI4 512
BANDI4
CNSTI4 0
EQI4 $922
line 2020
;2020:		if (ci->newAnims) {
ADDRLP4 4
INDIRP4
CNSTI4 484
ADDP4
INDIRI4
CNSTI4 0
EQI4 $924
line 2021
;2021:			CG_PlayerFlag( cent, cgs.media.neutralFlagFlapSkin, torso );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 cgs+152852+104
INDIRI4
ARGI4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 CG_PlayerFlag
CALLV
pop
line 2022
;2022:		}
ADDRGP4 $925
JUMPV
LABELV $924
line 2023
;2023:		else {
line 2024
;2024:			CG_TrailItem( cent, cgs.media.neutralFlagModel );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 cgs+152852+44
INDIRI4
ARGI4
ADDRGP4 CG_TrailItem
CALLV
pop
line 2025
;2025:		}
LABELV $925
line 2026
;2026:		trap_R_AddLightToScene( cent->lerpOrigin, 200 + (rand()&31), 1.0, 1.0, 1.0 );
ADDRLP4 8
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 708
ADDP4
ARGP4
ADDRLP4 8
INDIRI4
CNSTI4 31
BANDI4
CNSTI4 200
ADDI4
CVIF4 4
ARGF4
ADDRLP4 12
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRF4
ARGF4
ADDRLP4 12
INDIRF4
ARGF4
ADDRLP4 12
INDIRF4
ARGF4
ADDRGP4 trap_R_AddLightToScene
CALLV
pop
line 2027
;2027:	}
LABELV $922
line 2030
;2028:
;2029:	// haste leaves smoke trails
;2030:	if ( powerups & ( 1 << PW_HASTE ) ) {
ADDRLP4 0
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
EQI4 $930
line 2031
;2031:		CG_HasteTrail( cent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_HasteTrail
CALLV
pop
line 2032
;2032:	}
LABELV $930
line 2033
;2033:}
LABELV $896
endproc CG_PlayerPowerups 16 20
proc CG_PlayerFloatSprite 144 12
line 2043
;2034:
;2035:
;2036:/*
;2037:===============
;2038:CG_PlayerFloatSprite
;2039:
;2040:Float a sprite over the player's head
;2041:===============
;2042:*/
;2043:static void CG_PlayerFloatSprite( centity_t *cent, qhandle_t shader ) {
line 2047
;2044:	int				rf;
;2045:	refEntity_t		ent;
;2046:
;2047:	if ( cent->currentState.number == cg.snap->ps.clientNum && !cg.renderingThirdPerson ) {
ADDRFP4 0
INDIRP4
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
NEI4 $933
ADDRGP4 cg+107628
INDIRI4
CNSTI4 0
NEI4 $933
line 2048
;2048:		rf = RF_THIRD_PERSON;		// only show in mirrors
ADDRLP4 140
CNSTI4 2
ASGNI4
line 2049
;2049:	} else {
ADDRGP4 $934
JUMPV
LABELV $933
line 2050
;2050:		rf = 0;
ADDRLP4 140
CNSTI4 0
ASGNI4
line 2051
;2051:	}
LABELV $934
line 2053
;2052:
;2053:	memset( &ent, 0, sizeof( ent ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 2054
;2054:	VectorCopy( cent->lerpOrigin, ent.origin );
ADDRLP4 0+68
ADDRFP4 0
INDIRP4
CNSTI4 708
ADDP4
INDIRB
ASGNB 12
line 2055
;2055:	ent.origin[2] += 48;
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
CNSTF4 1111490560
ADDF4
ASGNF4
line 2056
;2056:	ent.reType = RT_SPRITE;
ADDRLP4 0
CNSTI4 2
ASGNI4
line 2057
;2057:	ent.customShader = shader;
ADDRLP4 0+112
ADDRFP4 4
INDIRI4
ASGNI4
line 2058
;2058:	ent.radius = 10;
ADDRLP4 0+132
CNSTF4 1092616192
ASGNF4
line 2059
;2059:	ent.renderfx = rf;
ADDRLP4 0+4
ADDRLP4 140
INDIRI4
ASGNI4
line 2060
;2060:	ent.shaderRGBA[0] = 255;
ADDRLP4 0+116
CNSTU1 255
ASGNU1
line 2061
;2061:	ent.shaderRGBA[1] = 255;
ADDRLP4 0+116+1
CNSTU1 255
ASGNU1
line 2062
;2062:	ent.shaderRGBA[2] = 255;
ADDRLP4 0+116+2
CNSTU1 255
ASGNU1
line 2063
;2063:	ent.shaderRGBA[3] = 255;
ADDRLP4 0+116+3
CNSTU1 255
ASGNU1
line 2064
;2064:	trap_R_AddRefEntityToScene( &ent );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 2065
;2065:}
LABELV $932
endproc CG_PlayerFloatSprite 144 12
proc CG_PlayerSprites 8 8
line 2076
;2066:
;2067:
;2068:
;2069:/*
;2070:===============
;2071:CG_PlayerSprites
;2072:
;2073:Float sprites over the player's head
;2074:===============
;2075:*/
;2076:static void CG_PlayerSprites( centity_t *cent ) {
line 2079
;2077:	int		team;
;2078:
;2079:	if ( cent->currentState.eFlags & EF_CONNECTION ) {
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 8192
BANDI4
CNSTI4 0
EQI4 $951
line 2080
;2080:		CG_PlayerFloatSprite( cent, cgs.media.connectionShader );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 cgs+152852+208
INDIRI4
ARGI4
ADDRGP4 CG_PlayerFloatSprite
CALLV
pop
line 2081
;2081:		return;
ADDRGP4 $950
JUMPV
LABELV $951
line 2084
;2082:	}
;2083:
;2084:	if ( cent->currentState.eFlags & EF_TALK ) {
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $955
line 2085
;2085:		CG_PlayerFloatSprite( cent, cgs.media.balloonShader );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 cgs+152852+204
INDIRI4
ARGI4
ADDRGP4 CG_PlayerFloatSprite
CALLV
pop
line 2086
;2086:		return;
ADDRGP4 $950
JUMPV
LABELV $955
line 2089
;2087:	}
;2088:
;2089:	if ( cent->currentState.eFlags & EF_AWARD_IMPRESSIVE ) {
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 32768
BANDI4
CNSTI4 0
EQI4 $959
line 2090
;2090:		CG_PlayerFloatSprite( cent, cgs.media.medalImpressive );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 cgs+152852+524
INDIRI4
ARGI4
ADDRGP4 CG_PlayerFloatSprite
CALLV
pop
line 2091
;2091:		return;
ADDRGP4 $950
JUMPV
LABELV $959
line 2094
;2092:	}
;2093:
;2094:	if ( cent->currentState.eFlags & EF_AWARD_EXCELLENT ) {
ADDRLP4 4
CNSTI4 8
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 4
INDIRI4
ADDP4
INDIRI4
ADDRLP4 4
INDIRI4
BANDI4
CNSTI4 0
EQI4 $963
line 2095
;2095:		CG_PlayerFloatSprite( cent, cgs.media.medalExcellent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 cgs+152852+528
INDIRI4
ARGI4
ADDRGP4 CG_PlayerFloatSprite
CALLV
pop
line 2096
;2096:		return;
ADDRGP4 $950
JUMPV
LABELV $963
line 2099
;2097:	}
;2098:
;2099:	if ( cent->currentState.eFlags & EF_AWARD_GAUNTLET ) {
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 64
BANDI4
CNSTI4 0
EQI4 $967
line 2100
;2100:		CG_PlayerFloatSprite( cent, cgs.media.medalGauntlet );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 cgs+152852+532
INDIRI4
ARGI4
ADDRGP4 CG_PlayerFloatSprite
CALLV
pop
line 2101
;2101:		return;
ADDRGP4 $950
JUMPV
LABELV $967
line 2104
;2102:	}
;2103:
;2104:	if ( cent->currentState.eFlags & EF_AWARD_DEFEND ) {
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 65536
BANDI4
CNSTI4 0
EQI4 $971
line 2105
;2105:		CG_PlayerFloatSprite( cent, cgs.media.medalDefend );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 cgs+152852+536
INDIRI4
ARGI4
ADDRGP4 CG_PlayerFloatSprite
CALLV
pop
line 2106
;2106:		return;
ADDRGP4 $950
JUMPV
LABELV $971
line 2109
;2107:	}
;2108:
;2109:	if ( cent->currentState.eFlags & EF_AWARD_ASSIST ) {
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 131072
BANDI4
CNSTI4 0
EQI4 $975
line 2110
;2110:		CG_PlayerFloatSprite( cent, cgs.media.medalAssist );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 cgs+152852+540
INDIRI4
ARGI4
ADDRGP4 CG_PlayerFloatSprite
CALLV
pop
line 2111
;2111:		return;
ADDRGP4 $950
JUMPV
LABELV $975
line 2114
;2112:	}
;2113:
;2114:	if ( cent->currentState.eFlags & EF_AWARD_CAP ) {
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 2048
BANDI4
CNSTI4 0
EQI4 $979
line 2115
;2115:		CG_PlayerFloatSprite( cent, cgs.media.medalCapture );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 cgs+152852+544
INDIRI4
ARGI4
ADDRGP4 CG_PlayerFloatSprite
CALLV
pop
line 2116
;2116:		return;
ADDRGP4 $950
JUMPV
LABELV $979
line 2119
;2117:	}
;2118:
;2119:	team = cgs.clientinfo[ cent->currentState.clientNum ].team;
ADDRLP4 0
CNSTI4 1716
ADDRFP4 0
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+40972+68
ADDP4
INDIRI4
ASGNI4
line 2120
;2120:	if ( !(cent->currentState.eFlags & EF_DEAD) && 
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
NEI4 $985
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
ADDRLP4 0
INDIRI4
NEI4 $985
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
LTI4 $985
line 2122
;2121:		cg.snap->ps.persistant[PERS_TEAM] == team &&
;2122:		cgs.gametype >= GT_TEAM) {
line 2123
;2123:		if (cg_drawFriend.integer) {
ADDRGP4 cg_drawFriend+12
INDIRI4
CNSTI4 0
EQI4 $950
line 2124
;2124:			CG_PlayerFloatSprite( cent, cgs.media.friendShader );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 cgs+152852+200
INDIRI4
ARGI4
ADDRGP4 CG_PlayerFloatSprite
CALLV
pop
line 2125
;2125:		}
line 2126
;2126:		return;
LABELV $985
line 2128
;2127:	}
;2128:}
LABELV $950
endproc CG_PlayerSprites 8 8
lit
align 4
LABELV $995
byte 4 3245342720
byte 4 3245342720
byte 4 0
align 4
LABELV $996
byte 4 1097859072
byte 4 1097859072
byte 4 1073741824
code
proc CG_PlayerShadow 104 44
line 2140
;2129:
;2130:/*
;2131:===============
;2132:CG_PlayerShadow
;2133:
;2134:Returns the Z component of the surface being shadowed
;2135:
;2136:  should it return a full plane instead of a Z?
;2137:===============
;2138:*/
;2139:#define	SHADOW_DISTANCE		128
;2140:static qboolean CG_PlayerShadow( centity_t *cent, float *shadowPlane ) {
line 2141
;2141:	vec3_t		end, mins = {-15, -15, 0}, maxs = {15, 15, 2};
ADDRLP4 72
ADDRGP4 $995
INDIRB
ASGNB 12
ADDRLP4 84
ADDRGP4 $996
INDIRB
ASGNB 12
line 2145
;2142:	trace_t		trace;
;2143:	float		alpha;
;2144:
;2145:	*shadowPlane = 0;
ADDRFP4 4
INDIRP4
CNSTF4 0
ASGNF4
line 2147
;2146:
;2147:	if ( cg_shadows.integer == 0 ) {
ADDRGP4 cg_shadows+12
INDIRI4
CNSTI4 0
NEI4 $997
line 2148
;2148:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $994
JUMPV
LABELV $997
line 2152
;2149:	}
;2150:
;2151:	// no shadows when invisible
;2152:	if ( cent->currentState.powerups & ( 1 << PW_INVIS ) ) {
ADDRFP4 0
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $1000
line 2153
;2153:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $994
JUMPV
LABELV $1000
line 2157
;2154:	}
;2155:
;2156:	// send a trace down from the player to the ground
;2157:	VectorCopy( cent->lerpOrigin, end );
ADDRLP4 60
ADDRFP4 0
INDIRP4
CNSTI4 708
ADDP4
INDIRB
ASGNB 12
line 2158
;2158:	end[2] -= SHADOW_DISTANCE;
ADDRLP4 60+8
ADDRLP4 60+8
INDIRF4
CNSTF4 1124073472
SUBF4
ASGNF4
line 2160
;2159:
;2160:	trap_CM_BoxTrace( &trace, cent->lerpOrigin, end, mins, maxs, 0, MASK_PLAYERSOLID );
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 708
ADDP4
ARGP4
ADDRLP4 60
ARGP4
ADDRLP4 72
ARGP4
ADDRLP4 84
ARGP4
CNSTI4 0
ARGI4
CNSTI4 33619969
ARGI4
ADDRGP4 trap_CM_BoxTrace
CALLV
pop
line 2163
;2161:
;2162:	// no shadow if too high
;2163:	if ( trace.fraction == 1.0 || trace.startsolid || trace.allsolid ) {
ADDRLP4 0+8
INDIRF4
CNSTF4 1065353216
EQF4 $1008
ADDRLP4 96
CNSTI4 0
ASGNI4
ADDRLP4 0+4
INDIRI4
ADDRLP4 96
INDIRI4
NEI4 $1008
ADDRLP4 0
INDIRI4
ADDRLP4 96
INDIRI4
EQI4 $1003
LABELV $1008
line 2164
;2164:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $994
JUMPV
LABELV $1003
line 2167
;2165:	}
;2166:
;2167:	*shadowPlane = trace.endpos[2] + 1;
ADDRFP4 4
INDIRP4
ADDRLP4 0+12+8
INDIRF4
CNSTF4 1065353216
ADDF4
ASGNF4
line 2169
;2168:
;2169:	if ( cg_shadows.integer != 1 ) {	// no mark for stencil or projection shadows
ADDRGP4 cg_shadows+12
INDIRI4
CNSTI4 1
EQI4 $1011
line 2170
;2170:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $994
JUMPV
LABELV $1011
line 2174
;2171:	}
;2172:
;2173:	// fade the shadow out with height
;2174:	alpha = 1.0 - trace.fraction;
ADDRLP4 56
CNSTF4 1065353216
ADDRLP4 0+8
INDIRF4
SUBF4
ASGNF4
line 2181
;2175:
;2176:	// bk0101022 - hack / FPE - bogus planes?
;2177:	//assert( DotProduct( trace.plane.normal, trace.plane.normal ) != 0.0f ) 
;2178:
;2179:	// add the mark as a temporary, so it goes directly to the renderer
;2180:	// without taking a spot in the cg_marks array
;2181:	CG_ImpactMark( cgs.media.shadowMarkShader, trace.endpos, trace.plane.normal, 
ADDRGP4 cgs+152852+352
INDIRI4
ARGI4
ADDRLP4 0+12
ARGP4
ADDRLP4 0+24
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 472
ADDP4
INDIRF4
ARGF4
ADDRLP4 56
INDIRF4
ARGF4
ADDRLP4 56
INDIRF4
ARGF4
ADDRLP4 56
INDIRF4
ARGF4
CNSTF4 1065353216
ARGF4
CNSTI4 0
ARGI4
CNSTF4 1103101952
ARGF4
CNSTI4 1
ARGI4
ADDRGP4 CG_ImpactMark
CALLV
pop
line 2184
;2182:		cent->pe.legs.yawAngle, alpha,alpha,alpha,1, qfalse, 24, qtrue );
;2183:
;2184:	return qtrue;
CNSTI4 1
RETI4
LABELV $994
endproc CG_PlayerShadow 104 44
proc CG_PlayerSplash 192 28
line 2195
;2185:}
;2186:
;2187:
;2188:/*
;2189:===============
;2190:CG_PlayerSplash
;2191:
;2192:Draw a mark at the water surface
;2193:===============
;2194:*/
;2195:static void CG_PlayerSplash( centity_t *cent ) {
line 2201
;2196:	vec3_t		start, end;
;2197:	trace_t		trace;
;2198:	int			contents;
;2199:	polyVert_t	verts[4];
;2200:
;2201:	if ( !cg_shadows.integer ) {
ADDRGP4 cg_shadows+12
INDIRI4
CNSTI4 0
NEI4 $1020
line 2202
;2202:		return;
ADDRGP4 $1019
JUMPV
LABELV $1020
line 2205
;2203:	}
;2204:
;2205:	VectorCopy( cent->lerpOrigin, end );
ADDRLP4 164
ADDRFP4 0
INDIRP4
CNSTI4 708
ADDP4
INDIRB
ASGNB 12
line 2206
;2206:	end[2] -= 24;
ADDRLP4 164+8
ADDRLP4 164+8
INDIRF4
CNSTF4 1103101952
SUBF4
ASGNF4
line 2210
;2207:
;2208:	// if the feet aren't in liquid, don't make a mark
;2209:	// this won't handle moving water brushes, but they wouldn't draw right anyway...
;2210:	contents = trap_CM_PointContents( end, 0 );
ADDRLP4 164
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 180
ADDRGP4 trap_CM_PointContents
CALLI4
ASGNI4
ADDRLP4 176
ADDRLP4 180
INDIRI4
ASGNI4
line 2211
;2211:	if ( !( contents & ( CONTENTS_WATER | CONTENTS_SLIME | CONTENTS_LAVA ) ) ) {
ADDRLP4 176
INDIRI4
CNSTI4 56
BANDI4
CNSTI4 0
NEI4 $1024
line 2212
;2212:		return;
ADDRGP4 $1019
JUMPV
LABELV $1024
line 2215
;2213:	}
;2214:
;2215:	VectorCopy( cent->lerpOrigin, start );
ADDRLP4 152
ADDRFP4 0
INDIRP4
CNSTI4 708
ADDP4
INDIRB
ASGNB 12
line 2216
;2216:	start[2] += 32;
ADDRLP4 152+8
ADDRLP4 152+8
INDIRF4
CNSTF4 1107296256
ADDF4
ASGNF4
line 2219
;2217:
;2218:	// if the head isn't out of liquid, don't make a mark
;2219:	contents = trap_CM_PointContents( start, 0 );
ADDRLP4 152
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 184
ADDRGP4 trap_CM_PointContents
CALLI4
ASGNI4
ADDRLP4 176
ADDRLP4 184
INDIRI4
ASGNI4
line 2220
;2220:	if ( contents & ( CONTENTS_SOLID | CONTENTS_WATER | CONTENTS_SLIME | CONTENTS_LAVA ) ) {
ADDRLP4 176
INDIRI4
CNSTI4 57
BANDI4
CNSTI4 0
EQI4 $1027
line 2221
;2221:		return;
ADDRGP4 $1019
JUMPV
LABELV $1027
line 2225
;2222:	}
;2223:
;2224:	// trace down to find the surface
;2225:	trap_CM_BoxTrace( &trace, start, end, NULL, NULL, 0, ( CONTENTS_WATER | CONTENTS_SLIME | CONTENTS_LAVA ) );
ADDRLP4 96
ARGP4
ADDRLP4 152
ARGP4
ADDRLP4 164
ARGP4
ADDRLP4 188
CNSTP4 0
ASGNP4
ADDRLP4 188
INDIRP4
ARGP4
ADDRLP4 188
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 56
ARGI4
ADDRGP4 trap_CM_BoxTrace
CALLV
pop
line 2227
;2226:
;2227:	if ( trace.fraction == 1.0 ) {
ADDRLP4 96+8
INDIRF4
CNSTF4 1065353216
NEF4 $1029
line 2228
;2228:		return;
ADDRGP4 $1019
JUMPV
LABELV $1029
line 2232
;2229:	}
;2230:
;2231:	// create a mark polygon
;2232:	VectorCopy( trace.endpos, verts[0].xyz );
ADDRLP4 0
ADDRLP4 96+12
INDIRB
ASGNB 12
line 2233
;2233:	verts[0].xyz[0] -= 32;
ADDRLP4 0
ADDRLP4 0
INDIRF4
CNSTF4 1107296256
SUBF4
ASGNF4
line 2234
;2234:	verts[0].xyz[1] -= 32;
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
CNSTF4 1107296256
SUBF4
ASGNF4
line 2235
;2235:	verts[0].st[0] = 0;
ADDRLP4 0+12
CNSTF4 0
ASGNF4
line 2236
;2236:	verts[0].st[1] = 0;
ADDRLP4 0+12+4
CNSTF4 0
ASGNF4
line 2237
;2237:	verts[0].modulate[0] = 255;
ADDRLP4 0+20
CNSTU1 255
ASGNU1
line 2238
;2238:	verts[0].modulate[1] = 255;
ADDRLP4 0+20+1
CNSTU1 255
ASGNU1
line 2239
;2239:	verts[0].modulate[2] = 255;
ADDRLP4 0+20+2
CNSTU1 255
ASGNU1
line 2240
;2240:	verts[0].modulate[3] = 255;
ADDRLP4 0+20+3
CNSTU1 255
ASGNU1
line 2242
;2241:
;2242:	VectorCopy( trace.endpos, verts[1].xyz );
ADDRLP4 0+24
ADDRLP4 96+12
INDIRB
ASGNB 12
line 2243
;2243:	verts[1].xyz[0] -= 32;
ADDRLP4 0+24
ADDRLP4 0+24
INDIRF4
CNSTF4 1107296256
SUBF4
ASGNF4
line 2244
;2244:	verts[1].xyz[1] += 32;
ADDRLP4 0+24+4
ADDRLP4 0+24+4
INDIRF4
CNSTF4 1107296256
ADDF4
ASGNF4
line 2245
;2245:	verts[1].st[0] = 0;
ADDRLP4 0+24+12
CNSTF4 0
ASGNF4
line 2246
;2246:	verts[1].st[1] = 1;
ADDRLP4 0+24+12+4
CNSTF4 1065353216
ASGNF4
line 2247
;2247:	verts[1].modulate[0] = 255;
ADDRLP4 0+24+20
CNSTU1 255
ASGNU1
line 2248
;2248:	verts[1].modulate[1] = 255;
ADDRLP4 0+24+20+1
CNSTU1 255
ASGNU1
line 2249
;2249:	verts[1].modulate[2] = 255;
ADDRLP4 0+24+20+2
CNSTU1 255
ASGNU1
line 2250
;2250:	verts[1].modulate[3] = 255;
ADDRLP4 0+24+20+3
CNSTU1 255
ASGNU1
line 2252
;2251:
;2252:	VectorCopy( trace.endpos, verts[2].xyz );
ADDRLP4 0+48
ADDRLP4 96+12
INDIRB
ASGNB 12
line 2253
;2253:	verts[2].xyz[0] += 32;
ADDRLP4 0+48
ADDRLP4 0+48
INDIRF4
CNSTF4 1107296256
ADDF4
ASGNF4
line 2254
;2254:	verts[2].xyz[1] += 32;
ADDRLP4 0+48+4
ADDRLP4 0+48+4
INDIRF4
CNSTF4 1107296256
ADDF4
ASGNF4
line 2255
;2255:	verts[2].st[0] = 1;
ADDRLP4 0+48+12
CNSTF4 1065353216
ASGNF4
line 2256
;2256:	verts[2].st[1] = 1;
ADDRLP4 0+48+12+4
CNSTF4 1065353216
ASGNF4
line 2257
;2257:	verts[2].modulate[0] = 255;
ADDRLP4 0+48+20
CNSTU1 255
ASGNU1
line 2258
;2258:	verts[2].modulate[1] = 255;
ADDRLP4 0+48+20+1
CNSTU1 255
ASGNU1
line 2259
;2259:	verts[2].modulate[2] = 255;
ADDRLP4 0+48+20+2
CNSTU1 255
ASGNU1
line 2260
;2260:	verts[2].modulate[3] = 255;
ADDRLP4 0+48+20+3
CNSTU1 255
ASGNU1
line 2262
;2261:
;2262:	VectorCopy( trace.endpos, verts[3].xyz );
ADDRLP4 0+72
ADDRLP4 96+12
INDIRB
ASGNB 12
line 2263
;2263:	verts[3].xyz[0] += 32;
ADDRLP4 0+72
ADDRLP4 0+72
INDIRF4
CNSTF4 1107296256
ADDF4
ASGNF4
line 2264
;2264:	verts[3].xyz[1] -= 32;
ADDRLP4 0+72+4
ADDRLP4 0+72+4
INDIRF4
CNSTF4 1107296256
SUBF4
ASGNF4
line 2265
;2265:	verts[3].st[0] = 1;
ADDRLP4 0+72+12
CNSTF4 1065353216
ASGNF4
line 2266
;2266:	verts[3].st[1] = 0;
ADDRLP4 0+72+12+4
CNSTF4 0
ASGNF4
line 2267
;2267:	verts[3].modulate[0] = 255;
ADDRLP4 0+72+20
CNSTU1 255
ASGNU1
line 2268
;2268:	verts[3].modulate[1] = 255;
ADDRLP4 0+72+20+1
CNSTU1 255
ASGNU1
line 2269
;2269:	verts[3].modulate[2] = 255;
ADDRLP4 0+72+20+2
CNSTU1 255
ASGNU1
line 2270
;2270:	verts[3].modulate[3] = 255;
ADDRLP4 0+72+20+3
CNSTU1 255
ASGNU1
line 2272
;2271:
;2272:	trap_R_AddPolyToScene( cgs.media.wakeMarkShader, 4, verts );
ADDRGP4 cgs+152852+376
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddPolyToScene
CALLV
pop
line 2273
;2273:}
LABELV $1019
endproc CG_PlayerSplash 192 28
export CG_AddRefEntityWithPowerups
proc CG_AddRefEntityWithPowerups 0 4
line 2285
;2274:
;2275:
;2276:
;2277:/*
;2278:===============
;2279:CG_AddRefEntityWithPowerups
;2280:
;2281:Adds a piece with modifications or duplications for powerups
;2282:Also called by CG_Missile for quad rockets, but nobody can tell...
;2283:===============
;2284:*/
;2285:void CG_AddRefEntityWithPowerups( refEntity_t *ent, entityState_t *state, int team ) {
line 2287
;2286:
;2287:	if ( state->powerups & ( 1 << PW_INVIS ) ) {
ADDRFP4 4
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $1110
line 2288
;2288:		ent->customShader = cgs.media.invisShader;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+152852+412
INDIRI4
ASGNI4
line 2289
;2289:		trap_R_AddRefEntityToScene( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 2290
;2290:	} else {
ADDRGP4 $1111
JUMPV
LABELV $1110
line 2300
;2291:		/*
;2292:		if ( state->eFlags & EF_KAMIKAZE ) {
;2293:			if (team == TEAM_BLUE)
;2294:				ent->customShader = cgs.media.blueKamikazeShader;
;2295:			else
;2296:				ent->customShader = cgs.media.redKamikazeShader;
;2297:			trap_R_AddRefEntityToScene( ent );
;2298:		}
;2299:		else {*/
;2300:			trap_R_AddRefEntityToScene( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 2303
;2301:		//}
;2302:
;2303:		if ( state->powerups & ( 1 << PW_QUAD ) )
ADDRFP4 4
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $1114
line 2304
;2304:		{
line 2305
;2305:			if (team == TEAM_RED)
ADDRFP4 8
INDIRI4
CNSTI4 1
NEI4 $1116
line 2306
;2306:				ent->customShader = cgs.media.redQuadShader;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+152852+404
INDIRI4
ASGNI4
ADDRGP4 $1117
JUMPV
LABELV $1116
line 2308
;2307:			else
;2308:				ent->customShader = cgs.media.quadShader;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+152852+400
INDIRI4
ASGNI4
LABELV $1117
line 2309
;2309:			trap_R_AddRefEntityToScene( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 2310
;2310:		}
LABELV $1114
line 2311
;2311:		if ( state->powerups & ( 1 << PW_REGEN ) ) {
ADDRFP4 4
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $1122
line 2312
;2312:			if ( ( ( cg.time / 100 ) % 10 ) == 1 ) {
ADDRGP4 cg+107604
INDIRI4
CNSTI4 100
DIVI4
CNSTI4 10
MODI4
CNSTI4 1
NEI4 $1124
line 2313
;2313:				ent->customShader = cgs.media.regenShader;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+152852+416
INDIRI4
ASGNI4
line 2314
;2314:				trap_R_AddRefEntityToScene( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 2315
;2315:			}
LABELV $1124
line 2316
;2316:		}
LABELV $1122
line 2317
;2317:		if ( state->powerups & ( 1 << PW_BATTLESUIT ) ) {
ADDRFP4 4
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $1129
line 2318
;2318:			ent->customShader = cgs.media.battleSuitShader;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+152852+420
INDIRI4
ASGNI4
line 2319
;2319:			trap_R_AddRefEntityToScene( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 2320
;2320:		}
LABELV $1129
line 2321
;2321:	}
LABELV $1111
line 2322
;2322:}
LABELV $1109
endproc CG_AddRefEntityWithPowerups 0 4
export CG_LightVerts
proc CG_LightVerts 88 16
line 2330
;2323:
;2324:/*
;2325:=================
;2326:CG_LightVerts
;2327:=================
;2328:*/
;2329:int CG_LightVerts( vec3_t normal, int numVerts, polyVert_t *verts )
;2330:{
line 2337
;2331:	int				i, j;
;2332:	float			incoming;
;2333:	vec3_t			ambientLight;
;2334:	vec3_t			lightDir;
;2335:	vec3_t			directedLight;
;2336:
;2337:	trap_R_LightForPoint( verts[0].xyz, ambientLight, directedLight, lightDir );
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 12
ARGP4
ADDRLP4 36
ARGP4
ADDRLP4 24
ARGP4
ADDRGP4 trap_R_LightForPoint
CALLI4
pop
line 2339
;2338:
;2339:	for (i = 0; i < numVerts; i++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $1137
JUMPV
LABELV $1134
line 2340
;2340:		incoming = DotProduct (normal, lightDir);
ADDRLP4 48
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
ADDRLP4 48
INDIRP4
INDIRF4
ADDRLP4 24
INDIRF4
MULF4
ADDRLP4 48
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 24+4
INDIRF4
MULF4
ADDF4
ADDRLP4 48
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 2341
;2341:		if ( incoming <= 0 ) {
ADDRLP4 8
INDIRF4
CNSTF4 0
GTF4 $1140
line 2342
;2342:			verts[i].modulate[0] = ambientLight[0];
ADDRLP4 56
ADDRLP4 12
INDIRF4
ASGNF4
ADDRLP4 60
CNSTF4 1325400064
ASGNF4
ADDRLP4 56
INDIRF4
ADDRLP4 60
INDIRF4
LTF4 $1143
ADDRLP4 52
ADDRLP4 56
INDIRF4
ADDRLP4 60
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1144
JUMPV
LABELV $1143
ADDRLP4 52
ADDRLP4 56
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1144
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRFP4 8
INDIRP4
ADDP4
CNSTI4 20
ADDP4
ADDRLP4 52
INDIRU4
CVUU1 4
ASGNU1
line 2343
;2343:			verts[i].modulate[1] = ambientLight[1];
ADDRLP4 68
ADDRLP4 12+4
INDIRF4
ASGNF4
ADDRLP4 72
CNSTF4 1325400064
ASGNF4
ADDRLP4 68
INDIRF4
ADDRLP4 72
INDIRF4
LTF4 $1147
ADDRLP4 64
ADDRLP4 68
INDIRF4
ADDRLP4 72
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1148
JUMPV
LABELV $1147
ADDRLP4 64
ADDRLP4 68
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1148
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRFP4 8
INDIRP4
ADDP4
CNSTI4 21
ADDP4
ADDRLP4 64
INDIRU4
CVUU1 4
ASGNU1
line 2344
;2344:			verts[i].modulate[2] = ambientLight[2];
ADDRLP4 80
ADDRLP4 12+8
INDIRF4
ASGNF4
ADDRLP4 84
CNSTF4 1325400064
ASGNF4
ADDRLP4 80
INDIRF4
ADDRLP4 84
INDIRF4
LTF4 $1151
ADDRLP4 76
ADDRLP4 80
INDIRF4
ADDRLP4 84
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1152
JUMPV
LABELV $1151
ADDRLP4 76
ADDRLP4 80
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1152
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRFP4 8
INDIRP4
ADDP4
CNSTI4 22
ADDP4
ADDRLP4 76
INDIRU4
CVUU1 4
ASGNU1
line 2345
;2345:			verts[i].modulate[3] = 255;
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRFP4 8
INDIRP4
ADDP4
CNSTI4 23
ADDP4
CNSTU1 255
ASGNU1
line 2346
;2346:			continue;
ADDRGP4 $1135
JUMPV
LABELV $1140
line 2348
;2347:		} 
;2348:		j = ( ambientLight[0] + incoming * directedLight[0] );
ADDRLP4 0
ADDRLP4 12
INDIRF4
ADDRLP4 8
INDIRF4
ADDRLP4 36
INDIRF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 2349
;2349:		if ( j > 255 ) {
ADDRLP4 0
INDIRI4
CNSTI4 255
LEI4 $1153
line 2350
;2350:			j = 255;
ADDRLP4 0
CNSTI4 255
ASGNI4
line 2351
;2351:		}
LABELV $1153
line 2352
;2352:		verts[i].modulate[0] = j;
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRFP4 8
INDIRP4
ADDP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRI4
CVIU4 4
CVUU1 4
ASGNU1
line 2354
;2353:
;2354:		j = ( ambientLight[1] + incoming * directedLight[1] );
ADDRLP4 0
ADDRLP4 12+4
INDIRF4
ADDRLP4 8
INDIRF4
ADDRLP4 36+4
INDIRF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 2355
;2355:		if ( j > 255 ) {
ADDRLP4 0
INDIRI4
CNSTI4 255
LEI4 $1157
line 2356
;2356:			j = 255;
ADDRLP4 0
CNSTI4 255
ASGNI4
line 2357
;2357:		}
LABELV $1157
line 2358
;2358:		verts[i].modulate[1] = j;
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRFP4 8
INDIRP4
ADDP4
CNSTI4 21
ADDP4
ADDRLP4 0
INDIRI4
CVIU4 4
CVUU1 4
ASGNU1
line 2360
;2359:
;2360:		j = ( ambientLight[2] + incoming * directedLight[2] );
ADDRLP4 0
ADDRLP4 12+8
INDIRF4
ADDRLP4 8
INDIRF4
ADDRLP4 36+8
INDIRF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 2361
;2361:		if ( j > 255 ) {
ADDRLP4 0
INDIRI4
CNSTI4 255
LEI4 $1161
line 2362
;2362:			j = 255;
ADDRLP4 0
CNSTI4 255
ASGNI4
line 2363
;2363:		}
LABELV $1161
line 2364
;2364:		verts[i].modulate[2] = j;
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRFP4 8
INDIRP4
ADDP4
CNSTI4 22
ADDP4
ADDRLP4 0
INDIRI4
CVIU4 4
CVUU1 4
ASGNU1
line 2366
;2365:
;2366:		verts[i].modulate[3] = 255;
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRFP4 8
INDIRP4
ADDP4
CNSTI4 23
ADDP4
CNSTU1 255
ASGNU1
line 2367
;2367:	}
LABELV $1135
line 2339
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $1137
ADDRLP4 4
INDIRI4
ADDRFP4 4
INDIRI4
LTI4 $1134
line 2368
;2368:	return qtrue;
CNSTI4 1
RETI4
LABELV $1133
endproc CG_LightVerts 88 16
export CG_Player
proc CG_Player 448 28
line 2376
;2369:}
;2370:
;2371:/*
;2372:===============
;2373:CG_Player
;2374:===============
;2375:*/
;2376:void CG_Player( centity_t *cent ) {
line 2397
;2377:	clientInfo_t	*ci;
;2378:	refEntity_t		legs;
;2379:	refEntity_t		torso;
;2380:	refEntity_t		head;
;2381:	int				clientNum;
;2382:	int				renderfx;
;2383:	qboolean		shadow;
;2384:	float			shadowPlane;
;2385:#ifdef MISSIONPACK
;2386:	refEntity_t		skull;
;2387:	refEntity_t		powerup;
;2388:	int				t;
;2389:	float			c;
;2390:	float			angle;
;2391:	vec3_t			dir, angles;
;2392:#endif
;2393:
;2394:	// the client number is stored in clientNum.  It can't be derived
;2395:	// from the entity number, because a single client may have
;2396:	// multiple corpses on the level using the same clientinfo
;2397:	clientNum = cent->currentState.clientNum;
ADDRLP4 428
ADDRFP4 0
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
ASGNI4
line 2398
;2398:	if ( clientNum < 0 || clientNum >= MAX_CLIENTS ) {
ADDRLP4 428
INDIRI4
CNSTI4 0
LTI4 $1166
ADDRLP4 428
INDIRI4
CNSTI4 64
LTI4 $1164
LABELV $1166
line 2399
;2399:		CG_Error( "Bad clientNum on player entity");
ADDRGP4 $1167
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 2400
;2400:	}
LABELV $1164
line 2401
;2401:	ci = &cgs.clientinfo[ clientNum ];
ADDRLP4 280
CNSTI4 1716
ADDRLP4 428
INDIRI4
MULI4
ADDRGP4 cgs+40972
ADDP4
ASGNP4
line 2405
;2402:
;2403:	// it is possible to see corpses from disconnected players that may
;2404:	// not have valid clientinfo
;2405:	if ( !ci->infoValid ) {
ADDRLP4 280
INDIRP4
INDIRI4
CNSTI4 0
NEI4 $1169
line 2406
;2406:		return;
ADDRGP4 $1163
JUMPV
LABELV $1169
line 2410
;2407:	}
;2408:
;2409:	// get the player model information
;2410:	renderfx = 0;
ADDRLP4 424
CNSTI4 0
ASGNI4
line 2411
;2411:	if ( cent->currentState.number == cg.snap->ps.clientNum) {
ADDRFP4 0
INDIRP4
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
NEI4 $1171
line 2412
;2412:		if (!cg.renderingThirdPerson) {
ADDRGP4 cg+107628
INDIRI4
CNSTI4 0
NEI4 $1174
line 2413
;2413:			renderfx = RF_THIRD_PERSON;			// only draw in mirrors
ADDRLP4 424
CNSTI4 2
ASGNI4
line 2414
;2414:		} else {
ADDRGP4 $1175
JUMPV
LABELV $1174
line 2415
;2415:			if (cg_cameraMode.integer) {
ADDRGP4 cg_cameraMode+12
INDIRI4
CNSTI4 0
EQI4 $1177
line 2416
;2416:				return;
ADDRGP4 $1163
JUMPV
LABELV $1177
line 2418
;2417:			}
;2418:		}
LABELV $1175
line 2419
;2419:	}
LABELV $1171
line 2422
;2420:
;2421:
;2422:	memset( &legs, 0, sizeof(legs) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 2423
;2423:	memset( &torso, 0, sizeof(torso) );
ADDRLP4 140
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 2424
;2424:	memset( &head, 0, sizeof(head) );
ADDRLP4 284
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 2427
;2425:
;2426:	// get the rotation information
;2427:	CG_PlayerAngles( cent, legs.axis, torso.axis, head.axis );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0+28
ARGP4
ADDRLP4 140+28
ARGP4
ADDRLP4 284+28
ARGP4
ADDRGP4 CG_PlayerAngles
CALLV
pop
line 2430
;2428:	
;2429:	// get the animation state (after rotation, to allow feet shuffle)
;2430:	CG_PlayerAnimation( cent, &legs.oldframe, &legs.frame, &legs.backlerp,
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0+96
ARGP4
ADDRLP4 0+80
ARGP4
ADDRLP4 0+100
ARGP4
ADDRLP4 140+96
ARGP4
ADDRLP4 140+80
ARGP4
ADDRLP4 140+100
ARGP4
ADDRGP4 CG_PlayerAnimation
CALLV
pop
line 2434
;2431:		 &torso.oldframe, &torso.frame, &torso.backlerp );
;2432:
;2433:	// add the talk baloon or disconnect icon
;2434:	CG_PlayerSprites( cent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_PlayerSprites
CALLV
pop
line 2437
;2435:
;2436:	// add the shadow
;2437:	shadow = CG_PlayerShadow( cent, &shadowPlane );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 432
ARGP4
ADDRLP4 444
ADDRGP4 CG_PlayerShadow
CALLI4
ASGNI4
ADDRLP4 436
ADDRLP4 444
INDIRI4
ASGNI4
line 2440
;2438:
;2439:	// add a water splash if partially in and out of water
;2440:	CG_PlayerSplash( cent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_PlayerSplash
CALLV
pop
line 2442
;2441:
;2442:	if ( cg_shadows.integer == 3 && shadow ) {
ADDRGP4 cg_shadows+12
INDIRI4
CNSTI4 3
NEI4 $1189
ADDRLP4 436
INDIRI4
CNSTI4 0
EQI4 $1189
line 2443
;2443:		renderfx |= RF_SHADOW_PLANE;
ADDRLP4 424
ADDRLP4 424
INDIRI4
CNSTI4 256
BORI4
ASGNI4
line 2444
;2444:	}
LABELV $1189
line 2445
;2445:	renderfx |= RF_LIGHTING_ORIGIN;			// use the same origin for all
ADDRLP4 424
ADDRLP4 424
INDIRI4
CNSTI4 128
BORI4
ASGNI4
line 2454
;2446:#ifdef MISSIONPACK
;2447:	if( cgs.gametype == GT_HARVESTER ) {
;2448:		CG_PlayerTokens( cent, renderfx );
;2449:	}
;2450:#endif
;2451:	//
;2452:	// add the legs
;2453:	//
;2454:	legs.hModel = ci->legsModel;
ADDRLP4 0+8
ADDRLP4 280
INDIRP4
CNSTI4 520
ADDP4
INDIRI4
ASGNI4
line 2455
;2455:	legs.customSkin = ci->legsSkin;
ADDRLP4 0+108
ADDRLP4 280
INDIRP4
CNSTI4 524
ADDP4
INDIRI4
ASGNI4
line 2457
;2456:
;2457:	VectorCopy( cent->lerpOrigin, legs.origin );
ADDRLP4 0+68
ADDRFP4 0
INDIRP4
CNSTI4 708
ADDP4
INDIRB
ASGNB 12
line 2459
;2458:
;2459:	VectorCopy( cent->lerpOrigin, legs.lightingOrigin );
ADDRLP4 0+12
ADDRFP4 0
INDIRP4
CNSTI4 708
ADDP4
INDIRB
ASGNB 12
line 2460
;2460:	legs.shadowPlane = shadowPlane;
ADDRLP4 0+24
ADDRLP4 432
INDIRF4
ASGNF4
line 2461
;2461:	legs.renderfx = renderfx;
ADDRLP4 0+4
ADDRLP4 424
INDIRI4
ASGNI4
line 2462
;2462:	VectorCopy (legs.origin, legs.oldorigin);	// don't positionally lerp at all
ADDRLP4 0+84
ADDRLP4 0+68
INDIRB
ASGNB 12
line 2464
;2463:
;2464:	CG_AddRefEntityWithPowerups( &legs, &cent->currentState, ci->team );
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 280
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_AddRefEntityWithPowerups
CALLV
pop
line 2467
;2465:
;2466:	// if the model failed, allow the default nullmodel to be displayed
;2467:	if (!legs.hModel) {
ADDRLP4 0+8
INDIRI4
CNSTI4 0
NEI4 $1200
line 2468
;2468:		return;
ADDRGP4 $1163
JUMPV
LABELV $1200
line 2474
;2469:	}
;2470:
;2471:	//
;2472:	// add the torso
;2473:	//
;2474:	torso.hModel = ci->torsoModel;
ADDRLP4 140+8
ADDRLP4 280
INDIRP4
CNSTI4 528
ADDP4
INDIRI4
ASGNI4
line 2475
;2475:	if (!torso.hModel) {
ADDRLP4 140+8
INDIRI4
CNSTI4 0
NEI4 $1204
line 2476
;2476:		return;
ADDRGP4 $1163
JUMPV
LABELV $1204
line 2479
;2477:	}
;2478:
;2479:	torso.customSkin = ci->torsoSkin;
ADDRLP4 140+108
ADDRLP4 280
INDIRP4
CNSTI4 532
ADDP4
INDIRI4
ASGNI4
line 2481
;2480:
;2481:	VectorCopy( cent->lerpOrigin, torso.lightingOrigin );
ADDRLP4 140+12
ADDRFP4 0
INDIRP4
CNSTI4 708
ADDP4
INDIRB
ASGNB 12
line 2483
;2482:
;2483:	CG_PositionRotatedEntityOnTag( &torso, &legs, ci->legsModel, "tag_torso");
ADDRLP4 140
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 280
INDIRP4
CNSTI4 520
ADDP4
INDIRI4
ARGI4
ADDRGP4 $1209
ARGP4
ADDRGP4 CG_PositionRotatedEntityOnTag
CALLV
pop
line 2485
;2484:
;2485:	torso.shadowPlane = shadowPlane;
ADDRLP4 140+24
ADDRLP4 432
INDIRF4
ASGNF4
line 2486
;2486:	torso.renderfx = renderfx;
ADDRLP4 140+4
ADDRLP4 424
INDIRI4
ASGNI4
line 2488
;2487:
;2488:	CG_AddRefEntityWithPowerups( &torso, &cent->currentState, ci->team );
ADDRLP4 140
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 280
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_AddRefEntityWithPowerups
CALLV
pop
line 2698
;2489:
;2490:#ifdef MISSIONPACK
;2491:	if ( cent->currentState.eFlags & EF_KAMIKAZE ) {
;2492:
;2493:		memset( &skull, 0, sizeof(skull) );
;2494:
;2495:		VectorCopy( cent->lerpOrigin, skull.lightingOrigin );
;2496:		skull.shadowPlane = shadowPlane;
;2497:		skull.renderfx = renderfx;
;2498:
;2499:		if ( cent->currentState.eFlags & EF_DEAD ) {
;2500:			// one skull bobbing above the dead body
;2501:			angle = ((cg.time / 7) & 255) * (M_PI * 2) / 255;
;2502:			if (angle > M_PI * 2)
;2503:				angle -= (float)M_PI * 2;
;2504:			dir[0] = sin(angle) * 20;
;2505:			dir[1] = cos(angle) * 20;
;2506:			angle = ((cg.time / 4) & 255) * (M_PI * 2) / 255;
;2507:			dir[2] = 15 + sin(angle) * 8;
;2508:			VectorAdd(torso.origin, dir, skull.origin);
;2509:			
;2510:			dir[2] = 0;
;2511:			VectorCopy(dir, skull.axis[1]);
;2512:			VectorNormalize(skull.axis[1]);
;2513:			VectorSet(skull.axis[2], 0, 0, 1);
;2514:			CrossProduct(skull.axis[1], skull.axis[2], skull.axis[0]);
;2515:
;2516:			skull.hModel = cgs.media.kamikazeHeadModel;
;2517:			trap_R_AddRefEntityToScene( &skull );
;2518:			skull.hModel = cgs.media.kamikazeHeadTrail;
;2519:			trap_R_AddRefEntityToScene( &skull );
;2520:		}
;2521:		else {
;2522:			// three skulls spinning around the player
;2523:			angle = ((cg.time / 4) & 255) * (M_PI * 2) / 255;
;2524:			dir[0] = cos(angle) * 20;
;2525:			dir[1] = sin(angle) * 20;
;2526:			dir[2] = cos(angle) * 20;
;2527:			VectorAdd(torso.origin, dir, skull.origin);
;2528:
;2529:			angles[0] = sin(angle) * 30;
;2530:			angles[1] = (angle * 180 / M_PI) + 90;
;2531:			if (angles[1] > 360)
;2532:				angles[1] -= 360;
;2533:			angles[2] = 0;
;2534:			AnglesToAxis( angles, skull.axis );
;2535:
;2536:			/*
;2537:			dir[2] = 0;
;2538:			VectorInverse(dir);
;2539:			VectorCopy(dir, skull.axis[1]);
;2540:			VectorNormalize(skull.axis[1]);
;2541:			VectorSet(skull.axis[2], 0, 0, 1);
;2542:			CrossProduct(skull.axis[1], skull.axis[2], skull.axis[0]);
;2543:			*/
;2544:
;2545:			skull.hModel = cgs.media.kamikazeHeadModel;
;2546:			trap_R_AddRefEntityToScene( &skull );
;2547:			// flip the trail because this skull is spinning in the other direction
;2548:			VectorInverse(skull.axis[1]);
;2549:			skull.hModel = cgs.media.kamikazeHeadTrail;
;2550:			trap_R_AddRefEntityToScene( &skull );
;2551:
;2552:			angle = ((cg.time / 4) & 255) * (M_PI * 2) / 255 + M_PI;
;2553:			if (angle > M_PI * 2)
;2554:				angle -= (float)M_PI * 2;
;2555:			dir[0] = sin(angle) * 20;
;2556:			dir[1] = cos(angle) * 20;
;2557:			dir[2] = cos(angle) * 20;
;2558:			VectorAdd(torso.origin, dir, skull.origin);
;2559:
;2560:			angles[0] = cos(angle - 0.5 * M_PI) * 30;
;2561:			angles[1] = 360 - (angle * 180 / M_PI);
;2562:			if (angles[1] > 360)
;2563:				angles[1] -= 360;
;2564:			angles[2] = 0;
;2565:			AnglesToAxis( angles, skull.axis );
;2566:
;2567:			/*
;2568:			dir[2] = 0;
;2569:			VectorCopy(dir, skull.axis[1]);
;2570:			VectorNormalize(skull.axis[1]);
;2571:			VectorSet(skull.axis[2], 0, 0, 1);
;2572:			CrossProduct(skull.axis[1], skull.axis[2], skull.axis[0]);
;2573:			*/
;2574:
;2575:			skull.hModel = cgs.media.kamikazeHeadModel;
;2576:			trap_R_AddRefEntityToScene( &skull );
;2577:			skull.hModel = cgs.media.kamikazeHeadTrail;
;2578:			trap_R_AddRefEntityToScene( &skull );
;2579:
;2580:			angle = ((cg.time / 3) & 255) * (M_PI * 2) / 255 + 0.5 * M_PI;
;2581:			if (angle > M_PI * 2)
;2582:				angle -= (float)M_PI * 2;
;2583:			dir[0] = sin(angle) * 20;
;2584:			dir[1] = cos(angle) * 20;
;2585:			dir[2] = 0;
;2586:			VectorAdd(torso.origin, dir, skull.origin);
;2587:			
;2588:			VectorCopy(dir, skull.axis[1]);
;2589:			VectorNormalize(skull.axis[1]);
;2590:			VectorSet(skull.axis[2], 0, 0, 1);
;2591:			CrossProduct(skull.axis[1], skull.axis[2], skull.axis[0]);
;2592:
;2593:			skull.hModel = cgs.media.kamikazeHeadModel;
;2594:			trap_R_AddRefEntityToScene( &skull );
;2595:			skull.hModel = cgs.media.kamikazeHeadTrail;
;2596:			trap_R_AddRefEntityToScene( &skull );
;2597:		}
;2598:	}
;2599:
;2600:	if ( cent->currentState.powerups & ( 1 << PW_GUARD ) ) {
;2601:		memcpy(&powerup, &torso, sizeof(torso));
;2602:		powerup.hModel = cgs.media.guardPowerupModel;
;2603:		powerup.frame = 0;
;2604:		powerup.oldframe = 0;
;2605:		powerup.customSkin = 0;
;2606:		trap_R_AddRefEntityToScene( &powerup );
;2607:	}
;2608:	if ( cent->currentState.powerups & ( 1 << PW_SCOUT ) ) {
;2609:		memcpy(&powerup, &torso, sizeof(torso));
;2610:		powerup.hModel = cgs.media.scoutPowerupModel;
;2611:		powerup.frame = 0;
;2612:		powerup.oldframe = 0;
;2613:		powerup.customSkin = 0;
;2614:		trap_R_AddRefEntityToScene( &powerup );
;2615:	}
;2616:	if ( cent->currentState.powerups & ( 1 << PW_DOUBLER ) ) {
;2617:		memcpy(&powerup, &torso, sizeof(torso));
;2618:		powerup.hModel = cgs.media.doublerPowerupModel;
;2619:		powerup.frame = 0;
;2620:		powerup.oldframe = 0;
;2621:		powerup.customSkin = 0;
;2622:		trap_R_AddRefEntityToScene( &powerup );
;2623:	}
;2624:	if ( cent->currentState.powerups & ( 1 << PW_AMMOREGEN ) ) {
;2625:		memcpy(&powerup, &torso, sizeof(torso));
;2626:		powerup.hModel = cgs.media.ammoRegenPowerupModel;
;2627:		powerup.frame = 0;
;2628:		powerup.oldframe = 0;
;2629:		powerup.customSkin = 0;
;2630:		trap_R_AddRefEntityToScene( &powerup );
;2631:	}
;2632:	if ( cent->currentState.powerups & ( 1 << PW_INVULNERABILITY ) ) {
;2633:		if ( !ci->invulnerabilityStartTime ) {
;2634:			ci->invulnerabilityStartTime = cg.time;
;2635:		}
;2636:		ci->invulnerabilityStopTime = cg.time;
;2637:	}
;2638:	else {
;2639:		ci->invulnerabilityStartTime = 0;
;2640:	}
;2641:	if ( (cent->currentState.powerups & ( 1 << PW_INVULNERABILITY ) ) ||
;2642:		cg.time - ci->invulnerabilityStopTime < 250 ) {
;2643:
;2644:		memcpy(&powerup, &torso, sizeof(torso));
;2645:		powerup.hModel = cgs.media.invulnerabilityPowerupModel;
;2646:		powerup.customSkin = 0;
;2647:		// always draw
;2648:		powerup.renderfx &= ~RF_THIRD_PERSON;
;2649:		VectorCopy(cent->lerpOrigin, powerup.origin);
;2650:
;2651:		if ( cg.time - ci->invulnerabilityStartTime < 250 ) {
;2652:			c = (float) (cg.time - ci->invulnerabilityStartTime) / 250;
;2653:		}
;2654:		else if (cg.time - ci->invulnerabilityStopTime < 250 ) {
;2655:			c = (float) (250 - (cg.time - ci->invulnerabilityStopTime)) / 250;
;2656:		}
;2657:		else {
;2658:			c = 1;
;2659:		}
;2660:		VectorSet( powerup.axis[0], c, 0, 0 );
;2661:		VectorSet( powerup.axis[1], 0, c, 0 );
;2662:		VectorSet( powerup.axis[2], 0, 0, c );
;2663:		trap_R_AddRefEntityToScene( &powerup );
;2664:	}
;2665:
;2666:	t = cg.time - ci->medkitUsageTime;
;2667:	if ( ci->medkitUsageTime && t < 500 ) {
;2668:		memcpy(&powerup, &torso, sizeof(torso));
;2669:		powerup.hModel = cgs.media.medkitUsageModel;
;2670:		powerup.customSkin = 0;
;2671:		// always draw
;2672:		powerup.renderfx &= ~RF_THIRD_PERSON;
;2673:		VectorClear(angles);
;2674:		AnglesToAxis(angles, powerup.axis);
;2675:		VectorCopy(cent->lerpOrigin, powerup.origin);
;2676:		powerup.origin[2] += -24 + (float) t * 80 / 500;
;2677:		if ( t > 400 ) {
;2678:			c = (float) (t - 1000) * 0xff / 100;
;2679:			powerup.shaderRGBA[0] = 0xff - c;
;2680:			powerup.shaderRGBA[1] = 0xff - c;
;2681:			powerup.shaderRGBA[2] = 0xff - c;
;2682:			powerup.shaderRGBA[3] = 0xff - c;
;2683:		}
;2684:		else {
;2685:			powerup.shaderRGBA[0] = 0xff;
;2686:			powerup.shaderRGBA[1] = 0xff;
;2687:			powerup.shaderRGBA[2] = 0xff;
;2688:			powerup.shaderRGBA[3] = 0xff;
;2689:		}
;2690:		trap_R_AddRefEntityToScene( &powerup );
;2691:	}
;2692:#endif // MISSIONPACK
;2693:
;2694:	//
;2695:	// add the head
;2696:	//
;2697:	// Shafe - Trep - This is all new code for headshots
;2698:	if(!cent->pe.noHead)
ADDRFP4 0
INDIRP4
CNSTI4 636
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1212
line 2699
;2699:	{
line 2700
;2700:		head.hModel = ci->headModel;
ADDRLP4 284+8
ADDRLP4 280
INDIRP4
CNSTI4 536
ADDP4
INDIRI4
ASGNI4
line 2701
;2701:		if (!head.hModel) 
ADDRLP4 284+8
INDIRI4
CNSTI4 0
NEI4 $1215
line 2702
;2702:		{
line 2703
;2703:			return;
ADDRGP4 $1163
JUMPV
LABELV $1215
line 2705
;2704:		}
;2705:		head.customSkin = ci->headSkin;
ADDRLP4 284+108
ADDRLP4 280
INDIRP4
CNSTI4 540
ADDP4
INDIRI4
ASGNI4
line 2707
;2706:
;2707:		VectorCopy( cent->lerpOrigin, head.lightingOrigin );
ADDRLP4 284+12
ADDRFP4 0
INDIRP4
CNSTI4 708
ADDP4
INDIRB
ASGNB 12
line 2709
;2708:
;2709:		CG_PositionRotatedEntityOnTag( &head, &torso, ci->torsoModel, "tag_head");
ADDRLP4 284
ARGP4
ADDRLP4 140
ARGP4
ADDRLP4 280
INDIRP4
CNSTI4 528
ADDP4
INDIRI4
ARGI4
ADDRGP4 $1220
ARGP4
ADDRGP4 CG_PositionRotatedEntityOnTag
CALLV
pop
line 2711
;2710:
;2711:		head.shadowPlane = shadowPlane;
ADDRLP4 284+24
ADDRLP4 432
INDIRF4
ASGNF4
line 2712
;2712:		head.renderfx = renderfx;
ADDRLP4 284+4
ADDRLP4 424
INDIRI4
ASGNI4
line 2714
;2713:
;2714:		CG_AddRefEntityWithPowerups( &head, &cent->currentState, ci->team );
ADDRLP4 284
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 280
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_AddRefEntityWithPowerups
CALLV
pop
line 2715
;2715:	}
LABELV $1212
line 2744
;2716:
;2717:	/*  Shafe - Trep - This is the original code -- Fuck.. Lets hope we dont end up compiling with MISSIONPACK!
;2718:	head.hModel = ci->headModel;
;2719:	if (!head.hModel) {
;2720:		return;
;2721:	}
;2722:	head.customSkin = ci->headSkin;
;2723:
;2724:	VectorCopy( cent->lerpOrigin, head.lightingOrigin );
;2725:
;2726:	CG_PositionRotatedEntityOnTag( &head, &torso, ci->torsoModel, "tag_head");
;2727:
;2728:	head.shadowPlane = shadowPlane;
;2729:	head.renderfx = renderfx;
;2730:
;2731:	CG_AddRefEntityWithPowerups( &head, &cent->currentState, ci->team );
;2732:	*/
;2733:
;2734:
;2735:#ifdef MISSIONPACK
;2736:	CG_BreathPuffs(cent, &head);
;2737:
;2738:	CG_DustTrail(cent);
;2739:#endif
;2740:
;2741:	//
;2742:	// add the gun / barrel / flash
;2743:	//
;2744:	CG_AddPlayerWeapon( &torso, NULL, cent, ci->team );
ADDRLP4 140
ARGP4
CNSTP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 280
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_AddPlayerWeapon
CALLV
pop
line 2747
;2745:
;2746:	// add powerups floating behind the player
;2747:	CG_PlayerPowerups( cent, &torso );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 140
ARGP4
ADDRGP4 CG_PlayerPowerups
CALLV
pop
line 2751
;2748:
;2749://unlagged - client options
;2750:	// add the bounding box (if cg_drawBBox is 1)
;2751:	CG_AddBoundingBox( cent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddBoundingBox
CALLV
pop
line 2753
;2752://unlagged - client options
;2753:}
LABELV $1163
endproc CG_Player 448 28
export CG_ResetPlayerEntity
proc CG_ResetPlayerEntity 40 12
line 2765
;2754:
;2755:
;2756://=====================================================================
;2757:
;2758:/*
;2759:===============
;2760:CG_ResetPlayerEntity
;2761:
;2762:A player just came into view or teleported, so reset all animation info
;2763:===============
;2764:*/
;2765:void CG_ResetPlayerEntity( centity_t *cent ) {
line 2766
;2766:	cent->errorTime = -99999;		// guarantee no error decay added
ADDRFP4 0
INDIRP4
CNSTI4 640
ADDP4
CNSTI4 -99999
ASGNI4
line 2767
;2767:	cent->extrapolated = qfalse;	
ADDRFP4 0
INDIRP4
CNSTI4 668
ADDP4
CNSTI4 0
ASGNI4
line 2769
;2768:
;2769:	CG_ClearLerpFrame( &cgs.clientinfo[ cent->currentState.clientNum ], &cent->pe.legs, cent->currentState.legsAnim );
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
CNSTI4 1716
ADDRLP4 0
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+40972
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 452
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_ClearLerpFrame
CALLV
pop
line 2770
;2770:	CG_ClearLerpFrame( &cgs.clientinfo[ cent->currentState.clientNum ], &cent->pe.torso, cent->currentState.torsoAnim );
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
CNSTI4 1716
ADDRLP4 4
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+40972
ADDP4
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 500
ADDP4
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 200
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_ClearLerpFrame
CALLV
pop
line 2772
;2771:
;2772:	BG_EvaluateTrajectory( &cent->currentState.pos, cg.time, cent->lerpOrigin );
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 8
INDIRP4
CNSTI4 708
ADDP4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 2773
;2773:	BG_EvaluateTrajectory( &cent->currentState.apos, cg.time, cent->lerpAngles );
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
ARGP4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 12
INDIRP4
CNSTI4 720
ADDP4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 2775
;2774:
;2775:	VectorCopy( cent->lerpOrigin, cent->rawOrigin );
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 672
ADDP4
ADDRLP4 16
INDIRP4
CNSTI4 708
ADDP4
INDIRB
ASGNB 12
line 2776
;2776:	VectorCopy( cent->lerpAngles, cent->rawAngles );
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 684
ADDP4
ADDRLP4 20
INDIRP4
CNSTI4 720
ADDP4
INDIRB
ASGNB 12
line 2778
;2777:
;2778:	memset( &cent->pe.legs, 0, sizeof( cent->pe.legs ) );
ADDRFP4 0
INDIRP4
CNSTI4 452
ADDP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 48
ARGI4
ADDRGP4 memset
CALLP4
pop
line 2779
;2779:	cent->pe.legs.yawAngle = cent->rawAngles[YAW];
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTI4 472
ADDP4
ADDRLP4 24
INDIRP4
CNSTI4 688
ADDP4
INDIRF4
ASGNF4
line 2780
;2780:	cent->pe.legs.yawing = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 476
ADDP4
CNSTI4 0
ASGNI4
line 2781
;2781:	cent->pe.legs.pitchAngle = 0;
ADDRFP4 0
INDIRP4
CNSTI4 480
ADDP4
CNSTF4 0
ASGNF4
line 2782
;2782:	cent->pe.legs.pitching = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 484
ADDP4
CNSTI4 0
ASGNI4
line 2784
;2783:
;2784:	memset( &cent->pe.torso, 0, sizeof( cent->pe.legs ) );
ADDRFP4 0
INDIRP4
CNSTI4 500
ADDP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 48
ARGI4
ADDRGP4 memset
CALLP4
pop
line 2785
;2785:	cent->pe.torso.yawAngle = cent->rawAngles[YAW];
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 520
ADDP4
ADDRLP4 28
INDIRP4
CNSTI4 688
ADDP4
INDIRF4
ASGNF4
line 2786
;2786:	cent->pe.torso.yawing = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
CNSTI4 0
ASGNI4
line 2787
;2787:	cent->pe.torso.pitchAngle = cent->rawAngles[PITCH];
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 528
ADDP4
ADDRLP4 32
INDIRP4
CNSTI4 684
ADDP4
INDIRF4
ASGNF4
line 2788
;2788:	cent->pe.torso.pitching = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 532
ADDP4
CNSTI4 0
ASGNI4
line 2790
;2789:
;2790:	cent->pe.noHead = qfalse; // Shafe - Trep - Part of the headshot code
ADDRFP4 0
INDIRP4
CNSTI4 636
ADDP4
CNSTI4 0
ASGNI4
line 2792
;2791:
;2792:	if ( cg_debugPosition.integer ) {
ADDRGP4 cg_debugPosition+12
INDIRI4
CNSTI4 0
EQI4 $1228
line 2793
;2793:		CG_Printf("%i ResetPlayerEntity yaw=%i\n", cent->currentState.number, cent->pe.torso.yawAngle );
ADDRGP4 $1231
ARGP4
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
INDIRI4
ARGI4
ADDRLP4 36
INDIRP4
CNSTI4 520
ADDP4
INDIRF4
ARGF4
ADDRGP4 CG_Printf
CALLV
pop
line 2794
;2794:	}
LABELV $1228
line 2795
;2795:}
LABELV $1223
endproc CG_ResetPlayerEntity 40 12
import CG_DrawScanner
import CG_ScannerOff_f
import CG_ScannerOn_f
import CG_NewParticleArea
import initparticles
import CG_ParticleExplosion
import CG_ParticleMisc
import CG_ParticleDust
import CG_ParticleSparks
import CG_ParticleBulletDebris
import CG_ParticleSnowFlurry
import CG_AddParticleShrapnel
import CG_ParticleSmoke
import CG_ParticleSnow
import CG_AddParticles
import CG_ClearParticles
import trap_GetEntityToken
import trap_getCameraInfo
import trap_startCamera
import trap_loadCamera
import trap_SnapVector
import trap_CIN_SetExtents
import trap_CIN_DrawCinematic
import trap_CIN_RunCinematic
import trap_CIN_StopCinematic
import trap_CIN_PlayCinematic
import trap_Key_GetKey
import trap_Key_SetCatcher
import trap_Key_GetCatcher
import trap_Key_IsDown
import trap_R_RegisterFont
import trap_MemoryRemaining
import testPrintFloat
import testPrintInt
import trap_SetUserCmdValue
import trap_GetUserCmd
import trap_GetCurrentCmdNumber
import trap_GetServerCommand
import trap_GetSnapshot
import trap_GetCurrentSnapshotNumber
import trap_GetGameState
import trap_GetGlconfig
import trap_R_RemapShader
import trap_R_LerpTag
import trap_R_ModelBounds
import trap_R_DrawStretchPic
import trap_R_SetColor
import trap_R_RenderScene
import trap_R_LightForPoint
import trap_R_AddLightToScene
import trap_R_AddPolysToScene
import trap_R_AddPolyToScene
import trap_R_AddRefEntityToScene
import trap_R_ClearScene
import trap_R_RegisterShaderNoMip
import trap_R_RegisterShader
import trap_R_RegisterSkin
import trap_R_RegisterModel
import trap_R_LoadWorldMap
import trap_S_StopBackgroundTrack
import trap_S_StartBackgroundTrack
import trap_S_RegisterSound
import trap_S_Respatialize
import trap_S_UpdateEntityPosition
import trap_S_AddRealLoopingSound
import trap_S_AddLoopingSound
import trap_S_ClearLoopingSounds
import trap_S_StartLocalSound
import trap_S_StopLoopingSound
import trap_S_StartSound
import trap_CM_MarkFragments
import trap_CM_TransformedBoxTrace
import trap_CM_BoxTrace
import trap_CM_TransformedPointContents
import trap_CM_PointContents
import trap_CM_TempBoxModel
import trap_CM_InlineModel
import trap_CM_NumInlineModels
import trap_CM_LoadMap
import trap_UpdateScreen
import trap_SendClientCommand
import trap_AddCommand
import trap_SendConsoleCommand
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_Cvar_VariableStringBuffer
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_Milliseconds
import trap_Error
import trap_Print
import CG_CheckChangedPredictableEvents
import CG_TransitionPlayerState
import CG_Respawn
import CG_PlayBufferedVoiceChats
import CG_VoiceChatLocal
import CG_ShaderStateChanged
import CG_LoadVoiceChats
import CG_SetConfigValues
import CG_ParseServerinfo
import CG_ExecuteNewServerCommands
import CG_InitConsoleCommands
import CG_ConsoleCommand
import CG_DrawOldTourneyScoreboard
import CG_DrawOldScoreboard
import CG_DrawInformation
import CG_LoadingClient
import CG_LoadingItem
import CG_LoadingString
import CG_TransitionEntity
import CG_ProcessSnapshots
import CG_MakeExplosion
import CG_Bleed
import CG_BigExplode
import CG_GibPlayerHeadshot
import CG_GibPlayer
import CG_ScorePlum
import CG_SpawnEffect
import CG_BubbleTrail
import CG_SmokePuff
import CG_AddLocalEntities
import CG_AllocLocalEntity
import CG_InitLocalEntities
import CG_ImpactMark
import CG_AddMarks
import CG_InitMarkPolys
import CG_OutOfAmmoChange
import CG_DrawWeaponSelect
import CG_AddPlayerWeapon
import CG_AddViewWeapon
import CG_GrappleTrail
import CG_RailTrail
import CG_Bullet
import CG_ShotgunFire
import CG_MissileHitPlayer
import CG_MissileHitWall
import CG_FireWeapon2
import CG_FireWeapon
import CG_RegisterItemVisuals
import CG_RegisterWeapon
import CG_Weapon_f
import CG_PrevWeapon_f
import CG_NextWeapon_f
import CG_PositionRotatedEntityOnTag
import CG_PositionEntityOnTag
import CG_AdjustPositionForMover
import CG_Beam
import CG_AddPacketEntities
import CG_SetEntitySoundPosition
import CG_PainEvent
import CG_EntityEvent
import CG_PlaceString
import CG_CheckEvents
import CG_PredictPlayerState
import CG_Trace
import CG_PointContents
import CG_BuildSolidList
import CG_StatusHandle
import CG_OtherTeamHasFlag
import CG_YourTeamHasFlag
import CG_GameTypeString
import CG_CheckOrderPending
import CG_Text_PaintChar
import CG_Draw3DModel
import CG_GetKillerText
import CG_GetGameStatusText
import CG_GetTeamColor
import CG_InitTeamChat
import CG_SetPrintString
import CG_ShowResponseHead
import CG_RunMenuScript
import CG_OwnerDrawVisible
import CG_GetValue
import CG_SelectNextPlayer
import CG_SelectPrevPlayer
import CG_Text_Height
import CG_Text_Width
import CG_Text_Paint
import CG_OwnerDraw
import CG_DrawTeamBackground
import CG_DrawFlagModel
import CG_DrawActive
import CG_DrawHead
import CG_CenterPrint
import CG_AddLagometerSnapshotInfo
import CG_AddLagometerFrameInfo
import teamChat2
import teamChat1
import systemChat
import drawTeamOverlayModificationCount
import numSortedTeamPlayers
import sortedTeamPlayers
import CG_DrawTopBottom
import CG_DrawSides
import CG_DrawRect
import UI_DrawProportionalString
import CG_GetColorForHealth
import CG_ColorForHealth
import CG_TileClear
import CG_TeamColor
import CG_FadeColor
import CG_DrawStrlen
import CG_DrawSmallStringColor
import CG_DrawSmallString
import CG_DrawBigStringColor
import CG_DrawBigString
import CG_DrawStringExt
import CG_DrawString
import CG_DrawPic
import CG_FillRect
import CG_AdjustFrom640
import CG_DrawActiveFrame
import CG_AddBufferedSound
import CG_ZoomUp_f
import CG_ZoomDown_f
import CG_TestModelPrevSkin_f
import CG_TestModelNextSkin_f
import CG_TestModelPrevFrame_f
import CG_TestModelNextFrame_f
import CG_TestGun_f
import CG_TestModel_f
import CG_BuildSpectatorString
import CG_GetSelectedScore
import CG_SetScoreSelection
import CG_RankRunFrame
import CG_EventHandling
import CG_MouseEvent
import CG_KeyEvent
import CG_LoadMenus
import CG_LastAttacker
import CG_CrosshairPlayer
import CG_UpdateCvars
import CG_StartMusic
import CG_Error
import CG_Printf
import CG_Argv
import CG_ConfigString
import CG_Cvar_ClampInt
import CG_AddBoundingBox
import CG_PredictWeaponEffects
import cg_playerOrigins
import cg_plOut
import cg_latentCmds
import cg_latentSnaps
import cl_timeNudge
import cg_optimizePrediction
import cg_projectileNudge
import sv_fps
import cg_cmdTimeNudge
import cg_drawBBox
import cg_debugDelag
import cg_delag
import cg_trueLightning
import cg_oldPlasma
import cg_oldRocket
import cg_oldRail
import cg_noProjectileTrail
import cg_noTaunt
import cg_bigFont
import cg_smallFont
import cg_cameraMode
import cg_timescale
import cg_timescaleFadeSpeed
import cg_timescaleFadeEnd
import cg_cameraOrbitDelay
import cg_cameraOrbit
import pmove_msec
import pmove_fixed
import cg_scorePlum
import cg_noVoiceText
import cg_noVoiceChats
import cg_teamChatsOnly
import cg_drawFriend
import cg_deferPlayers
import cg_predictItems
import cg_blood
import cg_paused
import cg_buildScript
import cg_forceModel
import cg_stats
import cg_teamChatHeight
import cg_teamChatTime
import cg_synchronousClients
import cg_drawAttacker
import cg_lagometer
import cg_stereoSeparation
import cg_thirdPerson
import cg_thirdPersonAngle
import cg_thirdPersonRange
import cg_zoomFov
import cg_fov
import cg_simpleItems
import cg_ignore
import cg_autoswitch
import cg_tracerLength
import cg_tracerWidth
import cg_tracerChance
import cg_viewsize
import cg_drawGun
import cg_gun_z
import cg_gun_y
import cg_gun_x
import cg_gun_frame
import cg_brassTime
import cg_addMarks
import cg_footsteps
import cg_showmiss
import cg_noPlayerAnims
import cg_nopredict
import cg_errorDecay
import cg_railTrailTime
import cg_debugEvents
import cg_debugPosition
import cg_debugAnim
import cg_animSpeed
import cg_draw2D
import cg_drawStatus
import cg_crosshairHealth
import cg_crosshairSize
import cg_crosshairY
import cg_crosshairX
import cg_teamOverlayUserinfo
import cg_drawTeamOverlay
import cg_drawRewards
import cg_drawCrosshairNames
import cg_drawCrosshair
import cg_drawAmmoWarning
import cg_drawIcons
import cg_draw3dIcons
import cg_drawSnapshot
import cg_drawFPS
import cg_drawTimer
import cg_gibs
import cg_shadows
import cg_swingSpeed
import cg_bobroll
import cg_bobpitch
import cg_bobup
import cg_runroll
import cg_runpitch
import cg_centertime
import cg_markPolys
import cg_items
import cg_weapons
import cg_entities
import cg
import cgs
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import Max_Ammo
import BG_CanItemBeGrabbed
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import Com_Printf
import Com_Error
import Info_NextPair
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_RemoveKey_big
import Info_RemoveKey
import Info_ValueForKey
import va
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import SnapVectorTowards
import tonextint
import init_tonextint
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Com_Memcpy
import Com_Memset
import Hunk_Alloc
import FloatSwap
import LongSwap
import ShortSwap
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import sscanf
import vsprintf
import _atoi
import atoi
import _atof
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $1231
byte 1 37
byte 1 105
byte 1 32
byte 1 82
byte 1 101
byte 1 115
byte 1 101
byte 1 116
byte 1 80
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 69
byte 1 110
byte 1 116
byte 1 105
byte 1 116
byte 1 121
byte 1 32
byte 1 121
byte 1 97
byte 1 119
byte 1 61
byte 1 37
byte 1 105
byte 1 10
byte 1 0
align 1
LABELV $1220
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 104
byte 1 101
byte 1 97
byte 1 100
byte 1 0
align 1
LABELV $1209
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 116
byte 1 111
byte 1 114
byte 1 115
byte 1 111
byte 1 0
align 1
LABELV $1167
byte 1 66
byte 1 97
byte 1 100
byte 1 32
byte 1 99
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 78
byte 1 117
byte 1 109
byte 1 32
byte 1 111
byte 1 110
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 32
byte 1 101
byte 1 110
byte 1 116
byte 1 105
byte 1 116
byte 1 121
byte 1 0
align 1
LABELV $750
byte 1 66
byte 1 97
byte 1 100
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 32
byte 1 109
byte 1 111
byte 1 118
byte 1 101
byte 1 109
byte 1 101
byte 1 110
byte 1 116
byte 1 32
byte 1 97
byte 1 110
byte 1 103
byte 1 108
byte 1 101
byte 1 0
align 1
LABELV $679
byte 1 67
byte 1 108
byte 1 97
byte 1 109
byte 1 112
byte 1 32
byte 1 108
byte 1 102
byte 1 45
byte 1 62
byte 1 102
byte 1 114
byte 1 97
byte 1 109
byte 1 101
byte 1 84
byte 1 105
byte 1 109
byte 1 101
byte 1 10
byte 1 0
align 1
LABELV $645
byte 1 65
byte 1 110
byte 1 105
byte 1 109
byte 1 58
byte 1 32
byte 1 37
byte 1 105
byte 1 10
byte 1 0
align 1
LABELV $641
byte 1 66
byte 1 97
byte 1 100
byte 1 32
byte 1 97
byte 1 110
byte 1 105
byte 1 109
byte 1 97
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 32
byte 1 110
byte 1 117
byte 1 109
byte 1 98
byte 1 101
byte 1 114
byte 1 58
byte 1 32
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $624
byte 1 77
byte 1 101
byte 1 109
byte 1 111
byte 1 114
byte 1 121
byte 1 32
byte 1 105
byte 1 115
byte 1 32
byte 1 108
byte 1 111
byte 1 119
byte 1 46
byte 1 32
byte 1 32
byte 1 85
byte 1 115
byte 1 105
byte 1 110
byte 1 103
byte 1 32
byte 1 100
byte 1 101
byte 1 102
byte 1 101
byte 1 114
byte 1 114
byte 1 101
byte 1 100
byte 1 32
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 46
byte 1 10
byte 1 0
align 1
LABELV $588
byte 1 104
byte 1 101
byte 1 97
byte 1 100
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 0
align 1
LABELV $577
byte 1 104
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 0
align 1
LABELV $544
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 0
align 1
LABELV $542
byte 1 103
byte 1 95
byte 1 98
byte 1 108
byte 1 117
byte 1 101
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 0
align 1
LABELV $540
byte 1 103
byte 1 95
byte 1 114
byte 1 101
byte 1 100
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 0
align 1
LABELV $538
byte 1 116
byte 1 108
byte 1 0
align 1
LABELV $536
byte 1 116
byte 1 116
byte 1 0
align 1
LABELV $534
byte 1 116
byte 1 0
align 1
LABELV $532
byte 1 108
byte 1 0
align 1
LABELV $530
byte 1 119
byte 1 0
align 1
LABELV $528
byte 1 104
byte 1 99
byte 1 0
align 1
LABELV $526
byte 1 115
byte 1 107
byte 1 105
byte 1 108
byte 1 108
byte 1 0
align 1
LABELV $524
byte 1 99
byte 1 50
byte 1 0
align 1
LABELV $522
byte 1 99
byte 1 49
byte 1 0
align 1
LABELV $519
byte 1 110
byte 1 0
align 1
LABELV $514
byte 1 67
byte 1 71
byte 1 95
byte 1 83
byte 1 101
byte 1 116
byte 1 68
byte 1 101
byte 1 102
byte 1 101
byte 1 114
byte 1 114
byte 1 101
byte 1 100
byte 1 67
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 73
byte 1 110
byte 1 102
byte 1 111
byte 1 58
byte 1 32
byte 1 110
byte 1 111
byte 1 32
byte 1 118
byte 1 97
byte 1 108
byte 1 105
byte 1 100
byte 1 32
byte 1 99
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 115
byte 1 33
byte 1 10
byte 1 0
align 1
LABELV $449
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $448
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 118
byte 1 111
byte 1 105
byte 1 99
byte 1 101
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 109
byte 1 105
byte 1 115
byte 1 99
byte 1 47
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $435
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 0
align 1
LABELV $430
byte 1 68
byte 1 69
byte 1 70
byte 1 65
byte 1 85
byte 1 76
byte 1 84
byte 1 95
byte 1 77
byte 1 79
byte 1 68
byte 1 69
byte 1 76
byte 1 32
byte 1 40
byte 1 37
byte 1 115
byte 1 41
byte 1 32
byte 1 102
byte 1 97
byte 1 105
byte 1 108
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 114
byte 1 101
byte 1 103
byte 1 105
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $427
byte 1 68
byte 1 69
byte 1 70
byte 1 65
byte 1 85
byte 1 76
byte 1 84
byte 1 95
byte 1 84
byte 1 69
byte 1 65
byte 1 77
byte 1 95
byte 1 77
byte 1 79
byte 1 68
byte 1 69
byte 1 76
byte 1 32
byte 1 47
byte 1 32
byte 1 115
byte 1 107
byte 1 105
byte 1 110
byte 1 32
byte 1 40
byte 1 37
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 41
byte 1 32
byte 1 102
byte 1 97
byte 1 105
byte 1 108
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 114
byte 1 101
byte 1 103
byte 1 105
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $426
byte 1 115
byte 1 97
byte 1 114
byte 1 103
byte 1 101
byte 1 0
align 1
LABELV $418
byte 1 67
byte 1 71
byte 1 95
byte 1 82
byte 1 101
byte 1 103
byte 1 105
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 67
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 77
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 110
byte 1 97
byte 1 109
byte 1 101
byte 1 40
byte 1 32
byte 1 37
byte 1 115
byte 1 44
byte 1 32
byte 1 37
byte 1 115
byte 1 44
byte 1 32
byte 1 37
byte 1 115
byte 1 44
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 41
byte 1 32
byte 1 102
byte 1 97
byte 1 105
byte 1 108
byte 1 101
byte 1 100
byte 1 0
align 1
LABELV $399
byte 1 116
byte 1 103
byte 1 97
byte 1 0
align 1
LABELV $396
byte 1 105
byte 1 99
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $393
byte 1 67
byte 1 71
byte 1 95
byte 1 82
byte 1 101
byte 1 103
byte 1 105
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 67
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 77
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 110
byte 1 97
byte 1 109
byte 1 101
byte 1 58
byte 1 32
byte 1 70
byte 1 97
byte 1 105
byte 1 108
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 32
byte 1 97
byte 1 110
byte 1 105
byte 1 109
byte 1 97
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 32
byte 1 102
byte 1 105
byte 1 108
byte 1 101
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $390
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 50
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 97
byte 1 110
byte 1 105
byte 1 109
byte 1 97
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 46
byte 1 99
byte 1 102
byte 1 103
byte 1 0
align 1
LABELV $387
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 99
byte 1 104
byte 1 97
byte 1 114
byte 1 97
byte 1 99
byte 1 116
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 97
byte 1 110
byte 1 105
byte 1 109
byte 1 97
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 46
byte 1 99
byte 1 102
byte 1 103
byte 1 0
align 1
LABELV $384
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 97
byte 1 110
byte 1 105
byte 1 109
byte 1 97
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 46
byte 1 99
byte 1 102
byte 1 103
byte 1 0
align 1
LABELV $383
byte 1 67
byte 1 71
byte 1 95
byte 1 82
byte 1 101
byte 1 103
byte 1 105
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 67
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 77
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 110
byte 1 97
byte 1 109
byte 1 101
byte 1 58
byte 1 32
byte 1 70
byte 1 97
byte 1 105
byte 1 108
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 32
byte 1 115
byte 1 107
byte 1 105
byte 1 110
byte 1 32
byte 1 102
byte 1 105
byte 1 108
byte 1 101
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 44
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $382
byte 1 67
byte 1 71
byte 1 95
byte 1 82
byte 1 101
byte 1 103
byte 1 105
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 67
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 77
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 110
byte 1 97
byte 1 109
byte 1 101
byte 1 58
byte 1 32
byte 1 70
byte 1 97
byte 1 105
byte 1 108
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 32
byte 1 115
byte 1 107
byte 1 105
byte 1 110
byte 1 32
byte 1 102
byte 1 105
byte 1 108
byte 1 101
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 44
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $379
byte 1 83
byte 1 116
byte 1 114
byte 1 111
byte 1 103
byte 1 103
byte 1 115
byte 1 0
align 1
LABELV $378
byte 1 80
byte 1 97
byte 1 103
byte 1 97
byte 1 110
byte 1 115
byte 1 0
align 1
LABELV $377
byte 1 37
byte 1 115
byte 1 47
byte 1 0
align 1
LABELV $374
byte 1 70
byte 1 97
byte 1 105
byte 1 108
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 32
byte 1 115
byte 1 107
byte 1 105
byte 1 110
byte 1 32
byte 1 102
byte 1 105
byte 1 108
byte 1 101
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 44
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $367
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 50
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 104
byte 1 101
byte 1 97
byte 1 100
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $362
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 104
byte 1 101
byte 1 97
byte 1 100
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $361
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 104
byte 1 101
byte 1 97
byte 1 100
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $356
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 50
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 117
byte 1 112
byte 1 112
byte 1 101
byte 1 114
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $353
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 50
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 117
byte 1 112
byte 1 112
byte 1 101
byte 1 114
byte 1 46
byte 1 109
byte 1 100
byte 1 114
byte 1 0
align 1
LABELV $350
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 99
byte 1 104
byte 1 97
byte 1 114
byte 1 97
byte 1 99
byte 1 116
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 117
byte 1 112
byte 1 112
byte 1 101
byte 1 114
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $347
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 117
byte 1 112
byte 1 112
byte 1 101
byte 1 114
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $346
byte 1 67
byte 1 71
byte 1 95
byte 1 82
byte 1 101
byte 1 103
byte 1 105
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 67
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 77
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 110
byte 1 97
byte 1 109
byte 1 101
byte 1 58
byte 1 32
byte 1 70
byte 1 97
byte 1 105
byte 1 108
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 32
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 32
byte 1 102
byte 1 105
byte 1 108
byte 1 101
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $343
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 50
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 108
byte 1 111
byte 1 119
byte 1 101
byte 1 114
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $340
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 50
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 108
byte 1 111
byte 1 119
byte 1 101
byte 1 114
byte 1 46
byte 1 109
byte 1 100
byte 1 114
byte 1 0
align 1
LABELV $337
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 99
byte 1 104
byte 1 97
byte 1 114
byte 1 97
byte 1 99
byte 1 116
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 108
byte 1 111
byte 1 119
byte 1 101
byte 1 114
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $334
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 108
byte 1 111
byte 1 119
byte 1 101
byte 1 114
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $326
byte 1 72
byte 1 101
byte 1 97
byte 1 100
byte 1 32
byte 1 115
byte 1 107
byte 1 105
byte 1 110
byte 1 32
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 32
byte 1 102
byte 1 97
byte 1 105
byte 1 108
byte 1 117
byte 1 114
byte 1 101
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $323
byte 1 104
byte 1 101
byte 1 97
byte 1 100
byte 1 0
align 1
LABELV $320
byte 1 84
byte 1 111
byte 1 114
byte 1 115
byte 1 111
byte 1 32
byte 1 115
byte 1 107
byte 1 105
byte 1 110
byte 1 32
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 32
byte 1 102
byte 1 97
byte 1 105
byte 1 108
byte 1 117
byte 1 114
byte 1 101
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $317
byte 1 117
byte 1 112
byte 1 112
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $314
byte 1 76
byte 1 101
byte 1 103
byte 1 32
byte 1 115
byte 1 107
byte 1 105
byte 1 110
byte 1 32
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 32
byte 1 102
byte 1 97
byte 1 105
byte 1 108
byte 1 117
byte 1 114
byte 1 101
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $311
byte 1 115
byte 1 107
byte 1 105
byte 1 110
byte 1 0
align 1
LABELV $310
byte 1 108
byte 1 111
byte 1 119
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $281
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 50
byte 1 47
byte 1 37
byte 1 115
byte 1 37
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 95
byte 1 37
byte 1 115
byte 1 46
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $280
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 50
byte 1 47
byte 1 37
byte 1 115
byte 1 37
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 37
byte 1 115
byte 1 95
byte 1 37
byte 1 115
byte 1 46
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $275
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 37
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 95
byte 1 37
byte 1 115
byte 1 46
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $274
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 37
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 37
byte 1 115
byte 1 95
byte 1 37
byte 1 115
byte 1 46
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $264
byte 1 104
byte 1 101
byte 1 97
byte 1 100
byte 1 115
byte 1 47
byte 1 0
align 1
LABELV $253
byte 1 99
byte 1 104
byte 1 97
byte 1 114
byte 1 97
byte 1 99
byte 1 116
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 0
align 1
LABELV $243
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 50
byte 1 47
byte 1 37
byte 1 115
byte 1 37
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 95
byte 1 37
byte 1 115
byte 1 46
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $242
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 50
byte 1 47
byte 1 37
byte 1 115
byte 1 37
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 37
byte 1 115
byte 1 95
byte 1 37
byte 1 115
byte 1 46
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $232
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 37
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 95
byte 1 37
byte 1 115
byte 1 46
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $231
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 37
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 37
byte 1 115
byte 1 95
byte 1 37
byte 1 115
byte 1 46
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $223
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 50
byte 1 47
byte 1 37
byte 1 115
byte 1 37
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 95
byte 1 37
byte 1 115
byte 1 95
byte 1 37
byte 1 115
byte 1 46
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $222
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 50
byte 1 47
byte 1 37
byte 1 115
byte 1 37
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 37
byte 1 115
byte 1 95
byte 1 37
byte 1 115
byte 1 95
byte 1 37
byte 1 115
byte 1 46
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $217
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 37
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 95
byte 1 37
byte 1 115
byte 1 95
byte 1 37
byte 1 115
byte 1 46
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $216
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 37
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 37
byte 1 115
byte 1 95
byte 1 37
byte 1 115
byte 1 95
byte 1 37
byte 1 115
byte 1 46
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $206
byte 1 0
align 1
LABELV $205
byte 1 114
byte 1 101
byte 1 100
byte 1 0
align 1
LABELV $204
byte 1 98
byte 1 108
byte 1 117
byte 1 101
byte 1 0
align 1
LABELV $192
byte 1 69
byte 1 114
byte 1 114
byte 1 111
byte 1 114
byte 1 32
byte 1 112
byte 1 97
byte 1 114
byte 1 115
byte 1 105
byte 1 110
byte 1 103
byte 1 32
byte 1 97
byte 1 110
byte 1 105
byte 1 109
byte 1 97
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 32
byte 1 102
byte 1 105
byte 1 108
byte 1 101
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $167
byte 1 117
byte 1 110
byte 1 107
byte 1 110
byte 1 111
byte 1 119
byte 1 110
byte 1 32
byte 1 116
byte 1 111
byte 1 107
byte 1 101
byte 1 110
byte 1 32
byte 1 39
byte 1 37
byte 1 115
byte 1 39
byte 1 32
byte 1 105
byte 1 115
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $164
byte 1 102
byte 1 105
byte 1 120
byte 1 101
byte 1 100
byte 1 116
byte 1 111
byte 1 114
byte 1 115
byte 1 111
byte 1 0
align 1
LABELV $161
byte 1 102
byte 1 105
byte 1 120
byte 1 101
byte 1 100
byte 1 108
byte 1 101
byte 1 103
byte 1 115
byte 1 0
align 1
LABELV $150
byte 1 115
byte 1 101
byte 1 120
byte 1 0
align 1
LABELV $141
byte 1 104
byte 1 101
byte 1 97
byte 1 100
byte 1 111
byte 1 102
byte 1 102
byte 1 115
byte 1 101
byte 1 116
byte 1 0
align 1
LABELV $138
byte 1 66
byte 1 97
byte 1 100
byte 1 32
byte 1 102
byte 1 111
byte 1 111
byte 1 116
byte 1 115
byte 1 116
byte 1 101
byte 1 112
byte 1 115
byte 1 32
byte 1 112
byte 1 97
byte 1 114
byte 1 109
byte 1 32
byte 1 105
byte 1 110
byte 1 32
byte 1 37
byte 1 115
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $137
byte 1 101
byte 1 110
byte 1 101
byte 1 114
byte 1 103
byte 1 121
byte 1 0
align 1
LABELV $134
byte 1 109
byte 1 101
byte 1 99
byte 1 104
byte 1 0
align 1
LABELV $131
byte 1 102
byte 1 108
byte 1 101
byte 1 115
byte 1 104
byte 1 0
align 1
LABELV $128
byte 1 98
byte 1 111
byte 1 111
byte 1 116
byte 1 0
align 1
LABELV $124
byte 1 110
byte 1 111
byte 1 114
byte 1 109
byte 1 97
byte 1 108
byte 1 0
align 1
LABELV $123
byte 1 100
byte 1 101
byte 1 102
byte 1 97
byte 1 117
byte 1 108
byte 1 116
byte 1 0
align 1
LABELV $118
byte 1 102
byte 1 111
byte 1 111
byte 1 116
byte 1 115
byte 1 116
byte 1 101
byte 1 112
byte 1 115
byte 1 0
align 1
LABELV $110
byte 1 70
byte 1 105
byte 1 108
byte 1 101
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 116
byte 1 111
byte 1 111
byte 1 32
byte 1 108
byte 1 111
byte 1 110
byte 1 103
byte 1 10
byte 1 0
align 1
LABELV $104
byte 1 85
byte 1 110
byte 1 107
byte 1 110
byte 1 111
byte 1 119
byte 1 110
byte 1 32
byte 1 99
byte 1 117
byte 1 115
byte 1 116
byte 1 111
byte 1 109
byte 1 32
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $89
byte 1 42
byte 1 116
byte 1 97
byte 1 117
byte 1 110
byte 1 116
byte 1 53
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $88
byte 1 42
byte 1 116
byte 1 97
byte 1 117
byte 1 110
byte 1 116
byte 1 52
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $87
byte 1 42
byte 1 116
byte 1 97
byte 1 117
byte 1 110
byte 1 116
byte 1 51
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $86
byte 1 42
byte 1 116
byte 1 97
byte 1 117
byte 1 110
byte 1 116
byte 1 50
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $85
byte 1 42
byte 1 116
byte 1 97
byte 1 117
byte 1 110
byte 1 116
byte 1 49
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $84
byte 1 42
byte 1 116
byte 1 97
byte 1 117
byte 1 110
byte 1 116
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $83
byte 1 42
byte 1 102
byte 1 97
byte 1 108
byte 1 108
byte 1 49
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $82
byte 1 42
byte 1 100
byte 1 114
byte 1 111
byte 1 119
byte 1 110
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $81
byte 1 42
byte 1 103
byte 1 97
byte 1 115
byte 1 112
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $80
byte 1 42
byte 1 102
byte 1 97
byte 1 108
byte 1 108
byte 1 105
byte 1 110
byte 1 103
byte 1 49
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $79
byte 1 42
byte 1 112
byte 1 97
byte 1 105
byte 1 110
byte 1 49
byte 1 48
byte 1 48
byte 1 95
byte 1 49
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $78
byte 1 42
byte 1 112
byte 1 97
byte 1 105
byte 1 110
byte 1 55
byte 1 53
byte 1 95
byte 1 49
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $77
byte 1 42
byte 1 112
byte 1 97
byte 1 105
byte 1 110
byte 1 53
byte 1 48
byte 1 95
byte 1 49
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $76
byte 1 42
byte 1 112
byte 1 97
byte 1 105
byte 1 110
byte 1 50
byte 1 53
byte 1 95
byte 1 49
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $75
byte 1 42
byte 1 106
byte 1 117
byte 1 109
byte 1 112
byte 1 49
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $74
byte 1 42
byte 1 100
byte 1 101
byte 1 97
byte 1 116
byte 1 104
byte 1 51
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $73
byte 1 42
byte 1 100
byte 1 101
byte 1 97
byte 1 116
byte 1 104
byte 1 50
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $72
byte 1 42
byte 1 100
byte 1 101
byte 1 97
byte 1 116
byte 1 104
byte 1 49
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
