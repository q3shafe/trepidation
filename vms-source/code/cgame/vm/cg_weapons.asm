code
proc CG_MachineGunEjectBrass 136 8
file "../cg_weapons.c"
line 11
;1:// Copyright (C) 1999-2000 Id Software, Inc.
;2://
;3:// cg_weapons.c -- events and effects dealing with weapons
;4:#include "cg_local.h"
;5:
;6:/*
;7:==========================
;8:CG_MachineGunEjectBrass
;9:==========================
;10:*/
;11:static void CG_MachineGunEjectBrass( centity_t *cent ) {
line 16
;12:	localEntity_t	*le;
;13:	refEntity_t		*re;
;14:	vec3_t			velocity, xvelocity;
;15:	vec3_t			offset, xoffset;
;16:	float			waterScale = 1.0f;
ADDRLP4 92
CNSTF4 1065353216
ASGNF4
line 19
;17:	vec3_t			v[3];
;18:
;19:	if ( cg_brassTime.integer <= 0 ) {
ADDRGP4 cg_brassTime+12
INDIRI4
CNSTI4 0
GTI4 $73
line 20
;20:		return;
ADDRGP4 $72
JUMPV
LABELV $73
line 23
;21:	}
;22:
;23:	le = CG_AllocLocalEntity();
ADDRLP4 96
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 96
INDIRP4
ASGNP4
line 24
;24:	re = &le->refEntity;
ADDRLP4 64
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 26
;25:
;26:	velocity[0] = 0;
ADDRLP4 40
CNSTF4 0
ASGNF4
line 27
;27:	velocity[1] = -50 + 40 * crandom();
ADDRLP4 100
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40+4
CNSTF4 1109393408
CNSTF4 1073741824
ADDRLP4 100
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 3259498496
ADDF4
ASGNF4
line 28
;28:	velocity[2] = 100 + 50 * crandom();
ADDRLP4 104
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40+8
CNSTF4 1112014848
CNSTF4 1073741824
ADDRLP4 104
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1120403456
ADDF4
ASGNF4
line 30
;29:
;30:	le->leType = LE_FRAGMENT;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 3
ASGNI4
line 31
;31:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+109652
INDIRI4
ASGNI4
line 32
;32:	le->endTime = le->startTime + cg_brassTime.integer + ( cg_brassTime.integer / 4 ) * random();
ADDRLP4 108
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ADDRGP4 cg_brassTime+12
INDIRI4
ADDI4
CVIF4 4
ADDRGP4 cg_brassTime+12
INDIRI4
CNSTI4 4
DIVI4
CVIF4 4
ADDRLP4 108
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 34
;33:
;34:	le->pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 5
ASGNI4
line 35
;35:	le->pos.trTime = cg.time - (rand()&15);
ADDRLP4 116
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+109652
INDIRI4
ADDRLP4 116
INDIRI4
CNSTI4 15
BANDI4
SUBI4
ASGNI4
line 37
;36:
;37:	AnglesToAxis( cent->lerpAngles, v );
ADDRFP4 0
INDIRP4
CNSTI4 728
ADDP4
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 39
;38:
;39:	offset[0] = 8;
ADDRLP4 52
CNSTF4 1090519040
ASGNF4
line 40
;40:	offset[1] = -4;
ADDRLP4 52+4
CNSTF4 3229614080
ASGNF4
line 41
;41:	offset[2] = 24;
ADDRLP4 52+8
CNSTF4 1103101952
ASGNF4
line 43
;42:
;43:	xoffset[0] = offset[0] * v[0][0] + offset[1] * v[1][0] + offset[2] * v[2][0];
ADDRLP4 80
ADDRLP4 52
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 4+12
INDIRF4
MULF4
ADDF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 4+24
INDIRF4
MULF4
ADDF4
ASGNF4
line 44
;44:	xoffset[1] = offset[0] * v[0][1] + offset[1] * v[1][1] + offset[2] * v[2][1];
ADDRLP4 80+4
ADDRLP4 52
INDIRF4
ADDRLP4 4+4
INDIRF4
MULF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 4+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 4+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 45
;45:	xoffset[2] = offset[0] * v[0][2] + offset[1] * v[1][2] + offset[2] * v[2][2];
ADDRLP4 80+8
ADDRLP4 52
INDIRF4
ADDRLP4 4+8
INDIRF4
MULF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 4+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 4+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 46
;46:	VectorAdd( cent->lerpOrigin, xoffset, re->origin );
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 716
ADDP4
INDIRF4
ADDRLP4 80
INDIRF4
ADDF4
ASGNF4
ADDRLP4 64
INDIRP4
CNSTI4 72
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 720
ADDP4
INDIRF4
ADDRLP4 80+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 64
INDIRP4
CNSTI4 76
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 724
ADDP4
INDIRF4
ADDRLP4 80+8
INDIRF4
ADDF4
ASGNF4
line 48
;47:
;48:	VectorCopy( re->origin, le->pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
INDIRB
ASGNB 12
line 50
;49:
;50:	if ( CG_PointContents( re->origin, -1 ) & CONTENTS_WATER ) {
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 120
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 120
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $106
line 51
;51:		waterScale = 0.10f;
ADDRLP4 92
CNSTF4 1036831949
ASGNF4
line 52
;52:	}
LABELV $106
line 54
;53:
;54:	xvelocity[0] = velocity[0] * v[0][0] + velocity[1] * v[1][0] + velocity[2] * v[2][0];
ADDRLP4 68
ADDRLP4 40
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 4+12
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 4+24
INDIRF4
MULF4
ADDF4
ASGNF4
line 55
;55:	xvelocity[1] = velocity[0] * v[0][1] + velocity[1] * v[1][1] + velocity[2] * v[2][1];
ADDRLP4 68+4
ADDRLP4 40
INDIRF4
ADDRLP4 4+4
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 4+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 4+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 56
;56:	xvelocity[2] = velocity[0] * v[0][2] + velocity[1] * v[1][2] + velocity[2] * v[2][2];
ADDRLP4 68+8
ADDRLP4 40
INDIRF4
ADDRLP4 4+8
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 4+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 4+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 57
;57:	VectorScale( xvelocity, waterScale, le->pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 68
INDIRF4
ADDRLP4 92
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 68+4
INDIRF4
ADDRLP4 92
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 68+8
INDIRF4
ADDRLP4 92
INDIRF4
MULF4
ASGNF4
line 59
;58:
;59:	AxisCopy( axisDefault, re->axis );
ADDRGP4 axisDefault
ARGP4
ADDRLP4 64
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AxisCopy
CALLV
pop
line 60
;60:	re->hModel = cgs.media.machinegunBrassModel;
ADDRLP4 64
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cgs+153876+192
INDIRI4
ASGNI4
line 62
;61:
;62:	le->bounceFactor = 0.4 * waterScale;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 1053609165
ADDRLP4 92
INDIRF4
MULF4
ASGNF4
line 64
;63:
;64:	le->angles.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
CNSTI4 2
ASGNI4
line 65
;65:	le->angles.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDRGP4 cg+109652
INDIRI4
ASGNI4
line 66
;66:	le->angles.trBase[0] = rand()&31;
ADDRLP4 124
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 124
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 67
;67:	le->angles.trBase[1] = rand()&31;
ADDRLP4 128
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 128
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 68
;68:	le->angles.trBase[2] = rand()&31;
ADDRLP4 132
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 132
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 69
;69:	le->angles.trDelta[0] = 2;
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
CNSTF4 1073741824
ASGNF4
line 70
;70:	le->angles.trDelta[1] = 1;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
CNSTF4 1065353216
ASGNF4
line 71
;71:	le->angles.trDelta[2] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTF4 0
ASGNF4
line 73
;72:
;73:	le->leFlags = LEF_TUMBLE;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 2
ASGNI4
line 74
;74:	le->leBounceSoundType = LEBS_BRASS;
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 2
ASGNI4
line 75
;75:	le->leMarkType = LEMT_NONE;
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
CNSTI4 0
ASGNI4
line 76
;76:}
LABELV $72
endproc CG_MachineGunEjectBrass 136 8
proc CG_ShotgunEjectBrass 136 8
line 83
;77:
;78:/*
;79:==========================
;80:CG_ShotgunEjectBrass
;81:==========================
;82:*/
;83:static void CG_ShotgunEjectBrass( centity_t *cent ) {
line 91
;84:	localEntity_t	*le;
;85:	refEntity_t		*re;
;86:	vec3_t			velocity, xvelocity;
;87:	vec3_t			offset, xoffset;
;88:	vec3_t			v[3];
;89:	int				i;
;90:
;91:	if ( cg_brassTime.integer <= 0 ) {
ADDRGP4 cg_brassTime+12
INDIRI4
CNSTI4 0
GTI4 $134
line 92
;92:		return;
ADDRGP4 $133
JUMPV
LABELV $134
line 95
;93:	}
;94:
;95:	for ( i = 0; i < 2; i++ ) {
ADDRLP4 92
CNSTI4 0
ASGNI4
LABELV $137
line 96
;96:		float	waterScale = 1.0f;
ADDRLP4 96
CNSTF4 1065353216
ASGNF4
line 98
;97:
;98:		le = CG_AllocLocalEntity();
ADDRLP4 100
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 100
INDIRP4
ASGNP4
line 99
;99:		re = &le->refEntity;
ADDRLP4 64
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 101
;100:
;101:		velocity[0] = 60 + 60 * crandom();
ADDRLP4 104
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40
CNSTF4 1114636288
CNSTF4 1073741824
ADDRLP4 104
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1114636288
ADDF4
ASGNF4
line 102
;102:		if ( i == 0 ) {
ADDRLP4 92
INDIRI4
CNSTI4 0
NEI4 $141
line 103
;103:			velocity[1] = 40 + 10 * crandom();
ADDRLP4 108
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40+4
CNSTF4 1092616192
CNSTF4 1073741824
ADDRLP4 108
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1109393408
ADDF4
ASGNF4
line 104
;104:		} else {
ADDRGP4 $142
JUMPV
LABELV $141
line 105
;105:			velocity[1] = -40 + 10 * crandom();
ADDRLP4 108
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40+4
CNSTF4 1092616192
CNSTF4 1073741824
ADDRLP4 108
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 3256877056
ADDF4
ASGNF4
line 106
;106:		}
LABELV $142
line 107
;107:		velocity[2] = 100 + 50 * crandom();
ADDRLP4 108
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40+8
CNSTF4 1112014848
CNSTF4 1073741824
ADDRLP4 108
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1120403456
ADDF4
ASGNF4
line 109
;108:
;109:		le->leType = LE_FRAGMENT;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 3
ASGNI4
line 110
;110:		le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+109652
INDIRI4
ASGNI4
line 111
;111:		le->endTime = le->startTime + cg_brassTime.integer*3 + cg_brassTime.integer * random();
ADDRLP4 112
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 3
ADDRGP4 cg_brassTime+12
INDIRI4
MULI4
ADDI4
CVIF4 4
ADDRGP4 cg_brassTime+12
INDIRI4
CVIF4 4
ADDRLP4 112
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 113
;112:
;113:		le->pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 5
ASGNI4
line 114
;114:		le->pos.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+109652
INDIRI4
ASGNI4
line 116
;115:
;116:		AnglesToAxis( cent->lerpAngles, v );
ADDRFP4 0
INDIRP4
CNSTI4 728
ADDP4
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 118
;117:
;118:		offset[0] = 8;
ADDRLP4 52
CNSTF4 1090519040
ASGNF4
line 119
;119:		offset[1] = 0;
ADDRLP4 52+4
CNSTF4 0
ASGNF4
line 120
;120:		offset[2] = 24;
ADDRLP4 52+8
CNSTF4 1103101952
ASGNF4
line 122
;121:
;122:		xoffset[0] = offset[0] * v[0][0] + offset[1] * v[1][0] + offset[2] * v[2][0];
ADDRLP4 80
ADDRLP4 52
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 4+12
INDIRF4
MULF4
ADDF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 4+24
INDIRF4
MULF4
ADDF4
ASGNF4
line 123
;123:		xoffset[1] = offset[0] * v[0][1] + offset[1] * v[1][1] + offset[2] * v[2][1];
ADDRLP4 80+4
ADDRLP4 52
INDIRF4
ADDRLP4 4+4
INDIRF4
MULF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 4+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 4+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 124
;124:		xoffset[2] = offset[0] * v[0][2] + offset[1] * v[1][2] + offset[2] * v[2][2];
ADDRLP4 80+8
ADDRLP4 52
INDIRF4
ADDRLP4 4+8
INDIRF4
MULF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 4+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 4+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 125
;125:		VectorAdd( cent->lerpOrigin, xoffset, re->origin );
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 716
ADDP4
INDIRF4
ADDRLP4 80
INDIRF4
ADDF4
ASGNF4
ADDRLP4 64
INDIRP4
CNSTI4 72
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 720
ADDP4
INDIRF4
ADDRLP4 80+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 64
INDIRP4
CNSTI4 76
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 724
ADDP4
INDIRF4
ADDRLP4 80+8
INDIRF4
ADDF4
ASGNF4
line 126
;126:		VectorCopy( re->origin, le->pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
INDIRB
ASGNB 12
line 127
;127:		if ( CG_PointContents( re->origin, -1 ) & CONTENTS_WATER ) {
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 120
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 120
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $174
line 128
;128:			waterScale = 0.10f;
ADDRLP4 96
CNSTF4 1036831949
ASGNF4
line 129
;129:		}
LABELV $174
line 131
;130:
;131:		xvelocity[0] = velocity[0] * v[0][0] + velocity[1] * v[1][0] + velocity[2] * v[2][0];
ADDRLP4 68
ADDRLP4 40
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 4+12
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 4+24
INDIRF4
MULF4
ADDF4
ASGNF4
line 132
;132:		xvelocity[1] = velocity[0] * v[0][1] + velocity[1] * v[1][1] + velocity[2] * v[2][1];
ADDRLP4 68+4
ADDRLP4 40
INDIRF4
ADDRLP4 4+4
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 4+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 4+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 133
;133:		xvelocity[2] = velocity[0] * v[0][2] + velocity[1] * v[1][2] + velocity[2] * v[2][2];
ADDRLP4 68+8
ADDRLP4 40
INDIRF4
ADDRLP4 4+8
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 4+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 4+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 134
;134:		VectorScale( xvelocity, waterScale, le->pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 68
INDIRF4
ADDRLP4 96
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 68+4
INDIRF4
ADDRLP4 96
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 68+8
INDIRF4
ADDRLP4 96
INDIRF4
MULF4
ASGNF4
line 136
;135:
;136:		AxisCopy( axisDefault, re->axis );
ADDRGP4 axisDefault
ARGP4
ADDRLP4 64
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AxisCopy
CALLV
pop
line 137
;137:		re->hModel = cgs.media.shotgunBrassModel;
ADDRLP4 64
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cgs+153876+196
INDIRI4
ASGNI4
line 138
;138:		le->bounceFactor = 0.3f;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 1050253722
ASGNF4
line 140
;139:
;140:		le->angles.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
CNSTI4 2
ASGNI4
line 141
;141:		le->angles.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDRGP4 cg+109652
INDIRI4
ASGNI4
line 142
;142:		le->angles.trBase[0] = rand()&31;
ADDRLP4 124
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 124
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 143
;143:		le->angles.trBase[1] = rand()&31;
ADDRLP4 128
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 128
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 144
;144:		le->angles.trBase[2] = rand()&31;
ADDRLP4 132
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 132
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 145
;145:		le->angles.trDelta[0] = 1;
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
CNSTF4 1065353216
ASGNF4
line 146
;146:		le->angles.trDelta[1] = 0.5;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
CNSTF4 1056964608
ASGNF4
line 147
;147:		le->angles.trDelta[2] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTF4 0
ASGNF4
line 149
;148:
;149:		le->leFlags = LEF_TUMBLE;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 2
ASGNI4
line 150
;150:		le->leBounceSoundType = LEBS_BRASS;
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 2
ASGNI4
line 151
;151:		le->leMarkType = LEMT_NONE;
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
CNSTI4 0
ASGNI4
line 152
;152:	}
LABELV $138
line 95
ADDRLP4 92
ADDRLP4 92
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 92
INDIRI4
CNSTI4 2
LTI4 $137
line 153
;153:}
LABELV $133
endproc CG_ShotgunEjectBrass 136 8
export CG_RailTrail
proc CG_RailTrail 644 16
line 195
;154:
;155:
;156:#ifdef MISSIONPACK
;157:/*
;158:==========================
;159:CG_NailgunEjectBrass
;160:==========================
;161:*/
;162:static void CG_NailgunEjectBrass( centity_t *cent ) {
;163:	localEntity_t	*smoke;
;164:	vec3_t			origin;
;165:	vec3_t			v[3];
;166:	vec3_t			offset;
;167:	vec3_t			xoffset;
;168:	vec3_t			up;
;169:
;170:	AnglesToAxis( cent->lerpAngles, v );
;171:
;172:	offset[0] = 0;
;173:	offset[1] = -12;
;174:	offset[2] = 24;
;175:
;176:	xoffset[0] = offset[0] * v[0][0] + offset[1] * v[1][0] + offset[2] * v[2][0];
;177:	xoffset[1] = offset[0] * v[0][1] + offset[1] * v[1][1] + offset[2] * v[2][1];
;178:	xoffset[2] = offset[0] * v[0][2] + offset[1] * v[1][2] + offset[2] * v[2][2];
;179:	VectorAdd( cent->lerpOrigin, xoffset, origin );
;180:
;181:	VectorSet( up, 0, 0, 64 );
;182:
;183:	smoke = CG_SmokePuff( origin, up, 32, 1, 1, 1, 0.33f, 700, cg.time, 0, 0, cgs.media.smokePuffShader );
;184:	// use the optimized local entity add
;185:	smoke->leType = LE_SCALE_FADE;
;186:}
;187:#endif
;188:
;189:
;190:/*
;191:==========================
;192:CG_RailTrail
;193:==========================
;194:*/
;195:void CG_RailTrail (clientInfo_t *ci, vec3_t start, vec3_t end) {
line 207
;196:	vec3_t axis[36], move, move2, next_move, vec, temp;
;197:	float  len;
;198:	int    i, j, skip;
;199: 
;200:	localEntity_t *le;
;201:	refEntity_t   *re;
;202: 
;203:#define RADIUS   4
;204:#define ROTATION 1
;205:#define SPACING  5
;206: 
;207:	start[2] -= 4;
ADDRLP4 516
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 516
INDIRP4
ADDRLP4 516
INDIRP4
INDIRF4
CNSTF4 1082130432
SUBF4
ASGNF4
line 208
;208:	VectorCopy (start, move);
ADDRLP4 8
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 209
;209:	VectorSubtract (end, start, vec);
ADDRLP4 520
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 524
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 28
ADDRLP4 520
INDIRP4
INDIRF4
ADDRLP4 524
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 528
CNSTI4 4
ASGNI4
ADDRLP4 28+4
ADDRLP4 520
INDIRP4
ADDRLP4 528
INDIRI4
ADDP4
INDIRF4
ADDRLP4 524
INDIRP4
ADDRLP4 528
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 532
CNSTI4 8
ASGNI4
ADDRLP4 28+8
ADDRFP4 8
INDIRP4
ADDRLP4 532
INDIRI4
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
ADDRLP4 532
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 210
;210:	len = VectorNormalize (vec);
ADDRLP4 28
ARGP4
ADDRLP4 536
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 500
ADDRLP4 536
INDIRF4
ASGNF4
line 211
;211:	PerpendicularVector(temp, vec);
ADDRLP4 488
ARGP4
ADDRLP4 28
ARGP4
ADDRGP4 PerpendicularVector
CALLV
pop
line 212
;212:	for (i = 0 ; i < 36; i++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $204
line 213
;213:		RotatePointAroundVector(axis[i], vec, temp, i * 10);//banshee 2.4 was 10
CNSTI4 12
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 40
ADDP4
ARGP4
ADDRLP4 28
ARGP4
ADDRLP4 488
ARGP4
CNSTI4 10
ADDRLP4 4
INDIRI4
MULI4
CVIF4 4
ARGF4
ADDRGP4 RotatePointAroundVector
CALLV
pop
line 214
;214:	}
LABELV $205
line 212
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 36
LTI4 $204
line 216
;215: 
;216:	le = CG_AllocLocalEntity();
ADDRLP4 540
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 540
INDIRP4
ASGNP4
line 217
;217:	re = &le->refEntity;
ADDRLP4 24
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 219
;218: 
;219:	le->leType = LE_FADE_RGB;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 6
ASGNI4
line 220
;220:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+109652
INDIRI4
ASGNI4
line 221
;221:	le->endTime = cg.time + cg_railTrailTime.value;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 cg+109652
INDIRI4
CVIF4 4
ADDRGP4 cg_railTrailTime+8
INDIRF4
ADDF4
CVFI4 4
ASGNI4
line 222
;222:	le->lifeRate = 1.0 / (le->endTime - le->startTime);
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 224
;223: 
;224:	re->shaderTime = cg.time / 1000.0f;
ADDRLP4 24
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+109652
INDIRI4
CVIF4 4
CNSTF4 1148846080
DIVF4
ASGNF4
line 225
;225:	re->reType = RT_RAIL_CORE;
ADDRLP4 24
INDIRP4
CNSTI4 4
ASGNI4
line 226
;226:	re->customShader = cgs.media.railCoreShader;
ADDRLP4 24
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+153876+204
INDIRI4
ASGNI4
line 228
;227: 
;228:	VectorCopy(start, re->origin);
ADDRLP4 24
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 229
;229:	VectorCopy(end, re->oldorigin);
ADDRLP4 24
INDIRP4
CNSTI4 84
ADDP4
ADDRFP4 8
INDIRP4
INDIRB
ASGNB 12
line 231
;230: 
;231:	re->shaderRGBA[0] = ci->color1[0] * 255;
ADDRLP4 552
CNSTF4 1132396544
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 556
CNSTF4 1325400064
ASGNF4
ADDRLP4 552
INDIRF4
ADDRLP4 556
INDIRF4
LTF4 $215
ADDRLP4 548
ADDRLP4 552
INDIRF4
ADDRLP4 556
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $216
JUMPV
LABELV $215
ADDRLP4 548
ADDRLP4 552
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $216
ADDRLP4 24
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 548
INDIRU4
CVUU1 4
ASGNU1
line 232
;232:    re->shaderRGBA[1] = ci->color1[1] * 255;
ADDRLP4 564
CNSTF4 1132396544
ADDRFP4 0
INDIRP4
CNSTI4 80
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 568
CNSTF4 1325400064
ASGNF4
ADDRLP4 564
INDIRF4
ADDRLP4 568
INDIRF4
LTF4 $218
ADDRLP4 560
ADDRLP4 564
INDIRF4
ADDRLP4 568
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $219
JUMPV
LABELV $218
ADDRLP4 560
ADDRLP4 564
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $219
ADDRLP4 24
INDIRP4
CNSTI4 117
ADDP4
ADDRLP4 560
INDIRU4
CVUU1 4
ASGNU1
line 233
;233:    re->shaderRGBA[2] = ci->color1[2] * 255;
ADDRLP4 576
CNSTF4 1132396544
ADDRFP4 0
INDIRP4
CNSTI4 84
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 580
CNSTF4 1325400064
ASGNF4
ADDRLP4 576
INDIRF4
ADDRLP4 580
INDIRF4
LTF4 $221
ADDRLP4 572
ADDRLP4 576
INDIRF4
ADDRLP4 580
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $222
JUMPV
LABELV $221
ADDRLP4 572
ADDRLP4 576
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $222
ADDRLP4 24
INDIRP4
CNSTI4 118
ADDP4
ADDRLP4 572
INDIRU4
CVUU1 4
ASGNU1
line 234
;234:    re->shaderRGBA[3] = 255;
ADDRLP4 24
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 255
ASGNU1
line 236
;235:
;236:	le->color[0] = ci->color1[0] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
CNSTF4 1061158912
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ASGNF4
line 237
;237:	le->color[1] = ci->color1[1] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 112
ADDP4
CNSTF4 1061158912
ADDRFP4 0
INDIRP4
CNSTI4 80
ADDP4
INDIRF4
MULF4
ASGNF4
line 238
;238:	le->color[2] = ci->color1[2] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
CNSTF4 1061158912
ADDRFP4 0
INDIRP4
CNSTI4 84
ADDP4
INDIRF4
MULF4
ASGNF4
line 239
;239:	le->color[3] = 1.0f;
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1065353216
ASGNF4
line 241
;240:
;241:	AxisClear( re->axis );
ADDRLP4 24
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AxisClear
CALLV
pop
line 243
;242: 
;243:	VectorMA(move, 20, vec, move);
ADDRLP4 584
CNSTF4 1101004800
ASGNF4
ADDRLP4 8
ADDRLP4 8
INDIRF4
ADDRLP4 584
INDIRF4
ADDRLP4 28
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 8+4
ADDRLP4 8+4
INDIRF4
ADDRLP4 584
INDIRF4
ADDRLP4 28+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 8+8
ADDRLP4 8+8
INDIRF4
CNSTF4 1101004800
ADDRLP4 28+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 244
;244:	VectorCopy(move, next_move);
ADDRLP4 504
ADDRLP4 8
INDIRB
ASGNB 12
line 245
;245:	VectorScale (vec, SPACING, vec);
ADDRLP4 588
CNSTF4 1084227584
ASGNF4
ADDRLP4 28
ADDRLP4 588
INDIRF4
ADDRLP4 28
INDIRF4
MULF4
ASGNF4
ADDRLP4 28+4
ADDRLP4 588
INDIRF4
ADDRLP4 28+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 28+8
CNSTF4 1084227584
ADDRLP4 28+8
INDIRF4
MULF4
ASGNF4
line 247
;246:
;247:	if (cg_oldRail.integer != 0) {
ADDRGP4 cg_oldRail+12
INDIRI4
CNSTI4 0
EQI4 $233
line 249
;248:		// nudge down a bit so it isn't exactly in center
;249:		re->origin[2] -= 8;
ADDRLP4 592
ADDRLP4 24
INDIRP4
CNSTI4 76
ADDP4
ASGNP4
ADDRLP4 592
INDIRP4
ADDRLP4 592
INDIRP4
INDIRF4
CNSTF4 1090519040
SUBF4
ASGNF4
line 250
;250:		re->oldorigin[2] -= 8;
ADDRLP4 596
ADDRLP4 24
INDIRP4
CNSTI4 92
ADDP4
ASGNP4
ADDRLP4 596
INDIRP4
ADDRLP4 596
INDIRP4
INDIRF4
CNSTF4 1090519040
SUBF4
ASGNF4
line 251
;251:		return;
ADDRGP4 $201
JUMPV
LABELV $233
line 253
;252:	}
;253:	skip = -1;
ADDRLP4 484
CNSTI4 -1
ASGNI4
line 255
;254: 
;255:	j = 18;
ADDRLP4 20
CNSTI4 18
ASGNI4
line 256
;256:    for (i = 0; i < len; i += SPACING) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $239
JUMPV
LABELV $236
line 257
;257:		if (i != skip) {
ADDRLP4 4
INDIRI4
ADDRLP4 484
INDIRI4
EQI4 $240
line 258
;258:			skip = i + SPACING;
ADDRLP4 484
ADDRLP4 4
INDIRI4
CNSTI4 5
ADDI4
ASGNI4
line 259
;259:			le = CG_AllocLocalEntity();
ADDRLP4 592
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 592
INDIRP4
ASGNP4
line 260
;260:            re = &le->refEntity;
ADDRLP4 24
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 261
;261:            le->leFlags = LEF_PUFF_DONT_SCALE;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 1
ASGNI4
line 262
;262:			le->leType = LE_MOVE_SCALE_FADE;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 4
ASGNI4
line 263
;263:            le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+109652
INDIRI4
ASGNI4
line 264
;264:            le->endTime = cg.time + (i>>1) + 600;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 cg+109652
INDIRI4
ADDRLP4 4
INDIRI4
CNSTI4 1
RSHI4
ADDI4
CNSTI4 600
ADDI4
ASGNI4
line 265
;265:            le->lifeRate = 1.0 / (le->endTime - le->startTime);
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 267
;266:
;267:            re->shaderTime = cg.time / 1000.0f;
ADDRLP4 24
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+109652
INDIRI4
CVIF4 4
CNSTF4 1148846080
DIVF4
ASGNF4
line 268
;268:            re->reType = RT_SPRITE;
ADDRLP4 24
INDIRP4
CNSTI4 2
ASGNI4
line 269
;269:            re->radius = 1.1f;
ADDRLP4 24
INDIRP4
CNSTI4 132
ADDP4
CNSTF4 1066192077
ASGNF4
line 270
;270:			re->customShader = cgs.media.railRingsShader;
ADDRLP4 24
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+153876+200
INDIRI4
ASGNI4
line 272
;271:
;272:            re->shaderRGBA[0] = ci->color2[0] * 255;
ADDRLP4 604
CNSTF4 1132396544
ADDRFP4 0
INDIRP4
CNSTI4 88
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 608
CNSTF4 1325400064
ASGNF4
ADDRLP4 604
INDIRF4
ADDRLP4 608
INDIRF4
LTF4 $248
ADDRLP4 600
ADDRLP4 604
INDIRF4
ADDRLP4 608
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $249
JUMPV
LABELV $248
ADDRLP4 600
ADDRLP4 604
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $249
ADDRLP4 24
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 600
INDIRU4
CVUU1 4
ASGNU1
line 273
;273:            re->shaderRGBA[1] = ci->color2[1] * 255;
ADDRLP4 616
CNSTF4 1132396544
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 620
CNSTF4 1325400064
ASGNF4
ADDRLP4 616
INDIRF4
ADDRLP4 620
INDIRF4
LTF4 $251
ADDRLP4 612
ADDRLP4 616
INDIRF4
ADDRLP4 620
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $252
JUMPV
LABELV $251
ADDRLP4 612
ADDRLP4 616
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $252
ADDRLP4 24
INDIRP4
CNSTI4 117
ADDP4
ADDRLP4 612
INDIRU4
CVUU1 4
ASGNU1
line 274
;274:            re->shaderRGBA[2] = ci->color2[2] * 255;
ADDRLP4 628
CNSTF4 1132396544
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 632
CNSTF4 1325400064
ASGNF4
ADDRLP4 628
INDIRF4
ADDRLP4 632
INDIRF4
LTF4 $254
ADDRLP4 624
ADDRLP4 628
INDIRF4
ADDRLP4 632
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $255
JUMPV
LABELV $254
ADDRLP4 624
ADDRLP4 628
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $255
ADDRLP4 24
INDIRP4
CNSTI4 118
ADDP4
ADDRLP4 624
INDIRU4
CVUU1 4
ASGNU1
line 275
;275:            re->shaderRGBA[3] = 255;
ADDRLP4 24
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 255
ASGNU1
line 277
;276:
;277:            le->color[0] = ci->color2[0] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
CNSTF4 1061158912
ADDRFP4 0
INDIRP4
CNSTI4 88
ADDP4
INDIRF4
MULF4
ASGNF4
line 278
;278:            le->color[1] = ci->color2[1] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 112
ADDP4
CNSTF4 1061158912
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRF4
MULF4
ASGNF4
line 279
;279:            le->color[2] = ci->color2[2] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
CNSTF4 1061158912
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
INDIRF4
MULF4
ASGNF4
line 280
;280:            le->color[3] = 1.0f;
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1065353216
ASGNF4
line 282
;281:
;282:            le->pos.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 2
ASGNI4
line 283
;283:            le->pos.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+109652
INDIRI4
ASGNI4
line 285
;284:
;285:			VectorCopy( move, move2);
ADDRLP4 472
ADDRLP4 8
INDIRB
ASGNB 12
line 286
;286:            VectorMA(move2, RADIUS , axis[j], move2);
ADDRLP4 636
CNSTF4 1082130432
ASGNF4
ADDRLP4 640
CNSTI4 12
ADDRLP4 20
INDIRI4
MULI4
ASGNI4
ADDRLP4 472
ADDRLP4 472
INDIRF4
ADDRLP4 636
INDIRF4
ADDRLP4 640
INDIRI4
ADDRLP4 40
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 472+4
ADDRLP4 472+4
INDIRF4
ADDRLP4 636
INDIRF4
ADDRLP4 640
INDIRI4
ADDRLP4 40+4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 472+8
ADDRLP4 472+8
INDIRF4
CNSTF4 1082130432
CNSTI4 12
ADDRLP4 20
INDIRI4
MULI4
ADDRLP4 40+8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 287
;287:            VectorCopy(move2, le->pos.trBase);
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 472
INDIRB
ASGNB 12
line 289
;288:
;289:            le->pos.trDelta[0] = axis[j][0]*6;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1086324736
CNSTI4 12
ADDRLP4 20
INDIRI4
MULI4
ADDRLP4 40
ADDP4
INDIRF4
MULF4
ASGNF4
line 290
;290:            le->pos.trDelta[1] = axis[j][1]*6;
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 1086324736
CNSTI4 12
ADDRLP4 20
INDIRI4
MULI4
ADDRLP4 40+4
ADDP4
INDIRF4
MULF4
ASGNF4
line 291
;291:            le->pos.trDelta[2] = axis[j][2]*6;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTF4 1086324736
CNSTI4 12
ADDRLP4 20
INDIRI4
MULI4
ADDRLP4 40+8
ADDP4
INDIRF4
MULF4
ASGNF4
line 292
;292:		}
LABELV $240
line 294
;293:
;294:        VectorAdd (move, vec, move);
ADDRLP4 8
ADDRLP4 8
INDIRF4
ADDRLP4 28
INDIRF4
ADDF4
ASGNF4
ADDRLP4 8+4
ADDRLP4 8+4
INDIRF4
ADDRLP4 28+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 8+8
ADDRLP4 8+8
INDIRF4
ADDRLP4 28+8
INDIRF4
ADDF4
ASGNF4
line 296
;295:
;296:        j = j + ROTATION < 36 ? j + ROTATION : (j + ROTATION) % 36;
ADDRLP4 20
INDIRI4
CNSTI4 1
ADDI4
CNSTI4 36
GEI4 $272
ADDRLP4 592
ADDRLP4 20
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRGP4 $273
JUMPV
LABELV $272
ADDRLP4 592
ADDRLP4 20
INDIRI4
CNSTI4 1
ADDI4
CNSTI4 36
MODI4
ASGNI4
LABELV $273
ADDRLP4 20
ADDRLP4 592
INDIRI4
ASGNI4
line 297
;297:	}
LABELV $237
line 256
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 5
ADDI4
ASGNI4
LABELV $239
ADDRLP4 4
INDIRI4
CVIF4 4
ADDRLP4 500
INDIRF4
LTF4 $236
line 298
;298:}
LABELV $201
endproc CG_RailTrail 644 16
proc CG_ShotgunTrail 92 48
line 306
;299:
;300:
;301:/*
;302:==========================
;303:CG_ShotgunTrail
;304:==========================
;305:*/
;306:static void CG_ShotgunTrail( centity_t *ent, const weaponInfo_t *wi ) {
line 316
;307:	int		step;
;308:	vec3_t	origin, lastPos;
;309:	int		t;
;310:	int		startTime, contents;
;311:	int		lastContents;
;312:	entityState_t	*es;
;313:	vec3_t	up;
;314:	localEntity_t	*smoke;
;315:
;316:	if ( cg_noProjectileTrail.integer ) {
ADDRGP4 cg_noProjectileTrail+12
INDIRI4
CNSTI4 0
EQI4 $275
line 317
;317:		return;
ADDRGP4 $274
JUMPV
LABELV $275
line 320
;318:	}
;319:
;320:	up[0] = 0;
ADDRLP4 28
CNSTF4 0
ASGNF4
line 321
;321:	up[1] = 0;
ADDRLP4 28+4
CNSTF4 0
ASGNF4
line 322
;322:	up[2] = 0;
ADDRLP4 28+8
CNSTF4 0
ASGNF4
line 324
;323:
;324:	step = 50;
ADDRLP4 20
CNSTI4 50
ASGNI4
line 326
;325:
;326:	es = &ent->currentState;
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
line 327
;327:	startTime = ent->trailTime;
ADDRLP4 56
ADDRFP4 0
INDIRP4
CNSTI4 444
ADDP4
INDIRI4
ASGNI4
line 328
;328:	t = step * ( (startTime + step) / step );
ADDRLP4 0
ADDRLP4 20
INDIRI4
ADDRLP4 56
INDIRI4
ADDRLP4 20
INDIRI4
ADDI4
ADDRLP4 20
INDIRI4
DIVI4
MULI4
ASGNI4
line 330
;329:
;330:	BG_EvaluateTrajectory( &es->pos, cg.time, origin );
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 cg+109652
INDIRI4
ARGI4
ADDRLP4 44
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 331
;331:	contents = CG_PointContents( origin, -1 );
ADDRLP4 44
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 68
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 40
ADDRLP4 68
INDIRI4
ASGNI4
line 334
;332:
;333:	// if object (e.g. grenade) is stationary, don't toss up smoke
;334:	if ( es->pos.trType == TR_STATIONARY ) {
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 0
NEI4 $281
line 335
;335:		ent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 444
ADDP4
ADDRGP4 cg+109652
INDIRI4
ASGNI4
line 336
;336:		return;
ADDRGP4 $274
JUMPV
LABELV $281
line 339
;337:	}
;338:
;339:	BG_EvaluateTrajectory( &es->pos, ent->trailTime, lastPos );
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 444
ADDP4
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 340
;340:	lastContents = CG_PointContents( lastPos, -1 );
ADDRLP4 4
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 72
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 60
ADDRLP4 72
INDIRI4
ASGNI4
line 342
;341:
;342:	ent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 444
ADDP4
ADDRGP4 cg+109652
INDIRI4
ASGNI4
line 344
;343:
;344:	if ( contents & ( CONTENTS_WATER | CONTENTS_SLIME | CONTENTS_LAVA ) ) {
ADDRLP4 40
INDIRI4
CNSTI4 56
BANDI4
CNSTI4 0
EQI4 $292
line 345
;345:		if ( contents & lastContents & CONTENTS_WATER ) {
ADDRLP4 40
INDIRI4
ADDRLP4 60
INDIRI4
BANDI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $274
line 346
;346:			CG_BubbleTrail( lastPos, origin, 8 );
ADDRLP4 4
ARGP4
ADDRLP4 44
ARGP4
CNSTF4 1090519040
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 347
;347:		}
line 348
;348:		return;
ADDRGP4 $274
JUMPV
line 351
;349:	}
;350:
;351:	for ( ; t <= ent->trailTime ; t += step ) {
LABELV $289
line 352
;352:		BG_EvaluateTrajectory( &es->pos, t, lastPos );
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 354
;353:
;354:		smoke = CG_SmokePuff( lastPos, up, 
ADDRLP4 4
ARGP4
ADDRLP4 28
ARGP4
ADDRLP4 76
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 76
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
ARGF4
ADDRLP4 80
CNSTF4 1065353216
ASGNF4
ADDRLP4 80
INDIRF4
ARGF4
ADDRLP4 80
INDIRF4
ARGF4
ADDRLP4 80
INDIRF4
ARGF4
CNSTF4 1051260355
ARGF4
ADDRLP4 76
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 84
CNSTI4 0
ASGNI4
ADDRLP4 84
INDIRI4
ARGI4
ADDRLP4 84
INDIRI4
ARGI4
ADDRGP4 cgs+153876+296
INDIRI4
ARGI4
ADDRLP4 88
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 16
ADDRLP4 88
INDIRP4
ASGNP4
line 363
;355:					  wi->trailRadius, 
;356:					  1, 1, 1, 0.33f,
;357:					  wi->wiTrailTime, 
;358:					  t,
;359:					  0,
;360:					  0, 
;361:					  cgs.media.smokePuffShader2 ); // Shafe set this to 2
;362:		// use the optimized local entity add
;363:		smoke->leType = LE_SCALE_FADE;
ADDRLP4 16
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 7
ASGNI4
line 364
;364:	}
LABELV $290
line 351
ADDRLP4 0
ADDRLP4 0
INDIRI4
ADDRLP4 20
INDIRI4
ADDI4
ASGNI4
LABELV $292
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 444
ADDP4
INDIRI4
LEI4 $289
line 366
;365:
;366:}
LABELV $274
endproc CG_ShotgunTrail 92 48
proc CG_RocketTrail 92 48
line 373
;367:
;368:/*
;369:==========================
;370:CG_RocketTrail
;371:==========================
;372:*/
;373:static void CG_RocketTrail( centity_t *ent, const weaponInfo_t *wi ) {
line 383
;374:	int		step;
;375:	vec3_t	origin, lastPos;
;376:	int		t;
;377:	int		startTime, contents;
;378:	int		lastContents;
;379:	entityState_t	*es;
;380:	vec3_t	up;
;381:	localEntity_t	*smoke;
;382:
;383:	if ( cg_noProjectileTrail.integer ) {
ADDRGP4 cg_noProjectileTrail+12
INDIRI4
CNSTI4 0
EQI4 $296
line 384
;384:		return;
ADDRGP4 $295
JUMPV
LABELV $296
line 387
;385:	}
;386:
;387:	up[0] = 0;
ADDRLP4 28
CNSTF4 0
ASGNF4
line 388
;388:	up[1] = 0;
ADDRLP4 28+4
CNSTF4 0
ASGNF4
line 389
;389:	up[2] = 0;
ADDRLP4 28+8
CNSTF4 0
ASGNF4
line 391
;390:
;391:	step = 50;
ADDRLP4 20
CNSTI4 50
ASGNI4
line 393
;392:
;393:	es = &ent->currentState;
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
line 394
;394:	startTime = ent->trailTime;
ADDRLP4 56
ADDRFP4 0
INDIRP4
CNSTI4 444
ADDP4
INDIRI4
ASGNI4
line 395
;395:	t = step * ( (startTime + step) / step );
ADDRLP4 0
ADDRLP4 20
INDIRI4
ADDRLP4 56
INDIRI4
ADDRLP4 20
INDIRI4
ADDI4
ADDRLP4 20
INDIRI4
DIVI4
MULI4
ASGNI4
line 397
;396:
;397:	BG_EvaluateTrajectory( &es->pos, cg.time, origin );
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 cg+109652
INDIRI4
ARGI4
ADDRLP4 44
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 398
;398:	contents = CG_PointContents( origin, -1 );
ADDRLP4 44
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 68
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 40
ADDRLP4 68
INDIRI4
ASGNI4
line 401
;399:
;400:	// if object (e.g. grenade) is stationary, don't toss up smoke
;401:	if ( es->pos.trType == TR_STATIONARY ) {
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 0
NEI4 $302
line 402
;402:		ent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 444
ADDP4
ADDRGP4 cg+109652
INDIRI4
ASGNI4
line 403
;403:		return;
ADDRGP4 $295
JUMPV
LABELV $302
line 406
;404:	}
;405:
;406:	BG_EvaluateTrajectory( &es->pos, ent->trailTime, lastPos );
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 444
ADDP4
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 407
;407:	lastContents = CG_PointContents( lastPos, -1 );
ADDRLP4 4
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 72
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 60
ADDRLP4 72
INDIRI4
ASGNI4
line 409
;408:
;409:	ent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 444
ADDP4
ADDRGP4 cg+109652
INDIRI4
ASGNI4
line 411
;410:
;411:	if ( contents & ( CONTENTS_WATER | CONTENTS_SLIME | CONTENTS_LAVA ) ) {
ADDRLP4 40
INDIRI4
CNSTI4 56
BANDI4
CNSTI4 0
EQI4 $313
line 412
;412:		if ( contents & lastContents & CONTENTS_WATER ) {
ADDRLP4 40
INDIRI4
ADDRLP4 60
INDIRI4
BANDI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $295
line 413
;413:			CG_BubbleTrail( lastPos, origin, 8 );
ADDRLP4 4
ARGP4
ADDRLP4 44
ARGP4
CNSTF4 1090519040
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 414
;414:		}
line 415
;415:		return;
ADDRGP4 $295
JUMPV
line 418
;416:	}
;417:
;418:	for ( ; t <= ent->trailTime ; t += step ) {
LABELV $310
line 419
;419:		BG_EvaluateTrajectory( &es->pos, t, lastPos );
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 421
;420:
;421:		smoke = CG_SmokePuff( lastPos, up, 
ADDRLP4 4
ARGP4
ADDRLP4 28
ARGP4
ADDRLP4 76
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 76
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
ARGF4
ADDRLP4 80
CNSTF4 1065353216
ASGNF4
ADDRLP4 80
INDIRF4
ARGF4
ADDRLP4 80
INDIRF4
ARGF4
ADDRLP4 80
INDIRF4
ARGF4
CNSTF4 1051260355
ARGF4
ADDRLP4 76
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 84
CNSTI4 0
ASGNI4
ADDRLP4 84
INDIRI4
ARGI4
ADDRLP4 84
INDIRI4
ARGI4
ADDRGP4 cgs+153876+296
INDIRI4
ARGI4
ADDRLP4 88
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 16
ADDRLP4 88
INDIRP4
ASGNP4
line 430
;422:					  wi->trailRadius, 
;423:					  1, 1, 1, 0.33f,
;424:					  wi->wiTrailTime, 
;425:					  t,
;426:					  0,
;427:					  0, 
;428:					  cgs.media.smokePuffShader2 ); // Shafe set this to 2
;429:		// use the optimized local entity add
;430:		smoke->leType = LE_SCALE_FADE;
ADDRLP4 16
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 7
ASGNI4
line 431
;431:	}
LABELV $311
line 418
ADDRLP4 0
ADDRLP4 0
INDIRI4
ADDRLP4 20
INDIRI4
ADDI4
ASGNI4
LABELV $313
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 444
ADDP4
INDIRI4
LEI4 $310
line 433
;432:
;433:}
LABELV $295
endproc CG_RocketTrail 92 48
proc CG_PlasmaTrail 204 12
line 509
;434:
;435:#ifdef MISSIONPACK
;436:/*
;437:==========================
;438:CG_NailTrail
;439:==========================
;440:*/
;441:static void CG_NailTrail( centity_t *ent, const weaponInfo_t *wi ) {
;442:	int		step;
;443:	vec3_t	origin, lastPos;
;444:	int		t;
;445:	int		startTime, contents;
;446:	int		lastContents;
;447:	entityState_t	*es;
;448:	vec3_t	up;
;449:	localEntity_t	*smoke;
;450:
;451:	if ( cg_noProjectileTrail.integer ) {
;452:		return;
;453:	}
;454:
;455:	up[0] = 0;
;456:	up[1] = 0;
;457:	up[2] = 0;
;458:
;459:	step = 50;
;460:
;461:	es = &ent->currentState;
;462:	startTime = ent->trailTime;
;463:	t = step * ( (startTime + step) / step );
;464:
;465:	BG_EvaluateTrajectory( &es->pos, cg.time, origin );
;466:	contents = CG_PointContents( origin, -1 );
;467:
;468:	// if object (e.g. grenade) is stationary, don't toss up smoke
;469:	if ( es->pos.trType == TR_STATIONARY ) {
;470:		ent->trailTime = cg.time;
;471:		return;
;472:	}
;473:
;474:	BG_EvaluateTrajectory( &es->pos, ent->trailTime, lastPos );
;475:	lastContents = CG_PointContents( lastPos, -1 );
;476:
;477:	ent->trailTime = cg.time;
;478:
;479:	if ( contents & ( CONTENTS_WATER | CONTENTS_SLIME | CONTENTS_LAVA ) ) {
;480:		if ( contents & lastContents & CONTENTS_WATER ) {
;481:			CG_BubbleTrail( lastPos, origin, 8 );
;482:		}
;483:		return;
;484:	}
;485:
;486:	for ( ; t <= ent->trailTime ; t += step ) {
;487:		BG_EvaluateTrajectory( &es->pos, t, lastPos );
;488:
;489:		smoke = CG_SmokePuff( lastPos, up, 
;490:					  wi->trailRadius, 
;491:					  1, 1, 1, 0.33f,
;492:					  wi->wiTrailTime, 
;493:					  t,
;494:					  0,
;495:					  0, 
;496:					  cgs.media.nailPuffShader );
;497:		// use the optimized local entity add
;498:		smoke->leType = LE_SCALE_FADE;
;499:	}
;500:
;501:}
;502:#endif
;503:
;504:/*
;505:==========================
;506:CG_NailTrail
;507:==========================
;508:*/
;509:static void CG_PlasmaTrail( centity_t *cent, const weaponInfo_t *wi ) {
line 518
;510:	localEntity_t	*le;
;511:	refEntity_t		*re;
;512:	entityState_t	*es;
;513:	vec3_t			velocity, xvelocity, origin;
;514:	vec3_t			offset, xoffset;
;515:	vec3_t			v[3];
;516:	int				t, startTime, step;
;517:
;518:	float	waterScale = 1.0f;
ADDRLP4 92
CNSTF4 1065353216
ASGNF4
line 520
;519:
;520:	if ( cg_noProjectileTrail.integer || cg_oldPlasma.integer ) {
ADDRLP4 124
CNSTI4 0
ASGNI4
ADDRGP4 cg_noProjectileTrail+12
INDIRI4
ADDRLP4 124
INDIRI4
NEI4 $321
ADDRGP4 cg_oldPlasma+12
INDIRI4
ADDRLP4 124
INDIRI4
EQI4 $317
LABELV $321
line 521
;521:		return;
ADDRGP4 $316
JUMPV
LABELV $317
line 524
;522:	}
;523:
;524:	step = 50;
ADDRLP4 108
CNSTI4 50
ASGNI4
line 526
;525:
;526:	es = &cent->currentState;
ADDRLP4 112
ADDRFP4 0
INDIRP4
ASGNP4
line 527
;527:	startTime = cent->trailTime;
ADDRLP4 116
ADDRFP4 0
INDIRP4
CNSTI4 444
ADDP4
INDIRI4
ASGNI4
line 528
;528:	t = step * ( (startTime + step) / step );
ADDRLP4 120
ADDRLP4 108
INDIRI4
ADDRLP4 116
INDIRI4
ADDRLP4 108
INDIRI4
ADDI4
ADDRLP4 108
INDIRI4
DIVI4
MULI4
ASGNI4
line 530
;529:
;530:	BG_EvaluateTrajectory( &es->pos, cg.time, origin );
ADDRLP4 112
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 cg+109652
INDIRI4
ARGI4
ADDRLP4 96
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 532
;531:
;532:	le = CG_AllocLocalEntity();
ADDRLP4 132
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 132
INDIRP4
ASGNP4
line 533
;533:	re = &le->refEntity;
ADDRLP4 40
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 535
;534:
;535:	velocity[0] = 60 - 120 * crandom();
ADDRLP4 136
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 44
CNSTF4 1114636288
CNSTF4 1123024896
CNSTF4 1073741824
ADDRLP4 136
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
SUBF4
ASGNF4
line 536
;536:	velocity[1] = 40 - 80 * crandom();
ADDRLP4 140
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 44+4
CNSTF4 1109393408
CNSTF4 1117782016
CNSTF4 1073741824
ADDRLP4 140
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
SUBF4
ASGNF4
line 537
;537:	velocity[2] = 100 - 200 * crandom();
ADDRLP4 144
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 44+8
CNSTF4 1120403456
CNSTF4 1128792064
CNSTF4 1073741824
ADDRLP4 144
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
SUBF4
ASGNF4
line 539
;538:
;539:	le->leType = LE_MOVE_SCALE_FADE;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 4
ASGNI4
line 540
;540:	le->leFlags = LEF_TUMBLE;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 2
ASGNI4
line 541
;541:	le->leBounceSoundType = LEBS_NONE;
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 0
ASGNI4
line 542
;542:	le->leMarkType = LEMT_NONE;
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
CNSTI4 0
ASGNI4
line 544
;543:
;544:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+109652
INDIRI4
ASGNI4
line 545
;545:	le->endTime = le->startTime + 600;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 600
ADDI4
ASGNI4
line 547
;546:
;547:	le->pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 5
ASGNI4
line 548
;548:	le->pos.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+109652
INDIRI4
ASGNI4
line 550
;549:
;550:	AnglesToAxis( cent->lerpAngles, v );
ADDRFP4 0
INDIRP4
CNSTI4 728
ADDP4
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 552
;551:
;552:	offset[0] = 2;
ADDRLP4 56
CNSTF4 1073741824
ASGNF4
line 553
;553:	offset[1] = 2;
ADDRLP4 56+4
CNSTF4 1073741824
ASGNF4
line 554
;554:	offset[2] = 2;
ADDRLP4 56+8
CNSTF4 1073741824
ASGNF4
line 556
;555:
;556:	xoffset[0] = offset[0] * v[0][0] + offset[1] * v[1][0] + offset[2] * v[2][0];
ADDRLP4 80
ADDRLP4 56
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 56+4
INDIRF4
ADDRLP4 4+12
INDIRF4
MULF4
ADDF4
ADDRLP4 56+8
INDIRF4
ADDRLP4 4+24
INDIRF4
MULF4
ADDF4
ASGNF4
line 557
;557:	xoffset[1] = offset[0] * v[0][1] + offset[1] * v[1][1] + offset[2] * v[2][1];
ADDRLP4 80+4
ADDRLP4 56
INDIRF4
ADDRLP4 4+4
INDIRF4
MULF4
ADDRLP4 56+4
INDIRF4
ADDRLP4 4+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 56+8
INDIRF4
ADDRLP4 4+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 558
;558:	xoffset[2] = offset[0] * v[0][2] + offset[1] * v[1][2] + offset[2] * v[2][2];
ADDRLP4 80+8
ADDRLP4 56
INDIRF4
ADDRLP4 4+8
INDIRF4
MULF4
ADDRLP4 56+4
INDIRF4
ADDRLP4 4+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 56+8
INDIRF4
ADDRLP4 4+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 560
;559:
;560:	VectorAdd( origin, xoffset, re->origin );
ADDRLP4 40
INDIRP4
CNSTI4 68
ADDP4
ADDRLP4 96
INDIRF4
ADDRLP4 80
INDIRF4
ADDF4
ASGNF4
ADDRLP4 40
INDIRP4
CNSTI4 72
ADDP4
ADDRLP4 96+4
INDIRF4
ADDRLP4 80+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 40
INDIRP4
CNSTI4 76
ADDP4
ADDRLP4 96+8
INDIRF4
ADDRLP4 80+8
INDIRF4
ADDF4
ASGNF4
line 561
;561:	VectorCopy( re->origin, le->pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 40
INDIRP4
CNSTI4 68
ADDP4
INDIRB
ASGNB 12
line 563
;562:
;563:	if ( CG_PointContents( re->origin, -1 ) & CONTENTS_WATER ) {
ADDRLP4 40
INDIRP4
CNSTI4 68
ADDP4
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 152
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 152
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $353
line 564
;564:		waterScale = 0.10f;
ADDRLP4 92
CNSTF4 1036831949
ASGNF4
line 565
;565:	}
LABELV $353
line 567
;566:
;567:	xvelocity[0] = velocity[0] * v[0][0] + velocity[1] * v[1][0] + velocity[2] * v[2][0];
ADDRLP4 68
ADDRLP4 44
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 44+4
INDIRF4
ADDRLP4 4+12
INDIRF4
MULF4
ADDF4
ADDRLP4 44+8
INDIRF4
ADDRLP4 4+24
INDIRF4
MULF4
ADDF4
ASGNF4
line 568
;568:	xvelocity[1] = velocity[0] * v[0][1] + velocity[1] * v[1][1] + velocity[2] * v[2][1];
ADDRLP4 68+4
ADDRLP4 44
INDIRF4
ADDRLP4 4+4
INDIRF4
MULF4
ADDRLP4 44+4
INDIRF4
ADDRLP4 4+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 44+8
INDIRF4
ADDRLP4 4+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 569
;569:	xvelocity[2] = velocity[0] * v[0][2] + velocity[1] * v[1][2] + velocity[2] * v[2][2];
ADDRLP4 68+8
ADDRLP4 44
INDIRF4
ADDRLP4 4+8
INDIRF4
MULF4
ADDRLP4 44+4
INDIRF4
ADDRLP4 4+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 44+8
INDIRF4
ADDRLP4 4+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 570
;570:	VectorScale( xvelocity, waterScale, le->pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 68
INDIRF4
ADDRLP4 92
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 68+4
INDIRF4
ADDRLP4 92
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 68+8
INDIRF4
ADDRLP4 92
INDIRF4
MULF4
ASGNF4
line 572
;571:
;572:	AxisCopy( axisDefault, re->axis );
ADDRGP4 axisDefault
ARGP4
ADDRLP4 40
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AxisCopy
CALLV
pop
line 573
;573:    re->shaderTime = cg.time / 1000.0f;
ADDRLP4 40
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+109652
INDIRI4
CVIF4 4
CNSTF4 1148846080
DIVF4
ASGNF4
line 574
;574:    re->reType = RT_SPRITE;
ADDRLP4 40
INDIRP4
CNSTI4 2
ASGNI4
line 575
;575:    re->radius = 0.25f;
ADDRLP4 40
INDIRP4
CNSTI4 132
ADDP4
CNSTF4 1048576000
ASGNF4
line 576
;576:	re->customShader = cgs.media.railRingsShader;
ADDRLP4 40
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+153876+200
INDIRI4
ASGNI4
line 577
;577:	le->bounceFactor = 0.3f;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 1050253722
ASGNF4
line 579
;578:
;579:    re->shaderRGBA[0] = wi->flashDlightColor[0] * 63;
ADDRLP4 160
CNSTF4 1115422720
ADDRFP4 4
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 164
CNSTF4 1325400064
ASGNF4
ADDRLP4 160
INDIRF4
ADDRLP4 164
INDIRF4
LTF4 $381
ADDRLP4 156
ADDRLP4 160
INDIRF4
ADDRLP4 164
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $382
JUMPV
LABELV $381
ADDRLP4 156
ADDRLP4 160
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $382
ADDRLP4 40
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 156
INDIRU4
CVUU1 4
ASGNU1
line 580
;580:    re->shaderRGBA[1] = wi->flashDlightColor[1] * 63;
ADDRLP4 172
CNSTF4 1115422720
ADDRFP4 4
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 176
CNSTF4 1325400064
ASGNF4
ADDRLP4 172
INDIRF4
ADDRLP4 176
INDIRF4
LTF4 $384
ADDRLP4 168
ADDRLP4 172
INDIRF4
ADDRLP4 176
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $385
JUMPV
LABELV $384
ADDRLP4 168
ADDRLP4 172
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $385
ADDRLP4 40
INDIRP4
CNSTI4 117
ADDP4
ADDRLP4 168
INDIRU4
CVUU1 4
ASGNU1
line 581
;581:    re->shaderRGBA[2] = wi->flashDlightColor[2] * 63;
ADDRLP4 184
CNSTF4 1115422720
ADDRFP4 4
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 188
CNSTF4 1325400064
ASGNF4
ADDRLP4 184
INDIRF4
ADDRLP4 188
INDIRF4
LTF4 $387
ADDRLP4 180
ADDRLP4 184
INDIRF4
ADDRLP4 188
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $388
JUMPV
LABELV $387
ADDRLP4 180
ADDRLP4 184
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $388
ADDRLP4 40
INDIRP4
CNSTI4 118
ADDP4
ADDRLP4 180
INDIRU4
CVUU1 4
ASGNU1
line 582
;582:    re->shaderRGBA[3] = 63;
ADDRLP4 40
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 63
ASGNU1
line 584
;583:
;584:    le->color[0] = wi->flashDlightColor[0] * 0.2;
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
CNSTF4 1045220557
ADDRFP4 4
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
MULF4
ASGNF4
line 585
;585:    le->color[1] = wi->flashDlightColor[1] * 0.2;
ADDRLP4 0
INDIRP4
CNSTI4 112
ADDP4
CNSTF4 1045220557
ADDRFP4 4
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
MULF4
ASGNF4
line 586
;586:    le->color[2] = wi->flashDlightColor[2] * 0.2;
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
CNSTF4 1045220557
ADDRFP4 4
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
MULF4
ASGNF4
line 587
;587:    le->color[3] = 0.25f;
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1048576000
ASGNF4
line 589
;588:
;589:	le->angles.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
CNSTI4 2
ASGNI4
line 590
;590:	le->angles.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDRGP4 cg+109652
INDIRI4
ASGNI4
line 591
;591:	le->angles.trBase[0] = rand()&31;
ADDRLP4 192
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 192
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 592
;592:	le->angles.trBase[1] = rand()&31;
ADDRLP4 196
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 196
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 593
;593:	le->angles.trBase[2] = rand()&31;
ADDRLP4 200
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 200
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 594
;594:	le->angles.trDelta[0] = 1;
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
CNSTF4 1065353216
ASGNF4
line 595
;595:	le->angles.trDelta[1] = 0.5;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
CNSTF4 1056964608
ASGNF4
line 596
;596:	le->angles.trDelta[2] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTF4 0
ASGNF4
line 598
;597:
;598:}
LABELV $316
endproc CG_PlasmaTrail 204 12
export CG_GrappleTrail
proc CG_GrappleTrail 184 16
line 604
;599:/*
;600:==========================
;601:CG_GrappleTrail
;602:==========================
;603:*/
;604:void CG_GrappleTrail( centity_t *ent, const weaponInfo_t *wi ) {
line 610
;605:	vec3_t	origin;
;606:	entityState_t	*es;
;607:	vec3_t			forward, up;
;608:	refEntity_t		beam;
;609:
;610:	es = &ent->currentState;
ADDRLP4 164
ADDRFP4 0
INDIRP4
ASGNP4
line 612
;611:
;612:	BG_EvaluateTrajectory( &es->pos, cg.time, origin );
ADDRLP4 164
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 cg+109652
INDIRI4
ARGI4
ADDRLP4 152
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 613
;613:	ent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 444
ADDP4
ADDRGP4 cg+109652
INDIRI4
ASGNI4
line 615
;614:
;615:	memset( &beam, 0, sizeof( beam ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 617
;616:	//FIXME adjust for muzzle position
;617:	VectorCopy ( cg_entities[ ent->currentState.otherEntityNum ].lerpOrigin, beam.origin );
ADDRLP4 0+68
CNSTI4 740
ADDRFP4 0
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_entities+716
ADDP4
INDIRB
ASGNB 12
line 618
;618:	beam.origin[2] += 26;
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
CNSTF4 1104150528
ADDF4
ASGNF4
line 619
;619:	AngleVectors( cg_entities[ ent->currentState.otherEntityNum ].lerpAngles, forward, NULL, up );
CNSTI4 740
ADDRFP4 0
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_entities+728
ADDP4
ARGP4
ADDRLP4 168
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 140
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 620
;620:	VectorMA( beam.origin, -6, up, beam.origin );
ADDRLP4 0+68
ADDRLP4 0+68
INDIRF4
CNSTF4 3233808384
ADDRLP4 140
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 0+68+4
INDIRF4
CNSTF4 3233808384
ADDRLP4 140+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
CNSTF4 3233808384
ADDRLP4 140+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 621
;621:	VectorCopy( origin, beam.oldorigin );
ADDRLP4 0+84
ADDRLP4 152
INDIRB
ASGNB 12
line 623
;622:
;623:	if (Distance( beam.origin, beam.oldorigin ) < 64 )
ADDRLP4 0+68
ARGP4
ADDRLP4 0+84
ARGP4
ADDRLP4 180
ADDRGP4 Distance
CALLF4
ASGNF4
ADDRLP4 180
INDIRF4
CNSTF4 1115684864
GEF4 $411
line 624
;624:		return; // Don't draw if close
ADDRGP4 $390
JUMPV
LABELV $411
line 626
;625:
;626:	beam.reType = RT_LIGHTNING;
ADDRLP4 0
CNSTI4 6
ASGNI4
line 627
;627:	beam.customShader = cgs.media.lightningShader;
ADDRLP4 0+112
ADDRGP4 cgs+153876+208
INDIRI4
ASGNI4
line 629
;628:
;629:	AxisClear( beam.axis );
ADDRLP4 0+28
ARGP4
ADDRGP4 AxisClear
CALLV
pop
line 630
;630:	beam.shaderRGBA[0] = 0xff;
ADDRLP4 0+116
CNSTU1 255
ASGNU1
line 631
;631:	beam.shaderRGBA[1] = 0xff;
ADDRLP4 0+116+1
CNSTU1 255
ASGNU1
line 632
;632:	beam.shaderRGBA[2] = 0xff;
ADDRLP4 0+116+2
CNSTU1 255
ASGNU1
line 633
;633:	beam.shaderRGBA[3] = 0xff;
ADDRLP4 0+116+3
CNSTU1 255
ASGNU1
line 634
;634:	trap_R_AddRefEntityToScene( &beam );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 635
;635:}
LABELV $390
endproc CG_GrappleTrail 184 16
proc CG_GrenadeTrail 92 48
line 642
;636:
;637:/*
;638:==========================
;639:CG_GrenadeTrail
;640:==========================
;641:*/
;642:static void CG_GrenadeTrail( centity_t *ent, const weaponInfo_t *wi ) {
line 654
;643:	//CG_RocketTrail( ent, wi );  // We now use separate effects  Shafe - Trep
;644:	// Shafe - Trep all of this is just copied from CG_RocketTrail with a changed shader... This can be consolidated a bit better... later
;645:	int		step;
;646:	vec3_t	origin, lastPos;
;647:	int		t;
;648:	int		startTime, contents;
;649:	int		lastContents;
;650:	entityState_t	*es;
;651:	vec3_t	up;
;652:	localEntity_t	*smoke;
;653:
;654:	if ( cg_noProjectileTrail.integer ) {
ADDRGP4 cg_noProjectileTrail+12
INDIRI4
CNSTI4 0
EQI4 $427
line 655
;655:		return;
ADDRGP4 $426
JUMPV
LABELV $427
line 658
;656:	}
;657:
;658:	up[0] = 0;
ADDRLP4 28
CNSTF4 0
ASGNF4
line 659
;659:	up[1] = 0;
ADDRLP4 28+4
CNSTF4 0
ASGNF4
line 660
;660:	up[2] = 0;
ADDRLP4 28+8
CNSTF4 0
ASGNF4
line 662
;661:
;662:	step = 50;
ADDRLP4 20
CNSTI4 50
ASGNI4
line 664
;663:
;664:	es = &ent->currentState;
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
line 665
;665:	startTime = ent->trailTime;
ADDRLP4 56
ADDRFP4 0
INDIRP4
CNSTI4 444
ADDP4
INDIRI4
ASGNI4
line 666
;666:	t = step * ( (startTime + step) / step );
ADDRLP4 0
ADDRLP4 20
INDIRI4
ADDRLP4 56
INDIRI4
ADDRLP4 20
INDIRI4
ADDI4
ADDRLP4 20
INDIRI4
DIVI4
MULI4
ASGNI4
line 668
;667:
;668:	BG_EvaluateTrajectory( &es->pos, cg.time, origin );
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 cg+109652
INDIRI4
ARGI4
ADDRLP4 44
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 669
;669:	contents = CG_PointContents( origin, -1 );
ADDRLP4 44
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 68
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 40
ADDRLP4 68
INDIRI4
ASGNI4
line 672
;670:
;671:	// if object (e.g. grenade) is stationary, don't toss up smoke
;672:	if ( es->pos.trType == TR_STATIONARY ) {
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 0
NEI4 $433
line 673
;673:		ent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 444
ADDP4
ADDRGP4 cg+109652
INDIRI4
ASGNI4
line 674
;674:		return;
ADDRGP4 $426
JUMPV
LABELV $433
line 677
;675:	}
;676:
;677:	BG_EvaluateTrajectory( &es->pos, ent->trailTime, lastPos );
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 444
ADDP4
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 678
;678:	lastContents = CG_PointContents( lastPos, -1 );
ADDRLP4 4
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 72
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 60
ADDRLP4 72
INDIRI4
ASGNI4
line 680
;679:
;680:	ent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 444
ADDP4
ADDRGP4 cg+109652
INDIRI4
ASGNI4
line 682
;681:
;682:	if ( contents & ( CONTENTS_WATER | CONTENTS_SLIME | CONTENTS_LAVA ) ) {
ADDRLP4 40
INDIRI4
CNSTI4 56
BANDI4
CNSTI4 0
EQI4 $444
line 683
;683:		if ( contents & lastContents & CONTENTS_WATER ) {
ADDRLP4 40
INDIRI4
ADDRLP4 60
INDIRI4
BANDI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $426
line 684
;684:			CG_BubbleTrail( lastPos, origin, 8 );
ADDRLP4 4
ARGP4
ADDRLP4 44
ARGP4
CNSTF4 1090519040
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 685
;685:		}
line 686
;686:		return;
ADDRGP4 $426
JUMPV
line 689
;687:	}
;688:
;689:	for ( ; t <= ent->trailTime ; t += step ) {
LABELV $441
line 690
;690:		BG_EvaluateTrajectory( &es->pos, t, lastPos );
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 692
;691:
;692:		smoke = CG_SmokePuff( lastPos, up, 
ADDRLP4 4
ARGP4
ADDRLP4 28
ARGP4
ADDRLP4 76
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 76
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
ARGF4
ADDRLP4 80
CNSTF4 1065353216
ASGNF4
ADDRLP4 80
INDIRF4
ARGF4
ADDRLP4 80
INDIRF4
ARGF4
ADDRLP4 80
INDIRF4
ARGF4
CNSTF4 1051260355
ARGF4
ADDRLP4 76
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 84
CNSTI4 0
ASGNI4
ADDRLP4 84
INDIRI4
ARGI4
ADDRLP4 84
INDIRI4
ARGI4
ADDRGP4 cgs+153876+288
INDIRI4
ARGI4
ADDRLP4 88
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 16
ADDRLP4 88
INDIRP4
ASGNP4
line 701
;693:					  wi->trailRadius, 
;694:					  1, 1, 1, 0.33f,
;695:					  wi->wiTrailTime, 
;696:					  t,
;697:					  0,
;698:					  0, 
;699:					  cgs.media.smokePuffShader );
;700:		// use the optimized local entity add
;701:		smoke->leType = LE_SCALE_FADE;
ADDRLP4 16
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 7
ASGNI4
line 702
;702:	}
LABELV $442
line 689
ADDRLP4 0
ADDRLP4 0
INDIRI4
ADDRLP4 20
INDIRI4
ADDI4
ASGNI4
LABELV $444
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 444
ADDP4
INDIRI4
LEI4 $441
line 704
;703:
;704:}
LABELV $426
endproc CG_GrenadeTrail 92 48
export CG_RegisterWeapon
proc CG_RegisterWeapon 308 12
line 715
;705:
;706:
;707:
;708:/*
;709:=================
;710:CG_RegisterWeapon
;711:
;712:The server says this item is used on this level
;713:=================
;714:*/
;715:void CG_RegisterWeapon( int weaponNum ) {
line 722
;716:	weaponInfo_t	*weaponInfo;
;717:	gitem_t			*item, *ammo;
;718:	char			path[MAX_QPATH];
;719:	vec3_t			mins, maxs;
;720:	int				i;
;721:
;722:	weaponInfo = &cg_weapons[weaponNum];
ADDRLP4 12
CNSTI4 136
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 724
;723:
;724:	if ( weaponNum == 0 ) {
ADDRFP4 0
INDIRI4
CNSTI4 0
NEI4 $448
line 725
;725:		return;
ADDRGP4 $447
JUMPV
LABELV $448
line 729
;726:	}
;727:
;728:	
;729:	if ( weaponInfo->registered ) {
ADDRLP4 12
INDIRP4
INDIRI4
CNSTI4 0
EQI4 $450
line 730
;730:		return;
ADDRGP4 $447
JUMPV
LABELV $450
line 733
;731:	}
;732:
;733:	memset( weaponInfo, 0, sizeof( *weaponInfo ) );
ADDRLP4 12
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 136
ARGI4
ADDRGP4 memset
CALLP4
pop
line 734
;734:	weaponInfo->registered = qtrue;
ADDRLP4 12
INDIRP4
CNSTI4 1
ASGNI4
line 736
;735:
;736:	for ( item = bg_itemlist + 1 ; item->classname ; item++ ) {
ADDRLP4 4
ADDRGP4 bg_itemlist+52
ASGNP4
ADDRGP4 $455
JUMPV
LABELV $452
line 737
;737:		if ( item->giType == IT_WEAPON && item->giTag == weaponNum ) {
ADDRLP4 4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 1
NEI4 $457
ADDRLP4 4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
ADDRFP4 0
INDIRI4
NEI4 $457
line 738
;738:			weaponInfo->item = item;
ADDRLP4 12
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 4
INDIRP4
ASGNP4
line 739
;739:			break;
ADDRGP4 $454
JUMPV
LABELV $457
line 741
;740:		}
;741:	}
LABELV $453
line 736
ADDRLP4 4
ADDRLP4 4
INDIRP4
CNSTI4 52
ADDP4
ASGNP4
LABELV $455
ADDRLP4 4
INDIRP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $452
LABELV $454
line 742
;742:	if ( !item->classname ) {
ADDRLP4 4
INDIRP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $459
line 743
;743:		CG_Error( "Couldn't find weapon %i", weaponNum );
ADDRGP4 $461
ARGP4
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 CG_Error
CALLV
pop
line 744
;744:	}
LABELV $459
line 745
;745:	CG_RegisterItemVisuals( item - bg_itemlist );
ADDRLP4 4
INDIRP4
CVPU4 4
ADDRGP4 bg_itemlist
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 52
DIVI4
ARGI4
ADDRGP4 CG_RegisterItemVisuals
CALLV
pop
line 748
;746:
;747:	// load cmodel before model so filecache works
;748:	weaponInfo->weaponModel = trap_R_RegisterModel( item->world_model[0] );
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRLP4 104
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 104
INDIRI4
ASGNI4
line 751
;749:
;750:	// calc midpoint for rotation
;751:	trap_R_ModelBounds( weaponInfo->weaponModel, mins, maxs );
ADDRLP4 12
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ARGI4
ADDRLP4 16
ARGP4
ADDRLP4 92
ARGP4
ADDRGP4 trap_R_ModelBounds
CALLV
pop
line 752
;752:	for ( i = 0 ; i < 3 ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $462
line 753
;753:		weaponInfo->weaponMidpoint[i] = mins[i] + 0.5 * ( maxs[i] - mins[i] );
ADDRLP4 108
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 112
ADDRLP4 108
INDIRI4
ADDRLP4 16
ADDP4
INDIRF4
ASGNF4
ADDRLP4 108
INDIRI4
ADDRLP4 12
INDIRP4
CNSTI4 24
ADDP4
ADDP4
ADDRLP4 112
INDIRF4
CNSTF4 1056964608
ADDRLP4 108
INDIRI4
ADDRLP4 92
ADDP4
INDIRF4
ADDRLP4 112
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 754
;754:	}
LABELV $463
line 752
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $462
line 756
;755:
;756:	weaponInfo->weaponIcon = trap_R_RegisterShader( item->icon );
ADDRLP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRP4
ARGP4
ADDRLP4 108
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 68
ADDP4
ADDRLP4 108
INDIRI4
ASGNI4
line 757
;757:	weaponInfo->ammoIcon = trap_R_RegisterShader( item->icon );
ADDRLP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRP4
ARGP4
ADDRLP4 112
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 72
ADDP4
ADDRLP4 112
INDIRI4
ASGNI4
line 759
;758:
;759:	for ( ammo = bg_itemlist + 1 ; ammo->classname ; ammo++ ) {
ADDRLP4 8
ADDRGP4 bg_itemlist+52
ASGNP4
ADDRGP4 $469
JUMPV
LABELV $466
line 760
;760:		if ( ammo->giType == IT_AMMO && ammo->giTag == weaponNum ) {
ADDRLP4 8
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 2
NEI4 $471
ADDRLP4 8
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
ADDRFP4 0
INDIRI4
NEI4 $471
line 761
;761:			break;
ADDRGP4 $468
JUMPV
LABELV $471
line 763
;762:		}
;763:	}
LABELV $467
line 759
ADDRLP4 8
ADDRLP4 8
INDIRP4
CNSTI4 52
ADDP4
ASGNP4
LABELV $469
ADDRLP4 8
INDIRP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $466
LABELV $468
line 764
;764:	if ( ammo->classname && ammo->world_model[0] ) {
ADDRLP4 120
CNSTU4 0
ASGNU4
ADDRLP4 8
INDIRP4
INDIRP4
CVPU4 4
ADDRLP4 120
INDIRU4
EQU4 $473
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
CVPU4 4
ADDRLP4 120
INDIRU4
EQU4 $473
line 765
;765:		weaponInfo->ammoModel = trap_R_RegisterModel( ammo->world_model[0] );
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRLP4 124
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 76
ADDP4
ADDRLP4 124
INDIRI4
ASGNI4
line 766
;766:	}
LABELV $473
line 768
;767:
;768:	strcpy( path, item->world_model[0] );
ADDRLP4 28
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 769
;769:	COM_StripExtension( path, path );
ADDRLP4 28
ARGP4
ADDRLP4 28
ARGP4
ADDRGP4 COM_StripExtension
CALLV
pop
line 770
;770:	strcat( path, "_flash.md3" );
ADDRLP4 28
ARGP4
ADDRGP4 $475
ARGP4
ADDRGP4 strcat
CALLP4
pop
line 771
;771:	weaponInfo->flashModel = trap_R_RegisterModel( path );
ADDRLP4 28
ARGP4
ADDRLP4 124
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 124
INDIRI4
ASGNI4
line 773
;772:
;773:	strcpy( path, item->world_model[0] );
ADDRLP4 28
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 774
;774:	COM_StripExtension( path, path );
ADDRLP4 28
ARGP4
ADDRLP4 28
ARGP4
ADDRGP4 COM_StripExtension
CALLV
pop
line 775
;775:	strcat( path, "_barrel.md3" );
ADDRLP4 28
ARGP4
ADDRGP4 $476
ARGP4
ADDRGP4 strcat
CALLP4
pop
line 776
;776:	weaponInfo->barrelModel = trap_R_RegisterModel( path );
ADDRLP4 28
ARGP4
ADDRLP4 128
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 16
ADDP4
ADDRLP4 128
INDIRI4
ASGNI4
line 778
;777:
;778:	strcpy( path, item->world_model[0] );
ADDRLP4 28
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 779
;779:	COM_StripExtension( path, path );
ADDRLP4 28
ARGP4
ADDRLP4 28
ARGP4
ADDRGP4 COM_StripExtension
CALLV
pop
line 780
;780:	strcat( path, "_hand.md3" );
ADDRLP4 28
ARGP4
ADDRGP4 $477
ARGP4
ADDRGP4 strcat
CALLP4
pop
line 781
;781:	weaponInfo->handsModel = trap_R_RegisterModel( path );
ADDRLP4 28
ARGP4
ADDRLP4 132
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 132
INDIRI4
ASGNI4
line 783
;782:
;783:	if ( !weaponInfo->handsModel ) {
ADDRLP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 0
NEI4 $478
line 784
;784:		weaponInfo->handsModel = trap_R_RegisterModel( "models/weapons2/shotgun/shotgun_hand.md3" );
ADDRGP4 $480
ARGP4
ADDRLP4 136
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 136
INDIRI4
ASGNI4
line 785
;785:	}
LABELV $478
line 787
;786:
;787:	weaponInfo->loopFireSound = qfalse;
ADDRLP4 12
INDIRP4
CNSTI4 132
ADDP4
CNSTI4 0
ASGNI4
line 789
;788:
;789:	switch ( weaponNum ) {
ADDRLP4 136
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 136
INDIRI4
CNSTI4 1
LTI4 $481
ADDRLP4 136
INDIRI4
CNSTI4 11
GTI4 $481
ADDRLP4 136
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $548-4
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $548
address $483
address $498
address $509
address $516
address $511
address $486
address $531
address $522
address $542
address $495
address $506
code
LABELV $483
line 791
;790:	case WP_GAUNTLET:
;791:		MAKERGB( weaponInfo->flashDlightColor, 0.6f, 0.6f, 1.0f );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 1065353216
ASGNF4
line 792
;792:		weaponInfo->firingSound = trap_S_RegisterSound( "sound/weapons/melee/fstrun.wav", qfalse );
ADDRGP4 $484
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 140
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 128
ADDP4
ADDRLP4 140
INDIRI4
ASGNI4
line 793
;793:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/melee/fstatck.wav", qfalse );
ADDRGP4 $485
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 144
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 144
INDIRI4
ASGNI4
line 794
;794:		break;
ADDRGP4 $482
JUMPV
LABELV $486
line 798
;795:
;796:	case WP_LIGHTNING:
;797:		// Shafe - Trep - Flame Thrower
;798:		weaponInfo->missileSound = trap_S_RegisterSound( "sound/weapons/plasma/lasfly.wav", qfalse );
ADDRGP4 $487
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 148
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 148
INDIRI4
ASGNI4
line 799
;799:		MAKERGB( weaponInfo->flashDlightColor, 0.6, 0.6, 1 );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 1065353216
ASGNF4
line 800
;800:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/flamethrower/fireimpc.wav", qfalse );
ADDRGP4 $488
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 152
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 152
INDIRI4
ASGNI4
line 801
;801:		cgs.media.flameExplosionShader = trap_R_RegisterShader( "rocketExplosion" );
ADDRGP4 $491
ARGP4
ADDRLP4 156
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+153876+508
ADDRLP4 156
INDIRI4
ASGNI4
line 809
;802:		
;803:		//MAKERGB( weaponInfo->flashDlightColor, 0.6f, 0.6f, 1.0f );
;804:		//weaponInfo->readySound = trap_S_RegisterSound( "sound/weapons/melee/fsthum.wav", qfalse );
;805:		//weaponInfo->firingSound = trap_S_RegisterSound( "sound/weapons/lightning/lg_hum.wav", qfalse );
;806:
;807:		//weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/lightning/lg_fire.wav", qfalse );
;808:		
;809:		cgs.media.lightningShader = trap_R_RegisterShader( "lightningBoltNew"); // Shafe - Flame Thrower This is Needed For The Grapple (in oa pk3)
ADDRGP4 $494
ARGP4
ADDRLP4 160
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+153876+208
ADDRLP4 160
INDIRI4
ASGNI4
line 816
;810:		
;811:		//cgs.media.lightningExplosionModel = trap_R_RegisterModel( "models/weaphits/crackle.md3" );
;812:		//cgs.media.sfx_lghit1 = trap_S_RegisterSound( "sound/weapons/lightning/lg_hit.wav", qfalse );
;813:		//cgs.media.sfx_lghit2 = trap_S_RegisterSound( "sound/weapons/lightning/lg_hit2.wav", qfalse );
;814:		//cgs.media.sfx_lghit3 = trap_S_RegisterSound( "sound/weapons/lightning/lg_hit3.wav", qfalse );
;815:
;816:		break;
ADDRGP4 $482
JUMPV
LABELV $495
line 819
;817:
;818:	case WP_GRAPPLING_HOOK:
;819:		MAKERGB( weaponInfo->flashDlightColor, 0.6f, 0.6f, 1.0f );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 1065353216
ASGNF4
line 820
;820:		weaponInfo->missileModel = trap_R_RegisterModel( "models/ammo/rocket/rocket.md3" );
ADDRGP4 $496
ARGP4
ADDRLP4 164
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 164
INDIRI4
ASGNI4
line 821
;821:		weaponInfo->missileTrailFunc = CG_GrappleTrail;
ADDRLP4 12
INDIRP4
CNSTI4 88
ADDP4
ADDRGP4 CG_GrappleTrail
ASGNP4
line 822
;822:		weaponInfo->missileDlight = 200;
ADDRLP4 12
INDIRP4
CNSTI4 92
ADDP4
CNSTF4 1128792064
ASGNF4
line 823
;823:		weaponInfo->wiTrailTime = 2000;
ADDRLP4 12
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1157234688
ASGNF4
line 824
;824:		weaponInfo->trailRadius = 64;
ADDRLP4 12
INDIRP4
CNSTI4 116
ADDP4
CNSTF4 1115684864
ASGNF4
line 825
;825:		MAKERGB( weaponInfo->missileDlightColor, 1, 0.75f, 0 );
ADDRLP4 12
INDIRP4
CNSTI4 96
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 100
ADDP4
CNSTF4 1061158912
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 0
ASGNF4
line 826
;826:		weaponInfo->readySound = trap_S_RegisterSound( "sound/weapons/melee/fsthum.wav", qfalse );
ADDRGP4 $497
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 168
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 124
ADDP4
ADDRLP4 168
INDIRI4
ASGNI4
line 827
;827:		weaponInfo->firingSound = trap_S_RegisterSound( "sound/weapons/melee/fstrun.wav", qfalse );
ADDRGP4 $484
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 172
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 128
ADDP4
ADDRLP4 172
INDIRI4
ASGNI4
line 828
;828:		break;
ADDRGP4 $482
JUMPV
LABELV $498
line 845
;829:
;830:#ifdef MISSIONPACK
;831:	case WP_CHAINGUN:
;832:		weaponInfo->firingSound = trap_S_RegisterSound( "sound/weapons/vulcan/wvulfire.wav", qfalse );
;833:		weaponInfo->loopFireSound = qtrue;
;834:		MAKERGB( weaponInfo->flashDlightColor, 1, 1, 0 );
;835:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/vulcan/vulcanf1b.wav", qfalse );
;836:		weaponInfo->flashSound[1] = trap_S_RegisterSound( "sound/weapons/vulcan/vulcanf2b.wav", qfalse );
;837:		weaponInfo->flashSound[2] = trap_S_RegisterSound( "sound/weapons/vulcan/vulcanf3b.wav", qfalse );
;838:		weaponInfo->flashSound[3] = trap_S_RegisterSound( "sound/weapons/vulcan/vulcanf4b.wav", qfalse );
;839:		weaponInfo->ejectBrassFunc = CG_MachineGunEjectBrass;
;840:		cgs.media.bulletExplosionShader = trap_R_RegisterShader( "bulletExplosion" );
;841:		break;
;842:#endif
;843:
;844:	case WP_MACHINEGUN:
;845:		MAKERGB( weaponInfo->flashDlightColor, 1, 1, 0 );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 846
;846:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/machinegun/machgf1b.wav", qfalse );
ADDRGP4 $499
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 176
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 176
INDIRI4
ASGNI4
line 847
;847:		weaponInfo->flashSound[1] = trap_S_RegisterSound( "sound/weapons/machinegun/machgf2b.wav", qfalse );
ADDRGP4 $500
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 180
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 180
INDIRI4
ASGNI4
line 848
;848:		weaponInfo->flashSound[2] = trap_S_RegisterSound( "sound/weapons/machinegun/machgf3b.wav", qfalse );
ADDRGP4 $501
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 184
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 184
INDIRI4
ASGNI4
line 849
;849:		weaponInfo->flashSound[3] = trap_S_RegisterSound( "sound/weapons/machinegun/machgf4b.wav", qfalse );
ADDRGP4 $502
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 188
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 188
INDIRI4
ASGNI4
line 851
;850:		//weaponInfo->ejectBrassFunc = CG_MachineGunEjectBrass;
;851:		cgs.media.bulletExplosionShader = trap_R_RegisterShader( "bulletExplosion" );
ADDRGP4 $505
ARGP4
ADDRLP4 192
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+153876+484
ADDRLP4 192
INDIRI4
ASGNI4
line 852
;852:		break;
ADDRGP4 $482
JUMPV
LABELV $506
line 855
;853:
;854:	case WP_TURRET:
;855:		MAKERGB( weaponInfo->flashDlightColor, 1, 1, 0 );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 856
;856:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/machinegun/machgf1b.wav", qfalse );
ADDRGP4 $499
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 196
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 196
INDIRI4
ASGNI4
line 857
;857:		weaponInfo->flashSound[1] = trap_S_RegisterSound( "sound/weapons/machinegun/machgf2b.wav", qfalse );
ADDRGP4 $500
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 200
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 200
INDIRI4
ASGNI4
line 858
;858:		weaponInfo->flashSound[2] = trap_S_RegisterSound( "sound/weapons/machinegun/machgf3b.wav", qfalse );
ADDRGP4 $501
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 204
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 204
INDIRI4
ASGNI4
line 859
;859:		weaponInfo->flashSound[3] = trap_S_RegisterSound( "sound/weapons/machinegun/machgf4b.wav", qfalse );
ADDRGP4 $502
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 208
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 208
INDIRI4
ASGNI4
line 861
;860:		//weaponInfo->ejectBrassFunc = CG_MachineGunEjectBrass;
;861:		cgs.media.bulletExplosionShader = trap_R_RegisterShader( "bulletExplosion" );
ADDRGP4 $505
ARGP4
ADDRLP4 212
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+153876+484
ADDRLP4 212
INDIRI4
ASGNI4
line 869
;862:		/*weaponInfo->missileTrailFunc = CG_PlasmaTrail;
;863:		weaponInfo->missileSound = trap_S_RegisterSound( "sound/weapons/plasma/lasfly.wav", qfalse );
;864:		MAKERGB( weaponInfo->flashDlightColor, 0.6f, 0.6f, 1.0f );
;865:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/plasma/hyprbf1a.wav", qfalse );
;866:		cgs.media.plasmaExplosionShader = trap_R_RegisterShader( "plasmaExplosion" );
;867:		cgs.media.railRingsShader = trap_R_RegisterShader( "railDisc" );
;868:		*/
;869:		break; 
ADDRGP4 $482
JUMPV
LABELV $509
line 873
;870:
;871:
;872:	case WP_SHOTGUN:
;873:		MAKERGB( weaponInfo->flashDlightColor, 1, 1, 0 );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 874
;874:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/shotgun/sshotf1b.wav", qfalse );
ADDRGP4 $510
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 216
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 216
INDIRI4
ASGNI4
line 875
;875:		weaponInfo->ejectBrassFunc = CG_ShotgunEjectBrass;
ADDRLP4 12
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 CG_ShotgunEjectBrass
ASGNP4
line 876
;876:		break;
ADDRGP4 $482
JUMPV
LABELV $511
line 879
;877:
;878:	case WP_ROCKET_LAUNCHER:
;879:		weaponInfo->missileModel = trap_R_RegisterModel( "models/ammo/rocket/rocket.md3" );
ADDRGP4 $496
ARGP4
ADDRLP4 220
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 220
INDIRI4
ASGNI4
line 880
;880:		weaponInfo->missileSound = trap_S_RegisterSound( "sound/weapons/rocket/rockfly.wav", qfalse );
ADDRGP4 $512
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 224
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 224
INDIRI4
ASGNI4
line 881
;881:		weaponInfo->missileTrailFunc = CG_RocketTrail;
ADDRLP4 12
INDIRP4
CNSTI4 88
ADDP4
ADDRGP4 CG_RocketTrail
ASGNP4
line 882
;882:		weaponInfo->missileDlight = 200;
ADDRLP4 12
INDIRP4
CNSTI4 92
ADDP4
CNSTF4 1128792064
ASGNF4
line 883
;883:		weaponInfo->wiTrailTime = 2000; 
ADDRLP4 12
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1157234688
ASGNF4
line 884
;884:		weaponInfo->trailRadius = 64; 
ADDRLP4 12
INDIRP4
CNSTI4 116
ADDP4
CNSTF4 1115684864
ASGNF4
line 886
;885:		
;886:		MAKERGB( weaponInfo->missileDlightColor, 1, 0.75f, 0 );
ADDRLP4 12
INDIRP4
CNSTI4 96
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 100
ADDP4
CNSTF4 1061158912
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 0
ASGNF4
line 887
;887:		MAKERGB( weaponInfo->flashDlightColor, 1, 0.75f, 0 );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1061158912
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 889
;888:
;889:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/rocket/rocklf1a.wav", qfalse );
ADDRGP4 $513
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 228
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 228
INDIRI4
ASGNI4
line 890
;890:		cgs.media.rocketExplosionShader = trap_R_RegisterShader( "rocketExplosion" );
ADDRGP4 $491
ARGP4
ADDRLP4 232
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+153876+488
ADDRLP4 232
INDIRI4
ASGNI4
line 891
;891:		break;
ADDRGP4 $482
JUMPV
LABELV $516
line 906
;892:
;893:#ifdef MISSIONPACK
;894:	case WP_PROX_LAUNCHER:
;895:		weaponInfo->missileModel = trap_R_RegisterModel( "models/weaphits/proxmine.md3" );
;896:		weaponInfo->missileTrailFunc = CG_GrenadeTrail;
;897:		weaponInfo->wiTrailTime = 700;
;898:		weaponInfo->trailRadius = 32;
;899:		MAKERGB( weaponInfo->flashDlightColor, 1, 0.70f, 0 );
;900:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/proxmine/wstbfire.wav", qfalse );
;901:		cgs.media.grenadeExplosionShader = trap_R_RegisterShader( "grenadeExplosion" );
;902:		break;
;903:#endif
;904:
;905:	case WP_GRENADE_LAUNCHER:
;906:		weaponInfo->missileModel = trap_R_RegisterModel( "models/ammo/grenade1.md3" );
ADDRGP4 $517
ARGP4
ADDRLP4 236
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 236
INDIRI4
ASGNI4
line 907
;907:		weaponInfo->missileTrailFunc = CG_GrenadeTrail;
ADDRLP4 12
INDIRP4
CNSTI4 88
ADDP4
ADDRGP4 CG_GrenadeTrail
ASGNP4
line 908
;908:		weaponInfo->wiTrailTime = 700;
ADDRLP4 12
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1143930880
ASGNF4
line 909
;909:		weaponInfo->trailRadius = 32;
ADDRLP4 12
INDIRP4
CNSTI4 116
ADDP4
CNSTF4 1107296256
ASGNF4
line 910
;910:		MAKERGB( weaponInfo->flashDlightColor, 1, 0.70f, 0 );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1060320051
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 911
;911:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/grenade/grenlf1a.wav", qfalse );
ADDRGP4 $518
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 240
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 240
INDIRI4
ASGNI4
line 912
;912:		cgs.media.grenadeExplosionShader = trap_R_RegisterShader( "grenadeExplosion" );
ADDRGP4 $521
ARGP4
ADDRLP4 244
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+153876+492
ADDRLP4 244
INDIRI4
ASGNI4
line 913
;913:		break;
ADDRGP4 $482
JUMPV
LABELV $522
line 931
;914:
;915:#ifdef MISSIONPACK
;916:	case WP_NAILGUN:
;917:		weaponInfo->ejectBrassFunc = CG_NailgunEjectBrass;
;918:		weaponInfo->missileTrailFunc = CG_NailTrail;
;919://		weaponInfo->missileSound = trap_S_RegisterSound( "sound/weapons/nailgun/wnalflit.wav", qfalse );
;920:		weaponInfo->trailRadius = 16;
;921:		weaponInfo->wiTrailTime = 250;
;922:		weaponInfo->missileModel = trap_R_RegisterModel( "models/weaphits/nail.md3" );
;923:		MAKERGB( weaponInfo->flashDlightColor, 1, 0.75f, 0 );
;924:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/nailgun/wnalfire.wav", qfalse );
;925:		break;
;926:#endif
;927:
;928:	case WP_PLASMAGUN:
;929:		
;930://		weaponInfo->missileModel = cgs.media.invulnerabilityPowerupModel;
;931:		weaponInfo->missileModel = trap_R_RegisterModel( "models/weaphits/disc.md3" );
ADDRGP4 $523
ARGP4
ADDRLP4 248
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 248
INDIRI4
ASGNI4
line 932
;932:		weaponInfo->missileTrailFunc = CG_PlasmaTrail;
ADDRLP4 12
INDIRP4
CNSTI4 88
ADDP4
ADDRGP4 CG_PlasmaTrail
ASGNP4
line 933
;933:		weaponInfo->missileSound = trap_S_RegisterSound( "sound/weapons/plasma/lasfly.wav", qfalse );
ADDRGP4 $487
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 252
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 252
INDIRI4
ASGNI4
line 934
;934:		MAKERGB( weaponInfo->flashDlightColor, 0.6f, 0.6f, 1.0f );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 1065353216
ASGNF4
line 935
;935:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/plasma/hyprbf1a.wav", qfalse );
ADDRGP4 $524
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 256
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 256
INDIRI4
ASGNI4
line 936
;936:		cgs.media.plasmaExplosionShader = trap_R_RegisterShader( "plasmaExplosion" );
ADDRGP4 $527
ARGP4
ADDRLP4 260
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+153876+480
ADDRLP4 260
INDIRI4
ASGNI4
line 937
;937:		cgs.media.railRingsShader = trap_R_RegisterShader( "railDisc" );
ADDRGP4 $530
ARGP4
ADDRLP4 264
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+153876+200
ADDRLP4 264
INDIRI4
ASGNI4
line 938
;938:		break;
ADDRGP4 $482
JUMPV
LABELV $531
line 941
;939:
;940:	case WP_RAILGUN:
;941:		weaponInfo->readySound = trap_S_RegisterSound( "sound/weapons/railgun/rg_hum.wav", qfalse );
ADDRGP4 $532
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 268
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 124
ADDP4
ADDRLP4 268
INDIRI4
ASGNI4
line 942
;942:		MAKERGB( weaponInfo->flashDlightColor, 1, 0.5f, 0 );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1056964608
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 943
;943:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/railgun/railgf1a.wav", qfalse ); 
ADDRGP4 $533
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 272
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 272
INDIRI4
ASGNI4
line 944
;944:		cgs.media.railExplosionShader = trap_R_RegisterShader( "railExplosion" );
ADDRGP4 $536
ARGP4
ADDRLP4 276
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+153876+476
ADDRLP4 276
INDIRI4
ASGNI4
line 945
;945:		cgs.media.railRingsShader = trap_R_RegisterShader( "railDisc" );
ADDRGP4 $530
ARGP4
ADDRLP4 280
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+153876+200
ADDRLP4 280
INDIRI4
ASGNI4
line 946
;946:		cgs.media.railCoreShader = trap_R_RegisterShader( "railCore" );
ADDRGP4 $541
ARGP4
ADDRLP4 284
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+153876+204
ADDRLP4 284
INDIRI4
ASGNI4
line 947
;947:		break;
ADDRGP4 $482
JUMPV
LABELV $542
line 950
;948:
;949:	case WP_BFG:
;950:		weaponInfo->readySound = trap_S_RegisterSound( "sound/weapons/bfg/bfg_hum.wav", qfalse );
ADDRGP4 $543
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 288
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 124
ADDP4
ADDRLP4 288
INDIRI4
ASGNI4
line 953
;951:		
;952:		// Devastator
;953:		weaponInfo->missileTrailFunc = CG_GrenadeTrail;
ADDRLP4 12
INDIRP4
CNSTI4 88
ADDP4
ADDRGP4 CG_GrenadeTrail
ASGNP4
line 954
;954:		weaponInfo->wiTrailTime = 900;
ADDRLP4 12
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1147207680
ASGNF4
line 955
;955:		weaponInfo->trailRadius = 90;
ADDRLP4 12
INDIRP4
CNSTI4 116
ADDP4
CNSTF4 1119092736
ASGNF4
line 957
;956:		
;957:		MAKERGB( weaponInfo->flashDlightColor, 1, 0.7f, 1 );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1060320051
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 1065353216
ASGNF4
line 958
;958:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/bfg/bfg_fire.wav", qfalse );
ADDRGP4 $544
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 292
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 292
INDIRI4
ASGNI4
line 959
;959:		cgs.media.bfgExplosionShader = trap_R_RegisterShader( "bfgExplosion" );
ADDRGP4 $547
ARGP4
ADDRLP4 296
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+153876+496
ADDRLP4 296
INDIRI4
ASGNI4
line 962
;960:		//cgs.media.bfgExplosionShader = trap_R_RegisterShader( "grenadeExplosion" );
;961:		//weaponInfo->missileModel = trap_R_RegisterModel( "models/weaphits/bfg.md3" );
;962:		weaponInfo->missileSound = trap_S_RegisterSound( "sound/weapons/rocket/rockfly.wav", qfalse );
ADDRGP4 $512
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 300
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 300
INDIRI4
ASGNI4
line 968
;963:		
;964:
;965:
;966:		
;967:
;968:		break;
ADDRGP4 $482
JUMPV
LABELV $481
line 971
;969:
;970:	 default:
;971:		MAKERGB( weaponInfo->flashDlightColor, 1, 1, 1 );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 1065353216
ASGNF4
line 972
;972:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/rocket/rocklf1a.wav", qfalse );
ADDRGP4 $513
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 304
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 304
INDIRI4
ASGNI4
line 973
;973:		break;
LABELV $482
line 975
;974:	}
;975:}
LABELV $447
endproc CG_RegisterWeapon 308 12
export CG_RegisterItemVisuals
proc CG_RegisterItemVisuals 28 12
line 984
;976:
;977:/*
;978:=================
;979:CG_RegisterItemVisuals
;980:
;981:The server says this item is used on this level
;982:=================
;983:*/
;984:void CG_RegisterItemVisuals( int itemNum ) {
line 988
;985:	itemInfo_t		*itemInfo;
;986:	gitem_t			*item;
;987:
;988:	if ( itemNum < 0 || itemNum >= bg_numItems ) {
ADDRLP4 8
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
LTI4 $553
ADDRLP4 8
INDIRI4
ADDRGP4 bg_numItems
INDIRI4
LTI4 $551
LABELV $553
line 989
;989:		CG_Error( "CG_RegisterItemVisuals: itemNum %d out of range [0-%d]", itemNum, bg_numItems-1 );
ADDRGP4 $554
ARGP4
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 bg_numItems
INDIRI4
CNSTI4 1
SUBI4
ARGI4
ADDRGP4 CG_Error
CALLV
pop
line 990
;990:	}
LABELV $551
line 992
;991:
;992:	itemInfo = &cg_items[ itemNum ];
ADDRLP4 4
CNSTI4 24
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 cg_items
ADDP4
ASGNP4
line 993
;993:	if ( itemInfo->registered ) {
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 0
EQI4 $555
line 994
;994:		return;
ADDRGP4 $550
JUMPV
LABELV $555
line 997
;995:	}
;996:
;997:	item = &bg_itemlist[ itemNum ];
ADDRLP4 0
CNSTI4 52
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 bg_itemlist
ADDP4
ASGNP4
line 999
;998:
;999:	memset( itemInfo, 0, sizeof( &itemInfo ) );
ADDRLP4 4
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 4
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1000
;1000:	itemInfo->registered = qtrue;
ADDRLP4 4
INDIRP4
CNSTI4 1
ASGNI4
line 1002
;1001:
;1002:	itemInfo->models[0] = trap_R_RegisterModel( item->world_model[0] );
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 12
INDIRI4
ASGNI4
line 1004
;1003:
;1004:	itemInfo->icon = trap_R_RegisterShader( item->icon );
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRP4
ARGP4
ADDRLP4 16
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 4
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 16
INDIRI4
ASGNI4
line 1006
;1005:
;1006:	if ( item->giType == IT_WEAPON ) {
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 1
NEI4 $557
line 1007
;1007:		CG_RegisterWeapon( item->giTag );
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_RegisterWeapon
CALLV
pop
line 1008
;1008:	}
LABELV $557
line 1013
;1009:
;1010:	//
;1011:	// powerups have an accompanying ring or sphere
;1012:	//
;1013:	if ( item->giType == IT_POWERUP || item->giType == IT_HEALTH || 
ADDRLP4 20
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 5
EQI4 $563
ADDRLP4 20
INDIRI4
CNSTI4 4
EQI4 $563
ADDRLP4 20
INDIRI4
CNSTI4 3
EQI4 $563
ADDRLP4 20
INDIRI4
CNSTI4 6
NEI4 $559
LABELV $563
line 1014
;1014:		item->giType == IT_ARMOR || item->giType == IT_HOLDABLE ) {
line 1015
;1015:		if ( item->world_model[1] ) {
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $564
line 1016
;1016:			itemInfo->models[1] = trap_R_RegisterModel( item->world_model[1] );
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRP4
ARGP4
ADDRLP4 24
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 24
INDIRI4
ASGNI4
line 1017
;1017:		}
LABELV $564
line 1018
;1018:	}
LABELV $559
line 1019
;1019:}
LABELV $550
endproc CG_RegisterItemVisuals 28 12
proc CG_MapTorsoToWeaponFrame 24 0
line 1036
;1020:
;1021:
;1022:/*
;1023:========================================================================================
;1024:
;1025:VIEW WEAPON
;1026:
;1027:========================================================================================
;1028:*/
;1029:
;1030:/*
;1031:=================
;1032:CG_MapTorsoToWeaponFrame
;1033:
;1034:=================
;1035:*/
;1036:static int CG_MapTorsoToWeaponFrame( clientInfo_t *ci, int frame ) {
line 1039
;1037:
;1038:	// change weapon
;1039:	if ( frame >= ci->animations[TORSO_DROP].firstFrame 
ADDRLP4 0
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 800
ADDP4
INDIRI4
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
LTI4 $567
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
CNSTI4 9
ADDI4
GEI4 $567
line 1040
;1040:		&& frame < ci->animations[TORSO_DROP].firstFrame + 9 ) {
line 1041
;1041:		return frame - ci->animations[TORSO_DROP].firstFrame + 6;
ADDRFP4 4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 800
ADDP4
INDIRI4
SUBI4
CNSTI4 6
ADDI4
RETI4
ADDRGP4 $566
JUMPV
LABELV $567
line 1045
;1042:	}
;1043:
;1044:	// stand attack
;1045:	if ( frame >= ci->animations[TORSO_ATTACK].firstFrame 
ADDRLP4 8
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 744
ADDP4
INDIRI4
ASGNI4
ADDRLP4 8
INDIRI4
ADDRLP4 12
INDIRI4
LTI4 $569
ADDRLP4 8
INDIRI4
ADDRLP4 12
INDIRI4
CNSTI4 6
ADDI4
GEI4 $569
line 1046
;1046:		&& frame < ci->animations[TORSO_ATTACK].firstFrame + 6 ) {
line 1047
;1047:		return 1 + frame - ci->animations[TORSO_ATTACK].firstFrame;
ADDRFP4 4
INDIRI4
CNSTI4 1
ADDI4
ADDRFP4 0
INDIRP4
CNSTI4 744
ADDP4
INDIRI4
SUBI4
RETI4
ADDRGP4 $566
JUMPV
LABELV $569
line 1051
;1048:	}
;1049:
;1050:	// stand attack 2
;1051:	if ( frame >= ci->animations[TORSO_ATTACK2].firstFrame 
ADDRLP4 16
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 20
ADDRFP4 0
INDIRP4
CNSTI4 772
ADDP4
INDIRI4
ASGNI4
ADDRLP4 16
INDIRI4
ADDRLP4 20
INDIRI4
LTI4 $571
ADDRLP4 16
INDIRI4
ADDRLP4 20
INDIRI4
CNSTI4 6
ADDI4
GEI4 $571
line 1052
;1052:		&& frame < ci->animations[TORSO_ATTACK2].firstFrame + 6 ) {
line 1053
;1053:		return 1 + frame - ci->animations[TORSO_ATTACK2].firstFrame;
ADDRFP4 4
INDIRI4
CNSTI4 1
ADDI4
ADDRFP4 0
INDIRP4
CNSTI4 772
ADDP4
INDIRI4
SUBI4
RETI4
ADDRGP4 $566
JUMPV
LABELV $571
line 1056
;1054:	}
;1055:	
;1056:	return 0;
CNSTI4 0
RETI4
LABELV $566
endproc CG_MapTorsoToWeaponFrame 24 0
proc CG_CalculateWeaponPosition 40 4
line 1065
;1057:}
;1058:
;1059:
;1060:/*
;1061:==============
;1062:CG_CalculateWeaponPosition
;1063:==============
;1064:*/
;1065:static void CG_CalculateWeaponPosition( vec3_t origin, vec3_t angles ) {
line 1070
;1066:	float	scale;
;1067:	int		delta;
;1068:	float	fracsin;
;1069:
;1070:	VectorCopy( cg.refdef.vieworg, origin );
ADDRFP4 0
INDIRP4
ADDRGP4 cg+111104+24
INDIRB
ASGNB 12
line 1071
;1071:	VectorCopy( cg.refdefViewAngles, angles );
ADDRFP4 4
INDIRP4
ADDRGP4 cg+111472
INDIRB
ASGNB 12
line 1074
;1072:
;1073:	// on odd legs, invert some angles
;1074:	if ( cg.bobcycle & 1 ) {
ADDRGP4 cg+126840
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $577
line 1075
;1075:		scale = -cg.xyspeed;
ADDRLP4 0
ADDRGP4 cg+126844
INDIRF4
NEGF4
ASGNF4
line 1076
;1076:	} else {
ADDRGP4 $578
JUMPV
LABELV $577
line 1077
;1077:		scale = cg.xyspeed;
ADDRLP4 0
ADDRGP4 cg+126844
INDIRF4
ASGNF4
line 1078
;1078:	}
LABELV $578
line 1081
;1079:
;1080:	// gun angles from bobbing
;1081:	angles[ROLL] += scale * cg.bobfracsin * 0.005;
ADDRLP4 12
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRF4
CNSTF4 1000593162
ADDRLP4 0
INDIRF4
ADDRGP4 cg+126836
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 1082
;1082:	angles[YAW] += scale * cg.bobfracsin * 0.01;
ADDRLP4 16
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRF4
CNSTF4 1008981770
ADDRLP4 0
INDIRF4
ADDRGP4 cg+126836
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 1083
;1083:	angles[PITCH] += cg.xyspeed * cg.bobfracsin * 0.005;
ADDRLP4 20
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRF4
CNSTF4 1000593162
ADDRGP4 cg+126844
INDIRF4
ADDRGP4 cg+126836
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 1086
;1084:
;1085:	// drop the weapon when landing
;1086:	delta = cg.time - cg.landTime;
ADDRLP4 8
ADDRGP4 cg+109652
INDIRI4
ADDRGP4 cg+111000
INDIRI4
SUBI4
ASGNI4
line 1087
;1087:	if ( delta < LAND_DEFLECT_TIME ) {
ADDRLP4 8
INDIRI4
CNSTI4 150
GEI4 $588
line 1088
;1088:		origin[2] += cg.landChange*0.25 * delta / LAND_DEFLECT_TIME;
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
CNSTF4 1048576000
ADDRGP4 cg+110996
INDIRF4
MULF4
ADDRLP4 8
INDIRI4
CVIF4 4
MULF4
CNSTF4 1125515264
DIVF4
ADDF4
ASGNF4
line 1089
;1089:	} else if ( delta < LAND_DEFLECT_TIME + LAND_RETURN_TIME ) {
ADDRGP4 $589
JUMPV
LABELV $588
ADDRLP4 8
INDIRI4
CNSTI4 450
GEI4 $591
line 1090
;1090:		origin[2] += cg.landChange*0.25 * 
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
CNSTF4 1048576000
ADDRGP4 cg+110996
INDIRF4
MULF4
CNSTI4 450
ADDRLP4 8
INDIRI4
SUBI4
CVIF4 4
MULF4
CNSTF4 1133903872
DIVF4
ADDF4
ASGNF4
line 1092
;1091:			(LAND_DEFLECT_TIME + LAND_RETURN_TIME - delta) / LAND_RETURN_TIME;
;1092:	}
LABELV $591
LABELV $589
line 1105
;1093:
;1094:#if 0
;1095:	// drop the weapon when stair climbing
;1096:	delta = cg.time - cg.stepTime;
;1097:	if ( delta < STEP_TIME/2 ) {
;1098:		origin[2] -= cg.stepChange*0.25 * delta / (STEP_TIME/2);
;1099:	} else if ( delta < STEP_TIME ) {
;1100:		origin[2] -= cg.stepChange*0.25 * (STEP_TIME - delta) / (STEP_TIME/2);
;1101:	}
;1102:#endif
;1103:
;1104:	// idle drift
;1105:	scale = cg.xyspeed + 40;
ADDRLP4 0
ADDRGP4 cg+126844
INDIRF4
CNSTF4 1109393408
ADDF4
ASGNF4
line 1106
;1106:	fracsin = sin( cg.time * 0.001 );
CNSTF4 981668463
ADDRGP4 cg+109652
INDIRI4
CVIF4 4
MULF4
ARGF4
ADDRLP4 24
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 4
ADDRLP4 24
INDIRF4
ASGNF4
line 1107
;1107:	angles[ROLL] += scale * fracsin * 0.01;
ADDRLP4 28
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
CNSTF4 1008981770
ADDRLP4 0
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 1108
;1108:	angles[YAW] += scale * fracsin * 0.01;
ADDRLP4 32
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRF4
CNSTF4 1008981770
ADDRLP4 0
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 1109
;1109:	angles[PITCH] += scale * fracsin * 0.01;
ADDRLP4 36
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRF4
CNSTF4 1008981770
ADDRLP4 0
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 1110
;1110:}
LABELV $573
endproc CG_CalculateWeaponPosition 40 4
proc CG_LightningBolt 284 28
line 1124
;1111:
;1112:
;1113:/*
;1114:===============
;1115:CG_LightningBolt
;1116:
;1117:Origin will be the exact tag point, which is slightly
;1118:different than the muzzle point used for determining hits.
;1119:The cent should be the non-predicted cent if it is from the player,
;1120:so the endpoint will reflect the simulated strike (lagging the predicted
;1121:angle)
;1122:===============
;1123:*/
;1124:static void CG_LightningBolt( centity_t *cent, vec3_t origin ) {
line 1130
;1125:	trace_t  trace;
;1126:	refEntity_t  beam;
;1127:	vec3_t   forward;
;1128:	vec3_t   muzzlePoint, endPoint;
;1129:
;1130:	if (cent->currentState.weapon != WP_LIGHTNING) {
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 6
EQI4 $597
line 1131
;1131:		return;
ADDRGP4 $596
JUMPV
LABELV $597
line 1134
;1132:	}
;1133:
;1134:	memset( &beam, 0, sizeof( beam ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1138
;1135:
;1136://unlagged - attack prediction #1
;1137:	// if the entity is us, unlagged is on server-side, and we've got it on for the lightning gun
;1138:	if ( (cent->currentState.number == cg.predictedPlayerState.clientNum) && cgs.delagHitscan &&
ADDRFP4 0
INDIRP4
INDIRI4
ADDRGP4 cg+109684+140
INDIRI4
NEI4 $599
ADDRLP4 232
CNSTI4 0
ASGNI4
ADDRGP4 cgs+154992
INDIRI4
ADDRLP4 232
INDIRI4
EQI4 $599
ADDRGP4 cg_delag+12
INDIRI4
CNSTI4 1
BANDI4
ADDRLP4 232
INDIRI4
NEI4 $606
ADDRGP4 cg_delag+12
INDIRI4
CNSTI4 8
BANDI4
ADDRLP4 232
INDIRI4
EQI4 $599
LABELV $606
line 1139
;1139:			( cg_delag.integer & 1 || cg_delag.integer & 8 ) ) {
line 1141
;1140:		// always shoot straight forward from our current position
;1141:		AngleVectors( cg.predictedPlayerState.viewangles, forward, NULL, NULL );
ADDRGP4 cg+109684+152
ARGP4
ADDRLP4 152
ARGP4
ADDRLP4 236
CNSTP4 0
ASGNP4
ADDRLP4 236
INDIRP4
ARGP4
ADDRLP4 236
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1142
;1142:		VectorCopy( cg.predictedPlayerState.origin, muzzlePoint );
ADDRLP4 140
ADDRGP4 cg+109684+20
INDIRB
ASGNB 12
line 1143
;1143:	}
ADDRGP4 $600
JUMPV
LABELV $599
line 1147
;1144:	else
;1145://unlagged - attack prediction #1
;1146:	// CPMA  "true" lightning
;1147:	if ((cent->currentState.number == cg.predictedPlayerState.clientNum) && (cg_trueLightning.value != 0)) {
ADDRFP4 0
INDIRP4
INDIRI4
ADDRGP4 cg+109684+140
INDIRI4
NEI4 $611
ADDRGP4 cg_trueLightning+8
INDIRF4
CNSTF4 0
EQF4 $611
line 1154
;1148:		vec3_t angle;
;1149:		int i;
;1150:
;1151://unlagged - true lightning
;1152:		// might as well fix up true lightning while we're at it
;1153:		vec3_t viewangles;
;1154:		VectorCopy( cg.predictedPlayerState.viewangles, viewangles );
ADDRLP4 252
ADDRGP4 cg+109684+152
INDIRB
ASGNB 12
line 1157
;1155://unlagged - true lightning
;1156:
;1157:		for (i = 0; i < 3; i++) {
ADDRLP4 236
CNSTI4 0
ASGNI4
LABELV $618
line 1158
;1158:			float a = cent->lerpAngles[i] - viewangles[i]; //unlagged: was cg.refdefViewAngles[i];
ADDRLP4 268
ADDRLP4 236
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 264
ADDRLP4 268
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 728
ADDP4
ADDP4
INDIRF4
ADDRLP4 268
INDIRI4
ADDRLP4 252
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1159
;1159:			if (a > 180) {
ADDRLP4 264
INDIRF4
CNSTF4 1127481344
LEF4 $622
line 1160
;1160:				a -= 360;
ADDRLP4 264
ADDRLP4 264
INDIRF4
CNSTF4 1135869952
SUBF4
ASGNF4
line 1161
;1161:			}
LABELV $622
line 1162
;1162:			if (a < -180) {
ADDRLP4 264
INDIRF4
CNSTF4 3274964992
GEF4 $624
line 1163
;1163:				a += 360;
ADDRLP4 264
ADDRLP4 264
INDIRF4
CNSTF4 1135869952
ADDF4
ASGNF4
line 1164
;1164:			}
LABELV $624
line 1166
;1165:
;1166:			angle[i] = viewangles[i] /*unlagged: was cg.refdefViewAngles[i]*/ + a * (1.0 - cg_trueLightning.value);
ADDRLP4 272
ADDRLP4 236
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 272
INDIRI4
ADDRLP4 240
ADDP4
ADDRLP4 272
INDIRI4
ADDRLP4 252
ADDP4
INDIRF4
ADDRLP4 264
INDIRF4
CNSTF4 1065353216
ADDRGP4 cg_trueLightning+8
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 1167
;1167:			if (angle[i] < 0) {
ADDRLP4 236
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 240
ADDP4
INDIRF4
CNSTF4 0
GEF4 $627
line 1168
;1168:				angle[i] += 360;
ADDRLP4 276
ADDRLP4 236
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 240
ADDP4
ASGNP4
ADDRLP4 276
INDIRP4
ADDRLP4 276
INDIRP4
INDIRF4
CNSTF4 1135869952
ADDF4
ASGNF4
line 1169
;1169:			}
LABELV $627
line 1170
;1170:			if (angle[i] > 360) {
ADDRLP4 236
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 240
ADDP4
INDIRF4
CNSTF4 1135869952
LEF4 $629
line 1171
;1171:				angle[i] -= 360;
ADDRLP4 276
ADDRLP4 236
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 240
ADDP4
ASGNP4
ADDRLP4 276
INDIRP4
ADDRLP4 276
INDIRP4
INDIRF4
CNSTF4 1135869952
SUBF4
ASGNF4
line 1172
;1172:			}
LABELV $629
line 1173
;1173:		}
LABELV $619
line 1157
ADDRLP4 236
ADDRLP4 236
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 236
INDIRI4
CNSTI4 3
LTI4 $618
line 1175
;1174:
;1175:		AngleVectors(angle, forward, NULL, NULL );
ADDRLP4 240
ARGP4
ADDRLP4 152
ARGP4
ADDRLP4 264
CNSTP4 0
ASGNP4
ADDRLP4 264
INDIRP4
ARGP4
ADDRLP4 264
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1180
;1176://unlagged - true lightning
;1177://		VectorCopy(cent->lerpOrigin, muzzlePoint );
;1178://		VectorCopy(cg.refdef.vieworg, muzzlePoint );
;1179:		// *this* is the correct origin for true lightning
;1180:		VectorCopy(cg.predictedPlayerState.origin, muzzlePoint );
ADDRLP4 140
ADDRGP4 cg+109684+20
INDIRB
ASGNB 12
line 1182
;1181://unlagged - true lightning
;1182:	} else {
ADDRGP4 $612
JUMPV
LABELV $611
line 1184
;1183:		// !CPMA
;1184:		AngleVectors( cent->lerpAngles, forward, NULL, NULL );
ADDRFP4 0
INDIRP4
CNSTI4 728
ADDP4
ARGP4
ADDRLP4 152
ARGP4
ADDRLP4 236
CNSTP4 0
ASGNP4
ADDRLP4 236
INDIRP4
ARGP4
ADDRLP4 236
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1185
;1185:		VectorCopy(cent->lerpOrigin, muzzlePoint );
ADDRLP4 140
ADDRFP4 0
INDIRP4
CNSTI4 716
ADDP4
INDIRB
ASGNB 12
line 1186
;1186:	}
LABELV $612
LABELV $600
line 1189
;1187:
;1188:	// FIXME: crouch
;1189:	muzzlePoint[2] += DEFAULT_VIEWHEIGHT;
ADDRLP4 140+8
ADDRLP4 140+8
INDIRF4
CNSTF4 1104150528
ADDF4
ASGNF4
line 1191
;1190:
;1191:	VectorMA( muzzlePoint, 14, forward, muzzlePoint );
ADDRLP4 236
CNSTF4 1096810496
ASGNF4
ADDRLP4 140
ADDRLP4 140
INDIRF4
ADDRLP4 236
INDIRF4
ADDRLP4 152
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 140+4
ADDRLP4 140+4
INDIRF4
ADDRLP4 236
INDIRF4
ADDRLP4 152+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 140+8
ADDRLP4 140+8
INDIRF4
CNSTF4 1096810496
ADDRLP4 152+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1194
;1192:
;1193:	// project forward by the lightning range
;1194:	VectorMA( muzzlePoint, LIGHTNING_RANGE, forward, endPoint );
ADDRLP4 240
CNSTF4 1145044992
ASGNF4
ADDRLP4 220
ADDRLP4 140
INDIRF4
ADDRLP4 240
INDIRF4
ADDRLP4 152
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 220+4
ADDRLP4 140+4
INDIRF4
ADDRLP4 240
INDIRF4
ADDRLP4 152+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 220+8
ADDRLP4 140+8
INDIRF4
CNSTF4 1145044992
ADDRLP4 152+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1197
;1195:
;1196:	// see if it hit a wall
;1197:	CG_Trace( &trace, muzzlePoint, vec3_origin, vec3_origin, endPoint, 
ADDRLP4 164
ARGP4
ADDRLP4 140
ARGP4
ADDRLP4 244
ADDRGP4 vec3_origin
ASGNP4
ADDRLP4 244
INDIRP4
ARGP4
ADDRLP4 244
INDIRP4
ARGP4
ADDRLP4 220
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 100664321
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 1201
;1198:		cent->currentState.number, MASK_SHOT );
;1199:
;1200:	// this is the endpoint
;1201:	VectorCopy( trace.endpos, beam.oldorigin );
ADDRLP4 0+84
ADDRLP4 164+12
INDIRB
ASGNB 12
line 1205
;1202:
;1203:	// use the provided origin, even though it may be slightly
;1204:	// different than the muzzle origin
;1205:	VectorCopy( origin, beam.origin );
ADDRLP4 0+68
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1207
;1206:
;1207:	beam.reType = RT_LIGHTNING;
ADDRLP4 0
CNSTI4 6
ASGNI4
line 1208
;1208:	beam.customShader = cgs.media.lightningShader;
ADDRLP4 0+112
ADDRGP4 cgs+153876+208
INDIRI4
ASGNI4
line 1209
;1209:	trap_R_AddRefEntityToScene( &beam );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1212
;1210:
;1211:	// add the impact flare if it hit something
;1212:	if ( trace.fraction < 1.0 ) {
ADDRLP4 164+8
INDIRF4
CNSTF4 1065353216
GEF4 $652
line 1216
;1213:		vec3_t	angles;
;1214:		vec3_t	dir;
;1215:
;1216:		VectorSubtract( beam.oldorigin, beam.origin, dir );
ADDRLP4 248
ADDRLP4 0+84
INDIRF4
ADDRLP4 0+68
INDIRF4
SUBF4
ASGNF4
ADDRLP4 248+4
ADDRLP4 0+84+4
INDIRF4
ADDRLP4 0+68+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 248+8
ADDRLP4 0+84+8
INDIRF4
ADDRLP4 0+68+8
INDIRF4
SUBF4
ASGNF4
line 1217
;1217:		VectorNormalize( dir );
ADDRLP4 248
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 1219
;1218:
;1219:		memset( &beam, 0, sizeof( beam ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1220
;1220:		beam.hModel = cgs.media.lightningExplosionModel;
ADDRLP4 0+8
ADDRGP4 cgs+153876+472
INDIRI4
ASGNI4
line 1222
;1221:
;1222:		VectorMA( trace.endpos, -16, dir, beam.origin );
ADDRLP4 0+68
ADDRLP4 164+12
INDIRF4
CNSTF4 3246391296
ADDRLP4 248
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 164+12+4
INDIRF4
CNSTF4 3246391296
ADDRLP4 248+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 164+12+8
INDIRF4
CNSTF4 3246391296
ADDRLP4 248+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1225
;1223:
;1224:		// make a random orientation
;1225:		angles[0] = rand() % 360;
ADDRLP4 272
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 260
ADDRLP4 272
INDIRI4
CNSTI4 360
MODI4
CVIF4 4
ASGNF4
line 1226
;1226:		angles[1] = rand() % 360;
ADDRLP4 276
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 260+4
ADDRLP4 276
INDIRI4
CNSTI4 360
MODI4
CVIF4 4
ASGNF4
line 1227
;1227:		angles[2] = rand() % 360;
ADDRLP4 280
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 260+8
ADDRLP4 280
INDIRI4
CNSTI4 360
MODI4
CVIF4 4
ASGNF4
line 1228
;1228:		AnglesToAxis( angles, beam.axis );
ADDRLP4 260
ARGP4
ADDRLP4 0+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1229
;1229:		trap_R_AddRefEntityToScene( &beam );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1230
;1230:	}
LABELV $652
line 1231
;1231:}
LABELV $596
endproc CG_LightningBolt 284 28
proc CG_SpawnRailTrail 4 12
line 1304
;1232:/*
;1233:
;1234:static void CG_LightningBolt( centity_t *cent, vec3_t origin ) {
;1235:	trace_t		trace;
;1236:	refEntity_t		beam;
;1237:	vec3_t			forward;
;1238:	vec3_t			muzzlePoint, endPoint;
;1239:
;1240:	if ( cent->currentState.weapon != WP_LIGHTNING ) {
;1241:		return;
;1242:	}
;1243:
;1244:	memset( &beam, 0, sizeof( beam ) );
;1245:
;1246:	// find muzzle point for this frame
;1247:	VectorCopy( cent->lerpOrigin, muzzlePoint );
;1248:	AngleVectors( cent->lerpAngles, forward, NULL, NULL );
;1249:
;1250:	// FIXME: crouch
;1251:	muzzlePoint[2] += DEFAULT_VIEWHEIGHT;
;1252:
;1253:	VectorMA( muzzlePoint, 14, forward, muzzlePoint );
;1254:
;1255:	// project forward by the lightning range
;1256:	VectorMA( muzzlePoint, LIGHTNING_RANGE, forward, endPoint );
;1257:
;1258:	// see if it hit a wall
;1259:	CG_Trace( &trace, muzzlePoint, vec3_origin, vec3_origin, endPoint, 
;1260:		cent->currentState.number, MASK_SHOT );
;1261:
;1262:	// this is the endpoint
;1263:	VectorCopy( trace.endpos, beam.oldorigin );
;1264:
;1265:	// use the provided origin, even though it may be slightly
;1266:	// different than the muzzle origin
;1267:	VectorCopy( origin, beam.origin );
;1268:
;1269:	beam.reType = RT_LIGHTNING;
;1270:	beam.customShader = cgs.media.lightningShader;
;1271:	trap_R_AddRefEntityToScene( &beam );
;1272:
;1273:	// add the impact flare if it hit something
;1274:	if ( trace.fraction < 1.0 ) {
;1275:		vec3_t	angles;
;1276:		vec3_t	dir;
;1277:
;1278:		VectorSubtract( beam.oldorigin, beam.origin, dir );
;1279:		VectorNormalize( dir );
;1280:
;1281:		memset( &beam, 0, sizeof( beam ) );
;1282:		beam.hModel = cgs.media.lightningExplosionModel;
;1283:
;1284:		VectorMA( trace.endpos, -16, dir, beam.origin );
;1285:
;1286:		// make a random orientation
;1287:		angles[0] = rand() % 360;
;1288:		angles[1] = rand() % 360;
;1289:		angles[2] = rand() % 360;
;1290:		AnglesToAxis( angles, beam.axis );
;1291:		trap_R_AddRefEntityToScene( &beam );
;1292:	}
;1293:}
;1294:*/
;1295:
;1296:/*
;1297:===============
;1298:CG_SpawnRailTrail
;1299:
;1300:Origin will be the exact tag point, which is slightly
;1301:different than the muzzle point used for determining hits.
;1302:===============
;1303:*/
;1304:static void CG_SpawnRailTrail( centity_t *cent, vec3_t origin ) {
line 1307
;1305:	clientInfo_t	*ci;
;1306:
;1307:	if ( cent->currentState.weapon != WP_RAILGUN ) {
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 7
EQI4 $686
line 1308
;1308:		return;
ADDRGP4 $685
JUMPV
LABELV $686
line 1310
;1309:	}
;1310:	if ( !cent->pe.railgunFlash ) {
ADDRFP4 0
INDIRP4
CNSTI4 628
ADDP4
INDIRI4
CNSTI4 0
NEI4 $688
line 1311
;1311:		return;
ADDRGP4 $685
JUMPV
LABELV $688
line 1313
;1312:	}
;1313:	cent->pe.railgunFlash = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 628
ADDP4
CNSTI4 1
ASGNI4
line 1314
;1314:	ci = &cgs.clientinfo[ cent->currentState.clientNum ];
ADDRLP4 0
CNSTI4 1732
ADDRFP4 0
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+40972
ADDP4
ASGNP4
line 1315
;1315:	CG_RailTrail( ci, origin, cent->pe.railgunImpact );
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 616
ADDP4
ARGP4
ADDRGP4 CG_RailTrail
CALLV
pop
line 1316
;1316:}
LABELV $685
endproc CG_SpawnRailTrail 4 12
proc CG_MachinegunSpinAngle 32 4
line 1326
;1317:
;1318:
;1319:/*
;1320:======================
;1321:CG_MachinegunSpinAngle
;1322:======================
;1323:*/
;1324:#define		SPIN_SPEED	0.9
;1325:#define		COAST_TIME	1000
;1326:static float	CG_MachinegunSpinAngle( centity_t *cent ) {
line 1331
;1327:	int		delta;
;1328:	float	angle;
;1329:	float	speed;
;1330:
;1331:	delta = cg.time - cent->pe.barrelTime;
ADDRLP4 0
ADDRGP4 cg+109652
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 636
ADDP4
INDIRI4
SUBI4
ASGNI4
line 1332
;1332:	if ( cent->pe.barrelSpinning ) {
ADDRFP4 0
INDIRP4
CNSTI4 640
ADDP4
INDIRI4
CNSTI4 0
EQI4 $693
line 1333
;1333:		angle = cent->pe.barrelAngle + delta * SPIN_SPEED;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 632
ADDP4
INDIRF4
CNSTF4 1063675494
ADDRLP4 0
INDIRI4
CVIF4 4
MULF4
ADDF4
ASGNF4
line 1334
;1334:	} else {
ADDRGP4 $694
JUMPV
LABELV $693
line 1335
;1335:		if ( delta > COAST_TIME ) {
ADDRLP4 0
INDIRI4
CNSTI4 1000
LEI4 $695
line 1336
;1336:			delta = COAST_TIME;
ADDRLP4 0
CNSTI4 1000
ASGNI4
line 1337
;1337:		}
LABELV $695
line 1339
;1338:
;1339:		speed = 0.5 * ( SPIN_SPEED + (float)( COAST_TIME - delta ) / COAST_TIME );
ADDRLP4 8
CNSTF4 1056964608
CNSTI4 1000
ADDRLP4 0
INDIRI4
SUBI4
CVIF4 4
CNSTF4 1148846080
DIVF4
CNSTF4 1063675494
ADDF4
MULF4
ASGNF4
line 1340
;1340:		angle = cent->pe.barrelAngle + delta * speed;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 632
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CVIF4 4
ADDRLP4 8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1341
;1341:	}
LABELV $694
line 1343
;1342:
;1343:	if ( cent->pe.barrelSpinning == !(cent->currentState.eFlags & EF_FIRING) ) {
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
NEI4 $700
ADDRLP4 12
CNSTI4 1
ASGNI4
ADDRGP4 $701
JUMPV
LABELV $700
ADDRLP4 12
CNSTI4 0
ASGNI4
LABELV $701
ADDRLP4 16
INDIRP4
CNSTI4 640
ADDP4
INDIRI4
ADDRLP4 12
INDIRI4
NEI4 $697
line 1344
;1344:		cent->pe.barrelTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 636
ADDP4
ADDRGP4 cg+109652
INDIRI4
ASGNI4
line 1345
;1345:		cent->pe.barrelAngle = AngleMod( angle );
ADDRLP4 4
INDIRF4
ARGF4
ADDRLP4 20
ADDRGP4 AngleMod
CALLF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 632
ADDP4
ADDRLP4 20
INDIRF4
ASGNF4
line 1346
;1346:		cent->pe.barrelSpinning = !!(cent->currentState.eFlags & EF_FIRING);
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $704
ADDRLP4 24
CNSTI4 1
ASGNI4
ADDRGP4 $705
JUMPV
LABELV $704
ADDRLP4 24
CNSTI4 0
ASGNI4
LABELV $705
ADDRLP4 28
INDIRP4
CNSTI4 640
ADDP4
ADDRLP4 24
INDIRI4
ASGNI4
line 1352
;1347:#ifdef MISSIONPACK
;1348:		if ( cent->currentState.weapon == WP_CHAINGUN && !cent->pe.barrelSpinning ) {
;1349:			trap_S_StartSound( NULL, cent->currentState.number, CHAN_WEAPON, trap_S_RegisterSound( "sound/weapons/vulcan/wvulwind.wav", qfalse ) );
;1350:		}
;1351:#endif
;1352:	}
LABELV $697
line 1354
;1353:
;1354:	return angle;
ADDRLP4 4
INDIRF4
RETF4
LABELV $691
endproc CG_MachinegunSpinAngle 32 4
proc CG_AddWeaponWithPowerups 0 4
line 1363
;1355:}
;1356:
;1357:
;1358:/*
;1359:========================
;1360:CG_AddWeaponWithPowerups
;1361:========================
;1362:*/
;1363:static void CG_AddWeaponWithPowerups( refEntity_t *gun, int powerups ) {
line 1365
;1364:	// add powerup effects
;1365:	if ( powerups & ( 1 << PW_INVIS ) ) {
ADDRFP4 4
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $707
line 1366
;1366:		gun->customShader = cgs.media.invisShader;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+153876+432
INDIRI4
ASGNI4
line 1367
;1367:		trap_R_AddRefEntityToScene( gun );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1368
;1368:	} else {
ADDRGP4 $708
JUMPV
LABELV $707
line 1369
;1369:		trap_R_AddRefEntityToScene( gun );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1371
;1370:
;1371:		if ( powerups & ( 1 << PW_BATTLESUIT ) ) {
ADDRFP4 4
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $711
line 1372
;1372:			gun->customShader = cgs.media.battleWeaponShader;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+153876+444
INDIRI4
ASGNI4
line 1373
;1373:			trap_R_AddRefEntityToScene( gun );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1374
;1374:		}
LABELV $711
line 1375
;1375:		if ( powerups & ( 1 << PW_QUAD ) ) {
ADDRFP4 4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $715
line 1376
;1376:			gun->customShader = cgs.media.quadWeaponShader;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+153876+428
INDIRI4
ASGNI4
line 1377
;1377:			trap_R_AddRefEntityToScene( gun );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1378
;1378:		}
LABELV $715
line 1379
;1379:	}
LABELV $708
line 1380
;1380:}
LABELV $706
endproc CG_AddWeaponWithPowerups 0 4
export CG_AddPlayerWeapon
proc CG_AddPlayerWeapon 496 20
line 1392
;1381:
;1382:
;1383:/*
;1384:=============
;1385:CG_AddPlayerWeapon
;1386:
;1387:Used for both the view weapon (ps is valid) and the world modelother character models (ps is NULL)
;1388:The main player will have this called for BOTH cases, so effects like light and
;1389:sound should only be done on the world model case.
;1390:=============
;1391:*/
;1392:void CG_AddPlayerWeapon( refEntity_t *parent, playerState_t *ps, centity_t *cent, int team ) {
line 1402
;1393:	refEntity_t	gun;
;1394:	refEntity_t	barrel;
;1395:	refEntity_t	flash;
;1396:	vec3_t		angles;
;1397:	weapon_t	weaponNum;
;1398:	weaponInfo_t	*weapon;
;1399:	centity_t	*nonPredictedCent;
;1400://	int	col;
;1401:
;1402:	weaponNum = cent->currentState.weapon;
ADDRLP4 284
ADDRFP4 8
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
ASGNI4
line 1404
;1403:
;1404:	CG_RegisterWeapon( weaponNum );
ADDRLP4 284
INDIRI4
ARGI4
ADDRGP4 CG_RegisterWeapon
CALLV
pop
line 1405
;1405:	weapon = &cg_weapons[weaponNum];
ADDRLP4 280
CNSTI4 136
ADDRLP4 284
INDIRI4
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 1408
;1406:
;1407:	// add the weapon
;1408:	memset( &gun, 0, sizeof( gun ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1409
;1409:	VectorCopy( parent->lightingOrigin, gun.lightingOrigin );
ADDRLP4 0+12
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 1410
;1410:	gun.shadowPlane = parent->shadowPlane;
ADDRLP4 0+24
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 1411
;1411:	gun.renderfx = parent->renderfx;
ADDRLP4 0+4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 1414
;1412:
;1413:	// set custom shading for railgun refire rate
;1414:	if ( ps ) {
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $723
line 1415
;1415:		if ( cg.predictedPlayerState.weapon == WP_RAILGUN 
ADDRGP4 cg+109684+144
INDIRI4
CNSTI4 7
NEI4 $725
ADDRGP4 cg+109684+148
INDIRI4
CNSTI4 3
NEI4 $725
line 1416
;1416:			&& cg.predictedPlayerState.weaponstate == WEAPON_FIRING ) {
line 1419
;1417:			float	f;
;1418:
;1419:			f = (float)cg.predictedPlayerState.weaponTime / 1500;
ADDRLP4 444
ADDRGP4 cg+109684+44
INDIRI4
CVIF4 4
CNSTF4 1153138688
DIVF4
ASGNF4
line 1420
;1420:			gun.shaderRGBA[1] = 0;
ADDRLP4 0+116+1
CNSTU1 0
ASGNU1
line 1421
;1421:			gun.shaderRGBA[0] = 
ADDRLP4 452
CNSTF4 1132396544
CNSTF4 1065353216
ADDRLP4 444
INDIRF4
SUBF4
MULF4
ASGNF4
ADDRLP4 456
CNSTF4 1325400064
ASGNF4
ADDRLP4 452
INDIRF4
ADDRLP4 456
INDIRF4
LTF4 $739
ADDRLP4 448
ADDRLP4 452
INDIRF4
ADDRLP4 456
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $740
JUMPV
LABELV $739
ADDRLP4 448
ADDRLP4 452
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $740
ADDRLP4 460
ADDRLP4 448
INDIRU4
CVUU1 4
ASGNU1
ADDRLP4 0+116+2
ADDRLP4 460
INDIRU1
ASGNU1
ADDRLP4 0+116
ADDRLP4 460
INDIRU1
ASGNU1
line 1423
;1422:			gun.shaderRGBA[2] = 255 * ( 1.0 - f );
;1423:		} else {
ADDRGP4 $726
JUMPV
LABELV $725
line 1424
;1424:			gun.shaderRGBA[0] = 255;
ADDRLP4 0+116
CNSTU1 255
ASGNU1
line 1425
;1425:			gun.shaderRGBA[1] = 255;
ADDRLP4 0+116+1
CNSTU1 255
ASGNU1
line 1426
;1426:			gun.shaderRGBA[2] = 255;
ADDRLP4 0+116+2
CNSTU1 255
ASGNU1
line 1427
;1427:			gun.shaderRGBA[3] = 255;
ADDRLP4 0+116+3
CNSTU1 255
ASGNU1
line 1428
;1428:		}
LABELV $726
line 1429
;1429:	}
LABELV $723
line 1431
;1430:
;1431:	gun.hModel = weapon->weaponModel;
ADDRLP4 0+8
ADDRLP4 280
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ASGNI4
line 1432
;1432:	if (!gun.hModel) {
ADDRLP4 0+8
INDIRI4
CNSTI4 0
NEI4 $749
line 1433
;1433:		return;
ADDRGP4 $719
JUMPV
LABELV $749
line 1436
;1434:	}
;1435:
;1436:	if ( !ps ) {
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $752
line 1438
;1437:		// add weapon ready sound
;1438:		cent->pe.lightningFiring = qfalse;
ADDRFP4 8
INDIRP4
CNSTI4 612
ADDP4
CNSTI4 0
ASGNI4
line 1439
;1439:		if ( ( cent->currentState.eFlags & EF_FIRING ) && weapon->firingSound ) {
ADDRLP4 444
CNSTI4 0
ASGNI4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 256
BANDI4
ADDRLP4 444
INDIRI4
EQI4 $754
ADDRLP4 280
INDIRP4
CNSTI4 128
ADDP4
INDIRI4
ADDRLP4 444
INDIRI4
EQI4 $754
line 1441
;1440:			// lightning gun and guantlet make a different sound when fire is held down
;1441:			trap_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, vec3_origin, weapon->firingSound );
ADDRLP4 448
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 448
INDIRP4
INDIRI4
ARGI4
ADDRLP4 448
INDIRP4
CNSTI4 716
ADDP4
ARGP4
ADDRGP4 vec3_origin
ARGP4
ADDRLP4 280
INDIRP4
CNSTI4 128
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_S_AddLoopingSound
CALLV
pop
line 1442
;1442:			cent->pe.lightningFiring = qtrue;
ADDRFP4 8
INDIRP4
CNSTI4 612
ADDP4
CNSTI4 1
ASGNI4
line 1443
;1443:		} else if ( weapon->readySound ) {
ADDRGP4 $755
JUMPV
LABELV $754
ADDRLP4 280
INDIRP4
CNSTI4 124
ADDP4
INDIRI4
CNSTI4 0
EQI4 $756
line 1444
;1444:			trap_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, vec3_origin, weapon->readySound );
ADDRLP4 448
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 448
INDIRP4
INDIRI4
ARGI4
ADDRLP4 448
INDIRP4
CNSTI4 716
ADDP4
ARGP4
ADDRGP4 vec3_origin
ARGP4
ADDRLP4 280
INDIRP4
CNSTI4 124
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_S_AddLoopingSound
CALLV
pop
line 1445
;1445:		}
LABELV $756
LABELV $755
line 1446
;1446:	}
LABELV $752
line 1448
;1447:
;1448:	CG_PositionEntityOnTag( &gun, parent, parent->hModel, "tag_weapon");
ADDRLP4 0
ARGP4
ADDRLP4 444
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 444
INDIRP4
ARGP4
ADDRLP4 444
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ARGI4
ADDRGP4 $758
ARGP4
ADDRGP4 CG_PositionEntityOnTag
CALLV
pop
line 1450
;1449:
;1450:	CG_AddWeaponWithPowerups( &gun, cent->currentState.powerups );
ADDRLP4 0
ARGP4
ADDRFP4 8
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_AddWeaponWithPowerups
CALLV
pop
line 1453
;1451:
;1452:	// add the spinning barrel
;1453:	if ( weapon->barrelModel ) {
ADDRLP4 280
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 0
EQI4 $759
line 1454
;1454:		memset( &barrel, 0, sizeof( barrel ) );
ADDRLP4 300
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1455
;1455:		VectorCopy( parent->lightingOrigin, barrel.lightingOrigin );
ADDRLP4 300+12
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 1456
;1456:		barrel.shadowPlane = parent->shadowPlane;
ADDRLP4 300+24
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 1457
;1457:		barrel.renderfx = parent->renderfx;
ADDRLP4 300+4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 1459
;1458:
;1459:		barrel.hModel = weapon->barrelModel;
ADDRLP4 300+8
ADDRLP4 280
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ASGNI4
line 1460
;1460:		angles[YAW] = 0;
ADDRLP4 288+4
CNSTF4 0
ASGNF4
line 1461
;1461:		angles[PITCH] = 0;
ADDRLP4 288
CNSTF4 0
ASGNF4
line 1462
;1462:		angles[ROLL] = CG_MachinegunSpinAngle( cent );
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 448
ADDRGP4 CG_MachinegunSpinAngle
CALLF4
ASGNF4
ADDRLP4 288+8
ADDRLP4 448
INDIRF4
ASGNF4
line 1463
;1463:		AnglesToAxis( angles, barrel.axis );
ADDRLP4 288
ARGP4
ADDRLP4 300+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1465
;1464:
;1465:		CG_PositionRotatedEntityOnTag( &barrel, &gun, weapon->weaponModel, "tag_barrel" );
ADDRLP4 300
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 280
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ARGI4
ADDRGP4 $768
ARGP4
ADDRGP4 CG_PositionRotatedEntityOnTag
CALLV
pop
line 1467
;1466:
;1467:		CG_AddWeaponWithPowerups( &barrel, cent->currentState.powerups );
ADDRLP4 300
ARGP4
ADDRFP4 8
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_AddWeaponWithPowerups
CALLV
pop
line 1468
;1468:	}
LABELV $759
line 1471
;1469:
;1470:	// make sure we aren't looking at cg.predictedPlayerEntity for LG
;1471:	nonPredictedCent = &cg_entities[cent->currentState.clientNum];
ADDRLP4 440
CNSTI4 740
ADDRFP4 8
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 1476
;1472:
;1473:	// if the index of the nonPredictedCent is not the same as the clientNum
;1474:	// then this is a fake player (like on teh single player podiums), so
;1475:	// go ahead and use the cent
;1476:	if( ( nonPredictedCent - cg_entities ) != cent->currentState.clientNum ) {
ADDRLP4 440
INDIRP4
CVPU4 4
ADDRGP4 cg_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 740
DIVI4
ADDRFP4 8
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
EQI4 $769
line 1477
;1477:		nonPredictedCent = cent;
ADDRLP4 440
ADDRFP4 8
INDIRP4
ASGNP4
line 1478
;1478:	}
LABELV $769
line 1481
;1479:
;1480:	// add the flash
;1481:	if ( ( weaponNum == WP_LIGHTNING || weaponNum == WP_GAUNTLET || weaponNum == WP_GRAPPLING_HOOK )
ADDRLP4 284
INDIRI4
CNSTI4 6
EQI4 $774
ADDRLP4 284
INDIRI4
CNSTI4 1
EQI4 $774
ADDRLP4 284
INDIRI4
CNSTI4 10
NEI4 $771
LABELV $774
ADDRLP4 440
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $771
line 1483
;1482:		&& ( nonPredictedCent->currentState.eFlags & EF_FIRING ) ) 
;1483:	{
line 1485
;1484:		// continuous flash
;1485:	} else {
ADDRGP4 $772
JUMPV
LABELV $771
line 1487
;1486:		// impulse flash
;1487:		if ( cg.time - cent->muzzleFlashTime > MUZZLE_FLASH_TIME && !cent->pe.railgunFlash ) {
ADDRLP4 452
ADDRFP4 8
INDIRP4
ASGNP4
ADDRGP4 cg+109652
INDIRI4
ADDRLP4 452
INDIRP4
CNSTI4 432
ADDP4
INDIRI4
SUBI4
CNSTI4 20
LEI4 $775
ADDRLP4 452
INDIRP4
CNSTI4 628
ADDP4
INDIRI4
CNSTI4 0
NEI4 $775
line 1488
;1488:			return;
ADDRGP4 $719
JUMPV
LABELV $775
line 1490
;1489:		}
;1490:	}
LABELV $772
line 1492
;1491:
;1492:	memset( &flash, 0, sizeof( flash ) );
ADDRLP4 140
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1493
;1493:	VectorCopy( parent->lightingOrigin, flash.lightingOrigin );
ADDRLP4 140+12
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 1494
;1494:	flash.shadowPlane = parent->shadowPlane;
ADDRLP4 140+24
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 1495
;1495:	flash.renderfx = parent->renderfx;
ADDRLP4 140+4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 1497
;1496:
;1497:	flash.hModel = weapon->flashModel;
ADDRLP4 140+8
ADDRLP4 280
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ASGNI4
line 1498
;1498:	if (!flash.hModel) {
ADDRLP4 140+8
INDIRI4
CNSTI4 0
NEI4 $782
line 1499
;1499:		return;
ADDRGP4 $719
JUMPV
LABELV $782
line 1501
;1500:	}
;1501:	angles[YAW] = 0;
ADDRLP4 288+4
CNSTF4 0
ASGNF4
line 1502
;1502:	angles[PITCH] = 0;
ADDRLP4 288
CNSTF4 0
ASGNF4
line 1503
;1503:	angles[ROLL] = crandom() * 10;
ADDRLP4 452
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 288+8
CNSTF4 1092616192
CNSTF4 1073741824
ADDRLP4 452
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
ASGNF4
line 1504
;1504:	AnglesToAxis( angles, flash.axis );
ADDRLP4 288
ARGP4
ADDRLP4 140+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1507
;1505:
;1506:	// colorize the railgun blast
;1507:	if ( weaponNum == WP_RAILGUN ) {
ADDRLP4 284
INDIRI4
CNSTI4 7
NEI4 $788
line 1510
;1508:		clientInfo_t	*ci;
;1509:
;1510:		ci = &cgs.clientinfo[ cent->currentState.clientNum ];
ADDRLP4 456
CNSTI4 1732
ADDRFP4 8
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+40972
ADDP4
ASGNP4
line 1511
;1511:		flash.shaderRGBA[0] = 255 * ci->color1[0];
ADDRLP4 464
CNSTF4 1132396544
ADDRLP4 456
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 468
CNSTF4 1325400064
ASGNF4
ADDRLP4 464
INDIRF4
ADDRLP4 468
INDIRF4
LTF4 $793
ADDRLP4 460
ADDRLP4 464
INDIRF4
ADDRLP4 468
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $794
JUMPV
LABELV $793
ADDRLP4 460
ADDRLP4 464
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $794
ADDRLP4 140+116
ADDRLP4 460
INDIRU4
CVUU1 4
ASGNU1
line 1512
;1512:		flash.shaderRGBA[1] = 255 * ci->color1[1];
ADDRLP4 476
CNSTF4 1132396544
ADDRLP4 456
INDIRP4
CNSTI4 80
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 480
CNSTF4 1325400064
ASGNF4
ADDRLP4 476
INDIRF4
ADDRLP4 480
INDIRF4
LTF4 $798
ADDRLP4 472
ADDRLP4 476
INDIRF4
ADDRLP4 480
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $799
JUMPV
LABELV $798
ADDRLP4 472
ADDRLP4 476
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $799
ADDRLP4 140+116+1
ADDRLP4 472
INDIRU4
CVUU1 4
ASGNU1
line 1513
;1513:		flash.shaderRGBA[2] = 255 * ci->color1[2];
ADDRLP4 488
CNSTF4 1132396544
ADDRLP4 456
INDIRP4
CNSTI4 84
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 492
CNSTF4 1325400064
ASGNF4
ADDRLP4 488
INDIRF4
ADDRLP4 492
INDIRF4
LTF4 $803
ADDRLP4 484
ADDRLP4 488
INDIRF4
ADDRLP4 492
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $804
JUMPV
LABELV $803
ADDRLP4 484
ADDRLP4 488
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $804
ADDRLP4 140+116+2
ADDRLP4 484
INDIRU4
CVUU1 4
ASGNU1
line 1514
;1514:	}
LABELV $788
line 1516
;1515:
;1516:	CG_PositionRotatedEntityOnTag( &flash, &gun, weapon->weaponModel, "tag_flash");
ADDRLP4 140
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 280
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ARGI4
ADDRGP4 $805
ARGP4
ADDRGP4 CG_PositionRotatedEntityOnTag
CALLV
pop
line 1517
;1517:	trap_R_AddRefEntityToScene( &flash );
ADDRLP4 140
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1519
;1518:
;1519:	if ( ps || cg.renderingThirdPerson ||
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $812
ADDRGP4 cg+109676
INDIRI4
CNSTI4 0
NEI4 $812
ADDRFP4 8
INDIRP4
INDIRI4
ADDRGP4 cg+109684+140
INDIRI4
EQI4 $806
LABELV $812
line 1520
;1520:		cent->currentState.number != cg.predictedPlayerState.clientNum ) {
line 1525
;1521:		// add lightning bolt
;1522:		//CG_LightningBolt( nonPredictedCent, flash.origin );  // Shafe - Trep - Lightning Bug 
;1523:
;1524:		// add rail trail
;1525:		CG_SpawnRailTrail( cent, flash.origin );
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 140+68
ARGP4
ADDRGP4 CG_SpawnRailTrail
CALLV
pop
line 1527
;1526:
;1527:		if ( weapon->flashDlightColor[0] || weapon->flashDlightColor[1] || weapon->flashDlightColor[2] ) {
ADDRLP4 460
CNSTF4 0
ASGNF4
ADDRLP4 280
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ADDRLP4 460
INDIRF4
NEF4 $817
ADDRLP4 280
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
ADDRLP4 460
INDIRF4
NEF4 $817
ADDRLP4 280
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
ADDRLP4 460
INDIRF4
EQF4 $814
LABELV $817
line 1528
;1528:			trap_R_AddLightToScene( flash.origin, 300 + (rand()&31), weapon->flashDlightColor[0],
ADDRLP4 464
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 140+68
ARGP4
ADDRLP4 464
INDIRI4
CNSTI4 31
BANDI4
CNSTI4 300
ADDI4
CVIF4 4
ARGF4
ADDRLP4 280
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ARGF4
ADDRLP4 280
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
ARGF4
ADDRLP4 280
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
ARGF4
ADDRGP4 trap_R_AddLightToScene
CALLV
pop
line 1530
;1529:				weapon->flashDlightColor[1], weapon->flashDlightColor[2] );
;1530:		}
LABELV $814
line 1531
;1531:	}
LABELV $806
line 1532
;1532:}
LABELV $719
endproc CG_AddPlayerWeapon 496 20
export CG_AddViewWeapon
proc CG_AddViewWeapon 176 16
line 1541
;1533:
;1534:/*
;1535:==============
;1536:CG_AddViewWeapon
;1537:
;1538:Add the weapon, and flash for the player's view
;1539:==============
;1540:*/
;1541:void CG_AddViewWeapon( playerState_t *ps ) {
line 1549
;1542:	refEntity_t	hand;
;1543:	centity_t	*cent;
;1544:	clientInfo_t	*ci;
;1545:	float		fovOffset;
;1546:	vec3_t		angles;
;1547:	weaponInfo_t	*weapon;
;1548:
;1549:	if ( ps->persistant[PERS_TEAM] == TEAM_SPECTATOR ) {
ADDRFP4 0
INDIRP4
CNSTI4 260
ADDP4
INDIRI4
CNSTI4 3
NEI4 $820
line 1550
;1550:		return;
ADDRGP4 $819
JUMPV
LABELV $820
line 1553
;1551:	}
;1552:
;1553:	if ( ps->pm_type == PM_INTERMISSION ) {
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 5
NEI4 $822
line 1554
;1554:		return;
ADDRGP4 $819
JUMPV
LABELV $822
line 1559
;1555:	}
;1556:
;1557:	// no gun if in third person view or a camera is active
;1558:	//if ( cg.renderingThirdPerson || cg.cameraMode) {
;1559:	if ( cg.renderingThirdPerson ) {
ADDRGP4 cg+109676
INDIRI4
CNSTI4 0
EQI4 $824
line 1560
;1560:		return;
ADDRGP4 $819
JUMPV
LABELV $824
line 1565
;1561:	}
;1562:
;1563:
;1564:	// allow the gun to be completely removed
;1565:	if ( !cg_drawGun.integer ) {
ADDRGP4 cg_drawGun+12
INDIRI4
CNSTI4 0
NEI4 $827
line 1568
;1566:	//	vec3_t		origin;
;1567:
;1568:		if ( cg.predictedPlayerState.eFlags & EF_FIRING ) {
ADDRGP4 cg+109684+104
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $819
line 1574
;1569:			// special hack for lightning gun...
;1570:			// Shafe - Trep - We dont have a ligning gun anymore so the next 3 lines aren't needed
;1571:			//VectorCopy( cg.refdef.vieworg, origin );
;1572:			//VectorMA( origin, -8, cg.refdef.viewaxis[2], origin );
;1573:			//CG_LightningBolt( &cg_entities[ps->clientNum], origin );
;1574:		}
line 1575
;1575:		return;
ADDRGP4 $819
JUMPV
LABELV $827
line 1579
;1576:	}
;1577:
;1578:	// don't draw if testing a gun model
;1579:	if ( cg.testGun ) {
ADDRGP4 cg+127056
INDIRI4
CNSTI4 0
EQI4 $834
line 1580
;1580:		return;
ADDRGP4 $819
JUMPV
LABELV $834
line 1584
;1581:	}
;1582:
;1583:	// drop gun lower at higher fov
;1584:	if ( cg_fov.integer > 90 ) {
ADDRGP4 cg_fov+12
INDIRI4
CNSTI4 90
LEI4 $837
line 1585
;1585:		fovOffset = -0.2 * ( cg_fov.integer - 90 );
ADDRLP4 140
CNSTF4 3192704205
ADDRGP4 cg_fov+12
INDIRI4
CNSTI4 90
SUBI4
CVIF4 4
MULF4
ASGNF4
line 1586
;1586:	} else {
ADDRGP4 $838
JUMPV
LABELV $837
line 1587
;1587:		fovOffset = 0;
ADDRLP4 140
CNSTF4 0
ASGNF4
line 1588
;1588:	}
LABELV $838
line 1590
;1589:
;1590:	cent = &cg.predictedPlayerEntity;	// &cg_entities[cg.snap->ps.clientNum];
ADDRLP4 144
ADDRGP4 cg+110152
ASGNP4
line 1591
;1591:	CG_RegisterWeapon( ps->weapon );
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_RegisterWeapon
CALLV
pop
line 1592
;1592:	weapon = &cg_weapons[ ps->weapon ];
ADDRLP4 160
CNSTI4 136
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 1594
;1593:
;1594:	memset (&hand, 0, sizeof(hand));
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1597
;1595:
;1596:	// set up gun position
;1597:	CG_CalculateWeaponPosition( hand.origin, angles );
ADDRLP4 0+68
ARGP4
ADDRLP4 148
ARGP4
ADDRGP4 CG_CalculateWeaponPosition
CALLV
pop
line 1599
;1598:
;1599:	VectorMA( hand.origin, cg_gun_x.value, cg.refdef.viewaxis[0], hand.origin );
ADDRLP4 0+68
ADDRLP4 0+68
INDIRF4
ADDRGP4 cg+111104+36
INDIRF4
ADDRGP4 cg_gun_x+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 0+68+4
INDIRF4
ADDRGP4 cg+111104+36+4
INDIRF4
ADDRGP4 cg_gun_x+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
ADDRGP4 cg+111104+36+8
INDIRF4
ADDRGP4 cg_gun_x+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1600
;1600:	VectorMA( hand.origin, cg_gun_y.value, cg.refdef.viewaxis[1], hand.origin );
ADDRLP4 0+68
ADDRLP4 0+68
INDIRF4
ADDRGP4 cg+111104+36+12
INDIRF4
ADDRGP4 cg_gun_y+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 0+68+4
INDIRF4
ADDRGP4 cg+111104+36+12+4
INDIRF4
ADDRGP4 cg_gun_y+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
ADDRGP4 cg+111104+36+12+8
INDIRF4
ADDRGP4 cg_gun_y+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1601
;1601:	VectorMA( hand.origin, (cg_gun_z.value+fovOffset), cg.refdef.viewaxis[2], hand.origin );
ADDRLP4 0+68
ADDRLP4 0+68
INDIRF4
ADDRGP4 cg+111104+36+24
INDIRF4
ADDRGP4 cg_gun_z+8
INDIRF4
ADDRLP4 140
INDIRF4
ADDF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 0+68+4
INDIRF4
ADDRGP4 cg+111104+36+24+4
INDIRF4
ADDRGP4 cg_gun_z+8
INDIRF4
ADDRLP4 140
INDIRF4
ADDF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
ADDRGP4 cg+111104+36+24+8
INDIRF4
ADDRGP4 cg_gun_z+8
INDIRF4
ADDRLP4 140
INDIRF4
ADDF4
MULF4
ADDF4
ASGNF4
line 1603
;1602:
;1603:	AnglesToAxis( angles, hand.axis );
ADDRLP4 148
ARGP4
ADDRLP4 0+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1606
;1604:
;1605:	// map torso animations to weapon animations
;1606:	if ( cg_gun_frame.integer ) {
ADDRGP4 cg_gun_frame+12
INDIRI4
CNSTI4 0
EQI4 $913
line 1608
;1607:		// development tool
;1608:		hand.frame = hand.oldframe = cg_gun_frame.integer;
ADDRLP4 168
ADDRGP4 cg_gun_frame+12
INDIRI4
ASGNI4
ADDRLP4 0+96
ADDRLP4 168
INDIRI4
ASGNI4
ADDRLP4 0+80
ADDRLP4 168
INDIRI4
ASGNI4
line 1609
;1609:		hand.backlerp = 0;
ADDRLP4 0+100
CNSTF4 0
ASGNF4
line 1610
;1610:	} else {
ADDRGP4 $914
JUMPV
LABELV $913
line 1612
;1611:		// get clientinfo for animation map
;1612:		ci = &cgs.clientinfo[ cent->currentState.clientNum ];
ADDRLP4 164
CNSTI4 1732
ADDRLP4 144
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+40972
ADDP4
ASGNP4
line 1613
;1613:		hand.frame = CG_MapTorsoToWeaponFrame( ci, cent->pe.torso.frame );
ADDRLP4 164
INDIRP4
ARGP4
ADDRLP4 144
INDIRP4
CNSTI4 516
ADDP4
INDIRI4
ARGI4
ADDRLP4 168
ADDRGP4 CG_MapTorsoToWeaponFrame
CALLI4
ASGNI4
ADDRLP4 0+80
ADDRLP4 168
INDIRI4
ASGNI4
line 1614
;1614:		hand.oldframe = CG_MapTorsoToWeaponFrame( ci, cent->pe.torso.oldFrame );
ADDRLP4 164
INDIRP4
ARGP4
ADDRLP4 144
INDIRP4
CNSTI4 508
ADDP4
INDIRI4
ARGI4
ADDRLP4 172
ADDRGP4 CG_MapTorsoToWeaponFrame
CALLI4
ASGNI4
ADDRLP4 0+96
ADDRLP4 172
INDIRI4
ASGNI4
line 1615
;1615:		hand.backlerp = cent->pe.torso.backlerp;
ADDRLP4 0+100
ADDRLP4 144
INDIRP4
CNSTI4 524
ADDP4
INDIRF4
ASGNF4
line 1616
;1616:	}
LABELV $914
line 1618
;1617:
;1618:	hand.hModel = weapon->handsModel;
ADDRLP4 0+8
ADDRLP4 160
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ASGNI4
line 1619
;1619:	hand.renderfx = RF_DEPTHHACK | RF_FIRST_PERSON | RF_MINLIGHT;
ADDRLP4 0+4
CNSTI4 13
ASGNI4
line 1622
;1620:
;1621:	// add everything onto the hand
;1622:	CG_AddPlayerWeapon( &hand, ps, &cg.predictedPlayerEntity, ps->persistant[PERS_TEAM] );
ADDRLP4 0
ARGP4
ADDRLP4 168
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 168
INDIRP4
ARGP4
ADDRGP4 cg+110152
ARGP4
ADDRLP4 168
INDIRP4
CNSTI4 260
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_AddPlayerWeapon
CALLV
pop
line 1623
;1623:}
LABELV $819
endproc CG_AddViewWeapon 176 16
export CG_DrawWeaponSelect
proc CG_DrawWeaponSelect 48 20
line 1638
;1624:
;1625:/*
;1626:==============================================================================
;1627:
;1628:WEAPON SELECTION
;1629:
;1630:==============================================================================
;1631:*/
;1632:
;1633:/*
;1634:===================
;1635:CG_DrawWeaponSelect
;1636:===================
;1637:*/
;1638:void CG_DrawWeaponSelect( void ) {
line 1647
;1639:	int		i;
;1640:	int		bits;
;1641:	int		count;
;1642:	int		x, y, w;
;1643:	char	*name;
;1644:	float	*color;
;1645:
;1646:	// don't display if dead
;1647:	if ( cg.predictedPlayerState.stats[STAT_HEALTH] <= 0 ) {
ADDRGP4 cg+109684+184
INDIRI4
CNSTI4 0
GTI4 $928
line 1648
;1648:		return;
ADDRGP4 $927
JUMPV
LABELV $928
line 1651
;1649:	}
;1650:
;1651:	color = CG_FadeColor( cg.weaponSelectTime, WEAPON_SELECT_TIME );
ADDRGP4 cg+126744
INDIRI4
ARGI4
CNSTI4 1400
ARGI4
ADDRLP4 32
ADDRGP4 CG_FadeColor
CALLP4
ASGNP4
ADDRLP4 20
ADDRLP4 32
INDIRP4
ASGNP4
line 1652
;1652:	if ( !color ) {
ADDRLP4 20
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $933
line 1653
;1653:		return;
ADDRGP4 $927
JUMPV
LABELV $933
line 1655
;1654:	}
;1655:	trap_R_SetColor( color );
ADDRLP4 20
INDIRP4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1658
;1656:
;1657:	// showing weapon select clears pickup item display, but not the blend blob
;1658:	cg.itemPickupTime = 0;
ADDRGP4 cg+126736
CNSTI4 0
ASGNI4
line 1661
;1659:
;1660:	// count the number of weapons owned
;1661:	bits = cg.snap->ps.stats[ STAT_WEAPONS ];
ADDRLP4 12
ADDRGP4 cg+36
INDIRP4
CNSTI4 236
ADDP4
INDIRI4
ASGNI4
line 1662
;1662:	count = 0;
ADDRLP4 16
CNSTI4 0
ASGNI4
line 1663
;1663:	for ( i = 1 ; i < 16 ; i++ ) {
ADDRLP4 0
CNSTI4 1
ASGNI4
LABELV $937
line 1664
;1664:		if ( bits & ( 1 << i ) ) {
ADDRLP4 12
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
EQI4 $941
line 1665
;1665:			count++;
ADDRLP4 16
ADDRLP4 16
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1666
;1666:		}
LABELV $941
line 1667
;1667:	}
LABELV $938
line 1663
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $937
line 1669
;1668:
;1669:	x = 320 - count * 20;
ADDRLP4 4
CNSTI4 320
CNSTI4 20
ADDRLP4 16
INDIRI4
MULI4
SUBI4
ASGNI4
line 1670
;1670:	y = 380;
ADDRLP4 8
CNSTI4 380
ASGNI4
line 1672
;1671:
;1672:	for ( i = 1 ; i < 16 ; i++ ) {
ADDRLP4 0
CNSTI4 1
ASGNI4
LABELV $943
line 1673
;1673:		if ( !( bits & ( 1 << i ) ) ) {
ADDRLP4 12
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
NEI4 $947
line 1674
;1674:			continue;
ADDRGP4 $944
JUMPV
LABELV $947
line 1677
;1675:		}
;1676:
;1677:		CG_RegisterWeapon( i );
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_RegisterWeapon
CALLV
pop
line 1680
;1678:
;1679:		// draw weapon icon
;1680:		CG_DrawPic( x, y, 32, 32, cg_weapons[i].weaponIcon );
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 36
CNSTF4 1107296256
ASGNF4
ADDRLP4 36
INDIRF4
ARGF4
ADDRLP4 36
INDIRF4
ARGF4
CNSTI4 136
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg_weapons+68
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 1683
;1681:
;1682:		// draw selection marker
;1683:		if ( i == cg.weaponSelect ) {
ADDRLP4 0
INDIRI4
ADDRGP4 cg+111004
INDIRI4
NEI4 $950
line 1684
;1684:			CG_DrawPic( x-4, y-4, 40, 40, cgs.media.selectShader );
ADDRLP4 40
CNSTI4 4
ASGNI4
ADDRLP4 4
INDIRI4
ADDRLP4 40
INDIRI4
SUBI4
CVIF4 4
ARGF4
ADDRLP4 8
INDIRI4
ADDRLP4 40
INDIRI4
SUBI4
CVIF4 4
ARGF4
ADDRLP4 44
CNSTF4 1109393408
ASGNF4
ADDRLP4 44
INDIRF4
ARGF4
ADDRLP4 44
INDIRF4
ARGF4
ADDRGP4 cgs+153876+224
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 1685
;1685:		}
LABELV $950
line 1688
;1686:
;1687:		// no ammo cross on top
;1688:		if ( !cg.snap->ps.ammo[ i ] ) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $955
line 1689
;1689:			CG_DrawPic( x, y, 32, 32, cgs.media.noammoShader );
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 40
CNSTF4 1107296256
ASGNF4
ADDRLP4 40
INDIRF4
ARGF4
ADDRLP4 40
INDIRF4
ARGF4
ADDRGP4 cgs+153876+284
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 1690
;1690:		}
LABELV $955
line 1692
;1691:
;1692:		x += 40;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 40
ADDI4
ASGNI4
line 1693
;1693:	}
LABELV $944
line 1672
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $943
line 1696
;1694:
;1695:	// draw the selected name
;1696:	if ( cg_weapons[ cg.weaponSelect ].item ) {
CNSTI4 136
ADDRGP4 cg+111004
INDIRI4
MULI4
ADDRGP4 cg_weapons+4
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $960
line 1697
;1697:		name = cg_weapons[ cg.weaponSelect ].item->pickup_name;
ADDRLP4 24
CNSTI4 136
ADDRGP4 cg+111004
INDIRI4
MULI4
ADDRGP4 cg_weapons+4
ADDP4
INDIRP4
CNSTI4 28
ADDP4
INDIRP4
ASGNP4
line 1698
;1698:		if ( name ) {
ADDRLP4 24
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $966
line 1699
;1699:			w = CG_DrawStrlen( name ) * BIGCHAR_WIDTH;
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 36
ADDRGP4 CG_DrawStrlen
CALLI4
ASGNI4
ADDRLP4 28
ADDRLP4 36
INDIRI4
CNSTI4 4
LSHI4
ASGNI4
line 1700
;1700:			x = ( SCREEN_WIDTH - w ) / 2;
ADDRLP4 4
CNSTI4 640
ADDRLP4 28
INDIRI4
SUBI4
CNSTI4 2
DIVI4
ASGNI4
line 1701
;1701:			CG_DrawBigStringColor(x, y - 22, name, color);
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 8
INDIRI4
CNSTI4 22
SUBI4
ARGI4
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRGP4 CG_DrawBigStringColor
CALLV
pop
line 1702
;1702:		}
LABELV $966
line 1703
;1703:	}
LABELV $960
line 1705
;1704:
;1705:	trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1706
;1706:}
LABELV $927
endproc CG_DrawWeaponSelect 48 20
proc CG_WeaponSelectable 0 0
line 1714
;1707:
;1708:
;1709:/*
;1710:===============
;1711:CG_WeaponSelectable
;1712:===============
;1713:*/
;1714:static qboolean CG_WeaponSelectable( int i ) {
line 1715
;1715:	if ( !cg.snap->ps.ammo[i] ) {
ADDRFP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $969
line 1716
;1716:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $968
JUMPV
LABELV $969
line 1718
;1717:	}
;1718:	if ( ! (cg.snap->ps.stats[ STAT_WEAPONS ] & ( 1 << i ) ) ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 236
ADDP4
INDIRI4
CNSTI4 1
ADDRFP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
NEI4 $972
line 1719
;1719:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $968
JUMPV
LABELV $972
line 1722
;1720:	}
;1721:
;1722:	return qtrue;
CNSTI4 1
RETI4
LABELV $968
endproc CG_WeaponSelectable 0 0
export CG_NextWeapon_f
proc CG_NextWeapon_f 16 4
line 1730
;1723:}
;1724:
;1725:/*
;1726:===============
;1727:CG_NextWeapon_f
;1728:===============
;1729:*/
;1730:void CG_NextWeapon_f( void ) {
line 1734
;1731:	int		i;
;1732:	int		original;
;1733:
;1734:	if ( !cg.snap ) {
ADDRGP4 cg+36
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $976
line 1735
;1735:		return;
ADDRGP4 $975
JUMPV
LABELV $976
line 1737
;1736:	}
;1737:	if ( cg.snap->ps.pm_flags & PMF_FOLLOW ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $979
line 1738
;1738:		return;
ADDRGP4 $975
JUMPV
LABELV $979
line 1741
;1739:	}
;1740:
;1741:	cg.weaponSelectTime = cg.time;
ADDRGP4 cg+126744
ADDRGP4 cg+109652
INDIRI4
ASGNI4
line 1742
;1742:	original = cg.weaponSelect;
ADDRLP4 4
ADDRGP4 cg+111004
INDIRI4
ASGNI4
line 1744
;1743:
;1744:	for ( i = 0 ; i < 16 ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $985
line 1745
;1745:		cg.weaponSelect++;
ADDRLP4 8
ADDRGP4 cg+111004
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1746
;1746:		if ( cg.weaponSelect == 16 ) {
ADDRGP4 cg+111004
INDIRI4
CNSTI4 16
NEI4 $990
line 1747
;1747:			cg.weaponSelect = 0;
ADDRGP4 cg+111004
CNSTI4 0
ASGNI4
line 1748
;1748:		}
LABELV $990
line 1753
;1749:		/* - You can now scroll wheel to the gauntlet
;1750:		if ( cg.weaponSelect == WP_GAUNTLET ) {
;1751:			continue;		// never cycle to gauntlet
;1752:		}*/ 
;1753:		if ( CG_WeaponSelectable( cg.weaponSelect ) ) {
ADDRGP4 cg+111004
INDIRI4
ARGI4
ADDRLP4 12
ADDRGP4 CG_WeaponSelectable
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
EQI4 $994
line 1754
;1754:			break;
ADDRGP4 $987
JUMPV
LABELV $994
line 1756
;1755:		}
;1756:	}
LABELV $986
line 1744
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $985
LABELV $987
line 1757
;1757:	if ( i == 16 ) {
ADDRLP4 0
INDIRI4
CNSTI4 16
NEI4 $997
line 1758
;1758:		cg.weaponSelect = original;
ADDRGP4 cg+111004
ADDRLP4 4
INDIRI4
ASGNI4
line 1759
;1759:	}
LABELV $997
line 1760
;1760:}
LABELV $975
endproc CG_NextWeapon_f 16 4
export CG_PrevWeapon_f
proc CG_PrevWeapon_f 16 4
line 1767
;1761:
;1762:/*
;1763:===============
;1764:CG_PrevWeapon_f
;1765:===============
;1766:*/
;1767:void CG_PrevWeapon_f( void ) {
line 1771
;1768:	int		i;
;1769:	int		original;
;1770:
;1771:	if ( !cg.snap ) {
ADDRGP4 cg+36
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1001
line 1772
;1772:		return;
ADDRGP4 $1000
JUMPV
LABELV $1001
line 1774
;1773:	}
;1774:	if ( cg.snap->ps.pm_flags & PMF_FOLLOW ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $1004
line 1775
;1775:		return;
ADDRGP4 $1000
JUMPV
LABELV $1004
line 1778
;1776:	}
;1777:
;1778:	cg.weaponSelectTime = cg.time;
ADDRGP4 cg+126744
ADDRGP4 cg+109652
INDIRI4
ASGNI4
line 1779
;1779:	original = cg.weaponSelect;
ADDRLP4 4
ADDRGP4 cg+111004
INDIRI4
ASGNI4
line 1781
;1780:
;1781:	for ( i = 0 ; i < 16 ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1010
line 1782
;1782:		cg.weaponSelect--;
ADDRLP4 8
ADDRGP4 cg+111004
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 1783
;1783:		if ( cg.weaponSelect == -1 ) {
ADDRGP4 cg+111004
INDIRI4
CNSTI4 -1
NEI4 $1015
line 1784
;1784:			cg.weaponSelect = 15;
ADDRGP4 cg+111004
CNSTI4 15
ASGNI4
line 1785
;1785:		}
LABELV $1015
line 1792
;1786:		
;1787:		/*
;1788:		if ( cg.weaponSelect == WP_GAUNTLET ) {
;1789:			continue;		// never cycle to gauntlet
;1790:		}
;1791:		*/
;1792:		if ( CG_WeaponSelectable( cg.weaponSelect ) ) {
ADDRGP4 cg+111004
INDIRI4
ARGI4
ADDRLP4 12
ADDRGP4 CG_WeaponSelectable
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
EQI4 $1019
line 1793
;1793:			break;
ADDRGP4 $1012
JUMPV
LABELV $1019
line 1795
;1794:		}
;1795:	}
LABELV $1011
line 1781
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $1010
LABELV $1012
line 1796
;1796:	if ( i == 16 ) {
ADDRLP4 0
INDIRI4
CNSTI4 16
NEI4 $1022
line 1797
;1797:		cg.weaponSelect = original;
ADDRGP4 cg+111004
ADDRLP4 4
INDIRI4
ASGNI4
line 1798
;1798:	}
LABELV $1022
line 1799
;1799:}
LABELV $1000
endproc CG_PrevWeapon_f 16 4
export CG_Weapon_f
proc CG_Weapon_f 16 4
line 1806
;1800:
;1801:/*
;1802:===============
;1803:CG_Weapon_f
;1804:===============
;1805:*/
;1806:void CG_Weapon_f( void ) {
line 1809
;1807:	int		num;
;1808:
;1809:	if ( !cg.snap ) {
ADDRGP4 cg+36
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1026
line 1810
;1810:		return;
ADDRGP4 $1025
JUMPV
LABELV $1026
line 1812
;1811:	}
;1812:	if ( cg.snap->ps.pm_flags & PMF_FOLLOW ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $1029
line 1813
;1813:		return;
ADDRGP4 $1025
JUMPV
LABELV $1029
line 1816
;1814:	}
;1815:
;1816:	num = atoi( CG_Argv( 1 ) );
CNSTI4 1
ARGI4
ADDRLP4 4
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 8
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 8
INDIRI4
ASGNI4
line 1818
;1817:
;1818:	if ( num < 1 || num > 15 ) {
ADDRLP4 0
INDIRI4
CNSTI4 1
LTI4 $1034
ADDRLP4 0
INDIRI4
CNSTI4 15
LEI4 $1032
LABELV $1034
line 1819
;1819:		return;
ADDRGP4 $1025
JUMPV
LABELV $1032
line 1822
;1820:	}
;1821:
;1822:	cg.weaponSelectTime = cg.time;
ADDRGP4 cg+126744
ADDRGP4 cg+109652
INDIRI4
ASGNI4
line 1824
;1823:
;1824:	if ( ! ( cg.snap->ps.stats[STAT_WEAPONS] & ( 1 << num ) ) ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 236
ADDP4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
NEI4 $1037
line 1825
;1825:		return;		// don't have the weapon
ADDRGP4 $1025
JUMPV
LABELV $1037
line 1828
;1826:	}
;1827:
;1828:	cg.weaponSelect = num;
ADDRGP4 cg+111004
ADDRLP4 0
INDIRI4
ASGNI4
line 1829
;1829:}
LABELV $1025
endproc CG_Weapon_f 16 4
export CG_OutOfAmmoChange
proc CG_OutOfAmmoChange 8 4
line 1838
;1830:
;1831:/*
;1832:===================
;1833:CG_OutOfAmmoChange
;1834:
;1835:The current weapon has just run out of ammo
;1836:===================
;1837:*/
;1838:void CG_OutOfAmmoChange( void ) {
line 1841
;1839:	int		i;
;1840:
;1841:	cg.weaponSelectTime = cg.time;
ADDRGP4 cg+126744
ADDRGP4 cg+109652
INDIRI4
ASGNI4
line 1843
;1842:
;1843:	for ( i = 15 ; i > 0 ; i-- ) {
ADDRLP4 0
CNSTI4 15
ASGNI4
LABELV $1044
line 1844
;1844:		if ( CG_WeaponSelectable( i ) ) {
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 4
ADDRGP4 CG_WeaponSelectable
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
EQI4 $1048
line 1845
;1845:			cg.weaponSelect = i;
ADDRGP4 cg+111004
ADDRLP4 0
INDIRI4
ASGNI4
line 1846
;1846:			break;
ADDRGP4 $1046
JUMPV
LABELV $1048
line 1848
;1847:		}
;1848:	}
LABELV $1045
line 1843
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
GTI4 $1044
LABELV $1046
line 1849
;1849:}
LABELV $1041
endproc CG_OutOfAmmoChange 8 4
export CG_FireWeapon
proc CG_FireWeapon 20 16
line 1868
;1850:
;1851:
;1852:
;1853:/*
;1854:===================================================================================================
;1855:
;1856:WEAPON EVENTS
;1857:
;1858:===================================================================================================
;1859:*/
;1860:
;1861:/*
;1862:================
;1863:CG_FireWeapon
;1864:
;1865:Caused by an EV_FIRE_WEAPON event
;1866:================
;1867:*/
;1868:void CG_FireWeapon( centity_t *cent ) {
line 1873
;1869:	entityState_t *ent;
;1870:	int				c;
;1871:	weaponInfo_t	*weap;
;1872:
;1873:	ent = &cent->currentState;
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
line 1874
;1874:	if ( ent->weapon == WP_NONE ) {
ADDRLP4 8
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1052
line 1875
;1875:		return;
ADDRGP4 $1051
JUMPV
LABELV $1052
line 1877
;1876:	}
;1877:	if ( ent->weapon >= WP_NUM_WEAPONS ) {
ADDRLP4 8
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 12
LTI4 $1054
line 1878
;1878:		CG_Error( "CG_FireWeapon: ent->weapon >= WP_NUM_WEAPONS" );
ADDRGP4 $1056
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 1879
;1879:		return;
ADDRGP4 $1051
JUMPV
LABELV $1054
line 1881
;1880:	}
;1881:	weap = &cg_weapons[ ent->weapon ];
ADDRLP4 4
CNSTI4 136
ADDRLP4 8
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 1885
;1882:
;1883:	// mark the entity as muzzle flashing, so when it is added it will
;1884:	// append the flash to the weapon model
;1885:	cent->muzzleFlashTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 432
ADDP4
ADDRGP4 cg+109652
INDIRI4
ASGNI4
line 1898
;1886:
;1887:	// lightning gun only does this this on initial press
;1888:	// Shafe - We Replaced The Lightning Gun with the flame thrower so this is useless
;1889:	/*
;1890:	if ( ent->weapon == WP_LIGHTNING ) {
;1891:		if ( cent->pe.lightningFiring ) {
;1892:			return;
;1893:		}
;1894:	}
;1895:	*/
;1896:
;1897:	// play quad sound if needed
;1898:	if ( cent->currentState.powerups & ( 1 << PW_QUAD ) ) {
ADDRFP4 0
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $1058
line 1899
;1899:		trap_S_StartSound (NULL, cent->currentState.number, CHAN_ITEM, cgs.media.quadSound );
CNSTP4 0
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRGP4 cgs+153876+584
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 1900
;1900:	}
LABELV $1058
line 1903
;1901:
;1902:	// play a sound
;1903:	for ( c = 0 ; c < 4 ; c++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1062
line 1904
;1904:		if ( !weap->flashSound[c] ) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 52
ADDP4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1066
line 1905
;1905:			break;
ADDRGP4 $1064
JUMPV
LABELV $1066
line 1907
;1906:		}
;1907:	}
LABELV $1063
line 1903
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 4
LTI4 $1062
LABELV $1064
line 1908
;1908:	if ( c > 0 ) {
ADDRLP4 0
INDIRI4
CNSTI4 0
LEI4 $1068
line 1909
;1909:		c = rand() % c;
ADDRLP4 12
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 12
INDIRI4
ADDRLP4 0
INDIRI4
MODI4
ASGNI4
line 1910
;1910:		if ( weap->flashSound[c] )
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 52
ADDP4
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1070
line 1911
;1911:		{
line 1912
;1912:			trap_S_StartSound( NULL, ent->number, CHAN_WEAPON, weap->flashSound[c] );
CNSTP4 0
ARGP4
ADDRLP4 8
INDIRP4
INDIRI4
ARGI4
ADDRLP4 16
CNSTI4 2
ASGNI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
ADDRLP4 16
INDIRI4
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 52
ADDP4
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 1913
;1913:		}
LABELV $1070
line 1914
;1914:	}
LABELV $1068
line 1917
;1915:
;1916:	// do brass ejection
;1917:	if ( weap->ejectBrassFunc && cg_brassTime.integer > 0 ) {
ADDRLP4 4
INDIRP4
CNSTI4 112
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1072
ADDRGP4 cg_brassTime+12
INDIRI4
CNSTI4 0
LEI4 $1072
line 1918
;1918:		weap->ejectBrassFunc( cent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 112
ADDP4
INDIRP4
CALLV
pop
line 1919
;1919:	}
LABELV $1072
line 1922
;1920:
;1921://unlagged - attack prediction #1
;1922:	CG_PredictWeaponEffects( cent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_PredictWeaponEffects
CALLV
pop
line 1924
;1923://unlagged - attack prediction #1
;1924:}
LABELV $1051
endproc CG_FireWeapon 20 16
export CG_FireWeapon2
proc CG_FireWeapon2 20 16
line 1934
;1925:
;1926:
;1927:/* 
;1928:================ 
;1929:CG_FireWeapon2 
;1930:Shafe - Trep - Alt Fire
;1931:Caused by an EV_FIRE_WEAPON2 event 
;1932:================ 
;1933:*/ 
;1934:void CG_FireWeapon2( centity_t *cent ) { 
line 1939
;1935: entityState_t *ent; 
;1936: int    c; 
;1937: weaponInfo_t *weap; 
;1938:
;1939: ent = &cent->currentState; 
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
line 1940
;1940: if ( ent->weapon == WP_NONE ) { 
ADDRLP4 8
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1076
line 1941
;1941:  return; 
ADDRGP4 $1075
JUMPV
LABELV $1076
line 1943
;1942: } 
;1943: if ( ent->weapon >= WP_NUM_WEAPONS ) { 
ADDRLP4 8
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 12
LTI4 $1078
line 1944
;1944:  CG_Error( "CG_FireWeapon: ent->weapon >= WP_NUM_WEAPONS" ); 
ADDRGP4 $1056
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 1945
;1945:  return; 
ADDRGP4 $1075
JUMPV
LABELV $1078
line 1947
;1946: } 
;1947: weap = &cg_weapons[ ent->weapon ]; 
ADDRLP4 4
CNSTI4 136
ADDRLP4 8
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 1951
;1948:
;1949: // mark the entity as muzzle flashing, so when it is added it will 
;1950: // append the flash to the weapon model 
;1951: cent->muzzleFlashTime = cg.time; 
ADDRFP4 0
INDIRP4
CNSTI4 432
ADDP4
ADDRGP4 cg+109652
INDIRI4
ASGNI4
line 1964
;1952:
;1953: // Shafe - We Replaced The Lightning Gun with the flame thrower so this is useless
;1954: // lightning gun only does this this on initial press 
;1955:	/*
;1956:	if ( ent->weapon == WP_LIGHTNING ) { 
;1957:		if ( cent->pe.lightningFiring ) { 
;1958:			return; 
;1959:		} 
;1960:	} 
;1961:	*/
;1962:
;1963: // play quad sound if needed 
;1964: if ( cent->currentState.powerups & ( 1 << PW_QUAD ) ) { 
ADDRFP4 0
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $1081
line 1965
;1965:  trap_S_StartSound (NULL, cent->currentState.number, CHAN_ITEM, cgs.media.quadSound ); 
CNSTP4 0
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRGP4 cgs+153876+584
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 1966
;1966: } 
LABELV $1081
line 1969
;1967:
;1968: // play a sound 
;1969: for ( c = 0 ; c < 4 ; c++ ) { 
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1085
line 1970
;1970:  if ( !weap->flashSound[c] ) { 
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 52
ADDP4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1089
line 1971
;1971:   break; 
ADDRGP4 $1087
JUMPV
LABELV $1089
line 1973
;1972:  } 
;1973: } 
LABELV $1086
line 1969
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 4
LTI4 $1085
LABELV $1087
line 1974
;1974: if ( c > 0 ) { 
ADDRLP4 0
INDIRI4
CNSTI4 0
LEI4 $1091
line 1975
;1975:  c = rand() % c; 
ADDRLP4 12
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 12
INDIRI4
ADDRLP4 0
INDIRI4
MODI4
ASGNI4
line 1976
;1976:  if ( weap->flashSound[c] ) 
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 52
ADDP4
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1093
line 1977
;1977:  { 
line 1978
;1978:   trap_S_StartSound( NULL, ent->number, CHAN_WEAPON, weap->flashSound[c] ); 
CNSTP4 0
ARGP4
ADDRLP4 8
INDIRP4
INDIRI4
ARGI4
ADDRLP4 16
CNSTI4 2
ASGNI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
ADDRLP4 16
INDIRI4
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 52
ADDP4
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 1979
;1979:  } 
LABELV $1093
line 1980
;1980: } 
LABELV $1091
line 1983
;1981:
;1982: // do brass ejection 
;1983: if ( weap->ejectBrassFunc && cg_brassTime.integer > 0 ) { 
ADDRLP4 4
INDIRP4
CNSTI4 112
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1095
ADDRGP4 cg_brassTime+12
INDIRI4
CNSTI4 0
LEI4 $1095
line 1984
;1984:  weap->ejectBrassFunc( cent ); 
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 112
ADDP4
INDIRP4
CALLV
pop
line 1985
;1985: } 
LABELV $1095
line 1988
;1986:
;1987: //unlagged - attack prediction #1
;1988:	CG_PredictWeaponEffects( cent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_PredictWeaponEffects
CALLV
pop
line 1990
;1989://unlagged - attack prediction #1
;1990:}
LABELV $1075
endproc CG_FireWeapon2 20 16
export CG_MissileHitWall
proc CG_MissileHitWall 120 44
line 2000
;1991:
;1992:
;1993:/*
;1994:=================
;1995:CG_MissileHitWall
;1996:
;1997:Caused by an EV_MISSILE_MISS event, or directly by local bullet tracing
;1998:=================
;1999:*/
;2000:void CG_MissileHitWall( centity_t *cent, int weapon, int clientNum, vec3_t origin, vec3_t dir, impactSound_t soundType ) {
line 2016
;2001:	qhandle_t		mod;
;2002:	qhandle_t		mark;
;2003:	qhandle_t		shader;
;2004:	sfxHandle_t		sfx;
;2005:	float			radius;
;2006:	float			light;
;2007:	vec3_t			lightColor;
;2008:	localEntity_t	*le;
;2009:	int				r;
;2010:	qboolean		alphaFade;
;2011:	qboolean		isSprite;
;2012:	int				duration;
;2013:	vec3_t			sprOrg;
;2014:	vec3_t			sprVel;
;2015:
;2016:	mark = 0;
ADDRLP4 12
CNSTI4 0
ASGNI4
line 2017
;2017:	radius = 32;
ADDRLP4 24
CNSTF4 1107296256
ASGNF4
line 2018
;2018:	sfx = 0;
ADDRLP4 16
CNSTI4 0
ASGNI4
line 2019
;2019:	mod = 0;
ADDRLP4 20
CNSTI4 0
ASGNI4
line 2020
;2020:	shader = 0;
ADDRLP4 28
CNSTI4 0
ASGNI4
line 2021
;2021:	light = 0;
ADDRLP4 36
CNSTF4 0
ASGNF4
line 2022
;2022:	lightColor[0] = 1;
ADDRLP4 0
CNSTF4 1065353216
ASGNF4
line 2023
;2023:	lightColor[1] = 1;
ADDRLP4 0+4
CNSTF4 1065353216
ASGNF4
line 2024
;2024:	lightColor[2] = 0;
ADDRLP4 0+8
CNSTF4 0
ASGNF4
line 2027
;2025:
;2026:	// set defaults
;2027:	isSprite = qfalse;
ADDRLP4 40
CNSTI4 0
ASGNI4
line 2028
;2028:	duration = 600;
ADDRLP4 48
CNSTI4 600
ASGNI4
line 2030
;2029:
;2030:	switch ( weapon ) {
ADDRLP4 80
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 84
CNSTI4 2
ASGNI4
ADDRLP4 80
INDIRI4
ADDRLP4 84
INDIRI4
LTI4 $1101
ADDRLP4 80
INDIRI4
CNSTI4 11
GTI4 $1101
ADDRLP4 80
INDIRI4
ADDRLP4 84
INDIRI4
LSHI4
ADDRGP4 $1212-8
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $1212
address $1193
address $1186
address $1112
address $1121
address $1103
address $1140
address $1149
address $1169
address $1101
address $1158
code
LABELV $1101
LABELV $1103
line 2047
;2031:	default:
;2032:#ifdef MISSIONPACK
;2033:	case WP_NAILGUN:
;2034:		if( soundType == IMPACTSOUND_FLESH ) {
;2035:			sfx = cgs.media.sfx_nghitflesh;
;2036:		} else if( soundType == IMPACTSOUND_METAL ) {
;2037:			sfx = cgs.media.sfx_nghitmetal;
;2038:		} else {
;2039:			sfx = cgs.media.sfx_nghit;
;2040:		}
;2041:		mark = cgs.media.holeMarkShader;
;2042:		radius = 12;
;2043:		break;
;2044:#endif
;2045:	case WP_LIGHTNING:
;2046:		// Shafe - Trep - Flame Thrower
;2047:		mod = cgs.media.dishFlashModel;
ADDRLP4 20
ADDRGP4 cgs+153876+468
INDIRI4
ASGNI4
line 2048
;2048:		shader = cgs.media.flameExplosionShader;
ADDRLP4 28
ADDRGP4 cgs+153876+508
INDIRI4
ASGNI4
line 2049
;2049:		sfx = cgs.media.sfx_plasmaexp;
ADDRLP4 16
ADDRGP4 cgs+153876+752
INDIRI4
ASGNI4
line 2050
;2050:		mark = cgs.media.burnMarkShader;
ADDRLP4 12
ADDRGP4 cgs+153876+400
INDIRI4
ASGNI4
line 2051
;2051:		radius = 16;
ADDRLP4 24
CNSTF4 1098907648
ASGNF4
line 2065
;2052:		// no explosion at LG impact, it is added with the beam
;2053:		/*
;2054:		r = rand() & 3;
;2055:		if ( r < 2 ) {
;2056:			sfx = cgs.media.sfx_lghit2;
;2057:		} else if ( r == 2 ) {
;2058:			sfx = cgs.media.sfx_lghit1;
;2059:		} else {
;2060:			sfx = cgs.media.sfx_lghit3;
;2061:		}
;2062:		mark = cgs.media.holeMarkShader;
;2063:		radius = 12;
;2064:		*/
;2065:		break;
ADDRGP4 $1102
JUMPV
LABELV $1112
line 2078
;2066:#ifdef MISSIONPACK
;2067:	case WP_PROX_LAUNCHER:
;2068:		mod = cgs.media.dishFlashModel;
;2069:		shader = cgs.media.grenadeExplosionShader;
;2070:		sfx = cgs.media.sfx_proxexp;
;2071:		mark = cgs.media.burnMarkShader;
;2072:		radius = 64;
;2073:		light = 300;
;2074:		isSprite = qtrue;
;2075:		break;
;2076:#endif
;2077:	case WP_GRENADE_LAUNCHER:
;2078:		mod = cgs.media.dishFlashModel;
ADDRLP4 20
ADDRGP4 cgs+153876+468
INDIRI4
ASGNI4
line 2079
;2079:		shader = cgs.media.grenadeExplosionShader;
ADDRLP4 28
ADDRGP4 cgs+153876+492
INDIRI4
ASGNI4
line 2080
;2080:		sfx = cgs.media.sfx_rockexp;
ADDRLP4 16
ADDRGP4 cgs+153876+744
INDIRI4
ASGNI4
line 2081
;2081:		mark = cgs.media.burnMarkShader;
ADDRLP4 12
ADDRGP4 cgs+153876+400
INDIRI4
ASGNI4
line 2082
;2082:		radius = 64;
ADDRLP4 24
CNSTF4 1115684864
ASGNF4
line 2083
;2083:		light = 300;
ADDRLP4 36
CNSTF4 1133903872
ASGNF4
line 2084
;2084:		isSprite = qtrue;
ADDRLP4 40
CNSTI4 1
ASGNI4
line 2085
;2085:		break;
ADDRGP4 $1102
JUMPV
LABELV $1121
line 2087
;2086:	case WP_ROCKET_LAUNCHER:
;2087:		mod = cgs.media.dishFlashModel;
ADDRLP4 20
ADDRGP4 cgs+153876+468
INDIRI4
ASGNI4
line 2088
;2088:		shader = cgs.media.rocketExplosionShader;
ADDRLP4 28
ADDRGP4 cgs+153876+488
INDIRI4
ASGNI4
line 2089
;2089:		sfx = cgs.media.sfx_rockexp;
ADDRLP4 16
ADDRGP4 cgs+153876+744
INDIRI4
ASGNI4
line 2090
;2090:		mark = cgs.media.burnMarkShader;
ADDRLP4 12
ADDRGP4 cgs+153876+400
INDIRI4
ASGNI4
line 2091
;2091:		radius = 64;
ADDRLP4 24
CNSTF4 1115684864
ASGNF4
line 2092
;2092:		light = 300;
ADDRLP4 36
CNSTF4 1133903872
ASGNF4
line 2093
;2093:		isSprite = qtrue;
ADDRLP4 40
CNSTI4 1
ASGNI4
line 2094
;2094:		duration = 1000;
ADDRLP4 48
CNSTI4 1000
ASGNI4
line 2095
;2095:		lightColor[0] = 1;
ADDRLP4 0
CNSTF4 1065353216
ASGNF4
line 2096
;2096:		lightColor[1] = 0.75;
ADDRLP4 0+4
CNSTF4 1061158912
ASGNF4
line 2097
;2097:		lightColor[2] = 0.0;
ADDRLP4 0+8
CNSTF4 0
ASGNF4
line 2098
;2098:		if (cg_oldRocket.integer == 0) {
ADDRGP4 cg_oldRocket+12
INDIRI4
CNSTI4 0
NEI4 $1102
line 2100
;2099:			// explosion sprite animation
;2100:			VectorMA( origin, 24, dir, sprOrg );
ADDRLP4 88
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 92
CNSTF4 1103101952
ASGNF4
ADDRLP4 96
ADDRFP4 16
INDIRP4
ASGNP4
ADDRLP4 52
ADDRLP4 88
INDIRP4
INDIRF4
ADDRLP4 92
INDIRF4
ADDRLP4 96
INDIRP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 100
CNSTI4 4
ASGNI4
ADDRLP4 52+4
ADDRLP4 88
INDIRP4
ADDRLP4 100
INDIRI4
ADDP4
INDIRF4
ADDRLP4 92
INDIRF4
ADDRLP4 96
INDIRP4
ADDRLP4 100
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 104
CNSTI4 8
ASGNI4
ADDRLP4 52+8
ADDRFP4 12
INDIRP4
ADDRLP4 104
INDIRI4
ADDP4
INDIRF4
CNSTF4 1103101952
ADDRFP4 16
INDIRP4
ADDRLP4 104
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 2101
;2101:			VectorScale( dir, 64, sprVel );
ADDRLP4 108
CNSTF4 1115684864
ASGNF4
ADDRLP4 112
ADDRFP4 16
INDIRP4
ASGNP4
ADDRLP4 64
ADDRLP4 108
INDIRF4
ADDRLP4 112
INDIRP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 64+4
ADDRLP4 108
INDIRF4
ADDRLP4 112
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 64+8
CNSTF4 1115684864
ADDRFP4 16
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ASGNF4
line 2103
;2102:
;2103:			CG_ParticleExplosion( "explode1", sprOrg, sprVel, 1400, 20, 30 );
ADDRGP4 $1139
ARGP4
ADDRLP4 52
ARGP4
ADDRLP4 64
ARGP4
CNSTI4 1400
ARGI4
CNSTI4 20
ARGI4
CNSTI4 30
ARGI4
ADDRGP4 CG_ParticleExplosion
CALLV
pop
line 2104
;2104:		}
line 2105
;2105:		break;
ADDRGP4 $1102
JUMPV
LABELV $1140
line 2107
;2106:	case WP_RAILGUN:
;2107:		mod = cgs.media.ringFlashModel;
ADDRLP4 20
ADDRGP4 cgs+153876+464
INDIRI4
ASGNI4
line 2108
;2108:		shader = cgs.media.railExplosionShader;
ADDRLP4 28
ADDRGP4 cgs+153876+476
INDIRI4
ASGNI4
line 2109
;2109:		sfx = cgs.media.sfx_plasmaexp;
ADDRLP4 16
ADDRGP4 cgs+153876+752
INDIRI4
ASGNI4
line 2110
;2110:		mark = cgs.media.energyMarkShader;
ADDRLP4 12
ADDRGP4 cgs+153876+408
INDIRI4
ASGNI4
line 2111
;2111:		radius = 24;
ADDRLP4 24
CNSTF4 1103101952
ASGNF4
line 2112
;2112:		break;
ADDRGP4 $1102
JUMPV
LABELV $1149
line 2114
;2113:	case WP_PLASMAGUN:
;2114:		mod = cgs.media.ringFlashModel;
ADDRLP4 20
ADDRGP4 cgs+153876+464
INDIRI4
ASGNI4
line 2115
;2115:		shader = cgs.media.plasmaExplosionShader;
ADDRLP4 28
ADDRGP4 cgs+153876+480
INDIRI4
ASGNI4
line 2116
;2116:		sfx = cgs.media.sfx_plasmaexp;
ADDRLP4 16
ADDRGP4 cgs+153876+752
INDIRI4
ASGNI4
line 2117
;2117:		mark = cgs.media.energyMarkShader;
ADDRLP4 12
ADDRGP4 cgs+153876+408
INDIRI4
ASGNI4
line 2118
;2118:		radius = 16;
ADDRLP4 24
CNSTF4 1098907648
ASGNF4
line 2119
;2119:		break;
ADDRGP4 $1102
JUMPV
LABELV $1158
line 2121
;2120:	case WP_TURRET:
;2121:		mod = cgs.media.ringFlashModel;
ADDRLP4 20
ADDRGP4 cgs+153876+464
INDIRI4
ASGNI4
line 2122
;2122:		shader = cgs.media.plasmaExplosionShader;
ADDRLP4 28
ADDRGP4 cgs+153876+480
INDIRI4
ASGNI4
line 2123
;2123:		sfx = cgs.media.sfx_plasmaexp;
ADDRLP4 16
ADDRGP4 cgs+153876+752
INDIRI4
ASGNI4
line 2124
;2124:		mark = cgs.media.energyMarkShader;
ADDRLP4 12
ADDRGP4 cgs+153876+408
INDIRI4
ASGNI4
line 2125
;2125:		if (cent->currentState.eFlags & EF_ALT_FIRING)
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 512
BANDI4
CNSTI4 0
EQI4 $1167
line 2126
;2126:		{
line 2127
;2127:			radius = 15;
ADDRLP4 24
CNSTF4 1097859072
ASGNF4
line 2128
;2128:		} 
ADDRGP4 $1102
JUMPV
LABELV $1167
line 2130
;2129:		else
;2130:		{
line 2131
;2131:			radius = 5;
ADDRLP4 24
CNSTF4 1084227584
ASGNF4
line 2132
;2132:		}
line 2134
;2133:
;2134:		break;
ADDRGP4 $1102
JUMPV
LABELV $1169
line 2136
;2135:	case WP_BFG:
;2136:		mod = cgs.media.dishFlashModel;
ADDRLP4 20
ADDRGP4 cgs+153876+468
INDIRI4
ASGNI4
line 2138
;2137:		//shader = cgs.media.bfgExplosionShader;
;2138:		shader = cgs.media.grenadeExplosionShader;
ADDRLP4 28
ADDRGP4 cgs+153876+492
INDIRI4
ASGNI4
line 2139
;2139:		sfx = cgs.media.sfx_devexp;
ADDRLP4 16
ADDRGP4 cgs+153876+748
INDIRI4
ASGNI4
line 2140
;2140:		mark = cgs.media.burnMarkShader;
ADDRLP4 12
ADDRGP4 cgs+153876+400
INDIRI4
ASGNI4
line 2143
;2141:
;2142:		//radius = 8;
;2143:		if (cent->currentState.eFlags & EF_ALT_FIRING)
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 512
BANDI4
CNSTI4 0
EQI4 $1178
line 2144
;2144:		{
line 2145
;2145:			radius = 350;
ADDRLP4 24
CNSTF4 1135542272
ASGNF4
line 2146
;2146:		} 
ADDRGP4 $1179
JUMPV
LABELV $1178
line 2148
;2147:		else
;2148:		{
line 2149
;2149:			radius = 150;
ADDRLP4 24
CNSTF4 1125515264
ASGNF4
line 2151
;2150:
;2151:		}
LABELV $1179
line 2153
;2152:		
;2153:		light = 300;
ADDRLP4 36
CNSTF4 1133903872
ASGNF4
line 2154
;2154:		isSprite = qtrue;
ADDRLP4 40
CNSTI4 1
ASGNI4
line 2155
;2155:		duration = 1500;
ADDRLP4 48
CNSTI4 1500
ASGNI4
line 2156
;2156:		lightColor[0] = 1;
ADDRLP4 0
CNSTF4 1065353216
ASGNF4
line 2157
;2157:		lightColor[1] = 0.75;
ADDRLP4 0+4
CNSTF4 1061158912
ASGNF4
line 2158
;2158:		lightColor[2] = 0.0;
ADDRLP4 0+8
CNSTF4 0
ASGNF4
line 2161
;2159:		//if (cg_oldRocket.integer == 0) {
;2160:			// explosion sprite animation
;2161:			VectorMA( origin, 24, dir, sprOrg );
ADDRLP4 88
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 92
CNSTF4 1103101952
ASGNF4
ADDRLP4 96
ADDRFP4 16
INDIRP4
ASGNP4
ADDRLP4 52
ADDRLP4 88
INDIRP4
INDIRF4
ADDRLP4 92
INDIRF4
ADDRLP4 96
INDIRP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 100
CNSTI4 4
ASGNI4
ADDRLP4 52+4
ADDRLP4 88
INDIRP4
ADDRLP4 100
INDIRI4
ADDP4
INDIRF4
ADDRLP4 92
INDIRF4
ADDRLP4 96
INDIRP4
ADDRLP4 100
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 104
CNSTI4 8
ASGNI4
ADDRLP4 52+8
ADDRFP4 12
INDIRP4
ADDRLP4 104
INDIRI4
ADDP4
INDIRF4
CNSTF4 1103101952
ADDRFP4 16
INDIRP4
ADDRLP4 104
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 2162
;2162:			VectorScale( dir, 64, sprVel );
ADDRLP4 108
CNSTF4 1115684864
ASGNF4
ADDRLP4 112
ADDRFP4 16
INDIRP4
ASGNP4
ADDRLP4 64
ADDRLP4 108
INDIRF4
ADDRLP4 112
INDIRP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 64+4
ADDRLP4 108
INDIRF4
ADDRLP4 112
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 64+8
CNSTF4 1115684864
ADDRFP4 16
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ASGNF4
line 2164
;2163:
;2164:			CG_ParticleExplosion( "explode1", sprOrg, sprVel, 2000, 20, 430 );
ADDRGP4 $1139
ARGP4
ADDRLP4 52
ARGP4
ADDRLP4 64
ARGP4
CNSTI4 2000
ARGI4
CNSTI4 20
ARGI4
CNSTI4 430
ARGI4
ADDRGP4 CG_ParticleExplosion
CALLV
pop
line 2167
;2165:		//}
;2166:		
;2167:		break;
ADDRGP4 $1102
JUMPV
LABELV $1186
line 2169
;2168:	case WP_SHOTGUN:
;2169:		mod = cgs.media.bulletFlashModel;
ADDRLP4 20
ADDRGP4 cgs+153876+460
INDIRI4
ASGNI4
line 2170
;2170:		shader = cgs.media.bulletExplosionShader;
ADDRLP4 28
ADDRGP4 cgs+153876+484
INDIRI4
ASGNI4
line 2171
;2171:		mark = cgs.media.bulletMarkShader;
ADDRLP4 12
ADDRGP4 cgs+153876+396
INDIRI4
ASGNI4
line 2172
;2172:		sfx = 0;
ADDRLP4 16
CNSTI4 0
ASGNI4
line 2173
;2173:		radius = 4;
ADDRLP4 24
CNSTF4 1082130432
ASGNF4
line 2174
;2174:		break;
ADDRGP4 $1102
JUMPV
LABELV $1193
line 2202
;2175:
;2176:#ifdef MISSIONPACK
;2177:	case WP_CHAINGUN:
;2178:		mod = cgs.media.bulletFlashModel;
;2179:		if( soundType == IMPACTSOUND_FLESH ) {
;2180:			sfx = cgs.media.sfx_chghitflesh;
;2181:		} else if( soundType == IMPACTSOUND_METAL ) {
;2182:			sfx = cgs.media.sfx_chghitmetal;
;2183:		} else {
;2184:			sfx = cgs.media.sfx_chghit;
;2185:		}
;2186:		mark = cgs.media.bulletMarkShader;
;2187:
;2188:		r = rand() & 3;
;2189:		if ( r < 2 ) {
;2190:			sfx = cgs.media.sfx_ric1;
;2191:		} else if ( r == 2 ) {
;2192:			sfx = cgs.media.sfx_ric2;
;2193:		} else {
;2194:			sfx = cgs.media.sfx_ric3;
;2195:		}
;2196:
;2197:		radius = 8;
;2198:		break;
;2199:#endif
;2200:
;2201:	case WP_MACHINEGUN:
;2202:		mod = cgs.media.bulletFlashModel;
ADDRLP4 20
ADDRGP4 cgs+153876+460
INDIRI4
ASGNI4
line 2203
;2203:		shader = cgs.media.bulletExplosionShader;
ADDRLP4 28
ADDRGP4 cgs+153876+484
INDIRI4
ASGNI4
line 2204
;2204:		mark = cgs.media.bulletMarkShader;
ADDRLP4 12
ADDRGP4 cgs+153876+396
INDIRI4
ASGNI4
line 2206
;2205:
;2206:		r = rand() & 3;
ADDRLP4 116
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 76
ADDRLP4 116
INDIRI4
CNSTI4 3
BANDI4
ASGNI4
line 2207
;2207:		if ( r == 0 ) {
ADDRLP4 76
INDIRI4
CNSTI4 0
NEI4 $1200
line 2208
;2208:			sfx = cgs.media.sfx_ric1;
ADDRLP4 16
ADDRGP4 cgs+153876+728
INDIRI4
ASGNI4
line 2209
;2209:		} else if ( r == 1 ) {
ADDRGP4 $1201
JUMPV
LABELV $1200
ADDRLP4 76
INDIRI4
CNSTI4 1
NEI4 $1204
line 2210
;2210:			sfx = cgs.media.sfx_ric2;
ADDRLP4 16
ADDRGP4 cgs+153876+732
INDIRI4
ASGNI4
line 2211
;2211:		} else {
ADDRGP4 $1205
JUMPV
LABELV $1204
line 2212
;2212:			sfx = cgs.media.sfx_ric3;
ADDRLP4 16
ADDRGP4 cgs+153876+736
INDIRI4
ASGNI4
line 2213
;2213:		}
LABELV $1205
LABELV $1201
line 2217
;2214:
;2215:		
;2216:		//radius = 8;
;2217:		if (cent->currentState.eFlags & EF_ALT_FIRING)
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 512
BANDI4
CNSTI4 0
EQI4 $1210
line 2218
;2218:		{
line 2219
;2219:			radius = 10;
ADDRLP4 24
CNSTF4 1092616192
ASGNF4
line 2220
;2220:		} 
ADDRGP4 $1102
JUMPV
LABELV $1210
line 2222
;2221:		else
;2222:		{
line 2223
;2223:			radius = 5;
ADDRLP4 24
CNSTF4 1084227584
ASGNF4
line 2225
;2224:
;2225:		}
line 2227
;2226:
;2227:		break;
LABELV $1102
line 2230
;2228:	}
;2229:
;2230:	if ( sfx ) {
ADDRLP4 16
INDIRI4
CNSTI4 0
EQI4 $1214
line 2232
;2231:		
;2232:		if (sfx == cgs.media.sfx_devexp)
ADDRLP4 16
INDIRI4
ADDRGP4 cgs+153876+748
INDIRI4
NEI4 $1216
line 2233
;2233:		{
line 2235
;2234:			
;2235:			trap_S_StartLocalSound(sfx, CHAN_AUTO);
ADDRLP4 16
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 2236
;2236:		} 
ADDRGP4 $1217
JUMPV
LABELV $1216
line 2238
;2237:		else 
;2238:		{
line 2239
;2239:			trap_S_StartSound( origin, ENTITYNUM_WORLD, CHAN_AUTO, sfx );
ADDRFP4 12
INDIRP4
ARGP4
CNSTI4 1022
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 2240
;2240:		}
LABELV $1217
line 2242
;2241:		
;2242:	}
LABELV $1214
line 2247
;2243:
;2244:	//
;2245:	// create the explosion
;2246:	//
;2247:	if ( mod ) {
ADDRLP4 20
INDIRI4
CNSTI4 0
EQI4 $1220
line 2248
;2248:		le = CG_MakeExplosion( origin, dir, 
ADDRFP4 12
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRLP4 20
INDIRI4
ARGI4
ADDRLP4 28
INDIRI4
ARGI4
ADDRLP4 48
INDIRI4
ARGI4
ADDRLP4 40
INDIRI4
ARGI4
ADDRLP4 88
ADDRGP4 CG_MakeExplosion
CALLP4
ASGNP4
ADDRLP4 44
ADDRLP4 88
INDIRP4
ASGNP4
line 2251
;2249:							   mod,	shader,
;2250:							   duration, isSprite );
;2251:		le->light = light;
ADDRLP4 44
INDIRP4
CNSTI4 128
ADDP4
ADDRLP4 36
INDIRF4
ASGNF4
line 2252
;2252:		VectorCopy( lightColor, le->lightColor );
ADDRLP4 44
INDIRP4
CNSTI4 132
ADDP4
ADDRLP4 0
INDIRB
ASGNB 12
line 2253
;2253:		if ( weapon == WP_RAILGUN ) {
ADDRFP4 4
INDIRI4
CNSTI4 7
NEI4 $1222
line 2255
;2254:			// colorize with client color
;2255:			VectorCopy( cgs.clientinfo[clientNum].color1, le->color );
ADDRLP4 44
INDIRP4
CNSTI4 108
ADDP4
CNSTI4 1732
ADDRFP4 8
INDIRI4
MULI4
ADDRGP4 cgs+40972+76
ADDP4
INDIRB
ASGNB 12
line 2256
;2256:		}
LABELV $1222
line 2257
;2257:	}
LABELV $1220
line 2262
;2258:
;2259:	//
;2260:	// impact mark
;2261:	//
;2262:	alphaFade = (mark == cgs.media.energyMarkShader);	// plasma fades alpha, all others fade color
ADDRLP4 12
INDIRI4
ADDRGP4 cgs+153876+408
INDIRI4
NEI4 $1229
ADDRLP4 88
CNSTI4 1
ASGNI4
ADDRGP4 $1230
JUMPV
LABELV $1229
ADDRLP4 88
CNSTI4 0
ASGNI4
LABELV $1230
ADDRLP4 32
ADDRLP4 88
INDIRI4
ASGNI4
line 2263
;2263:	if ( weapon == WP_RAILGUN ) {
ADDRFP4 4
INDIRI4
CNSTI4 7
NEI4 $1231
line 2267
;2264:		float	*color;
;2265:
;2266:		// colorize with client color
;2267:		color = cgs.clientinfo[clientNum].color2;
ADDRLP4 92
CNSTI4 1732
ADDRFP4 8
INDIRI4
MULI4
ADDRGP4 cgs+40972+88
ADDP4
ASGNP4
line 2268
;2268:		CG_ImpactMark( mark, origin, dir, random()*360, color[0],color[1], color[2],1, alphaFade, radius, qfalse );
ADDRLP4 96
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
ARGI4
ADDRFP4 12
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
CNSTF4 1135869952
ADDRLP4 96
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ARGF4
ADDRLP4 100
ADDRLP4 92
INDIRP4
ASGNP4
ADDRLP4 100
INDIRP4
INDIRF4
ARGF4
ADDRLP4 100
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 100
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
CNSTF4 1065353216
ARGF4
ADDRLP4 32
INDIRI4
ARGI4
ADDRLP4 24
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRGP4 CG_ImpactMark
CALLV
pop
line 2269
;2269:	} else {
ADDRGP4 $1232
JUMPV
LABELV $1231
line 2270
;2270:		CG_ImpactMark( mark, origin, dir, random()*360, 1,1,1,1, alphaFade, radius, qfalse );
ADDRLP4 92
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
ARGI4
ADDRFP4 12
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
CNSTF4 1135869952
ADDRLP4 92
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ARGF4
ADDRLP4 96
CNSTF4 1065353216
ASGNF4
ADDRLP4 96
INDIRF4
ARGF4
ADDRLP4 96
INDIRF4
ARGF4
ADDRLP4 96
INDIRF4
ARGF4
ADDRLP4 96
INDIRF4
ARGF4
ADDRLP4 32
INDIRI4
ARGI4
ADDRLP4 24
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRGP4 CG_ImpactMark
CALLV
pop
line 2271
;2271:	}
LABELV $1232
line 2275
;2272:
;2273:
;2274:
;2275:}
LABELV $1098
endproc CG_MissileHitWall 120 44
export CG_MissileHitPlayer
proc CG_MissileHitPlayer 4 24
line 2283
;2276:
;2277:
;2278:/*
;2279:=================
;2280:CG_MissileHitPlayer
;2281:=================
;2282:*/
;2283:void CG_MissileHitPlayer( int weapon, vec3_t origin, vec3_t dir, int entityNum ) {
line 2284
;2284:	CG_Bleed( origin, entityNum );
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 CG_Bleed
CALLV
pop
line 2288
;2285:
;2286:	// some weapons will make an explosion with the blood, while
;2287:	// others will just make the blood
;2288:	switch ( weapon ) {
ADDRLP4 0
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 4
EQI4 $1238
ADDRLP4 0
INDIRI4
CNSTI4 5
EQI4 $1238
ADDRGP4 $1237
JUMPV
LABELV $1238
line 2296
;2289:	case WP_GRENADE_LAUNCHER:
;2290:	case WP_ROCKET_LAUNCHER:
;2291:#ifdef MISSIONPACK
;2292:	case WP_NAILGUN:
;2293:	case WP_CHAINGUN:
;2294:	case WP_PROX_LAUNCHER:
;2295:#endif
;2296:		CG_MissileHitWall( NULL, weapon, 0, origin, dir, IMPACTSOUND_FLESH );
CNSTP4 0
ARGP4
ADDRFP4 0
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
CNSTI4 2
ARGI4
ADDRGP4 CG_MissileHitWall
CALLV
pop
line 2297
;2297:		break;
line 2299
;2298:	default:
;2299:		break;
LABELV $1237
line 2301
;2300:	}
;2301:}
LABELV $1235
endproc CG_MissileHitPlayer 4 24
proc CG_ShotgunPellet 136 28
line 2318
;2302:
;2303:
;2304:
;2305:/*
;2306:============================================================================
;2307:
;2308:SHOTGUN TRACING
;2309:
;2310:============================================================================
;2311:*/
;2312:
;2313:/*
;2314:================
;2315:CG_ShotgunPellet
;2316:================
;2317:*/
;2318:static void CG_ShotgunPellet( vec3_t start, vec3_t end, int skipNum ) {
line 2322
;2319:	trace_t		tr;
;2320:	int sourceContentType, destContentType;
;2321:
;2322:	CG_Trace( &tr, start, NULL, NULL, end, skipNum, MASK_SHOT );
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 64
CNSTP4 0
ASGNP4
ADDRLP4 64
INDIRP4
ARGP4
ADDRLP4 64
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
CNSTI4 100664321
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 2324
;2323:
;2324:	sourceContentType = trap_CM_PointContents( start, 0 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 68
ADDRGP4 trap_CM_PointContents
CALLI4
ASGNI4
ADDRLP4 56
ADDRLP4 68
INDIRI4
ASGNI4
line 2325
;2325:	destContentType = trap_CM_PointContents( tr.endpos, 0 );
ADDRLP4 0+12
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 72
ADDRGP4 trap_CM_PointContents
CALLI4
ASGNI4
ADDRLP4 60
ADDRLP4 72
INDIRI4
ASGNI4
line 2328
;2326:
;2327:	// FIXME: should probably move this cruft into CG_BubbleTrail
;2328:	if ( sourceContentType == destContentType ) {
ADDRLP4 56
INDIRI4
ADDRLP4 60
INDIRI4
NEI4 $1241
line 2329
;2329:		if ( sourceContentType & CONTENTS_WATER ) {
ADDRLP4 56
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $1242
line 2330
;2330:			CG_BubbleTrail( start, tr.endpos, 32 );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0+12
ARGP4
CNSTF4 1107296256
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 2331
;2331:		}
line 2332
;2332:	} else if ( sourceContentType & CONTENTS_WATER ) {
ADDRGP4 $1242
JUMPV
LABELV $1241
ADDRLP4 56
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $1246
line 2335
;2333:		trace_t trace;
;2334:
;2335:		trap_CM_BoxTrace( &trace, end, start, NULL, NULL, 0, CONTENTS_WATER );
ADDRLP4 76
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 132
CNSTP4 0
ASGNP4
ADDRLP4 132
INDIRP4
ARGP4
ADDRLP4 132
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 32
ARGI4
ADDRGP4 trap_CM_BoxTrace
CALLV
pop
line 2336
;2336:		CG_BubbleTrail( start, trace.endpos, 32 );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 76+12
ARGP4
CNSTF4 1107296256
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 2337
;2337:	} else if ( destContentType & CONTENTS_WATER ) {
ADDRGP4 $1247
JUMPV
LABELV $1246
ADDRLP4 60
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $1249
line 2340
;2338:		trace_t trace;
;2339:
;2340:		trap_CM_BoxTrace( &trace, start, end, NULL, NULL, 0, CONTENTS_WATER );
ADDRLP4 76
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 132
CNSTP4 0
ASGNP4
ADDRLP4 132
INDIRP4
ARGP4
ADDRLP4 132
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 32
ARGI4
ADDRGP4 trap_CM_BoxTrace
CALLV
pop
line 2341
;2341:		CG_BubbleTrail( tr.endpos, trace.endpos, 32 );
ADDRLP4 0+12
ARGP4
ADDRLP4 76+12
ARGP4
CNSTF4 1107296256
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 2342
;2342:	}
LABELV $1249
LABELV $1247
LABELV $1242
line 2344
;2343:
;2344:	if (  tr.surfaceFlags & SURF_NOIMPACT ) {
ADDRLP4 0+44
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $1253
line 2345
;2345:		return;
ADDRGP4 $1239
JUMPV
LABELV $1253
line 2348
;2346:	}
;2347:
;2348:	if ( cg_entities[tr.entityNum].currentState.eType == ET_PLAYER ) {
CNSTI4 740
ADDRLP4 0+52
INDIRI4
MULI4
ADDRGP4 cg_entities+4
ADDP4
INDIRI4
CNSTI4 1
NEI4 $1256
line 2349
;2349:		CG_MissileHitPlayer( WP_SHOTGUN, tr.endpos, tr.plane.normal, tr.entityNum );
CNSTI4 3
ARGI4
ADDRLP4 0+12
ARGP4
ADDRLP4 0+24
ARGP4
ADDRLP4 0+52
INDIRI4
ARGI4
ADDRGP4 CG_MissileHitPlayer
CALLV
pop
line 2350
;2350:	} else {
ADDRGP4 $1257
JUMPV
LABELV $1256
line 2351
;2351:		if ( tr.surfaceFlags & SURF_NOIMPACT ) {
ADDRLP4 0+44
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $1263
line 2353
;2352:			// SURF_NOIMPACT will not make a flame puff or a mark
;2353:			return;
ADDRGP4 $1239
JUMPV
LABELV $1263
line 2355
;2354:		}
;2355:		if ( tr.surfaceFlags & SURF_METALSTEPS ) {
ADDRLP4 0+44
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $1266
line 2356
;2356:			CG_MissileHitWall( NULL, WP_SHOTGUN, 0, tr.endpos, tr.plane.normal, IMPACTSOUND_METAL );
CNSTP4 0
ARGP4
CNSTI4 3
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 0+12
ARGP4
ADDRLP4 0+24
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 CG_MissileHitWall
CALLV
pop
line 2357
;2357:		} else {
ADDRGP4 $1267
JUMPV
LABELV $1266
line 2358
;2358:			CG_MissileHitWall( NULL, WP_SHOTGUN, 0, tr.endpos, tr.plane.normal, IMPACTSOUND_DEFAULT );
CNSTP4 0
ARGP4
CNSTI4 3
ARGI4
ADDRLP4 76
CNSTI4 0
ASGNI4
ADDRLP4 76
INDIRI4
ARGI4
ADDRLP4 0+12
ARGP4
ADDRLP4 0+24
ARGP4
ADDRLP4 76
INDIRI4
ARGI4
ADDRGP4 CG_MissileHitWall
CALLV
pop
line 2359
;2359:		}
LABELV $1267
line 2360
;2360:	}
LABELV $1257
line 2361
;2361:}
LABELV $1239
endproc CG_ShotgunPellet 136 28
export CG_ShotgunPattern
proc CG_ShotgunPattern 84 12
line 2373
;2362:
;2363:/*
;2364:================
;2365:CG_ShotgunPattern
;2366:
;2367:Perform the same traces the server did to locate the
;2368:hit splashes
;2369:================
;2370:*/
;2371://unlagged - attack prediction
;2372:// made this non-static for access from cg_unlagged.c
;2373:void CG_ShotgunPattern( vec3_t origin, vec3_t origin2, int seed, int otherEntNum ) {
line 2381
;2374:	int			i;
;2375:	float		r, u;
;2376:	vec3_t		end;
;2377:	vec3_t		forward, right, up;
;2378:
;2379:	// derive the right and up vectors from the forward vector, because
;2380:	// the client won't have any other information
;2381:	VectorNormalize2( origin2, forward );
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 20
ARGP4
ADDRGP4 VectorNormalize2
CALLF4
pop
line 2382
;2382:	PerpendicularVector( right, forward );
ADDRLP4 32
ARGP4
ADDRLP4 20
ARGP4
ADDRGP4 PerpendicularVector
CALLV
pop
line 2383
;2383:	CrossProduct( forward, right, up );
ADDRLP4 20
ARGP4
ADDRLP4 32
ARGP4
ADDRLP4 44
ARGP4
ADDRGP4 CrossProduct
CALLV
pop
line 2386
;2384:
;2385:	// generate the "random" spread pattern
;2386:	for ( i = 0 ; i < DEFAULT_SHOTGUN_COUNT ; i++ ) {
ADDRLP4 56
CNSTI4 0
ASGNI4
LABELV $1274
line 2387
;2387:		r = Q_crandom( &seed ) * DEFAULT_SHOTGUN_SPREAD * 16;
ADDRFP4 8
ARGP4
ADDRLP4 60
ADDRGP4 Q_crandom
CALLF4
ASGNF4
ADDRLP4 12
CNSTF4 1098907648
CNSTF4 1143930880
ADDRLP4 60
INDIRF4
MULF4
MULF4
ASGNF4
line 2388
;2388:		u = Q_crandom( &seed ) * DEFAULT_SHOTGUN_SPREAD * 16;
ADDRFP4 8
ARGP4
ADDRLP4 64
ADDRGP4 Q_crandom
CALLF4
ASGNF4
ADDRLP4 16
CNSTF4 1098907648
CNSTF4 1143930880
ADDRLP4 64
INDIRF4
MULF4
MULF4
ASGNF4
line 2389
;2389:		VectorMA( origin, 8192 * 16, forward, end);
ADDRLP4 68
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 72
CNSTF4 1207959552
ASGNF4
ADDRLP4 0
ADDRLP4 68
INDIRP4
INDIRF4
ADDRLP4 72
INDIRF4
ADDRLP4 20
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 68
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 72
INDIRF4
ADDRLP4 20+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1207959552
ADDRLP4 20+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 2390
;2390:		VectorMA (end, r, right, end);
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 32
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 32+4
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 32+8
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
line 2391
;2391:		VectorMA (end, u, up, end);
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 44
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 44+4
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 44+8
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
line 2393
;2392:
;2393:		CG_ShotgunPellet( origin, end, otherEntNum );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 CG_ShotgunPellet
CALLV
pop
line 2394
;2394:	}
LABELV $1275
line 2386
ADDRLP4 56
ADDRLP4 56
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 56
INDIRI4
CNSTI4 11
LTI4 $1274
line 2395
;2395:}
LABELV $1273
endproc CG_ShotgunPattern 84 12
export CG_ShotgunFire
proc CG_ShotgunFire 56 48
line 2402
;2396:
;2397:/*
;2398:==============
;2399:CG_ShotgunFire
;2400:==============
;2401:*/
;2402:void CG_ShotgunFire( entityState_t *es ) {
line 2406
;2403:	vec3_t	v;
;2404:	int		contents;
;2405:
;2406:	VectorSubtract( es->origin2, es->pos.trBase, v );
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 16
INDIRP4
CNSTI4 104
ADDP4
INDIRF4
ADDRLP4 16
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 16
INDIRP4
CNSTI4 108
ADDP4
INDIRF4
ADDRLP4 16
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0+8
ADDRLP4 20
INDIRP4
CNSTI4 112
ADDP4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
SUBF4
ASGNF4
line 2407
;2407:	VectorNormalize( v );
ADDRLP4 0
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 2408
;2408:	VectorScale( v, 32, v );
ADDRLP4 24
CNSTF4 1107296256
ASGNF4
ADDRLP4 0
ADDRLP4 24
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 24
INDIRF4
ADDRLP4 0+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+8
CNSTF4 1107296256
ADDRLP4 0+8
INDIRF4
MULF4
ASGNF4
line 2409
;2409:	VectorAdd( es->pos.trBase, v, v );
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 28
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 28
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 0+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 0+8
INDIRF4
ADDF4
ASGNF4
line 2410
;2410:	if ( cgs.glconfig.hardwareType != GLHW_RAGEPRO ) {
ADDRGP4 cgs+20100+11288
INDIRI4
CNSTI4 3
EQI4 $1305
line 2414
;2411:		// ragepro can't alpha fade, so don't even bother with smoke
;2412:		vec3_t			up;
;2413:
;2414:		contents = trap_CM_PointContents( es->pos.trBase, 0 );
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 44
ADDRGP4 trap_CM_PointContents
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 44
INDIRI4
ASGNI4
line 2415
;2415:		if ( !( contents & CONTENTS_WATER ) ) {
ADDRLP4 12
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
NEI4 $1309
line 2416
;2416:			VectorSet( up, 0, 0, 8 );
ADDRLP4 48
CNSTF4 0
ASGNF4
ADDRLP4 32
ADDRLP4 48
INDIRF4
ASGNF4
ADDRLP4 32+4
ADDRLP4 48
INDIRF4
ASGNF4
ADDRLP4 32+8
CNSTF4 1090519040
ASGNF4
line 2417
;2417:			CG_SmokePuff( v, up, 32, 1, 1, 1, 0.33f, 900, cg.time, 0, LEF_PUFF_DONT_SCALE, cgs.media.shotgunSmokePuffShader );
ADDRLP4 0
ARGP4
ADDRLP4 32
ARGP4
CNSTF4 1107296256
ARGF4
ADDRLP4 52
CNSTF4 1065353216
ASGNF4
ADDRLP4 52
INDIRF4
ARGF4
ADDRLP4 52
INDIRF4
ARGF4
ADDRLP4 52
INDIRF4
ARGF4
CNSTF4 1051260355
ARGF4
CNSTF4 1147207680
ARGF4
ADDRGP4 cg+109652
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 cgs+153876+304
INDIRI4
ARGI4
ADDRGP4 CG_SmokePuff
CALLP4
pop
line 2418
;2418:		}
LABELV $1309
line 2419
;2419:	}
LABELV $1305
line 2420
;2420:	CG_ShotgunPattern( es->pos.trBase, es->origin2, es->eventParm, es->otherEntityNum );
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 32
INDIRP4
CNSTI4 104
ADDP4
ARGP4
ADDRLP4 32
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ARGI4
ADDRLP4 32
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_ShotgunPattern
CALLV
pop
line 2421
;2421:}
LABELV $1294
endproc CG_ShotgunFire 56 48
export CG_Tracer
proc CG_Tracer 224 16
line 2437
;2422:
;2423:/*
;2424:============================================================================
;2425:
;2426:BULLETS
;2427:
;2428:============================================================================
;2429:*/
;2430:
;2431:
;2432:/*
;2433:===============
;2434:CG_Tracer
;2435:===============
;2436:*/
;2437:void CG_Tracer( vec3_t source, vec3_t dest ) {
line 2446
;2438:	vec3_t		forward, right;
;2439:	polyVert_t	verts[4];
;2440:	vec3_t		line;
;2441:	float		len, begin, end;
;2442:	vec3_t		start, finish;
;2443:	vec3_t		midpoint;
;2444:
;2445:	// tracer
;2446:	VectorSubtract( dest, source, forward );
ADDRLP4 180
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 184
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 108
ADDRLP4 180
INDIRP4
INDIRF4
ADDRLP4 184
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 188
CNSTI4 4
ASGNI4
ADDRLP4 108+4
ADDRLP4 180
INDIRP4
ADDRLP4 188
INDIRI4
ADDP4
INDIRF4
ADDRLP4 184
INDIRP4
ADDRLP4 188
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 192
CNSTI4 8
ASGNI4
ADDRLP4 108+8
ADDRFP4 4
INDIRP4
ADDRLP4 192
INDIRI4
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
ADDRLP4 192
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 2447
;2447:	len = VectorNormalize( forward );
ADDRLP4 108
ARGP4
ADDRLP4 196
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 164
ADDRLP4 196
INDIRF4
ASGNF4
line 2450
;2448:
;2449:	// start at least a little ways from the muzzle
;2450:	if ( len < 100 ) {
ADDRLP4 164
INDIRF4
CNSTF4 1120403456
GEF4 $1319
line 2451
;2451:		return;
ADDRGP4 $1316
JUMPV
LABELV $1319
line 2453
;2452:	}
;2453:	begin = 50 + random() * (len - 60);
ADDRLP4 200
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 160
ADDRLP4 200
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ADDRLP4 164
INDIRF4
CNSTF4 1114636288
SUBF4
MULF4
CNSTF4 1112014848
ADDF4
ASGNF4
line 2454
;2454:	end = begin + cg_tracerLength.value;
ADDRLP4 156
ADDRLP4 160
INDIRF4
ADDRGP4 cg_tracerLength+8
INDIRF4
ADDF4
ASGNF4
line 2455
;2455:	if ( end > len ) {
ADDRLP4 156
INDIRF4
ADDRLP4 164
INDIRF4
LEF4 $1322
line 2456
;2456:		end = len;
ADDRLP4 156
ADDRLP4 164
INDIRF4
ASGNF4
line 2457
;2457:	}
LABELV $1322
line 2458
;2458:	VectorMA( source, begin, forward, start );
ADDRLP4 204
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 120
ADDRLP4 204
INDIRP4
INDIRF4
ADDRLP4 108
INDIRF4
ADDRLP4 160
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 120+4
ADDRLP4 204
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 108+4
INDIRF4
ADDRLP4 160
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 120+8
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 108+8
INDIRF4
ADDRLP4 160
INDIRF4
MULF4
ADDF4
ASGNF4
line 2459
;2459:	VectorMA( source, end, forward, finish );
ADDRLP4 212
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 132
ADDRLP4 212
INDIRP4
INDIRF4
ADDRLP4 108
INDIRF4
ADDRLP4 156
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 132+4
ADDRLP4 212
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 108+4
INDIRF4
ADDRLP4 156
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 132+8
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 108+8
INDIRF4
ADDRLP4 156
INDIRF4
MULF4
ADDF4
ASGNF4
line 2461
;2460:
;2461:	line[0] = DotProduct( forward, cg.refdef.viewaxis[1] );
ADDRLP4 144
ADDRLP4 108
INDIRF4
ADDRGP4 cg+111104+36+12
INDIRF4
MULF4
ADDRLP4 108+4
INDIRF4
ADDRGP4 cg+111104+36+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 108+8
INDIRF4
ADDRGP4 cg+111104+36+12+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 2462
;2462:	line[1] = DotProduct( forward, cg.refdef.viewaxis[2] );
ADDRLP4 144+4
ADDRLP4 108
INDIRF4
ADDRGP4 cg+111104+36+24
INDIRF4
MULF4
ADDRLP4 108+4
INDIRF4
ADDRGP4 cg+111104+36+24+4
INDIRF4
MULF4
ADDF4
ADDRLP4 108+8
INDIRF4
ADDRGP4 cg+111104+36+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 2464
;2463:
;2464:	VectorScale( cg.refdef.viewaxis[1], line[1], right );
ADDRLP4 96
ADDRGP4 cg+111104+36+12
INDIRF4
ADDRLP4 144+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 96+4
ADDRGP4 cg+111104+36+12+4
INDIRF4
ADDRLP4 144+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 96+8
ADDRGP4 cg+111104+36+12+8
INDIRF4
ADDRLP4 144+4
INDIRF4
MULF4
ASGNF4
line 2465
;2465:	VectorMA( right, -line[0], cg.refdef.viewaxis[2], right );
ADDRLP4 220
ADDRLP4 144
INDIRF4
NEGF4
ASGNF4
ADDRLP4 96
ADDRLP4 96
INDIRF4
ADDRGP4 cg+111104+36+24
INDIRF4
ADDRLP4 220
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 96+4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg+111104+36+24+4
INDIRF4
ADDRLP4 220
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 96+8
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg+111104+36+24+8
INDIRF4
ADDRLP4 144
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 2466
;2466:	VectorNormalize( right );
ADDRLP4 96
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 2468
;2467:
;2468:	VectorMA( finish, cg_tracerWidth.value, right, verts[0].xyz );
ADDRLP4 0
ADDRLP4 132
INDIRF4
ADDRLP4 96
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 132+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 132+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 2469
;2469:	verts[0].st[0] = 0;
ADDRLP4 0+12
CNSTF4 0
ASGNF4
line 2470
;2470:	verts[0].st[1] = 1;
ADDRLP4 0+12+4
CNSTF4 1065353216
ASGNF4
line 2471
;2471:	verts[0].modulate[0] = 255;
ADDRLP4 0+20
CNSTU1 255
ASGNU1
line 2472
;2472:	verts[0].modulate[1] = 255;
ADDRLP4 0+20+1
CNSTU1 255
ASGNU1
line 2473
;2473:	verts[0].modulate[2] = 255;
ADDRLP4 0+20+2
CNSTU1 255
ASGNU1
line 2474
;2474:	verts[0].modulate[3] = 255;
ADDRLP4 0+20+3
CNSTU1 255
ASGNU1
line 2476
;2475:
;2476:	VectorMA( finish, -cg_tracerWidth.value, right, verts[1].xyz );
ADDRLP4 0+24
ADDRLP4 132
INDIRF4
ADDRLP4 96
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+24+4
ADDRLP4 132+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+24+8
ADDRLP4 132+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 2477
;2477:	verts[1].st[0] = 1;
ADDRLP4 0+24+12
CNSTF4 1065353216
ASGNF4
line 2478
;2478:	verts[1].st[1] = 0;
ADDRLP4 0+24+12+4
CNSTF4 0
ASGNF4
line 2479
;2479:	verts[1].modulate[0] = 255;
ADDRLP4 0+24+20
CNSTU1 255
ASGNU1
line 2480
;2480:	verts[1].modulate[1] = 255;
ADDRLP4 0+24+20+1
CNSTU1 255
ASGNU1
line 2481
;2481:	verts[1].modulate[2] = 255;
ADDRLP4 0+24+20+2
CNSTU1 255
ASGNU1
line 2482
;2482:	verts[1].modulate[3] = 255;
ADDRLP4 0+24+20+3
CNSTU1 255
ASGNU1
line 2484
;2483:
;2484:	VectorMA( start, -cg_tracerWidth.value, right, verts[2].xyz );
ADDRLP4 0+48
ADDRLP4 120
INDIRF4
ADDRLP4 96
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+48+4
ADDRLP4 120+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+48+8
ADDRLP4 120+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 2485
;2485:	verts[2].st[0] = 1;
ADDRLP4 0+48+12
CNSTF4 1065353216
ASGNF4
line 2486
;2486:	verts[2].st[1] = 1;
ADDRLP4 0+48+12+4
CNSTF4 1065353216
ASGNF4
line 2487
;2487:	verts[2].modulate[0] = 255;
ADDRLP4 0+48+20
CNSTU1 255
ASGNU1
line 2488
;2488:	verts[2].modulate[1] = 255;
ADDRLP4 0+48+20+1
CNSTU1 255
ASGNU1
line 2489
;2489:	verts[2].modulate[2] = 255;
ADDRLP4 0+48+20+2
CNSTU1 255
ASGNU1
line 2490
;2490:	verts[2].modulate[3] = 255;
ADDRLP4 0+48+20+3
CNSTU1 255
ASGNU1
line 2492
;2491:
;2492:	VectorMA( start, cg_tracerWidth.value, right, verts[3].xyz );
ADDRLP4 0+72
ADDRLP4 120
INDIRF4
ADDRLP4 96
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+72+4
ADDRLP4 120+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+72+8
ADDRLP4 120+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 2493
;2493:	verts[3].st[0] = 0;
ADDRLP4 0+72+12
CNSTF4 0
ASGNF4
line 2494
;2494:	verts[3].st[1] = 0;
ADDRLP4 0+72+12+4
CNSTF4 0
ASGNF4
line 2495
;2495:	verts[3].modulate[0] = 255;
ADDRLP4 0+72+20
CNSTU1 255
ASGNU1
line 2496
;2496:	verts[3].modulate[1] = 255;
ADDRLP4 0+72+20+1
CNSTU1 255
ASGNU1
line 2497
;2497:	verts[3].modulate[2] = 255;
ADDRLP4 0+72+20+2
CNSTU1 255
ASGNU1
line 2498
;2498:	verts[3].modulate[3] = 255;
ADDRLP4 0+72+20+3
CNSTU1 255
ASGNU1
line 2500
;2499:
;2500:	trap_R_AddPolyToScene( cgs.media.tracerShader, 4, verts );
ADDRGP4 cgs+153876+232
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddPolyToScene
CALLV
pop
line 2502
;2501:
;2502:	midpoint[0] = ( start[0] + finish[0] ) * 0.5;
ADDRLP4 168
CNSTF4 1056964608
ADDRLP4 120
INDIRF4
ADDRLP4 132
INDIRF4
ADDF4
MULF4
ASGNF4
line 2503
;2503:	midpoint[1] = ( start[1] + finish[1] ) * 0.5;
ADDRLP4 168+4
CNSTF4 1056964608
ADDRLP4 120+4
INDIRF4
ADDRLP4 132+4
INDIRF4
ADDF4
MULF4
ASGNF4
line 2504
;2504:	midpoint[2] = ( start[2] + finish[2] ) * 0.5;
ADDRLP4 168+8
CNSTF4 1056964608
ADDRLP4 120+8
INDIRF4
ADDRLP4 132+8
INDIRF4
ADDF4
MULF4
ASGNF4
line 2507
;2505:
;2506:	// add the tracer sound
;2507:	trap_S_StartSound( midpoint, ENTITYNUM_WORLD, CHAN_AUTO, cgs.media.tracerSound );
ADDRLP4 168
ARGP4
CNSTI4 1022
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 cgs+153876+588
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 2509
;2508:
;2509:}
LABELV $1316
endproc CG_Tracer 224 16
proc CG_CalcMuzzlePoint 40 16
line 2517
;2510:
;2511:
;2512:/*
;2513:======================
;2514:CG_CalcMuzzlePoint
;2515:======================
;2516:*/
;2517:static qboolean	CG_CalcMuzzlePoint( int entityNum, vec3_t muzzle ) {
line 2522
;2518:	vec3_t		forward;
;2519:	centity_t	*cent;
;2520:	int			anim;
;2521:
;2522:	if ( entityNum == cg.snap->ps.clientNum ) {
ADDRFP4 0
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
NEI4 $1504
line 2523
;2523:		VectorCopy( cg.snap->ps.origin, muzzle );
ADDRFP4 4
INDIRP4
ADDRGP4 cg+36
INDIRP4
CNSTI4 64
ADDP4
INDIRB
ASGNB 12
line 2524
;2524:		muzzle[2] += cg.snap->ps.viewheight;
ADDRLP4 20
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRF4
ADDRGP4 cg+36
INDIRP4
CNSTI4 208
ADDP4
INDIRI4
CVIF4 4
ADDF4
ASGNF4
line 2525
;2525:		AngleVectors( cg.snap->ps.viewangles, forward, NULL, NULL );
ADDRGP4 cg+36
INDIRP4
CNSTI4 196
ADDP4
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 24
CNSTP4 0
ASGNP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 2526
;2526:		VectorMA( muzzle, 14, forward, muzzle );
ADDRLP4 28
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
CNSTF4 1096810496
ADDRLP4 0
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 32
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRF4
CNSTF4 1096810496
ADDRLP4 0+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 36
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRF4
CNSTF4 1096810496
ADDRLP4 0+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 2527
;2527:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $1503
JUMPV
LABELV $1504
line 2530
;2528:	}
;2529:
;2530:	cent = &cg_entities[entityNum];
ADDRLP4 12
CNSTI4 740
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 2531
;2531:	if ( !cent->currentValid ) {
ADDRLP4 12
INDIRP4
CNSTI4 428
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1512
line 2532
;2532:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $1503
JUMPV
LABELV $1512
line 2535
;2533:	}
;2534:
;2535:	VectorCopy( cent->currentState.pos.trBase, muzzle );
ADDRFP4 4
INDIRP4
ADDRLP4 12
INDIRP4
CNSTI4 24
ADDP4
INDIRB
ASGNB 12
line 2537
;2536:
;2537:	AngleVectors( cent->currentState.apos.trBase, forward, NULL, NULL );
ADDRLP4 12
INDIRP4
CNSTI4 60
ADDP4
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 20
CNSTP4 0
ASGNP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 2538
;2538:	anim = cent->currentState.legsAnim & ~ANIM_TOGGLEBIT;
ADDRLP4 16
ADDRLP4 12
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
CNSTI4 -129
BANDI4
ASGNI4
line 2539
;2539:	if ( anim == LEGS_WALKCR || anim == LEGS_IDLECR ) {
ADDRLP4 16
INDIRI4
CNSTI4 13
EQI4 $1516
ADDRLP4 16
INDIRI4
CNSTI4 23
NEI4 $1514
LABELV $1516
line 2540
;2540:		muzzle[2] += CROUCH_VIEWHEIGHT;
ADDRLP4 28
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
CNSTF4 1094713344
ADDF4
ASGNF4
line 2541
;2541:	} else {
ADDRGP4 $1515
JUMPV
LABELV $1514
line 2542
;2542:		muzzle[2] += DEFAULT_VIEWHEIGHT;
ADDRLP4 28
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
CNSTF4 1104150528
ADDF4
ASGNF4
line 2543
;2543:	}
LABELV $1515
line 2545
;2544:
;2545:	VectorMA( muzzle, 14, forward, muzzle );
ADDRLP4 28
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
CNSTF4 1096810496
ADDRLP4 0
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 32
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRF4
CNSTF4 1096810496
ADDRLP4 0+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 36
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRF4
CNSTF4 1096810496
ADDRLP4 0+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 2547
;2546:
;2547:	return qtrue;
CNSTI4 1
RETI4
LABELV $1503
endproc CG_CalcMuzzlePoint 40 16
export CG_Bullet
proc CG_Bullet 96 28
line 2558
;2548:
;2549:}
;2550:
;2551:/*
;2552:======================
;2553:CG_Bullet
;2554:
;2555:Renders bullet effects.
;2556:======================
;2557:*/
;2558:void CG_Bullet( vec3_t end, int sourceEntityNum, vec3_t normal, qboolean flesh, int fleshEntityNum ) {
line 2565
;2559:	trace_t trace;
;2560:	int sourceContentType, destContentType;
;2561:	vec3_t		start;
;2562:
;2563:	// if the shooter is currently valid, calc a source point and possibly
;2564:	// do trail effects
;2565:	if ( sourceEntityNum >= 0 && cg_tracerChance.value > 0 ) {
ADDRFP4 4
INDIRI4
CNSTI4 0
LTI4 $1520
ADDRGP4 cg_tracerChance+8
INDIRF4
CNSTF4 0
LEF4 $1520
line 2566
;2566:		if ( CG_CalcMuzzlePoint( sourceEntityNum, start ) ) {
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 0
ARGP4
ADDRLP4 76
ADDRGP4 CG_CalcMuzzlePoint
CALLI4
ASGNI4
ADDRLP4 76
INDIRI4
CNSTI4 0
EQI4 $1523
line 2567
;2567:			sourceContentType = trap_CM_PointContents( start, 0 );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 80
ADDRGP4 trap_CM_PointContents
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 80
INDIRI4
ASGNI4
line 2568
;2568:			destContentType = trap_CM_PointContents( end, 0 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 84
ADDRGP4 trap_CM_PointContents
CALLI4
ASGNI4
ADDRLP4 16
ADDRLP4 84
INDIRI4
ASGNI4
line 2571
;2569:
;2570:			// do a complete bubble trail if necessary
;2571:			if ( ( sourceContentType == destContentType ) && ( sourceContentType & CONTENTS_WATER ) ) {
ADDRLP4 88
ADDRLP4 12
INDIRI4
ASGNI4
ADDRLP4 88
INDIRI4
ADDRLP4 16
INDIRI4
NEI4 $1525
ADDRLP4 88
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $1525
line 2572
;2572:				CG_BubbleTrail( start, end, 32 );
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
CNSTF4 1107296256
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 2573
;2573:			}
ADDRGP4 $1526
JUMPV
LABELV $1525
line 2575
;2574:			// bubble trail from water into air
;2575:			else if ( ( sourceContentType & CONTENTS_WATER ) ) {
ADDRLP4 12
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $1527
line 2576
;2576:				trap_CM_BoxTrace( &trace, end, start, NULL, NULL, 0, CONTENTS_WATER );
ADDRLP4 20
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 92
CNSTP4 0
ASGNP4
ADDRLP4 92
INDIRP4
ARGP4
ADDRLP4 92
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 32
ARGI4
ADDRGP4 trap_CM_BoxTrace
CALLV
pop
line 2577
;2577:				CG_BubbleTrail( start, trace.endpos, 32 );
ADDRLP4 0
ARGP4
ADDRLP4 20+12
ARGP4
CNSTF4 1107296256
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 2578
;2578:			}
ADDRGP4 $1528
JUMPV
LABELV $1527
line 2580
;2579:			// bubble trail from air into water
;2580:			else if ( ( destContentType & CONTENTS_WATER ) ) {
ADDRLP4 16
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $1530
line 2581
;2581:				trap_CM_BoxTrace( &trace, start, end, NULL, NULL, 0, CONTENTS_WATER );
ADDRLP4 20
ARGP4
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 92
CNSTP4 0
ASGNP4
ADDRLP4 92
INDIRP4
ARGP4
ADDRLP4 92
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 32
ARGI4
ADDRGP4 trap_CM_BoxTrace
CALLV
pop
line 2582
;2582:				CG_BubbleTrail( trace.endpos, end, 32 );
ADDRLP4 20+12
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
CNSTF4 1107296256
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 2583
;2583:			}
LABELV $1530
LABELV $1528
LABELV $1526
line 2586
;2584:
;2585:			// draw a tracer
;2586:			if ( random() < cg_tracerChance.value ) {
ADDRLP4 92
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 92
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ADDRGP4 cg_tracerChance+8
INDIRF4
GEF4 $1533
line 2587
;2587:				CG_Tracer( start, end );
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Tracer
CALLV
pop
line 2588
;2588:			}
LABELV $1533
line 2589
;2589:		}
LABELV $1523
line 2590
;2590:	}
LABELV $1520
line 2593
;2591:
;2592:	// impact splash and mark
;2593:	if ( flesh ) {
ADDRFP4 12
INDIRI4
CNSTI4 0
EQI4 $1536
line 2594
;2594:		CG_Bleed( end, fleshEntityNum );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 16
INDIRI4
ARGI4
ADDRGP4 CG_Bleed
CALLV
pop
line 2595
;2595:	} else {
ADDRGP4 $1537
JUMPV
LABELV $1536
line 2596
;2596:		CG_MissileHitWall( NULL, WP_MACHINEGUN, 0, end, normal, IMPACTSOUND_DEFAULT );
CNSTP4 0
ARGP4
CNSTI4 2
ARGI4
ADDRLP4 76
CNSTI4 0
ASGNI4
ADDRLP4 76
INDIRI4
ARGI4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 76
INDIRI4
ARGI4
ADDRGP4 CG_MissileHitWall
CALLV
pop
line 2597
;2597:	}
LABELV $1537
line 2599
;2598:
;2599:}
LABELV $1519
endproc CG_Bullet 96 28
export CG_ScannerOn_f
proc CG_ScannerOn_f 0 0
line 2608
;2600:
;2601:// Shafe - Trep Radar Functions Below
;2602:    /*
;2603:    =====================
;2604:    CG_ScannerOn_f - turns on the scanner
;2605:    =====================
;2606:    */
;2607:    void CG_ScannerOn_f( void )
;2608:    {
line 2610
;2609:        // This is now a toggle	
;2610:			cg.scanner = 1;
ADDRGP4 cg+157964
CNSTI4 1
ASGNI4
line 2614
;2611:		
;2612:
;2613:		
;2614:    }
LABELV $1538
endproc CG_ScannerOn_f 0 0
export CG_ScannerOff_f
proc CG_ScannerOff_f 0 0
line 2622
;2615:
;2616:    /*
;2617:    =====================
;2618:    CG_ScannerOff_f - turns off the scanner
;2619:    =====================
;2620:    */
;2621:    void CG_ScannerOff_f( void )
;2622:    {
line 2624
;2623:
;2624:			cg.scanner = 0;
ADDRGP4 cg+157964
CNSTI4 0
ASGNI4
line 2626
;2625:		
;2626:    } 
LABELV $1540
endproc CG_ScannerOff_f 0 0
import CG_DrawScanner
import CG_NewParticleArea
import initparticles
import CG_ParticleExplosion
import CG_ParticleMisc
import CG_ParticleDust
import CG_ParticleSparks
import CG_ParticleBulletDebris
import CG_ParticleSnowFlurry
import CG_AddParticleShrapnel
import CG_ParticleSmoke
import CG_ParticleSnow
import CG_AddParticles
import CG_ClearParticles
import trap_GetEntityToken
import trap_getCameraInfo
import trap_startCamera
import trap_loadCamera
import trap_SnapVector
import trap_CIN_SetExtents
import trap_CIN_DrawCinematic
import trap_CIN_RunCinematic
import trap_CIN_StopCinematic
import trap_CIN_PlayCinematic
import trap_Key_GetKey
import trap_Key_SetCatcher
import trap_Key_GetCatcher
import trap_Key_IsDown
import trap_R_RegisterFont
import trap_MemoryRemaining
import testPrintFloat
import testPrintInt
import trap_SetUserCmdValue
import trap_GetUserCmd
import trap_GetCurrentCmdNumber
import trap_GetServerCommand
import trap_GetSnapshot
import trap_GetCurrentSnapshotNumber
import trap_GetGameState
import trap_GetGlconfig
import trap_R_RemapShader
import trap_R_LerpTag
import trap_R_ModelBounds
import trap_R_DrawStretchPic
import trap_R_SetColor
import trap_R_RenderScene
import trap_R_LightForPoint
import trap_R_AddLightToScene
import trap_R_AddPolysToScene
import trap_R_AddPolyToScene
import trap_R_AddRefEntityToScene
import trap_R_ClearScene
import trap_R_RegisterShaderNoMip
import trap_R_RegisterShader
import trap_R_RegisterSkin
import trap_R_RegisterModel
import trap_R_LoadWorldMap
import trap_S_StopBackgroundTrack
import trap_S_StartBackgroundTrack
import trap_S_RegisterSound
import trap_S_Respatialize
import trap_S_UpdateEntityPosition
import trap_S_AddRealLoopingSound
import trap_S_AddLoopingSound
import trap_S_ClearLoopingSounds
import trap_S_StartLocalSound
import trap_S_StopLoopingSound
import trap_S_StartSound
import trap_CM_MarkFragments
import trap_CM_TransformedBoxTrace
import trap_CM_BoxTrace
import trap_CM_TransformedPointContents
import trap_CM_PointContents
import trap_CM_TempBoxModel
import trap_CM_InlineModel
import trap_CM_NumInlineModels
import trap_CM_LoadMap
import trap_UpdateScreen
import trap_SendClientCommand
import trap_AddCommand
import trap_SendConsoleCommand
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_Cvar_VariableStringBuffer
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_Milliseconds
import trap_Error
import trap_Print
import CG_PlayerSprites
import CG_CheckChangedPredictableEvents
import CG_TransitionPlayerState
import CG_Respawn
import CG_PlayBufferedVoiceChats
import CG_VoiceChatLocal
import CG_ShaderStateChanged
import CG_LoadVoiceChats
import CG_SetConfigValues
import CG_ParseServerinfo
import CG_ExecuteNewServerCommands
import CG_InitConsoleCommands
import CG_ConsoleCommand
import CG_DrawOldTourneyScoreboard
import CG_DrawOldScoreboard
import CG_DrawInformation
import CG_LoadingClient
import CG_LoadingItem
import CG_LoadingString
import CG_TransitionEntity
import CG_ProcessSnapshots
import CG_MakeExplosion
import CG_Bleed
import CG_BigExplode
import CG_GibPlayerHeadshot
import CG_BreakGlass
import CG_GibPlayer
import CG_ScorePlum
import CG_SpawnEffect
import CG_BubbleTrail
import CG_SmokePuff
import CG_AddLocalEntities
import CG_AllocLocalEntity
import CG_InitLocalEntities
import CG_ImpactMark
import CG_AddMarks
import CG_InitMarkPolys
import CG_PositionRotatedEntityOnTag
import CG_PositionEntityOnTag
import CG_AdjustPositionForMover
import CG_Beam
import CG_AddPacketEntities
import CG_SetEntitySoundPosition
import CG_PainEvent
import CG_EntityEvent
import CG_PlaceString
import CG_CheckEvents
import CG_LoadDeferredPlayers
import CG_PredictPlayerState
import CG_Trace
import CG_PointContents
import CG_BuildSolidList
import CG_CustomSound
import CG_NewClientInfo
import CG_AddRefEntityWithPowerups
import CG_ResetPlayerEntity
import CG_Player
import CG_StatusHandle
import CG_OtherTeamHasFlag
import CG_YourTeamHasFlag
import CG_GameTypeString
import CG_CheckOrderPending
import CG_Text_PaintChar
import CG_Draw3DModel
import CG_GetKillerText
import CG_GetGameStatusText
import CG_GetTeamColor
import CG_InitTeamChat
import CG_SetPrintString
import CG_ShowResponseHead
import CG_RunMenuScript
import CG_OwnerDrawVisible
import CG_GetValue
import CG_SelectNextPlayer
import CG_SelectPrevPlayer
import CG_Text_Height
import CG_Text_Width
import CG_Text_Paint
import CG_OwnerDraw
import CG_DrawTeamBackground
import CG_DrawFlagModel
import CG_DrawActive
import CG_DrawHead
import CG_CenterPrint
import CG_AddLagometerSnapshotInfo
import CG_AddLagometerFrameInfo
import teamChat2
import teamChat1
import systemChat
import drawTeamOverlayModificationCount
import numSortedTeamPlayers
import sortedTeamPlayers
import CG_DrawTopBottom
import CG_DrawSides
import CG_DrawRect
import UI_DrawProportionalString
import CG_GetColorForHealth
import CG_ColorForHealth
import CG_TileClear
import CG_TeamColor
import CG_FadeColor
import CG_DrawStrlen
import CG_DrawSmallStringColor
import CG_DrawSmallString
import CG_DrawBigStringColor
import CG_DrawBigString
import CG_DrawStringExt
import CG_DrawString
import CG_DrawPic
import CG_FillRect
import CG_AdjustFrom640
import CG_DrawActiveFrame
import CG_AddBufferedSound
import CG_ZoomUp_f
import CG_ZoomDown_f
import CG_TestModelPrevSkin_f
import CG_TestModelNextSkin_f
import CG_TestModelPrevFrame_f
import CG_TestModelNextFrame_f
import CG_TestGun_f
import CG_TestModel_f
import CG_BuildSpectatorString
import CG_GetSelectedScore
import CG_SetScoreSelection
import CG_RankRunFrame
import CG_EventHandling
import CG_MouseEvent
import CG_KeyEvent
import CG_LoadMenus
import CG_LastAttacker
import CG_CrosshairPlayer
import CG_UpdateCvars
import CG_StartMusic
import CG_Error
import CG_Printf
import CG_Argv
import CG_ConfigString
import CG_Cvar_ClampInt
import CG_AddBoundingBox
import CG_PredictWeaponEffects
import cg_playerOrigins
import cg_RedMC
import cg_BlueMC
import cg_GameMode
import cg_plOut
import cg_latentCmds
import cg_latentSnaps
import cl_timeNudge
import cg_optimizePrediction
import cg_projectileNudge
import sv_fps
import cg_cmdTimeNudge
import cg_drawBBox
import cg_debugDelag
import cg_delag
import cg_trueLightning
import cg_oldPlasma
import cg_oldRocket
import cg_oldRail
import cg_noProjectileTrail
import cg_noTaunt
import cg_bigFont
import cg_smallFont
import cg_cameraMode
import cg_timescale
import cg_timescaleFadeSpeed
import cg_timescaleFadeEnd
import cg_cameraOrbitDelay
import cg_cameraOrbit
import pmove_msec
import pmove_fixed
import cg_scorePlum
import cg_noVoiceText
import cg_noVoiceChats
import cg_teamChatsOnly
import cg_drawFriend
import cg_deferPlayers
import cg_predictItems
import cg_blood
import cg_paused
import cg_buildScript
import cg_forceModel
import cg_stats
import cg_teamChatHeight
import cg_teamChatTime
import cg_synchronousClients
import cg_drawAttacker
import cg_lagometer
import cg_stereoSeparation
import cg_thirdPerson
import cg_thirdPersonAngle
import cg_thirdPersonRange
import cg_zoomFov
import cg_fov
import cg_simpleItems
import cg_ignore
import cg_autoswitch
import cg_tracerLength
import cg_tracerWidth
import cg_tracerChance
import cg_viewsize
import cg_drawGun
import cg_gun_z
import cg_gun_y
import cg_gun_x
import cg_gun_frame
import cg_brassTime
import cg_addMarks
import cg_footsteps
import cg_showmiss
import cg_noPlayerAnims
import cg_nopredict
import cg_errorDecay
import cg_railTrailTime
import cg_debugEvents
import cg_debugPosition
import cg_debugAnim
import cg_animSpeed
import cg_draw2D
import cg_drawStatus
import cg_crosshairHealth
import cg_crosshairSize
import cg_crosshairY
import cg_crosshairX
import cg_teamOverlayUserinfo
import cg_drawTeamOverlay
import cg_drawRewards
import cg_drawCrosshairNames
import cg_drawCrosshair
import cg_drawAmmoWarning
import cg_drawIcons
import cg_draw3dIcons
import cg_drawSnapshot
import cg_drawFPS
import cg_drawTimer
import cg_gibs
import cg_shadows
import cg_swingSpeed
import cg_bobroll
import cg_bobpitch
import cg_bobup
import cg_runroll
import cg_runpitch
import cg_centertime
import cg_markPolys
import cg_items
import cg_weapons
import cg_entities
import cg
import cgs
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import Max_Ammo
import BG_CanItemBeGrabbed
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import Com_Printf
import Com_Error
import Info_NextPair
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_RemoveKey_big
import Info_RemoveKey
import Info_ValueForKey
import va
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import SnapVectorTowards
import tonextint
import init_tonextint
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Com_Memcpy
import Com_Memset
import Hunk_Alloc
import FloatSwap
import LongSwap
import ShortSwap
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import sscanf
import vsprintf
import _atoi
import atoi
import _atof
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $1139
byte 1 101
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 100
byte 1 101
byte 1 49
byte 1 0
align 1
LABELV $1056
byte 1 67
byte 1 71
byte 1 95
byte 1 70
byte 1 105
byte 1 114
byte 1 101
byte 1 87
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 58
byte 1 32
byte 1 101
byte 1 110
byte 1 116
byte 1 45
byte 1 62
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 32
byte 1 62
byte 1 61
byte 1 32
byte 1 87
byte 1 80
byte 1 95
byte 1 78
byte 1 85
byte 1 77
byte 1 95
byte 1 87
byte 1 69
byte 1 65
byte 1 80
byte 1 79
byte 1 78
byte 1 83
byte 1 0
align 1
LABELV $805
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 102
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 0
align 1
LABELV $768
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 98
byte 1 97
byte 1 114
byte 1 114
byte 1 101
byte 1 108
byte 1 0
align 1
LABELV $758
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $554
byte 1 67
byte 1 71
byte 1 95
byte 1 82
byte 1 101
byte 1 103
byte 1 105
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 73
byte 1 116
byte 1 101
byte 1 109
byte 1 86
byte 1 105
byte 1 115
byte 1 117
byte 1 97
byte 1 108
byte 1 115
byte 1 58
byte 1 32
byte 1 105
byte 1 116
byte 1 101
byte 1 109
byte 1 78
byte 1 117
byte 1 109
byte 1 32
byte 1 37
byte 1 100
byte 1 32
byte 1 111
byte 1 117
byte 1 116
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 114
byte 1 97
byte 1 110
byte 1 103
byte 1 101
byte 1 32
byte 1 91
byte 1 48
byte 1 45
byte 1 37
byte 1 100
byte 1 93
byte 1 0
align 1
LABELV $547
byte 1 98
byte 1 102
byte 1 103
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $544
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 98
byte 1 102
byte 1 103
byte 1 47
byte 1 98
byte 1 102
byte 1 103
byte 1 95
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $543
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 98
byte 1 102
byte 1 103
byte 1 47
byte 1 98
byte 1 102
byte 1 103
byte 1 95
byte 1 104
byte 1 117
byte 1 109
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $541
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 67
byte 1 111
byte 1 114
byte 1 101
byte 1 0
align 1
LABELV $536
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $533
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 103
byte 1 102
byte 1 49
byte 1 97
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $532
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 114
byte 1 103
byte 1 95
byte 1 104
byte 1 117
byte 1 109
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $530
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 68
byte 1 105
byte 1 115
byte 1 99
byte 1 0
align 1
LABELV $527
byte 1 112
byte 1 108
byte 1 97
byte 1 115
byte 1 109
byte 1 97
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $524
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 115
byte 1 109
byte 1 97
byte 1 47
byte 1 104
byte 1 121
byte 1 112
byte 1 114
byte 1 98
byte 1 102
byte 1 49
byte 1 97
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $523
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 104
byte 1 105
byte 1 116
byte 1 115
byte 1 47
byte 1 100
byte 1 105
byte 1 115
byte 1 99
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $521
byte 1 103
byte 1 114
byte 1 101
byte 1 110
byte 1 97
byte 1 100
byte 1 101
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $518
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 103
byte 1 114
byte 1 101
byte 1 110
byte 1 97
byte 1 100
byte 1 101
byte 1 47
byte 1 103
byte 1 114
byte 1 101
byte 1 110
byte 1 108
byte 1 102
byte 1 49
byte 1 97
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $517
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 97
byte 1 109
byte 1 109
byte 1 111
byte 1 47
byte 1 103
byte 1 114
byte 1 101
byte 1 110
byte 1 97
byte 1 100
byte 1 101
byte 1 49
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $513
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 116
byte 1 47
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 108
byte 1 102
byte 1 49
byte 1 97
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $512
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 116
byte 1 47
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 102
byte 1 108
byte 1 121
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $510
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 115
byte 1 104
byte 1 111
byte 1 116
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 115
byte 1 115
byte 1 104
byte 1 111
byte 1 116
byte 1 102
byte 1 49
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $505
byte 1 98
byte 1 117
byte 1 108
byte 1 108
byte 1 101
byte 1 116
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $502
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 105
byte 1 110
byte 1 101
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 103
byte 1 102
byte 1 52
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $501
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 105
byte 1 110
byte 1 101
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 103
byte 1 102
byte 1 51
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $500
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 105
byte 1 110
byte 1 101
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 103
byte 1 102
byte 1 50
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $499
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 105
byte 1 110
byte 1 101
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 103
byte 1 102
byte 1 49
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $497
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 101
byte 1 108
byte 1 101
byte 1 101
byte 1 47
byte 1 102
byte 1 115
byte 1 116
byte 1 104
byte 1 117
byte 1 109
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $496
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 97
byte 1 109
byte 1 109
byte 1 111
byte 1 47
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 116
byte 1 47
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 116
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $494
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 66
byte 1 111
byte 1 108
byte 1 116
byte 1 78
byte 1 101
byte 1 119
byte 1 0
align 1
LABELV $491
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 116
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $488
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 102
byte 1 108
byte 1 97
byte 1 109
byte 1 101
byte 1 116
byte 1 104
byte 1 114
byte 1 111
byte 1 119
byte 1 101
byte 1 114
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 105
byte 1 109
byte 1 112
byte 1 99
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $487
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 115
byte 1 109
byte 1 97
byte 1 47
byte 1 108
byte 1 97
byte 1 115
byte 1 102
byte 1 108
byte 1 121
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $485
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 101
byte 1 108
byte 1 101
byte 1 101
byte 1 47
byte 1 102
byte 1 115
byte 1 116
byte 1 97
byte 1 116
byte 1 99
byte 1 107
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $484
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 101
byte 1 108
byte 1 101
byte 1 101
byte 1 47
byte 1 102
byte 1 115
byte 1 116
byte 1 114
byte 1 117
byte 1 110
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $480
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 50
byte 1 47
byte 1 115
byte 1 104
byte 1 111
byte 1 116
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 115
byte 1 104
byte 1 111
byte 1 116
byte 1 103
byte 1 117
byte 1 110
byte 1 95
byte 1 104
byte 1 97
byte 1 110
byte 1 100
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $477
byte 1 95
byte 1 104
byte 1 97
byte 1 110
byte 1 100
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $476
byte 1 95
byte 1 98
byte 1 97
byte 1 114
byte 1 114
byte 1 101
byte 1 108
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $475
byte 1 95
byte 1 102
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $461
byte 1 67
byte 1 111
byte 1 117
byte 1 108
byte 1 100
byte 1 110
byte 1 39
byte 1 116
byte 1 32
byte 1 102
byte 1 105
byte 1 110
byte 1 100
byte 1 32
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 32
byte 1 37
byte 1 105
byte 1 0
