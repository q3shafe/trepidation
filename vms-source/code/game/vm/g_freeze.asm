export is_spectator
code
proc is_spectator 0 0
file "../g_freeze.c"
line 7
;1:#include "g_local.h"
;2:
;3:int	check_time;
;4:static vec3_t	redflag;
;5:static vec3_t	blueflag;
;6:
;7:qboolean is_spectator( gclient_t *client ) {
line 8
;8:	if ( client == NULL ) return qfalse;
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $56
CNSTI4 0
RETI4
ADDRGP4 $55
JUMPV
LABELV $56
line 9
;9:	if ( client->sess.sessionTeam == TEAM_SPECTATOR ) return qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 2568
ADDP4
INDIRI4
CNSTI4 3
NEI4 $58
CNSTI4 1
RETI4
ADDRGP4 $55
JUMPV
LABELV $58
line 10
;10:	if ( client->ps.persistant[ PERS_TEAM ] == TEAM_SPECTATOR ) return qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 260
ADDP4
INDIRI4
CNSTI4 3
NEI4 $60
CNSTI4 1
RETI4
ADDRGP4 $55
JUMPV
LABELV $60
line 11
;11:	if ( client->sess.spectatorState == SPECTATOR_FOLLOW ) return qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 2576
ADDP4
INDIRI4
CNSTI4 2
NEI4 $62
CNSTI4 1
RETI4
ADDRGP4 $55
JUMPV
LABELV $62
line 12
;12:	return qfalse;
CNSTI4 0
RETI4
LABELV $55
endproc is_spectator 0 0
export Set_spectator
proc Set_spectator 28 8
line 15
;13:}
;14:
;15:qboolean Set_spectator( gentity_t *ent ) {
line 18
;16:	vec3_t	origin, angles;
;17:
;18:	if ( level.intermissiontime ) return qfalse;
ADDRGP4 level+9140
INDIRI4
CNSTI4 0
EQI4 $65
CNSTI4 0
RETI4
ADDRGP4 $64
JUMPV
LABELV $65
line 19
;19:	if ( !ent->freezeState ) return qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 924
ADDP4
INDIRI4
CNSTI4 0
NEI4 $68
CNSTI4 0
RETI4
ADDRGP4 $64
JUMPV
LABELV $68
line 20
;20:	if ( ent->r.svFlags & SVF_BOT ) {
ADDRFP4 0
INDIRP4
CNSTI4 432
ADDP4
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
EQI4 $70
line 21
;21:		ent->client->respawnTime = INT_MAX;
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
CNSTI4 2684
ADDP4
CNSTI4 2147483647
ASGNI4
line 22
;22:	} else if ( !is_spectator( ent->client ) ) {
ADDRGP4 $71
JUMPV
LABELV $70
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
ARGP4
ADDRLP4 24
ADDRGP4 is_spectator
CALLI4
ASGNI4
ADDRLP4 24
INDIRI4
CNSTI4 0
NEI4 $72
line 23
;23:		VectorCopy( ent->r.currentOrigin, origin );
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 496
ADDP4
INDIRB
ASGNB 12
line 24
;24:		angles[ YAW ] = ent->client->ps.stats[ STAT_DEAD_YAW ];
ADDRLP4 0+4
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
CNSTI4 200
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 25
;25:		angles[ PITCH ] = 0;
ADDRLP4 0
CNSTF4 0
ASGNF4
line 26
;26:		angles[ ROLL ] = 0;
ADDRLP4 0+8
CNSTF4 0
ASGNF4
line 27
;27:		ClientSpawn( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 ClientSpawn
CALLV
pop
line 28
;28:		VectorCopy( origin, ent->client->ps.origin );
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 12
INDIRB
ASGNB 12
line 29
;29:		SetClientViewAngle( ent, angles );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 SetClientViewAngle
CALLV
pop
line 30
;30:		ent->client->ps.persistant[ PERS_TEAM ] = TEAM_SPECTATOR;
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
CNSTI4 260
ADDP4
CNSTI4 3
ASGNI4
line 31
;31:		ent->client->sess.spectatorTime = level.time;
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
CNSTI4 2572
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 32
;32:		ent->client->sess.spectatorState = SPECTATOR_FREE;
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
CNSTI4 2576
ADDP4
CNSTI4 1
ASGNI4
line 33
;33:		ent->client->sess.spectatorClient = 0;
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
CNSTI4 2580
ADDP4
CNSTI4 0
ASGNI4
line 35
;34:
;35:		trap_UnlinkEntity( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_UnlinkEntity
CALLV
pop
line 36
;36:	}
LABELV $72
LABELV $71
line 37
;37:	return qtrue;
CNSTI4 1
RETI4
LABELV $64
endproc Set_spectator 28 8
export Set_Client
proc Set_Client 16 8
line 40
;38:}
;39:
;40:qboolean Set_Client( gentity_t *ent ) {
line 44
;41:	gclient_t	*cl;
;42:	gentity_t	*tent;
;43:
;44:	cl = ent->client;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
ASGNP4
line 45
;45:	if ( cl->ps.pm_type != PM_SPECTATOR ) return qfalse;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 2
EQI4 $78
CNSTI4 0
RETI4
ADDRGP4 $77
JUMPV
LABELV $78
line 46
;46:	if ( cl->sess.sessionTeam == TEAM_SPECTATOR ) return qfalse;
ADDRLP4 0
INDIRP4
CNSTI4 2568
ADDP4
INDIRI4
CNSTI4 3
NEI4 $80
CNSTI4 0
RETI4
ADDRGP4 $77
JUMPV
LABELV $80
line 47
;47:	if ( ent->freezeState ) return qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 924
ADDP4
INDIRI4
CNSTI4 0
EQI4 $82
CNSTI4 0
RETI4
ADDRGP4 $77
JUMPV
LABELV $82
line 49
;48:
;49:	cl->sess.spectatorState = SPECTATOR_NOT;
ADDRLP4 0
INDIRP4
CNSTI4 2576
ADDP4
CNSTI4 0
ASGNI4
line 50
;50:	cl->sess.spectatorClient = 0;
ADDRLP4 0
INDIRP4
CNSTI4 2580
ADDP4
CNSTI4 0
ASGNI4
line 51
;51:	ClientSpawn( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 ClientSpawn
CALLV
pop
line 53
;52:
;53:	tent = G_TempEntity( cl->ps.origin, EV_PLAYER_TELEPORT_IN );
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ARGP4
CNSTI4 43
ARGI4
ADDRLP4 8
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 8
INDIRP4
ASGNP4
line 54
;54:	tent->s.clientNum = ent->s.clientNum;
ADDRLP4 12
CNSTI4 168
ASGNI4
ADDRLP4 4
INDIRP4
ADDRLP4 12
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 12
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 56
;55:
;56:	return qtrue;
CNSTI4 1
RETI4
LABELV $77
endproc Set_Client 16 8
export respawnSpectator
proc respawnSpectator 4 8
line 59
;57:}
;58:
;59:void respawnSpectator( gentity_t *ent ) {
line 62
;60:	gclient_t	*client;
;61:
;62:	client = ent->client;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
ASGNP4
line 63
;63:	if ( ent->freezeState ) return;
ADDRFP4 0
INDIRP4
CNSTI4 924
ADDP4
INDIRI4
CNSTI4 0
EQI4 $85
ADDRGP4 $84
JUMPV
LABELV $85
line 64
;64:	if ( client->sess.sessionTeam == TEAM_SPECTATOR ) return;
ADDRLP4 0
INDIRP4
CNSTI4 2568
ADDP4
INDIRI4
CNSTI4 3
NEI4 $87
ADDRGP4 $84
JUMPV
LABELV $87
line 66
;65:
;66:	if ( level.time > client->respawnTime ) {
ADDRGP4 level+32
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 2684
ADDP4
INDIRI4
LEI4 $89
line 67
;67:		if ( g_forcerespawn.integer > 0 && level.time - client->respawnTime > g_forcerespawn.integer * 1000 ) {
ADDRGP4 g_forcerespawn+12
INDIRI4
CNSTI4 0
LEI4 $92
ADDRGP4 level+32
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 2684
ADDP4
INDIRI4
SUBI4
CNSTI4 1000
ADDRGP4 g_forcerespawn+12
INDIRI4
MULI4
LEI4 $92
line 68
;68:			Cmd_FollowCycle_f( ent, 1 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 Cmd_FollowCycle_f
CALLV
pop
line 69
;69:		}
LABELV $92
line 70
;70:	}
LABELV $89
line 71
;71:}
LABELV $84
endproc respawnSpectator 4 8
export Persistant_spectator
proc Persistant_spectator 80 0
line 73
;72:
;73:void Persistant_spectator( gentity_t *ent, gclient_t *cl ) {
line 78
;74:	int	i;
;75:	int	persistant[ MAX_PERSISTANT ];
;76:	int	savedPing;
;77:
;78:	savedPing = ent->client->ps.ping;
ADDRLP4 68
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
CNSTI4 452
ADDP4
INDIRI4
ASGNI4
line 79
;79:	for ( i = 0; i < MAX_PERSISTANT; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $98
line 80
;80:		persistant[ i ] = ent->client->ps.persistant[ i ];
ADDRLP4 72
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 72
INDIRI4
ADDRLP4 4
ADDP4
ADDRLP4 72
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
CNSTI4 248
ADDP4
ADDP4
INDIRI4
ASGNI4
line 81
;81:	}
LABELV $99
line 79
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $98
line 82
;82:	ent->client->ps = cl->ps;
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 468
line 83
;83:	ent->client->ps.ping = savedPing;
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
CNSTI4 452
ADDP4
ADDRLP4 68
INDIRI4
ASGNI4
line 84
;84:	for ( i = 0; i < MAX_PERSISTANT; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $102
line 85
;85:		switch ( i ) {
ADDRLP4 0
INDIRI4
CNSTI4 1
EQI4 $103
ADDRLP4 0
INDIRI4
CNSTI4 3
EQI4 $103
ADDRLP4 0
INDIRI4
CNSTI4 6
EQI4 $103
ADDRGP4 $106
JUMPV
line 89
;86:		case PERS_HITS:
;87:		case PERS_TEAM:
;88:		case PERS_ATTACKER:
;89:			continue;
LABELV $106
line 91
;90:		}
;91:		ent->client->ps.persistant[ i ] = persistant[ i ];
ADDRLP4 76
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 76
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
CNSTI4 248
ADDP4
ADDP4
ADDRLP4 76
INDIRI4
ADDRLP4 4
ADDP4
INDIRI4
ASGNI4
line 92
;92:	}
LABELV $103
line 84
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $102
line 93
;93:}
LABELV $97
endproc Persistant_spectator 80 0
proc FollowClient 4 4
line 95
;94:
;95:static void FollowClient( gentity_t *ent, gentity_t *other ) {
line 96
;96:	if ( ent->target_ent == other ) return;
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRP4
CVPU4 4
ADDRFP4 4
INDIRP4
CVPU4 4
NEU4 $110
ADDRGP4 $109
JUMPV
LABELV $110
line 97
;97:	if ( is_spectator( ent->target_ent->client ) ) {
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
ARGP4
ADDRLP4 0
ADDRGP4 is_spectator
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $112
line 98
;98:		ent->target_ent->client->sess.spectatorState = SPECTATOR_FOLLOW;
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
CNSTI4 2576
ADDP4
CNSTI4 2
ASGNI4
line 99
;99:		ent->target_ent->client->sess.spectatorClient = other->s.number;
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
CNSTI4 2580
ADDP4
ADDRFP4 4
INDIRP4
INDIRI4
ASGNI4
line 100
;100:	}
LABELV $112
line 101
;101:}
LABELV $109
endproc FollowClient 4 4
proc player_free 8 4
line 103
;102:
;103:static void player_free( gentity_t *ent ) {
line 104
;104:	if ( !ent || !ent->inuse ) return;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $117
ADDRLP4 0
INDIRP4
CNSTI4 528
ADDP4
INDIRI4
CNSTI4 0
NEI4 $115
LABELV $117
ADDRGP4 $114
JUMPV
LABELV $115
line 105
;105:	if ( !ent->freezeState ) return;
ADDRFP4 0
INDIRP4
CNSTI4 924
ADDP4
INDIRI4
CNSTI4 0
NEI4 $118
ADDRGP4 $114
JUMPV
LABELV $118
line 106
;106:	ent->freezeState = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 924
ADDP4
CNSTI4 0
ASGNI4
line 107
;107:	ent->client->respawnTime = level.time + 1700;
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
CNSTI4 2684
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 1700
ADDI4
ASGNI4
line 108
;108:	if ( ent->client->sess.spectatorState == SPECTATOR_FOLLOW ) {
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
CNSTI4 2576
ADDP4
INDIRI4
CNSTI4 2
NEI4 $121
line 109
;109:		StopFollowing( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 StopFollowing
CALLV
pop
line 110
;110:		ent->client->ps.pm_flags |= PMF_TIME_KNOCKBACK;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 64
BORI4
ASGNI4
line 111
;111:		ent->client->ps.pm_time = 100;
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
CNSTI4 16
ADDP4
CNSTI4 100
ASGNI4
line 112
;112:	}
LABELV $121
line 113
;113:	ent->client->inactivityTime = level.time + g_inactivity.integer * 1000;
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
CNSTI4 2688
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 1000
ADDRGP4 g_inactivity+12
INDIRI4
MULI4
ADDI4
ASGNI4
line 114
;114:}
LABELV $114
endproc player_free 8 4
export Body_free
proc Body_free 12 8
line 116
;115:
;116:void Body_free( gentity_t *self ) {
line 120
;117:	int	i;
;118:	gentity_t	*ent;
;119:
;120:	if ( self->freezeState ) {
ADDRFP4 0
INDIRP4
CNSTI4 924
ADDP4
INDIRI4
CNSTI4 0
EQI4 $126
line 121
;121:		player_free( self->target_ent );
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRP4
ARGP4
ADDRGP4 player_free
CALLV
pop
line 122
;122:	}
LABELV $126
line 123
;123:	if ( self->s.eFlags & EF_KAMIKAZE ) {
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 544
BANDI4
CNSTI4 0
EQI4 $128
line 124
;124:		for ( i = 0; i < MAX_GENTITIES; i++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $130
line 125
;125:			ent = &g_entities[ i ];
ADDRLP4 0
CNSTI4 932
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 126
;126:			if ( !ent->inuse ) continue;
ADDRLP4 0
INDIRP4
CNSTI4 528
ADDP4
INDIRI4
CNSTI4 0
NEI4 $134
ADDRGP4 $131
JUMPV
LABELV $134
line 127
;127:			if ( ent->activator != self ) continue;
ADDRLP4 0
INDIRP4
CNSTI4 796
ADDP4
INDIRP4
CVPU4 4
ADDRFP4 0
INDIRP4
CVPU4 4
EQU4 $136
ADDRGP4 $131
JUMPV
LABELV $136
line 128
;128:			if ( strcmp( ent->classname, "kamikaze timer" ) ) continue;
ADDRLP4 0
INDIRP4
CNSTI4 532
ADDP4
INDIRP4
ARGP4
ADDRGP4 $140
ARGP4
ADDRLP4 8
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
EQI4 $138
ADDRGP4 $131
JUMPV
LABELV $138
line 129
;129:			G_FreeEntity( ent );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 G_FreeEntity
CALLV
pop
line 130
;130:			break;
ADDRGP4 $132
JUMPV
LABELV $131
line 124
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 1024
LTI4 $130
LABELV $132
line 132
;131:		}
;132:	}
LABELV $128
line 133
;133:	self->s.powerups = 0;
ADDRFP4 0
INDIRP4
CNSTI4 188
ADDP4
CNSTI4 0
ASGNI4
line 134
;134:	G_FreeEntity( self );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_FreeEntity
CALLV
pop
line 135
;135:}
LABELV $125
endproc Body_free 12 8
proc Body_Explode 84 32
line 137
;136:
;137:static void Body_Explode( gentity_t *self ) {
line 142
;138:	int	i;
;139:	gentity_t	*e, *tent;
;140:	vec3_t	point;
;141:
;142:	for ( i = 0; i < g_maxclients.integer; i++ ) {
ADDRLP4 16
CNSTI4 0
ASGNI4
ADDRGP4 $145
JUMPV
LABELV $142
line 143
;143:		e = g_entities + i;
ADDRLP4 0
CNSTI4 932
ADDRLP4 16
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 144
;144:		if ( !e->inuse ) continue;
ADDRLP4 0
INDIRP4
CNSTI4 528
ADDP4
INDIRI4
CNSTI4 0
NEI4 $147
ADDRGP4 $143
JUMPV
LABELV $147
line 145
;145:		if ( e->health < 1 ) continue;
ADDRLP4 0
INDIRP4
CNSTI4 756
ADDP4
INDIRI4
CNSTI4 1
GEI4 $149
ADDRGP4 $143
JUMPV
LABELV $149
line 146
;146:		if ( e->client->sess.sessionTeam != self->spawnflags ) continue;
ADDRLP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
CNSTI4 2568
ADDP4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 536
ADDP4
INDIRI4
EQI4 $151
ADDRGP4 $143
JUMPV
LABELV $151
line 147
;147:		VectorSubtract( self->s.pos.trBase, e->s.pos.trBase, point );
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
CNSTI4 24
ASGNI4
ADDRLP4 4
ADDRLP4 24
INDIRP4
ADDRLP4 28
INDIRI4
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
ADDRLP4 28
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 36
CNSTI4 28
ASGNI4
ADDRLP4 4+4
ADDRLP4 24
INDIRP4
ADDRLP4 36
INDIRI4
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
ADDRLP4 36
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 40
CNSTI4 32
ASGNI4
ADDRLP4 4+8
ADDRFP4 0
INDIRP4
ADDRLP4 40
INDIRI4
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
ADDRLP4 40
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 148
;148:		if ( VectorLength( point ) > 100 ) continue;
ADDRLP4 4
ARGP4
ADDRLP4 44
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 44
INDIRF4
CNSTF4 1120403456
LEF4 $155
ADDRGP4 $143
JUMPV
LABELV $155
line 149
;149:		if ( is_spectator( e->client ) ) continue;
ADDRLP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
ARGP4
ADDRLP4 48
ADDRGP4 is_spectator
CALLI4
ASGNI4
ADDRLP4 48
INDIRI4
CNSTI4 0
EQI4 $157
ADDRGP4 $143
JUMPV
LABELV $157
line 150
;150:		if ( !self->count ) {
ADDRFP4 0
INDIRP4
CNSTI4 784
ADDP4
INDIRI4
CNSTI4 0
NEI4 $159
line 151
;151:			if ( g_dmflags.integer & 1024 || g_gametype.integer == GT_CTF ) {
ADDRGP4 g_dmflags+12
INDIRI4
CNSTI4 1024
BANDI4
CNSTI4 0
NEI4 $165
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 4
NEI4 $161
LABELV $165
line 152
;152:				self->count = level.time + 2000;
ADDRFP4 0
INDIRP4
CNSTI4 784
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 2000
ADDI4
ASGNI4
line 153
;153:			} else {
ADDRGP4 $162
JUMPV
LABELV $161
line 154
;154:				self->count = level.time + 3000;
ADDRFP4 0
INDIRP4
CNSTI4 784
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 3000
ADDI4
ASGNI4
line 155
;155:			}
LABELV $162
line 156
;156:			G_Sound( self, CHAN_AUTO, self->noise_index );
ADDRLP4 52
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 52
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 52
INDIRP4
CNSTI4 816
ADDP4
INDIRI4
ARGI4
ADDRGP4 G_Sound
CALLV
pop
line 158
;157:
;158:			self->activator = e;
ADDRFP4 0
INDIRP4
CNSTI4 796
ADDP4
ADDRLP4 0
INDIRP4
ASGNP4
line 159
;159:		} else if ( self->count < level.time ) {
ADDRGP4 $141
JUMPV
LABELV $159
ADDRFP4 0
INDIRP4
CNSTI4 784
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
GEI4 $141
line 160
;160:			if ( self->activator == e ) {
ADDRFP4 0
INDIRP4
CNSTI4 796
ADDP4
INDIRP4
CVPU4 4
ADDRLP4 0
INDIRP4
CVPU4 4
NEU4 $171
line 161
;161:			} else if ( !self->activator->inuse ) {
ADDRGP4 $172
JUMPV
LABELV $171
ADDRFP4 0
INDIRP4
CNSTI4 796
ADDP4
INDIRP4
CNSTI4 528
ADDP4
INDIRI4
CNSTI4 0
NEI4 $173
line 162
;162:			} else if ( self->activator->health < 1 ) {
ADDRGP4 $174
JUMPV
LABELV $173
ADDRFP4 0
INDIRP4
CNSTI4 796
ADDP4
INDIRP4
CNSTI4 756
ADDP4
INDIRI4
CNSTI4 1
GEI4 $175
line 163
;163:			} else {
ADDRGP4 $176
JUMPV
LABELV $175
line 164
;164:				VectorSubtract( self->s.pos.trBase, self->activator->s.pos.trBase, point );
ADDRLP4 52
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 56
CNSTI4 24
ASGNI4
ADDRLP4 60
ADDRLP4 52
INDIRP4
CNSTI4 796
ADDP4
ASGNP4
ADDRLP4 4
ADDRLP4 52
INDIRP4
ADDRLP4 56
INDIRI4
ADDP4
INDIRF4
ADDRLP4 60
INDIRP4
INDIRP4
ADDRLP4 56
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 64
CNSTI4 28
ASGNI4
ADDRLP4 4+4
ADDRLP4 52
INDIRP4
ADDRLP4 64
INDIRI4
ADDP4
INDIRF4
ADDRLP4 60
INDIRP4
INDIRP4
ADDRLP4 64
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 68
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 72
CNSTI4 32
ASGNI4
ADDRLP4 4+8
ADDRLP4 68
INDIRP4
ADDRLP4 72
INDIRI4
ADDP4
INDIRF4
ADDRLP4 68
INDIRP4
CNSTI4 796
ADDP4
INDIRP4
ADDRLP4 72
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 165
;165:				if ( VectorLength( point ) > 100 ) {
ADDRLP4 4
ARGP4
ADDRLP4 76
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 76
INDIRF4
CNSTF4 1120403456
LEF4 $179
line 166
;166:				} else if ( is_spectator( self->activator->client ) ) {
ADDRGP4 $180
JUMPV
LABELV $179
ADDRFP4 0
INDIRP4
CNSTI4 796
ADDP4
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
ARGP4
ADDRLP4 80
ADDRGP4 is_spectator
CALLI4
ASGNI4
ADDRLP4 80
INDIRI4
CNSTI4 0
EQI4 $181
line 167
;167:				} else {
ADDRGP4 $182
JUMPV
LABELV $181
line 168
;168:					e = self->activator;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 796
ADDP4
INDIRP4
ASGNP4
line 169
;169:				}
LABELV $182
LABELV $180
line 170
;170:			}
LABELV $176
LABELV $174
LABELV $172
line 172
;171:
;172:			tent = G_TempEntity( self->target_ent->r.currentOrigin, EV_OBITUARY );
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRP4
CNSTI4 496
ADDP4
ARGP4
CNSTI4 62
ARGI4
ADDRLP4 52
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 20
ADDRLP4 52
INDIRP4
ASGNP4
line 173
;173:			tent->s.eventParm = MOD_UNKNOWN;
ADDRLP4 20
INDIRP4
CNSTI4 184
ADDP4
CNSTI4 0
ASGNI4
line 174
;174:			tent->s.otherEntityNum = self->target_ent->s.number;
ADDRLP4 20
INDIRP4
CNSTI4 140
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRP4
INDIRI4
ASGNI4
line 175
;175:			tent->s.otherEntityNum2 = e->s.number;
ADDRLP4 20
INDIRP4
CNSTI4 144
ADDP4
ADDRLP4 0
INDIRP4
INDIRI4
ASGNI4
line 176
;176:			tent->r.svFlags = SVF_BROADCAST;
ADDRLP4 20
INDIRP4
CNSTI4 432
ADDP4
CNSTI4 32
ASGNI4
line 178
;177:
;178:			G_LogPrintf( "Kill: %i %i %i: %s killed %s by %s\n", e->s.number, self->target_ent->s.number, MOD_UNKNOWN, e->client->pers.netname, self->target_ent->client->pers.netname, "MOD_UNKNOWN" );
ADDRGP4 $183
ARGP4
ADDRLP4 0
INDIRP4
INDIRI4
ARGI4
ADDRLP4 60
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRP4
ASGNP4
ADDRLP4 60
INDIRP4
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 64
CNSTI4 524
ASGNI4
ADDRLP4 68
CNSTI4 512
ASGNI4
ADDRLP4 0
INDIRP4
ADDRLP4 64
INDIRI4
ADDP4
INDIRP4
ADDRLP4 68
INDIRI4
ADDP4
ARGP4
ADDRLP4 60
INDIRP4
ADDRLP4 64
INDIRI4
ADDP4
INDIRP4
ADDRLP4 68
INDIRI4
ADDP4
ARGP4
ADDRGP4 $184
ARGP4
ADDRGP4 G_LogPrintf
CALLV
pop
line 179
;179:			AddScore( e, self->s.pos.trBase, 1 );
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 AddScore
CALLV
pop
line 181
;180:
;181:			e->client->sess.wins++;
ADDRLP4 72
ADDRLP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
CNSTI4 2584
ADDP4
ASGNP4
ADDRLP4 72
INDIRP4
ADDRLP4 72
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 182
;182:			G_Damage( self, NULL, NULL, NULL, NULL, 100000, DAMAGE_NO_PROTECTION, MOD_TELEFRAG );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 76
CNSTP4 0
ASGNP4
ADDRLP4 76
INDIRP4
ARGP4
ADDRLP4 76
INDIRP4
ARGP4
ADDRLP4 80
CNSTP4 0
ASGNP4
ADDRLP4 80
INDIRP4
ARGP4
ADDRLP4 80
INDIRP4
ARGP4
CNSTI4 100000
ARGI4
CNSTI4 8
ARGI4
CNSTI4 18
ARGI4
ADDRGP4 G_Damage
CALLV
pop
line 183
;183:		}
line 184
;184:		return;
ADDRGP4 $141
JUMPV
LABELV $143
line 142
ADDRLP4 16
ADDRLP4 16
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $145
ADDRLP4 16
INDIRI4
ADDRGP4 g_maxclients+12
INDIRI4
LTI4 $142
line 186
;185:	}
;186:	self->count = 0;
ADDRFP4 0
INDIRP4
CNSTI4 784
ADDP4
CNSTI4 0
ASGNI4
line 187
;187:}
LABELV $141
endproc Body_Explode 84 32
proc Body_WorldEffects 4196 32
line 189
;188:
;189:static void Body_WorldEffects( gentity_t *self ) {
line 198
;190:	vec3_t	point;
;191:	int	contents;
;192:	int	i, num;
;193:	int	touch[ MAX_GENTITIES ];
;194:	gentity_t	*hit;
;195:	vec3_t	mins, maxs;
;196:	int	previous_waterlevel;
;197:
;198:	VectorCopy( self->r.currentOrigin, point );
ADDRLP4 4136
ADDRFP4 0
INDIRP4
CNSTI4 496
ADDP4
INDIRB
ASGNB 12
line 199
;199:	point[ 2 ] -= 23;
ADDRLP4 4136+8
ADDRLP4 4136+8
INDIRF4
CNSTF4 1102577664
SUBF4
ASGNF4
line 201
;200:
;201:	contents = trap_PointContents( point, -1 );
ADDRLP4 4136
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 4152
ADDRGP4 trap_PointContents
CALLI4
ASGNI4
ADDRLP4 4108
ADDRLP4 4152
INDIRI4
ASGNI4
line 202
;202:	if ( contents & ( CONTENTS_LAVA | CONTENTS_SLIME ) ) {
ADDRLP4 4108
INDIRI4
CNSTI4 24
BANDI4
CNSTI4 0
EQI4 $187
line 203
;203:		if ( level.time - self->timestamp > 5000 ) {
ADDRGP4 level+32
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 648
ADDP4
INDIRI4
SUBI4
CNSTI4 5000
LEI4 $185
line 204
;204:			G_Damage( self, NULL, NULL, NULL, NULL, 100000, DAMAGE_NO_PROTECTION, MOD_TELEFRAG );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4156
CNSTP4 0
ASGNP4
ADDRLP4 4156
INDIRP4
ARGP4
ADDRLP4 4156
INDIRP4
ARGP4
ADDRLP4 4160
CNSTP4 0
ASGNP4
ADDRLP4 4160
INDIRP4
ARGP4
ADDRLP4 4160
INDIRP4
ARGP4
CNSTI4 100000
ARGI4
CNSTI4 8
ARGI4
CNSTI4 18
ARGI4
ADDRGP4 G_Damage
CALLV
pop
line 205
;205:		}
line 206
;206:		return;
ADDRGP4 $185
JUMPV
LABELV $187
line 208
;207:	}
;208:	if ( self->s.pos.trType == TR_STATIONARY && contents & CONTENTS_NODROP ) {
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 0
NEI4 $192
ADDRLP4 4108
INDIRI4
CVIU4 4
CNSTU4 2147483648
BANDU4
CNSTU4 0
EQU4 $192
line 209
;209:		if ( level.time - self->timestamp > 5000 ) {
ADDRGP4 level+32
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 648
ADDP4
INDIRI4
SUBI4
CNSTI4 5000
LEI4 $185
line 210
;210:			Body_free( self );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 Body_free
CALLV
pop
line 211
;211:		}
line 212
;212:		return;
ADDRGP4 $185
JUMPV
LABELV $192
line 215
;213:	}
;214:
;215:	previous_waterlevel = self->waterlevel;
ADDRLP4 4148
ADDRFP4 0
INDIRP4
CNSTI4 812
ADDP4
INDIRI4
ASGNI4
line 216
;216:	self->waterlevel = 0;
ADDRFP4 0
INDIRP4
CNSTI4 812
ADDP4
CNSTI4 0
ASGNI4
line 217
;217:	if ( contents & MASK_WATER ) {
ADDRLP4 4108
INDIRI4
CNSTI4 56
BANDI4
CNSTI4 0
EQI4 $197
line 218
;218:		self->waterlevel = 3;
ADDRFP4 0
INDIRP4
CNSTI4 812
ADDP4
CNSTI4 3
ASGNI4
line 219
;219:	}
LABELV $197
line 220
;220:	self->watertype = contents;
ADDRFP4 0
INDIRP4
CNSTI4 808
ADDP4
ADDRLP4 4108
INDIRI4
ASGNI4
line 221
;221:	if ( !previous_waterlevel && self->waterlevel ) {
ADDRLP4 4156
CNSTI4 0
ASGNI4
ADDRLP4 4148
INDIRI4
ADDRLP4 4156
INDIRI4
NEI4 $199
ADDRFP4 0
INDIRP4
CNSTI4 812
ADDP4
INDIRI4
ADDRLP4 4156
INDIRI4
EQI4 $199
line 222
;222:		G_AddEvent( self, EV_WATER_TOUCH, 0 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 15
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 223
;223:	}
LABELV $199
line 224
;224:	if ( previous_waterlevel && !self->waterlevel ) {
ADDRLP4 4160
CNSTI4 0
ASGNI4
ADDRLP4 4148
INDIRI4
ADDRLP4 4160
INDIRI4
EQI4 $201
ADDRFP4 0
INDIRP4
CNSTI4 812
ADDP4
INDIRI4
ADDRLP4 4160
INDIRI4
NEI4 $201
line 225
;225:		G_AddEvent( self, EV_WATER_LEAVE, 0 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 16
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 226
;226:	}
LABELV $201
line 228
;227:
;228:	VectorAdd( self->r.currentOrigin, self->r.mins, mins );
ADDRLP4 4164
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4112
ADDRLP4 4164
INDIRP4
CNSTI4 496
ADDP4
INDIRF4
ADDRLP4 4164
INDIRP4
CNSTI4 444
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 4112+4
ADDRLP4 4164
INDIRP4
CNSTI4 500
ADDP4
INDIRF4
ADDRLP4 4164
INDIRP4
CNSTI4 448
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 4168
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4112+8
ADDRLP4 4168
INDIRP4
CNSTI4 504
ADDP4
INDIRF4
ADDRLP4 4168
INDIRP4
CNSTI4 452
ADDP4
INDIRF4
ADDF4
ASGNF4
line 229
;229:	VectorAdd( self->r.currentOrigin, self->r.maxs, maxs );
ADDRLP4 4172
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4124
ADDRLP4 4172
INDIRP4
CNSTI4 496
ADDP4
INDIRF4
ADDRLP4 4172
INDIRP4
CNSTI4 456
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 4124+4
ADDRLP4 4172
INDIRP4
CNSTI4 500
ADDP4
INDIRF4
ADDRLP4 4172
INDIRP4
CNSTI4 460
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 4176
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4124+8
ADDRLP4 4176
INDIRP4
CNSTI4 504
ADDP4
INDIRF4
ADDRLP4 4176
INDIRP4
CNSTI4 464
ADDP4
INDIRF4
ADDF4
ASGNF4
line 230
;230:	num = trap_EntitiesInBox( mins, maxs, touch, MAX_GENTITIES );
ADDRLP4 4112
ARGP4
ADDRLP4 4124
ARGP4
ADDRLP4 12
ARGP4
CNSTI4 1024
ARGI4
ADDRLP4 4180
ADDRGP4 trap_EntitiesInBox
CALLI4
ASGNI4
ADDRLP4 8
ADDRLP4 4180
INDIRI4
ASGNI4
line 232
;231:
;232:	for ( i = 0; i < num; i++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $210
JUMPV
LABELV $207
line 233
;233:		hit = &g_entities[ touch[ i ] ];
ADDRLP4 0
CNSTI4 932
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 12
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 234
;234:		if ( !hit->touch ) {
ADDRLP4 0
INDIRP4
CNSTI4 728
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $211
line 235
;235:			continue;
ADDRGP4 $208
JUMPV
LABELV $211
line 237
;236:		}
;237:		switch ( hit->s.eType ) {
ADDRLP4 4184
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
ADDRLP4 4184
INDIRI4
CNSTI4 8
EQI4 $216
ADDRLP4 4184
INDIRI4
CNSTI4 9
EQI4 $221
ADDRGP4 $213
JUMPV
LABELV $216
line 239
;238:		case ET_PUSH_TRIGGER:
;239:			if ( self->s.pos.trDelta[ 2 ] < 100 ) {
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
CNSTF4 1120403456
GEF4 $217
line 240
;240:				G_Sound( self, CHAN_AUTO, G_SoundIndex( "sound/world/jumppad.wav" ) );
ADDRGP4 $219
ARGP4
ADDRLP4 4192
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 4192
INDIRI4
ARGI4
ADDRGP4 G_Sound
CALLV
pop
line 241
;241:			}
LABELV $217
line 242
;242:			VectorCopy( hit->s.origin2, self->s.pos.trDelta );
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
INDIRB
ASGNB 12
line 244
;243:
;244:			self->s.pos.trType = TR_GRAVITY;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 5
ASGNI4
line 245
;245:			self->s.pos.trTime = level.time;
ADDRFP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 246
;246:			break;
ADDRGP4 $214
JUMPV
LABELV $221
line 248
;247:		case ET_TELEPORT_TRIGGER:
;248:			if ( !( hit->spawnflags & 1 ) ) {
ADDRLP4 0
INDIRP4
CNSTI4 536
ADDP4
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
NEI4 $214
line 249
;249:				G_TempEntity( self->r.currentOrigin, EV_PLAYER_TELEPORT_OUT );
ADDRFP4 0
INDIRP4
CNSTI4 496
ADDP4
ARGP4
CNSTI4 44
ARGI4
ADDRGP4 G_TempEntity
CALLP4
pop
line 250
;250:				Body_free( self );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 Body_free
CALLV
pop
line 251
;251:				return;
ADDRGP4 $185
JUMPV
line 253
;252:			}
;253:			break;
LABELV $213
LABELV $214
line 255
;254:		}
;255:	}
LABELV $208
line 232
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $210
ADDRLP4 4
INDIRI4
ADDRLP4 8
INDIRI4
LTI4 $207
line 256
;256:}
LABELV $185
endproc Body_WorldEffects 4196 32
bss
align 4
LABELV $225
skip 4
code
proc TossBody 24 4
line 260
;257:
;258:void Kamikaze_DeathTimer( gentity_t *self );
;259:
;260:static void TossBody( gentity_t *self ) {
line 264
;261:	int	anim;
;262:	static int	n;
;263:
;264:	self->timestamp = level.time;
ADDRFP4 0
INDIRP4
CNSTI4 648
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 265
;265:	self->nextthink = level.time + 5000;
ADDRFP4 0
INDIRP4
CNSTI4 704
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 5000
ADDI4
ASGNI4
line 271
;266:#ifdef MISSIONPACK
;267:	if ( self->s.eFlags & EF_KAMIKAZE ) {
;268:		Kamikaze_DeathTimer( self );
;269:	}
;270:#endif
;271:	self->s.eFlags |= EF_DEAD;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 1
BORI4
ASGNI4
line 272
;272:	self->s.powerups = 0;
ADDRFP4 0
INDIRP4
CNSTI4 188
ADDP4
CNSTI4 0
ASGNI4
line 273
;273:	self->r.maxs[ 2 ] = -8;
ADDRFP4 0
INDIRP4
CNSTI4 464
ADDP4
CNSTF4 3238002688
ASGNF4
line 274
;274:	self->r.contents = CONTENTS_CORPSE;
ADDRFP4 0
INDIRP4
CNSTI4 468
ADDP4
CNSTI4 67108864
ASGNI4
line 275
;275:	self->freezeState = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 924
ADDP4
CNSTI4 0
ASGNI4
line 276
;276:	self->s.weapon = WP_NONE;
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
CNSTI4 0
ASGNI4
line 278
;277:
;278:	switch ( n ) {
ADDRLP4 8
ADDRGP4 $225
INDIRI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
EQI4 $230
ADDRLP4 8
INDIRI4
CNSTI4 1
EQI4 $231
ADDRLP4 8
INDIRI4
CNSTI4 2
EQI4 $232
ADDRGP4 $228
JUMPV
LABELV $230
line 280
;279:	case 0:
;280:		anim = BOTH_DEATH1;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 281
;281:		break;
ADDRGP4 $229
JUMPV
LABELV $231
line 283
;282:	case 1:
;283:		anim = BOTH_DEATH2;
ADDRLP4 0
CNSTI4 2
ASGNI4
line 284
;284:		break;
ADDRGP4 $229
JUMPV
LABELV $232
LABELV $228
line 287
;285:	case 2:
;286:	default:
;287:		anim = BOTH_DEATH3;
ADDRLP4 0
CNSTI4 4
ASGNI4
line 288
;288:		break;
LABELV $229
line 290
;289:	}
;290:	n = ( n + 1 ) % 3;
ADDRLP4 12
ADDRGP4 $225
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
CNSTI4 3
MODI4
ASGNI4
line 292
;291:
;292:	self->s.torsoAnim = self->s.legsAnim = anim;
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
ADDRLP4 0
INDIRI4
ASGNI4
ADDRLP4 16
INDIRP4
CNSTI4 196
ADDP4
ADDRLP4 20
INDIRI4
ASGNI4
ADDRLP4 16
INDIRP4
CNSTI4 200
ADDP4
ADDRLP4 20
INDIRI4
ASGNI4
line 294
;293:
;294:	if ( !g_blood.integer ) {
ADDRGP4 g_blood+12
INDIRI4
CNSTI4 0
NEI4 $233
line 295
;295:		self->takedamage = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
CNSTI4 0
ASGNI4
line 296
;296:	}
LABELV $233
line 298
;297:
;298:	trap_LinkEntity( self );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 299
;299:}
LABELV $224
endproc TossBody 24 4
proc Body_think 20 4
line 301
;300:
;301:static void Body_think( gentity_t *self ) {
line 302
;302:	self->nextthink = level.time + FRAMETIME;
ADDRFP4 0
INDIRP4
CNSTI4 704
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 100
ADDI4
ASGNI4
line 304
;303:
;304:	if ( !self->target_ent || !self->target_ent->client || !self->target_ent->inuse ) {
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRP4
ASGNP4
ADDRLP4 4
CNSTU4 0
ASGNU4
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRLP4 4
INDIRU4
EQU4 $241
ADDRLP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
CVPU4 4
ADDRLP4 4
INDIRU4
EQU4 $241
ADDRLP4 0
INDIRP4
CNSTI4 528
ADDP4
INDIRI4
CNSTI4 0
NEI4 $238
LABELV $241
line 305
;305:		Body_free( self );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 Body_free
CALLV
pop
line 306
;306:		return;
ADDRGP4 $236
JUMPV
LABELV $238
line 308
;307:	}
;308:	if ( self->s.otherEntityNum != self->target_ent->s.number ) {
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ADDRLP4 8
INDIRP4
CNSTI4 676
ADDP4
INDIRP4
INDIRI4
EQI4 $242
line 309
;309:		Body_free( self );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 Body_free
CALLV
pop
line 310
;310:		return;
ADDRGP4 $236
JUMPV
LABELV $242
line 312
;311:	}
;312:	if ( level.intermissiontime || level.intermissionQueued ) {
ADDRLP4 12
CNSTI4 0
ASGNI4
ADDRGP4 level+9140
INDIRI4
ADDRLP4 12
INDIRI4
NEI4 $248
ADDRGP4 level+9136
INDIRI4
ADDRLP4 12
INDIRI4
EQI4 $244
LABELV $248
line 313
;313:		return;
ADDRGP4 $236
JUMPV
LABELV $244
line 315
;314:	}
;315:	if ( level.time - self->timestamp > 150000 || ( ( g_dmflags.integer & 1024 || g_gametype.integer == GT_CTF ) && level.time - self->timestamp > 60000 ) ) {
ADDRGP4 level+32
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 648
ADDP4
INDIRI4
SUBI4
CNSTI4 150000
GTI4 $255
ADDRGP4 g_dmflags+12
INDIRI4
CNSTI4 1024
BANDI4
CNSTI4 0
NEI4 $256
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 4
NEI4 $249
LABELV $256
ADDRGP4 level+32
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 648
ADDP4
INDIRI4
SUBI4
CNSTI4 60000
LEI4 $249
LABELV $255
line 316
;316:		player_free( self->target_ent );
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRP4
ARGP4
ADDRGP4 player_free
CALLV
pop
line 317
;317:		TossBody( self );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 TossBody
CALLV
pop
line 318
;318:		return;
ADDRGP4 $236
JUMPV
LABELV $249
line 321
;319:	}
;320:
;321:	if ( self->freezeState ) {
ADDRFP4 0
INDIRP4
CNSTI4 924
ADDP4
INDIRI4
CNSTI4 0
EQI4 $257
line 322
;322:		if ( !self->target_ent->freezeState ) {
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRP4
CNSTI4 924
ADDP4
INDIRI4
CNSTI4 0
NEI4 $259
line 323
;323:			TossBody( self );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 TossBody
CALLV
pop
line 324
;324:			return;
ADDRGP4 $236
JUMPV
LABELV $259
line 326
;325:		}
;326:		Body_Explode( self );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 Body_Explode
CALLV
pop
line 327
;327:		if ( self->last_move_time < level.time - 1000 ) {
ADDRFP4 0
INDIRP4
CNSTI4 752
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
CNSTI4 1000
SUBI4
GEI4 $236
line 328
;328:			Body_WorldEffects( self );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 Body_WorldEffects
CALLV
pop
line 329
;329:			self->last_move_time = level.time;
ADDRFP4 0
INDIRP4
CNSTI4 752
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 330
;330:		}
line 331
;331:		return;
ADDRGP4 $236
JUMPV
LABELV $257
line 334
;332:	}
;333:
;334:	if ( level.time - self->timestamp > 6500 ) {
ADDRGP4 level+32
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 648
ADDP4
INDIRI4
SUBI4
CNSTI4 6500
LEI4 $265
line 335
;335:		Body_free( self );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 Body_free
CALLV
pop
line 336
;336:	} else {
ADDRGP4 $266
JUMPV
LABELV $265
line 337
;337:		self->s.pos.trBase[ 2 ] -= 1;
ADDRLP4 16
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRF4
CNSTF4 1065353216
SUBF4
ASGNF4
line 338
;338:	}
LABELV $266
line 339
;339:}
LABELV $236
endproc Body_think 20 4
proc Body_die 12 8
line 341
;340:
;341:static void Body_die( gentity_t *self, gentity_t *inflictor, gentity_t *attacker, int damage, int mod ) {
line 344
;342:	gentity_t	*tent;
;343:
;344:	if ( self->health > GIB_HEALTH ) {
ADDRFP4 0
INDIRP4
CNSTI4 756
ADDP4
INDIRI4
CNSTI4 -40
LEI4 $269
line 345
;345:		return;
ADDRGP4 $268
JUMPV
LABELV $269
line 348
;346:	}
;347:
;348:	if ( self->freezeState && !g_blood.integer ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 924
ADDP4
INDIRI4
ADDRLP4 4
INDIRI4
EQI4 $271
ADDRGP4 g_blood+12
INDIRI4
ADDRLP4 4
INDIRI4
NEI4 $271
line 349
;349:		player_free( self->target_ent );
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRP4
ARGP4
ADDRGP4 player_free
CALLV
pop
line 350
;350:		TossBody( self );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 TossBody
CALLV
pop
line 351
;351:		return;
ADDRGP4 $268
JUMPV
LABELV $271
line 354
;352:	}
;353:
;354:	tent = G_TempEntity( self->r.currentOrigin, EV_GIB_PLAYER );
ADDRFP4 0
INDIRP4
CNSTI4 496
ADDP4
ARGP4
CNSTI4 68
ARGI4
ADDRLP4 8
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 355
;355:	if ( self->freezeState ) {
ADDRFP4 0
INDIRP4
CNSTI4 924
ADDP4
INDIRI4
CNSTI4 0
EQI4 $274
line 356
;356:		tent->s.eventParm = 255;
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
CNSTI4 255
ASGNI4
line 357
;357:	}
LABELV $274
line 358
;358:	Body_free( self );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 Body_free
CALLV
pop
line 359
;359:}
LABELV $268
endproc Body_die 12 8
bss
align 4
LABELV $277
skip 4
align 1
LABELV $280
skip 128
export DamageBody
code
proc DamageBody 1080 12
line 361
;360:
;361:qboolean DamageBody( gentity_t *targ, gentity_t *attacker, vec3_t dir, int mod, int knockback ) {
line 365
;362:	static float	mass;
;363:	vec3_t	kvel;
;364:
;365:	if ( !mass ) {
ADDRGP4 $277
INDIRF4
CNSTF4 0
NEF4 $278
line 369
;366:		char	info[ 1024 ];
;367:		static char	mapname[ 128 ];
;368:
;369:		trap_GetServerinfo( info, sizeof ( info ) );
ADDRLP4 12
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 trap_GetServerinfo
CALLV
pop
line 370
;370:		strncpy( mapname, Info_ValueForKey( info, "mapname" ), sizeof ( mapname ) - 1 );
ADDRLP4 12
ARGP4
ADDRGP4 $281
ARGP4
ADDRLP4 1036
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRGP4 $280
ARGP4
ADDRLP4 1036
INDIRP4
ARGP4
CNSTI4 127
ARGI4
ADDRGP4 strncpy
CALLP4
pop
line 371
;371:		mapname[ sizeof ( mapname ) - 1 ] = '\0';
ADDRGP4 $280+127
CNSTI1 0
ASGNI1
line 373
;372:
;373:		if ( !Q_stricmp( mapname, "q3tourney3" ) ||
ADDRGP4 $280
ARGP4
ADDRGP4 $285
ARGP4
ADDRLP4 1040
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 1040
INDIRI4
CNSTI4 0
EQI4 $303
ADDRGP4 $280
ARGP4
ADDRGP4 $286
ARGP4
ADDRLP4 1044
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 1044
INDIRI4
CNSTI4 0
EQI4 $303
ADDRGP4 $280
ARGP4
ADDRGP4 $287
ARGP4
ADDRLP4 1048
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 1048
INDIRI4
CNSTI4 0
EQI4 $303
ADDRGP4 $280
ARGP4
ADDRGP4 $288
ARGP4
ADDRLP4 1052
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 1052
INDIRI4
CNSTI4 0
EQI4 $303
ADDRGP4 $280
ARGP4
ADDRGP4 $289
ARGP4
ADDRLP4 1056
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 1056
INDIRI4
CNSTI4 0
EQI4 $303
ADDRGP4 $280
ARGP4
ADDRGP4 $290
ARGP4
ADDRLP4 1060
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 1060
INDIRI4
CNSTI4 0
EQI4 $303
ADDRGP4 $280
ARGP4
ADDRGP4 $291
ARGP4
ADDRLP4 1064
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 1064
INDIRI4
CNSTI4 0
EQI4 $303
ADDRGP4 $280
ARGP4
ADDRGP4 $292
ARGP4
ADDRLP4 1068
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 1068
INDIRI4
CNSTI4 0
EQI4 $303
ADDRGP4 $280
ARGP4
ADDRGP4 $293
ARGP4
ADDRLP4 1072
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 1072
INDIRI4
CNSTI4 0
EQI4 $303
ADDRGP4 $280
ARGP4
ADDRGP4 $294
ARGP4
ADDRLP4 1076
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 1076
INDIRI4
CNSTI4 0
NEI4 $283
LABELV $303
line 382
;374:			!Q_stricmp( mapname, "q3dm16" ) ||
;375:			!Q_stricmp( mapname, "q3dm17" ) ||
;376:			!Q_stricmp( mapname, "q3dm18" ) ||
;377:			!Q_stricmp( mapname, "q3dm19" ) ||
;378:			!Q_stricmp( mapname, "q3tourney6" ) ||
;379:			!Q_stricmp( mapname, "q3ctf4" ) ||
;380:			!Q_stricmp( mapname, "mpq3ctf4" ) ||
;381:			!Q_stricmp( mapname, "mpq3tourney6" ) ||
;382:			!Q_stricmp( mapname, "mpteam6" ) ) {
line 383
;383:			mass = 300;
ADDRGP4 $277
CNSTF4 1133903872
ASGNF4
line 384
;384:		} else {
ADDRGP4 $284
JUMPV
LABELV $283
line 385
;385:			mass = 200;
ADDRGP4 $277
CNSTF4 1128792064
ASGNF4
line 386
;386:		}
LABELV $284
line 387
;387:		if ( g_dmflags.integer & 1024 ) mass = 300;
ADDRGP4 g_dmflags+12
INDIRI4
CNSTI4 1024
BANDI4
CNSTI4 0
EQI4 $304
ADDRGP4 $277
CNSTF4 1133903872
ASGNF4
LABELV $304
line 388
;388:	}
LABELV $278
line 390
;389:
;390:	if ( attacker->client && targ->freezeState ) {
ADDRFP4 4
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $307
ADDRFP4 0
INDIRP4
CNSTI4 924
ADDP4
INDIRI4
CNSTI4 0
EQI4 $307
line 391
;391:		if ( knockback ) {
ADDRFP4 16
INDIRI4
CNSTI4 0
EQI4 $309
line 392
;392:			VectorScale( dir, g_knockback.value * (float) knockback / mass, kvel );
ADDRLP4 12
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 16
ADDRFP4 16
INDIRI4
CVIF4 4
ASGNF4
ADDRLP4 20
ADDRGP4 $277
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 12
INDIRP4
INDIRF4
ADDRGP4 g_knockback+8
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDRLP4 20
INDIRF4
DIVF4
MULF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 12
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 g_knockback+8
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDRLP4 20
INDIRF4
DIVF4
MULF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 g_knockback+8
INDIRF4
ADDRFP4 16
INDIRI4
CVIF4 4
MULF4
ADDRGP4 $277
INDIRF4
DIVF4
MULF4
ASGNF4
line 393
;393:			if ( mass == 200 ) kvel[ 2 ] += 24;
ADDRGP4 $277
INDIRF4
CNSTF4 1128792064
NEF4 $316
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
CNSTF4 1103101952
ADDF4
ASGNF4
LABELV $316
line 394
;394:			VectorAdd( targ->s.pos.trDelta, kvel, targ->s.pos.trDelta );
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
ADDF4
ASGNF4
ADDRLP4 28
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
ADDRLP4 0+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 32
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRF4
ADDRLP4 0+8
INDIRF4
ADDF4
ASGNF4
line 396
;395:
;396:			targ->s.pos.trType = TR_GRAVITY;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 5
ASGNI4
line 397
;397:			targ->s.pos.trTime = level.time;
ADDRFP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 399
;398:
;399:			targ->pain_debounce_time = level.time;
ADDRFP4 0
INDIRP4
CNSTI4 744
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 400
;400:		}
LABELV $309
line 401
;401:		if ( mod == MOD_GAUNTLET || mod == MOD_RAILGUN ) {
ADDRLP4 12
ADDRFP4 12
INDIRI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 2
EQI4 $325
ADDRLP4 12
INDIRI4
CNSTI4 10
NEI4 $323
LABELV $325
line 402
;402:			FollowClient( targ, attacker );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 FollowClient
CALLV
pop
line 403
;403:		}
LABELV $323
line 404
;404:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $276
JUMPV
LABELV $307
line 406
;405:	}
;406:	return qfalse;
CNSTI4 0
RETI4
LABELV $276
endproc DamageBody 1080 12
export is_body
proc is_body 16 8
line 409
;407:}
;408:
;409:qboolean is_body( gentity_t *ent ) {
line 410
;410:	if ( !ent || !ent->inuse ) return qfalse;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $329
ADDRLP4 0
INDIRP4
CNSTI4 528
ADDP4
INDIRI4
CNSTI4 0
NEI4 $327
LABELV $329
CNSTI4 0
RETI4
ADDRGP4 $326
JUMPV
LABELV $327
line 411
;411:	return ( ent->classname && !Q_stricmp( ent->classname, "freezebody" ) );
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 532
ADDP4
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $332
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 $330
ARGP4
ADDRLP4 12
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
NEI4 $332
ADDRLP4 4
CNSTI4 1
ASGNI4
ADDRGP4 $333
JUMPV
LABELV $332
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $333
ADDRLP4 4
INDIRI4
RETI4
LABELV $326
endproc is_body 16 8
export is_body_freeze
proc is_body_freeze 4 4
line 414
;412:}
;413:
;414:qboolean is_body_freeze( gentity_t *ent ) {
line 415
;415:	if ( is_body( ent ) ) {
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ADDRGP4 is_body
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $335
line 416
;416:		return ent->freezeState;
ADDRFP4 0
INDIRP4
CNSTI4 924
ADDP4
INDIRI4
RETI4
ADDRGP4 $334
JUMPV
LABELV $335
line 418
;417:	}
;418:	return qfalse;
CNSTI4 0
RETI4
LABELV $334
endproc is_body_freeze 4 4
proc CopyToBody 52 8
line 474
;419:}
;420:
;421:#ifdef MISSIONPACK
;422:void G_ExplodeMissile( gentity_t *ent );
;423:
;424:static void ProximityMine_ExplodeOnBody( gentity_t *mine ) {
;425:	gentity_t	*body;
;426:
;427:	if ( !is_body_freeze( mine->enemy ) ) {
;428:		mine->think = G_FreeEntity;
;429:		mine->nextthink = level.time;
;430:		return;
;431:	}
;432:
;433:	body = mine->enemy;
;434:	body->s.eFlags &= ~EF_TICKING;
;435:
;436:	body->s.loopSound = 0;
;437:
;438:	G_SetOrigin( mine, body->s.pos.trBase );
;439:	mine->r.svFlags &= ~SVF_NOCLIENT;
;440:	mine->splashMethodOfDeath = MOD_PROXIMITY_MINE;
;441:	G_ExplodeMissile( mine );
;442:}
;443:
;444:void ProximityMine_Body( gentity_t *mine, gentity_t *body ) {
;445:	if ( mine->s.eFlags & EF_NODRAW )
;446:		return;
;447:
;448:	G_AddEvent( mine, EV_PROXIMITY_MINE_STICK, 0 );
;449:
;450:	if ( body->s.eFlags & EF_TICKING ) {
;451:		body->activator->splashDamage += mine->splashDamage;
;452:		body->activator->splashRadius *= 1.50;
;453:		mine->think = G_FreeEntity;
;454:		mine->nextthink = level.time;
;455:		return;
;456:	}
;457:
;458:	body->s.loopSound = G_SoundIndex( "sound/weapons/proxmine/wstbtick.wav" );
;459:
;460:	body->s.eFlags |= EF_TICKING;
;461:	body->activator = mine;
;462:
;463:	mine->s.eFlags |= EF_NODRAW;
;464:	mine->r.svFlags |= SVF_NOCLIENT;
;465:	mine->s.pos.trType = TR_LINEAR;
;466:	VectorClear( mine->s.pos.trDelta );
;467:
;468:	mine->enemy = body;
;469:	mine->think = ProximityMine_ExplodeOnBody;
;470:	mine->nextthink = level.time + 10 * 1000;
;471:}
;472:#endif
;473:
;474:static void CopyToBody( gentity_t *ent ) {
line 477
;475:	gentity_t	*body;
;476:
;477:	body = G_Spawn();
ADDRLP4 4
ADDRGP4 G_Spawn
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 478
;478:	body->classname = "freezebody";
ADDRLP4 0
INDIRP4
CNSTI4 532
ADDP4
ADDRGP4 $330
ASGNP4
line 479
;479:	body->s = ent->s;
ADDRLP4 0
INDIRP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 212
line 480
;480:	body->s.eFlags = 0;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 0
ASGNI4
line 481
;481:	if ( ent->s.eFlags & EF_KAMIKAZE ) {
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 544
BANDI4
CNSTI4 0
EQI4 $338
line 482
;482:		body->s.eFlags |= EF_KAMIKAZE;
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 544
BORI4
ASGNI4
line 483
;483:	}
LABELV $338
line 484
;484:	body->s.powerups = 1 << PW_BATTLESUIT;
ADDRLP4 0
INDIRP4
CNSTI4 188
ADDP4
CNSTI4 4
ASGNI4
line 485
;485:	body->s.number = body - g_entities;
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 932
DIVI4
ASGNI4
line 486
;486:	body->timestamp = level.time;
ADDRLP4 0
INDIRP4
CNSTI4 648
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 487
;487:	body->physicsObject = qtrue;
ADDRLP4 0
INDIRP4
CNSTI4 572
ADDP4
CNSTI4 1
ASGNI4
line 489
;488:
;489:	G_SetOrigin( body, ent->r.currentOrigin );
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 496
ADDP4
ARGP4
ADDRGP4 G_SetOrigin
CALLV
pop
line 490
;490:	body->s.pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 5
ASGNI4
line 491
;491:	body->s.pos.trTime = level.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 492
;492:	VectorCopy( ent->client->ps.velocity, body->s.pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
CNSTI4 32
ADDP4
INDIRB
ASGNB 12
line 493
;493:	body->s.event = 0;
ADDRLP4 0
INDIRP4
CNSTI4 180
ADDP4
CNSTI4 0
ASGNI4
line 495
;494:
;495:	switch ( body->s.legsAnim & ~ANIM_TOGGLEBIT ) {
ADDRLP4 12
ADDRLP4 0
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
CNSTI4 -129
BANDI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 13
LTI4 $342
ADDRLP4 12
INDIRI4
CNSTI4 24
GTI4 $354
ADDRLP4 12
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $355-52
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $355
address $345
address $345
address $345
address $345
address $345
address $342
address $342
address $342
address $342
address $345
address $345
address $345
code
LABELV $354
ADDRLP4 12
INDIRI4
CNSTI4 32
EQI4 $345
ADDRLP4 12
INDIRI4
CNSTI4 33
EQI4 $345
ADDRGP4 $342
JUMPV
LABELV $345
line 506
;496:	case LEGS_WALKCR:
;497:	case LEGS_WALK:
;498:	case LEGS_RUN:
;499:	case LEGS_BACK:
;500:	case LEGS_SWIM:
;501:	case LEGS_IDLE:
;502:	case LEGS_IDLECR:
;503:	case LEGS_TURN:
;504:	case LEGS_BACKCR:
;505:	case LEGS_BACKWALK:
;506:		switch ( rand() % 4 ) {
ADDRLP4 28
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 28
INDIRI4
CNSTI4 4
MODI4
ASGNI4
ADDRLP4 24
INDIRI4
CNSTI4 0
LTI4 $346
ADDRLP4 24
INDIRI4
CNSTI4 3
GTI4 $346
ADDRLP4 24
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $353
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $353
address $349
address $350
address $351
address $352
code
LABELV $349
line 508
;507:		case 0:
;508:			body->s.legsAnim = LEGS_JUMP;
ADDRLP4 0
INDIRP4
CNSTI4 196
ADDP4
CNSTI4 18
ASGNI4
line 509
;509:			break;
ADDRGP4 $347
JUMPV
LABELV $350
line 511
;510:		case 1:
;511:			body->s.legsAnim = LEGS_LAND;
ADDRLP4 0
INDIRP4
CNSTI4 196
ADDP4
CNSTI4 19
ASGNI4
line 512
;512:			break;
ADDRGP4 $347
JUMPV
LABELV $351
line 514
;513:		case 2:
;514:			body->s.legsAnim = LEGS_JUMPB;
ADDRLP4 0
INDIRP4
CNSTI4 196
ADDP4
CNSTI4 20
ASGNI4
line 515
;515:			break;
ADDRGP4 $347
JUMPV
LABELV $352
line 517
;516:		case 3:
;517:			body->s.legsAnim = LEGS_LANDB;
ADDRLP4 0
INDIRP4
CNSTI4 196
ADDP4
CNSTI4 21
ASGNI4
line 518
;518:			break;
LABELV $346
LABELV $347
line 520
;519:		}
;520:	}
LABELV $342
line 522
;521:
;522:	body->r.svFlags = ent->r.svFlags;
ADDRLP4 24
CNSTI4 432
ASGNI4
ADDRLP4 0
INDIRP4
ADDRLP4 24
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 24
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 523
;523:	VectorCopy( ent->r.mins, body->r.mins );
ADDRLP4 28
CNSTI4 444
ASGNI4
ADDRLP4 0
INDIRP4
ADDRLP4 28
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 28
INDIRI4
ADDP4
INDIRB
ASGNB 12
line 524
;524:	VectorCopy( ent->r.maxs, body->r.maxs );
ADDRLP4 32
CNSTI4 456
ASGNI4
ADDRLP4 0
INDIRP4
ADDRLP4 32
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 32
INDIRI4
ADDP4
INDIRB
ASGNB 12
line 525
;525:	VectorCopy( ent->r.absmin, body->r.absmin );
ADDRLP4 36
CNSTI4 472
ASGNI4
ADDRLP4 0
INDIRP4
ADDRLP4 36
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 36
INDIRI4
ADDP4
INDIRB
ASGNB 12
line 526
;526:	VectorCopy( ent->r.absmax, body->r.absmax );
ADDRLP4 40
CNSTI4 484
ASGNI4
ADDRLP4 0
INDIRP4
ADDRLP4 40
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 40
INDIRI4
ADDP4
INDIRB
ASGNB 12
line 528
;527:
;528:	body->clipmask = MASK_PLAYERSOLID;
ADDRLP4 0
INDIRP4
CNSTI4 580
ADDP4
CNSTI4 33619969
ASGNI4
line 529
;529:	body->r.contents = CONTENTS_BODY;
ADDRLP4 0
INDIRP4
CNSTI4 468
ADDP4
CNSTI4 33554432
ASGNI4
line 531
;530:
;531:	body->think = Body_think;
ADDRLP4 0
INDIRP4
CNSTI4 716
ADDP4
ADDRGP4 Body_think
ASGNP4
line 532
;532:	body->nextthink = level.time + FRAMETIME;
ADDRLP4 0
INDIRP4
CNSTI4 704
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 100
ADDI4
ASGNI4
line 534
;533:
;534:	body->die = Body_die;
ADDRLP4 0
INDIRP4
CNSTI4 740
ADDP4
ADDRGP4 Body_die
ASGNP4
line 535
;535:	body->takedamage = qtrue;
ADDRLP4 0
INDIRP4
CNSTI4 760
ADDP4
CNSTI4 1
ASGNI4
line 537
;536:
;537:	body->target_ent = ent;
ADDRLP4 0
INDIRP4
CNSTI4 676
ADDP4
ADDRFP4 0
INDIRP4
ASGNP4
line 538
;538:	ent->target_ent = body;
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
ADDRLP4 0
INDIRP4
ASGNP4
line 539
;539:	body->s.otherEntityNum = ent->s.number;
ADDRLP4 0
INDIRP4
CNSTI4 140
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 540
;540:	body->noise_index = G_SoundIndex( "sound/player/tankjr/jump1.wav" );
ADDRGP4 $358
ARGP4
ADDRLP4 44
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 816
ADDP4
ADDRLP4 44
INDIRI4
ASGNI4
line 541
;541:	body->freezeState = qtrue;
ADDRLP4 0
INDIRP4
CNSTI4 924
ADDP4
CNSTI4 1
ASGNI4
line 542
;542:	body->spawnflags = ent->client->sess.sessionTeam;
ADDRLP4 0
INDIRP4
CNSTI4 536
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
CNSTI4 2568
ADDP4
INDIRI4
ASGNI4
line 543
;543:	body->waterlevel = ent->waterlevel;
ADDRLP4 48
CNSTI4 812
ASGNI4
ADDRLP4 0
INDIRP4
ADDRLP4 48
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 48
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 544
;544:	body->count = 0;
ADDRLP4 0
INDIRP4
CNSTI4 784
ADDP4
CNSTI4 0
ASGNI4
line 546
;545:
;546:	trap_LinkEntity( body );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 547
;547:}
LABELV $337
endproc CopyToBody 52 8
proc NearbyBody 40 12
line 549
;548:
;549:static qboolean NearbyBody( gentity_t *targ ) {
line 553
;550:	gentity_t	*spot;
;551:	vec3_t	delta;
;552:
;553:	if ( g_gametype.integer == GT_CTF ) {
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 4
NEI4 $360
line 554
;554:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $359
JUMPV
LABELV $360
line 557
;555:	}
;556:
;557:	spot = NULL;
ADDRLP4 0
CNSTP4 0
ASGNP4
ADDRGP4 $364
JUMPV
LABELV $363
line 558
;558:	while ( ( spot = G_Find( spot, FOFS( classname ), "freezebody" ) ) != NULL ) {
line 559
;559:		if ( !spot->freezeState ) continue;
ADDRLP4 0
INDIRP4
CNSTI4 924
ADDP4
INDIRI4
CNSTI4 0
NEI4 $366
ADDRGP4 $364
JUMPV
LABELV $366
line 560
;560:		if ( spot->spawnflags != targ->client->sess.sessionTeam ) continue;
ADDRLP4 0
INDIRP4
CNSTI4 536
ADDP4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
CNSTI4 2568
ADDP4
INDIRI4
EQI4 $368
ADDRGP4 $364
JUMPV
LABELV $368
line 561
;561:		VectorSubtract( spot->s.pos.trBase, targ->s.pos.trBase, delta );
ADDRLP4 20
CNSTI4 24
ASGNI4
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 0
INDIRP4
ADDRLP4 20
INDIRI4
ADDP4
INDIRF4
ADDRLP4 24
INDIRP4
ADDRLP4 20
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 28
CNSTI4 28
ASGNI4
ADDRLP4 4+4
ADDRLP4 0
INDIRP4
ADDRLP4 28
INDIRI4
ADDP4
INDIRF4
ADDRLP4 24
INDIRP4
ADDRLP4 28
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 32
CNSTI4 32
ASGNI4
ADDRLP4 4+8
ADDRLP4 0
INDIRP4
ADDRLP4 32
INDIRI4
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
ADDRLP4 32
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 562
;562:		if ( VectorLength( delta ) > 100 ) continue;
ADDRLP4 4
ARGP4
ADDRLP4 36
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 36
INDIRF4
CNSTF4 1120403456
LEF4 $372
ADDRGP4 $364
JUMPV
LABELV $372
line 563
;563:		if ( level.time - spot->timestamp > 400 ) {
ADDRGP4 level+32
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 648
ADDP4
INDIRI4
SUBI4
CNSTI4 400
LEI4 $374
line 564
;564:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $359
JUMPV
LABELV $374
line 566
;565:		}
;566:	}
LABELV $364
line 558
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 532
ARGI4
ADDRGP4 $330
ARGP4
ADDRLP4 16
ADDRGP4 G_Find
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 16
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $363
line 567
;567:	return qfalse;
CNSTI4 0
RETI4
LABELV $359
endproc NearbyBody 40 12
export player_freeze
proc player_freeze 56 8
line 570
;568:}
;569:
;570:void player_freeze( gentity_t *self, gentity_t *attacker, int mod ) {
line 571
;571:	if ( level.warmupTime ) {
ADDRGP4 level+16
INDIRI4
CNSTI4 0
EQI4 $378
line 572
;572:		return;
ADDRGP4 $377
JUMPV
LABELV $378
line 574
;573:	}
;574:	if ( g_gametype.integer != GT_TEAM && g_gametype.integer != GT_CTF ) {
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 3
EQI4 $381
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 4
EQI4 $381
line 575
;575:		return;
ADDRGP4 $377
JUMPV
LABELV $381
line 578
;576:	}
;577:
;578:	if ( self != attacker && OnSameTeam( self, attacker ) ) {
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRLP4 4
INDIRP4
CVPU4 4
EQU4 $385
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 8
ADDRGP4 OnSameTeam
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
EQI4 $385
line 579
;579:		return;
ADDRGP4 $377
JUMPV
LABELV $385
line 581
;580:	}
;581:	if ( self != attacker && g_gametype.integer == GT_CTF && redflag && blueflag ) {
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRFP4 4
INDIRP4
CVPU4 4
EQU4 $387
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 4
NEI4 $387
ADDRLP4 12
CNSTU4 0
ASGNU4
ADDRGP4 redflag
CVPU4 4
ADDRLP4 12
INDIRU4
EQU4 $387
ADDRGP4 blueflag
CVPU4 4
ADDRLP4 12
INDIRU4
EQU4 $387
line 584
;582:		vec3_t	dist1, dist2;
;583:
;584:		VectorSubtract( redflag, self->s.pos.trBase, dist1 );
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
ADDRGP4 redflag
INDIRF4
ADDRLP4 40
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 16+4
ADDRGP4 redflag+4
INDIRF4
ADDRLP4 40
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 16+8
ADDRGP4 redflag+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
SUBF4
ASGNF4
line 585
;585:		VectorSubtract( blueflag, self->s.pos.trBase, dist2 );
ADDRLP4 44
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
ADDRGP4 blueflag
INDIRF4
ADDRLP4 44
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 28+4
ADDRGP4 blueflag+4
INDIRF4
ADDRLP4 44
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 28+8
ADDRGP4 blueflag+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
SUBF4
ASGNF4
line 587
;586:
;587:		if ( self->client->sess.sessionTeam == TEAM_RED ) {
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
CNSTI4 2568
ADDP4
INDIRI4
CNSTI4 1
NEI4 $398
line 588
;588:			if ( VectorLength( dist1 ) < VectorLength( dist2 ) ) {
ADDRLP4 16
ARGP4
ADDRLP4 48
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 28
ARGP4
ADDRLP4 52
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 48
INDIRF4
ADDRLP4 52
INDIRF4
GEF4 $399
line 589
;589:				return;
ADDRGP4 $377
JUMPV
line 591
;590:			}
;591:		} else if ( self->client->sess.sessionTeam == TEAM_BLUE ) {
LABELV $398
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
CNSTI4 2568
ADDP4
INDIRI4
CNSTI4 2
NEI4 $402
line 592
;592:			if ( VectorLength( dist2 ) < VectorLength( dist1 ) ) {
ADDRLP4 28
ARGP4
ADDRLP4 48
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 16
ARGP4
ADDRLP4 52
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 48
INDIRF4
ADDRLP4 52
INDIRF4
GEF4 $404
line 593
;593:				return;
ADDRGP4 $377
JUMPV
LABELV $404
line 595
;594:			}
;595:		}
LABELV $402
LABELV $399
line 596
;596:	}
LABELV $387
line 597
;597:	switch ( mod ) {
ADDRLP4 16
ADDRFP4 8
INDIRI4
ASGNI4
ADDRLP4 20
CNSTI4 0
ASGNI4
ADDRLP4 16
INDIRI4
ADDRLP4 20
INDIRI4
EQI4 $377
ADDRLP4 16
INDIRI4
ADDRLP4 20
INDIRI4
LTI4 $406
LABELV $409
ADDRLP4 24
ADDRFP4 8
INDIRI4
ASGNI4
ADDRLP4 24
INDIRI4
CNSTI4 14
LTI4 $406
ADDRLP4 24
INDIRI4
CNSTI4 21
GTI4 $406
ADDRLP4 24
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $410-56
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $410
address $377
address $406
address $406
address $377
address $377
address $406
address $377
address $377
code
line 610
;598:	case MOD_UNKNOWN:
;599:	case MOD_WATER:
;600:	case MOD_CRUSH:
;601:	case MOD_TELEFRAG:
;602:	//case MOD_FALLING:
;603:	case MOD_SUICIDE:
;604:	case MOD_TARGET_LASER:
;605:	//case MOD_TRIGGER_HURT:
;606:#ifdef MISSIONPACK
;607:	case MOD_JUICED:
;608:#endif
;609://	case MOD_GRAPPLE:
;610:		return;
LABELV $406
line 613
;611:	}
;612:
;613:	CopyToBody( self );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CopyToBody
CALLV
pop
line 614
;614:	self->r.maxs[ 2 ] = -8;
ADDRFP4 0
INDIRP4
CNSTI4 464
ADDP4
CNSTF4 3238002688
ASGNF4
line 615
;615:	self->freezeState = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 924
ADDP4
CNSTI4 1
ASGNI4
line 616
;616:	check_time = ( level.time - 3000 ) + 200;
ADDRGP4 check_time
ADDRGP4 level+32
INDIRI4
CNSTI4 3000
SUBI4
CNSTI4 200
ADDI4
ASGNI4
line 618
;617:
;618:	self->takedamage = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
CNSTI4 0
ASGNI4
line 619
;619:	self->s.eType = ET_INVISIBLE;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 10
ASGNI4
line 620
;620:	self->r.contents = 0;
ADDRFP4 0
INDIRP4
CNSTI4 468
ADDP4
CNSTI4 0
ASGNI4
line 621
;621:	self->health = GIB_HEALTH;
ADDRFP4 0
INDIRP4
CNSTI4 756
ADDP4
CNSTI4 -40
ASGNI4
line 623
;622:
;623:	if ( attacker->client && self != attacker && NearbyBody( self ) ) {
ADDRLP4 28
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $413
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CVPU4 4
ADDRLP4 28
INDIRP4
CVPU4 4
EQU4 $413
ADDRLP4 32
INDIRP4
ARGP4
ADDRLP4 36
ADDRGP4 NearbyBody
CALLI4
ASGNI4
ADDRLP4 36
INDIRI4
CNSTI4 0
EQI4 $413
line 624
;624:		attacker->client->ps.persistant[ PERS_DEFEND_COUNT ]++;
ADDRLP4 40
ADDRFP4 4
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
CNSTI4 292
ADDP4
ASGNP4
ADDRLP4 40
INDIRP4
ADDRLP4 40
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 625
;625:		attacker->client->ps.eFlags &= ~( EF_AWARD_IMPRESSIVE | EF_AWARD_EXCELLENT | EF_AWARD_GAUNTLET | EF_AWARD_ASSIST | EF_AWARD_DEFEND | EF_AWARD_CAP );
ADDRLP4 44
ADDRFP4 4
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
CNSTI4 104
ADDP4
ASGNP4
ADDRLP4 44
INDIRP4
ADDRLP4 44
INDIRP4
INDIRI4
CNSTI4 -231497
BANDI4
ASGNI4
line 626
;626:		attacker->client->ps.eFlags |= EF_AWARD_DEFEND;
ADDRLP4 48
ADDRFP4 4
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
CNSTI4 104
ADDP4
ASGNP4
ADDRLP4 48
INDIRP4
ADDRLP4 48
INDIRP4
INDIRI4
CNSTI4 65536
BORI4
ASGNI4
line 627
;627:		attacker->client->rewardTime = level.time + REWARD_SPRITE_TIME;
ADDRFP4 4
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
CNSTI4 2696
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 2000
ADDI4
ASGNI4
line 628
;628:	}
LABELV $413
line 629
;629:}
LABELV $377
endproc player_freeze 56 8
export readyCheck
proc readyCheck 8 0
line 631
;630:
;631:qboolean readyCheck( void ) {
line 635
;632:	int	i;
;633:	gentity_t	*e;
;634:
;635:	if ( level.warmupTime == 0 ) return qfalse;
ADDRGP4 level+16
INDIRI4
CNSTI4 0
NEI4 $417
CNSTI4 0
RETI4
ADDRGP4 $416
JUMPV
LABELV $417
line 636
;636:	if ( !g_doReady.integer ) return qfalse;
ADDRGP4 g_doReady+12
INDIRI4
CNSTI4 0
NEI4 $420
CNSTI4 0
RETI4
ADDRGP4 $416
JUMPV
LABELV $420
line 638
;637:
;638:	for ( i = 0; i < g_maxclients.integer; i++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $426
JUMPV
LABELV $423
line 639
;639:		e = g_entities + i;
ADDRLP4 0
CNSTI4 932
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 640
;640:		if ( !e->inuse ) continue;
ADDRLP4 0
INDIRP4
CNSTI4 528
ADDP4
INDIRI4
CNSTI4 0
NEI4 $428
ADDRGP4 $424
JUMPV
LABELV $428
line 641
;641:		if ( e->r.svFlags & SVF_BOT ) continue;
ADDRLP4 0
INDIRP4
CNSTI4 432
ADDP4
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
EQI4 $430
ADDRGP4 $424
JUMPV
LABELV $430
line 642
;642:		if ( e->client->pers.connected == CON_DISCONNECTED ) continue;
ADDRLP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
CNSTI4 468
ADDP4
INDIRI4
CNSTI4 0
NEI4 $432
ADDRGP4 $424
JUMPV
LABELV $432
line 643
;643:		if ( e->client->sess.sessionTeam == TEAM_SPECTATOR ) continue;
ADDRLP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
CNSTI4 2568
ADDP4
INDIRI4
CNSTI4 3
NEI4 $434
ADDRGP4 $424
JUMPV
LABELV $434
line 644
;644:		if ( !e->readyBegin ) return qtrue;
ADDRLP4 0
INDIRP4
CNSTI4 928
ADDP4
INDIRI4
CNSTI4 0
NEI4 $436
CNSTI4 1
RETI4
ADDRGP4 $416
JUMPV
LABELV $436
line 645
;645:	}
LABELV $424
line 638
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $426
ADDRLP4 4
INDIRI4
ADDRGP4 g_maxclients+12
INDIRI4
LTI4 $423
line 646
;646:	return qfalse;
CNSTI4 0
RETI4
LABELV $416
endproc readyCheck 8 0
export team_wins
proc team_wins 56 12
line 653
;647:}
;648:
;649:gentity_t *SelectRandomDeathmatchSpawnPoint( void );
;650:
;651:void Team_ForceGesture( int team );
;652:
;653:void team_wins( int team ) {
line 663
;654:	int	i;
;655:	gentity_t	*e;
;656:	char	*teamstr;
;657:	gentity_t	*spawnPoint;
;658:	int	j;
;659:	int	flight;
;660:	gclient_t	*cl;
;661:	gentity_t	*te;
;662:
;663:	spawnPoint = SelectRandomDeathmatchSpawnPoint();
ADDRLP4 32
ADDRGP4 SelectRandomDeathmatchSpawnPoint
CALLP4
ASGNP4
ADDRLP4 20
ADDRLP4 32
INDIRP4
ASGNP4
line 664
;664:	for ( i = 0; i < g_maxclients.integer; i++ ) {
ADDRLP4 12
CNSTI4 0
ASGNI4
ADDRGP4 $442
JUMPV
LABELV $439
line 665
;665:		e = g_entities + i;
ADDRLP4 8
CNSTI4 932
ADDRLP4 12
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 666
;666:		cl = e->client;
ADDRLP4 0
ADDRLP4 8
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
ASGNP4
line 667
;667:		if ( !e->inuse ) continue;
ADDRLP4 8
INDIRP4
CNSTI4 528
ADDP4
INDIRI4
CNSTI4 0
NEI4 $444
ADDRGP4 $440
JUMPV
LABELV $444
line 668
;668:		if ( e->freezeState ) {
ADDRLP4 8
INDIRP4
CNSTI4 924
ADDP4
INDIRI4
CNSTI4 0
EQI4 $446
line 669
;669:			if ( !( g_dmflags.integer & 128 ) || cl->sess.sessionTeam != team ) {
ADDRGP4 g_dmflags+12
INDIRI4
CNSTI4 128
BANDI4
CNSTI4 0
EQI4 $451
ADDRLP4 0
INDIRP4
CNSTI4 2568
ADDP4
INDIRI4
ADDRFP4 0
INDIRI4
EQI4 $440
LABELV $451
line 670
;670:				player_free( e );
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 player_free
CALLV
pop
line 671
;671:			}
line 672
;672:			continue;
ADDRGP4 $440
JUMPV
LABELV $446
line 674
;673:		}
;674:		if ( e->health < 1 ) continue;
ADDRLP4 8
INDIRP4
CNSTI4 756
ADDP4
INDIRI4
CNSTI4 1
GEI4 $452
ADDRGP4 $440
JUMPV
LABELV $452
line 675
;675:		if ( is_spectator( cl ) ) continue;
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 36
ADDRGP4 is_spectator
CALLI4
ASGNI4
ADDRLP4 36
INDIRI4
CNSTI4 0
EQI4 $454
ADDRGP4 $440
JUMPV
LABELV $454
line 676
;676:		if ( g_dmflags.integer & 64 ) continue;
ADDRGP4 g_dmflags+12
INDIRI4
CNSTI4 64
BANDI4
CNSTI4 0
EQI4 $456
ADDRGP4 $440
JUMPV
LABELV $456
line 678
;677:
;678:		if ( e->health < cl->ps.stats[ STAT_MAX_HEALTH ] ) {
ADDRLP4 8
INDIRP4
CNSTI4 756
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 208
ADDP4
INDIRI4
GEI4 $459
line 679
;679:			e->health = cl->ps.stats[ STAT_MAX_HEALTH ];
ADDRLP4 8
INDIRP4
CNSTI4 756
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 208
ADDP4
INDIRI4
ASGNI4
line 680
;680:		}
LABELV $459
line 682
;681:
;682:		memset( cl->ps.ammo, 0, sizeof ( cl->ps.ammo ) );
ADDRLP4 0
INDIRP4
CNSTI4 376
ADDP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 64
ARGI4
ADDRGP4 memset
CALLP4
pop
line 684
;683:
;684:		cl->ps.stats[ STAT_WEAPONS ] = 1 << WP_MACHINEGUN;
ADDRLP4 0
INDIRP4
CNSTI4 192
ADDP4
CNSTI4 4
ASGNI4
line 685
;685:		cl->ps.ammo[ WP_MACHINEGUN ] = 50;
ADDRLP4 0
INDIRP4
CNSTI4 384
ADDP4
CNSTI4 50
ASGNI4
line 687
;686:
;687:		cl->ps.stats[ STAT_WEAPONS ] |= 1 << WP_GAUNTLET;
ADDRLP4 40
ADDRLP4 0
INDIRP4
CNSTI4 192
ADDP4
ASGNP4
ADDRLP4 40
INDIRP4
ADDRLP4 40
INDIRP4
INDIRI4
CNSTI4 2
BORI4
ASGNI4
line 688
;688:		cl->ps.ammo[ WP_GAUNTLET ] = -1;
ADDRLP4 0
INDIRP4
CNSTI4 380
ADDP4
CNSTI4 -1
ASGNI4
line 689
;689:		cl->ps.ammo[ WP_GRAPPLING_HOOK ] = -1;
ADDRLP4 0
INDIRP4
CNSTI4 416
ADDP4
CNSTI4 -1
ASGNI4
line 691
;690:
;691:		cl->ps.weapon = WP_MACHINEGUN;
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
CNSTI4 2
ASGNI4
line 692
;692:		cl->ps.weaponstate = WEAPON_READY;
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 0
ASGNI4
line 694
;693:
;694:		SpawnWeapon( cl );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 SpawnWeapon
CALLV
pop
line 696
;695:
;696:		flight = cl->ps.powerups[ PW_FLIGHT ];
ADDRLP4 16
ADDRLP4 0
INDIRP4
CNSTI4 336
ADDP4
INDIRI4
ASGNI4
line 697
;697:		if ( cl->ps.powerups[ PW_REDFLAG ] ) {
ADDRLP4 0
INDIRP4
CNSTI4 340
ADDP4
INDIRI4
CNSTI4 0
EQI4 $461
line 698
;698:			memset( cl->ps.powerups, 0, sizeof ( cl->ps.powerups ) );
ADDRLP4 0
INDIRP4
CNSTI4 312
ADDP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 64
ARGI4
ADDRGP4 memset
CALLP4
pop
line 699
;699:			cl->ps.powerups[ PW_REDFLAG ] = INT_MAX;
ADDRLP4 0
INDIRP4
CNSTI4 340
ADDP4
CNSTI4 2147483647
ASGNI4
line 700
;700:		} else if ( cl->ps.powerups[ PW_BLUEFLAG ] ) {
ADDRGP4 $462
JUMPV
LABELV $461
ADDRLP4 0
INDIRP4
CNSTI4 344
ADDP4
INDIRI4
CNSTI4 0
EQI4 $463
line 701
;701:			memset( cl->ps.powerups, 0, sizeof ( cl->ps.powerups ) );
ADDRLP4 0
INDIRP4
CNSTI4 312
ADDP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 64
ARGI4
ADDRGP4 memset
CALLP4
pop
line 702
;702:			cl->ps.powerups[ PW_BLUEFLAG ] = INT_MAX;
ADDRLP4 0
INDIRP4
CNSTI4 344
ADDP4
CNSTI4 2147483647
ASGNI4
line 703
;703:		} else if ( cl->ps.powerups[ PW_NEUTRALFLAG ] ) {
ADDRGP4 $464
JUMPV
LABELV $463
ADDRLP4 0
INDIRP4
CNSTI4 348
ADDP4
INDIRI4
CNSTI4 0
EQI4 $465
line 704
;704:			memset( cl->ps.powerups, 0, sizeof ( cl->ps.powerups ) );
ADDRLP4 0
INDIRP4
CNSTI4 312
ADDP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 64
ARGI4
ADDRGP4 memset
CALLP4
pop
line 705
;705:			cl->ps.powerups[ PW_NEUTRALFLAG ] = INT_MAX;
ADDRLP4 0
INDIRP4
CNSTI4 348
ADDP4
CNSTI4 2147483647
ASGNI4
line 706
;706:		} else {
ADDRGP4 $466
JUMPV
LABELV $465
line 707
;707:			memset( cl->ps.powerups, 0, sizeof ( cl->ps.powerups ) );
ADDRLP4 0
INDIRP4
CNSTI4 312
ADDP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 64
ARGI4
ADDRGP4 memset
CALLP4
pop
line 708
;708:		}
LABELV $466
LABELV $464
LABELV $462
line 709
;709:		cl->ps.powerups[ PW_FLIGHT ] = flight;
ADDRLP4 0
INDIRP4
CNSTI4 336
ADDP4
ADDRLP4 16
INDIRI4
ASGNI4
line 711
;710:
;711:		cl->ps.stats[ STAT_ARMOR ] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 196
ADDP4
CNSTI4 0
ASGNI4
line 713
;712:
;713:		if ( !( g_dmflags.integer & 1024 ) ) G_UseTargets( spawnPoint, e );
ADDRGP4 g_dmflags+12
INDIRI4
CNSTI4 1024
BANDI4
CNSTI4 0
NEI4 $467
ADDRLP4 20
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 G_UseTargets
CALLV
pop
LABELV $467
line 714
;714:		cl->ps.weapon = 1;
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
CNSTI4 1
ASGNI4
line 715
;715:		for ( j = WP_NUM_WEAPONS - 1; j > 0; j-- ) {
ADDRLP4 4
CNSTI4 12
ASGNI4
LABELV $470
line 716
;716:			if ( cl->ps.stats[ STAT_WEAPONS ] & ( 1 << j ) ) {
ADDRLP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 1
ADDRLP4 4
INDIRI4
LSHI4
BANDI4
CNSTI4 0
EQI4 $474
line 717
;717:				cl->ps.weapon = j;
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
ADDRLP4 4
INDIRI4
ASGNI4
line 718
;718:				break;
ADDRGP4 $472
JUMPV
LABELV $474
line 720
;719:			}
;720:		}
LABELV $471
line 715
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
GTI4 $470
LABELV $472
line 721
;721:		if ( cl->ps.stats[ STAT_WEAPONS ] & ( 1 << WP_ROCKET_LAUNCHER ) ) {
ADDRLP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $476
line 722
;722:			cl->ps.weapon = WP_ROCKET_LAUNCHER;
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
CNSTI4 5
ASGNI4
line 723
;723:		}
LABELV $476
line 725
;724:
;725:		if ( g_startArmor.integer > 0 ) {
ADDRGP4 g_startArmor+12
INDIRI4
CNSTI4 0
LEI4 $478
line 726
;726:			cl->ps.stats[ STAT_ARMOR ] += g_startArmor.integer;
ADDRLP4 44
ADDRLP4 0
INDIRP4
CNSTI4 196
ADDP4
ASGNP4
ADDRLP4 44
INDIRP4
ADDRLP4 44
INDIRP4
INDIRI4
ADDRGP4 g_startArmor+12
INDIRI4
ADDI4
ASGNI4
line 727
;727:			if ( cl->ps.stats[ STAT_ARMOR ] > cl->ps.stats[ STAT_MAX_HEALTH ] * 2 ) {
ADDRLP4 0
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 208
ADDP4
INDIRI4
CNSTI4 1
LSHI4
LEI4 $482
line 728
;728:				cl->ps.stats[ STAT_ARMOR ] = cl->ps.stats[ STAT_MAX_HEALTH ] * 2;
ADDRLP4 0
INDIRP4
CNSTI4 196
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 208
ADDP4
INDIRI4
CNSTI4 1
LSHI4
ASGNI4
line 729
;729:			}
LABELV $482
line 730
;730:		}
LABELV $478
line 731
;731:	}
LABELV $440
line 664
ADDRLP4 12
ADDRLP4 12
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $442
ADDRLP4 12
INDIRI4
ADDRGP4 g_maxclients+12
INDIRI4
LTI4 $439
line 733
;732:
;733:	if ( level.numPlayingClients < 2 || g_gametype.integer == GT_CTF ) {
ADDRGP4 level+92
INDIRI4
CNSTI4 2
LTI4 $488
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 4
NEI4 $484
LABELV $488
line 734
;734:		return;
ADDRGP4 $438
JUMPV
LABELV $484
line 737
;735:	}
;736:
;737:	te = G_TempEntity( vec3_origin, EV_GLOBAL_TEAM_SOUND );
ADDRGP4 vec3_origin
ARGP4
CNSTI4 49
ARGI4
ADDRLP4 36
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 28
ADDRLP4 36
INDIRP4
ASGNP4
line 738
;738:	if ( team == TEAM_RED ) {
ADDRFP4 0
INDIRI4
CNSTI4 1
NEI4 $489
line 739
;739:		teamstr = "Red";
ADDRLP4 24
ADDRGP4 $491
ASGNP4
line 740
;740:		te->s.eventParm = GTS_BLUE_CAPTURE;
ADDRLP4 28
INDIRP4
CNSTI4 184
ADDP4
CNSTI4 1
ASGNI4
line 741
;741:	} else {
ADDRGP4 $490
JUMPV
LABELV $489
line 742
;742:		teamstr = "Blue";
ADDRLP4 24
ADDRGP4 $492
ASGNP4
line 743
;743:		te->s.eventParm = GTS_RED_CAPTURE;
ADDRLP4 28
INDIRP4
CNSTI4 184
ADDP4
CNSTI4 0
ASGNI4
line 744
;744:	}
LABELV $490
line 745
;745:	te->r.svFlags |= SVF_BROADCAST;
ADDRLP4 40
ADDRLP4 28
INDIRP4
CNSTI4 432
ADDP4
ASGNP4
ADDRLP4 40
INDIRP4
ADDRLP4 40
INDIRP4
INDIRI4
CNSTI4 32
BORI4
ASGNI4
line 747
;746:
;747:	trap_SendServerCommand( -1, va( "cp \"" S_COLOR_MAGENTA "%s " S_COLOR_WHITE "team scores!\n\"", teamstr ) );
ADDRGP4 $493
ARGP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 44
ADDRGP4 va
CALLP4
ASGNP4
CNSTI4 -1
ARGI4
ADDRLP4 44
INDIRP4
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 748
;748:	trap_SendServerCommand( -1, va( "print \"%s team scores!\n\"", teamstr ) );
ADDRGP4 $494
ARGP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 48
ADDRGP4 va
CALLP4
ASGNP4
CNSTI4 -1
ARGI4
ADDRLP4 48
INDIRP4
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 750
;749:
;750:	AddTeamScore( vec3_origin, team, 1 );
ADDRGP4 vec3_origin
ARGP4
ADDRFP4 0
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 AddTeamScore
CALLV
pop
line 751
;751:	Team_ForceGesture( team );
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 Team_ForceGesture
CALLV
pop
line 753
;752:
;753:	CalculateRanks();
ADDRGP4 CalculateRanks
CALLV
pop
line 754
;754:}
LABELV $438
endproc team_wins 56 12
proc CalculateScores 20 4
line 756
;755:
;756:static qboolean CalculateScores( int team ) {
line 759
;757:	int	i;
;758:	gentity_t	*e;
;759:	qboolean	modified = qfalse;
ADDRLP4 8
CNSTI4 0
ASGNI4
line 761
;760:
;761:	for ( i = 0; i < g_maxclients.integer; i++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $499
JUMPV
LABELV $496
line 762
;762:		e = g_entities + i;
ADDRLP4 0
CNSTI4 932
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 763
;763:		if ( !e->inuse ) continue;
ADDRLP4 0
INDIRP4
CNSTI4 528
ADDP4
INDIRI4
CNSTI4 0
NEI4 $501
ADDRGP4 $497
JUMPV
LABELV $501
line 764
;764:		if ( e->client->sess.sessionTeam != team ) continue;
ADDRLP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
CNSTI4 2568
ADDP4
INDIRI4
ADDRFP4 0
INDIRI4
EQI4 $503
ADDRGP4 $497
JUMPV
LABELV $503
line 765
;765:		if ( e->freezeState ) {
ADDRLP4 0
INDIRP4
CNSTI4 924
ADDP4
INDIRI4
CNSTI4 0
EQI4 $505
line 766
;766:			modified = qtrue;
ADDRLP4 8
CNSTI4 1
ASGNI4
line 767
;767:			continue;
ADDRGP4 $497
JUMPV
LABELV $505
line 769
;768:		}
;769:		if ( e->client->pers.connected == CON_CONNECTING ) continue;
ADDRLP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
CNSTI4 468
ADDP4
INDIRI4
CNSTI4 1
NEI4 $507
ADDRGP4 $497
JUMPV
LABELV $507
line 770
;770:		if ( ( e->health < 1 || is_spectator( e->client ) ) && level.time > e->client->respawnTime ) continue;
ADDRLP4 0
INDIRP4
CNSTI4 756
ADDP4
INDIRI4
CNSTI4 1
LTI4 $512
ADDRLP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
ARGP4
ADDRLP4 16
ADDRGP4 is_spectator
CALLI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 0
EQI4 $509
LABELV $512
ADDRGP4 level+32
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
CNSTI4 2684
ADDP4
INDIRI4
LEI4 $509
ADDRGP4 $497
JUMPV
LABELV $509
line 771
;771:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $495
JUMPV
LABELV $497
line 761
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $499
ADDRLP4 4
INDIRI4
ADDRGP4 g_maxclients+12
INDIRI4
LTI4 $496
line 773
;772:	}
;773:	if ( modified ) {
ADDRLP4 8
INDIRI4
CNSTI4 0
EQI4 $513
line 774
;774:		team_wins( OtherTeam( team ) );
ADDRFP4 0
INDIRI4
ARGI4
ADDRLP4 12
ADDRGP4 OtherTeam
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
ARGI4
ADDRGP4 team_wins
CALLV
pop
line 775
;775:	}
LABELV $513
line 776
;776:	return modified;
ADDRLP4 8
INDIRI4
RETI4
LABELV $495
endproc CalculateScores 20 4
export CheckDelay
proc CheckDelay 20 4
line 779
;777:}
;778:
;779:void CheckDelay( void ) {
line 784
;780:	int	i;
;781:	gentity_t	*e;
;782:	int	readyMask;
;783:
;784:	readyMask = 0;
ADDRLP4 8
CNSTI4 0
ASGNI4
line 785
;785:	for ( i = 0; i < g_maxclients.integer; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $519
JUMPV
LABELV $516
line 786
;786:		e = g_entities + i;
ADDRLP4 4
CNSTI4 932
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 787
;787:		if ( !e->inuse ) continue;
ADDRLP4 4
INDIRP4
CNSTI4 528
ADDP4
INDIRI4
CNSTI4 0
NEI4 $521
ADDRGP4 $517
JUMPV
LABELV $521
line 788
;788:		if ( level.warmupTime != 0 && !e->readyBegin ) continue;
ADDRLP4 12
CNSTI4 0
ASGNI4
ADDRGP4 level+16
INDIRI4
ADDRLP4 12
INDIRI4
EQI4 $523
ADDRLP4 4
INDIRP4
CNSTI4 928
ADDP4
INDIRI4
ADDRLP4 12
INDIRI4
NEI4 $523
ADDRGP4 $517
JUMPV
LABELV $523
line 789
;789:		if ( level.warmupTime == 0 && !e->freezeState ) continue;
ADDRLP4 16
CNSTI4 0
ASGNI4
ADDRGP4 level+16
INDIRI4
ADDRLP4 16
INDIRI4
NEI4 $526
ADDRLP4 4
INDIRP4
CNSTI4 924
ADDP4
INDIRI4
ADDRLP4 16
INDIRI4
NEI4 $526
ADDRGP4 $517
JUMPV
LABELV $526
line 790
;790:		if ( i < 16 ) {
ADDRLP4 0
INDIRI4
CNSTI4 16
GEI4 $529
line 791
;791:			readyMask |= 1 << i;
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BORI4
ASGNI4
line 792
;792:		}
LABELV $529
line 793
;793:	}
LABELV $517
line 785
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $519
ADDRLP4 0
INDIRI4
ADDRGP4 g_maxclients+12
INDIRI4
LTI4 $516
line 794
;794:	for ( i = 0; i < g_maxclients.integer; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $534
JUMPV
LABELV $531
line 795
;795:		e = g_entities + i;
ADDRLP4 4
CNSTI4 932
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 796
;796:		if ( !e->inuse ) continue;
ADDRLP4 4
INDIRP4
CNSTI4 528
ADDP4
INDIRI4
CNSTI4 0
NEI4 $536
ADDRGP4 $532
JUMPV
LABELV $536
line 797
;797:		e->client->ps.stats[ STAT_CLIENTS_READY ] = readyMask;
ADDRLP4 4
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
CNSTI4 204
ADDP4
ADDRLP4 8
INDIRI4
ASGNI4
line 798
;798:	}
LABELV $532
line 794
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $534
ADDRLP4 0
INDIRI4
ADDRGP4 g_maxclients+12
INDIRI4
LTI4 $531
line 800
;799:
;800:	if ( check_time > level.time - 3000 ) {
ADDRGP4 check_time
INDIRI4
ADDRGP4 level+32
INDIRI4
CNSTI4 3000
SUBI4
LEI4 $538
line 801
;801:		return;
ADDRGP4 $515
JUMPV
LABELV $538
line 803
;802:	}
;803:	check_time = level.time;
ADDRGP4 check_time
ADDRGP4 level+32
INDIRI4
ASGNI4
line 805
;804:
;805:	if ( !CalculateScores( TEAM_RED ) ) {
CNSTI4 1
ARGI4
ADDRLP4 12
ADDRGP4 CalculateScores
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
NEI4 $542
line 806
;806:		CalculateScores( TEAM_BLUE );
CNSTI4 2
ARGI4
ADDRGP4 CalculateScores
CALLI4
pop
line 807
;807:	}
LABELV $542
line 808
;808:}
LABELV $515
endproc CheckDelay 20 4
export locationSpawn
proc locationSpawn 24 8
line 812
;809:
;810:void SP_target_location( gentity_t *self );
;811:
;812:void locationSpawn( gentity_t *ent, gitem_t *item ) {
line 815
;813:	gentity_t	*e;
;814:
;815:	switch ( item->giType ) {
ADDRLP4 4
ADDRFP4 4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
ASGNI4
ADDRLP4 12
CNSTI4 2
ASGNI4
ADDRLP4 4
INDIRI4
ADDRLP4 12
INDIRI4
LTI4 $545
ADDRLP4 4
INDIRI4
CNSTI4 8
GTI4 $545
ADDRLP4 4
INDIRI4
ADDRLP4 12
INDIRI4
LSHI4
ADDRGP4 $563-8
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $563
address $544
address $549
address $553
address $545
address $545
address $544
address $558
code
line 817
;816:	case IT_AMMO:
;817:		return;
LABELV $549
line 819
;818:	case IT_ARMOR:
;819:		if ( Q_stricmp( item->classname, "item_armor_shard" ) ) {
ADDRFP4 4
INDIRP4
INDIRP4
ARGP4
ADDRGP4 $552
ARGP4
ADDRLP4 16
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 0
EQI4 $544
line 820
;820:			break;
ADDRGP4 $546
JUMPV
line 822
;821:		}
;822:		return;
LABELV $553
line 824
;823:	case IT_HEALTH:
;824:		if ( !Q_stricmp( item->classname, "item_health_mega" ) ) {
ADDRFP4 4
INDIRP4
INDIRP4
ARGP4
ADDRGP4 $556
ARGP4
ADDRLP4 20
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
NEI4 $544
line 825
;825:			break;
ADDRGP4 $546
JUMPV
line 827
;826:		}
;827:		return;
line 829
;828:	case IT_PERSISTANT_POWERUP:
;829:		return;
LABELV $558
line 831
;830:	case IT_TEAM:
;831:		if ( item->giTag == PW_BLUEFLAG ) {
ADDRFP4 4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 8
NEI4 $559
line 832
;832:			VectorCopy( ent->r.currentOrigin, blueflag );
ADDRGP4 blueflag
ADDRFP4 0
INDIRP4
CNSTI4 496
ADDP4
INDIRB
ASGNB 12
line 833
;833:		} else if ( item->giTag == PW_REDFLAG ) {
ADDRGP4 $560
JUMPV
LABELV $559
ADDRFP4 4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 7
NEI4 $561
line 834
;834:			VectorCopy( ent->r.currentOrigin, redflag );
ADDRGP4 redflag
ADDRFP4 0
INDIRP4
CNSTI4 496
ADDP4
INDIRB
ASGNB 12
line 835
;835:		}
LABELV $561
LABELV $560
line 836
;836:	}
LABELV $545
LABELV $546
line 838
;837:
;838:	e = G_Spawn();
ADDRLP4 16
ADDRGP4 G_Spawn
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 16
INDIRP4
ASGNP4
line 839
;839:	e->classname = "target_location";
ADDRLP4 0
INDIRP4
CNSTI4 532
ADDP4
ADDRGP4 $565
ASGNP4
line 840
;840:	e->message = item->pickup_name;
ADDRLP4 0
INDIRP4
CNSTI4 644
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 28
ADDP4
INDIRP4
ASGNP4
line 841
;841:	e->count = 255;
ADDRLP4 0
INDIRP4
CNSTI4 784
ADDP4
CNSTI4 255
ASGNI4
line 842
;842:	VectorCopy( ent->r.currentOrigin, e->s.origin );
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 496
ADDP4
INDIRB
ASGNB 12
line 844
;843:
;844:	SP_target_location( e );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 SP_target_location
CALLV
pop
line 845
;845:}
LABELV $544
endproc locationSpawn 24 8
export Hook_Fire
proc Hook_Fire 8 4
line 849
;846:
;847:void Weapon_GrapplingHook_Fire(	gentity_t *ent );
;848:
;849:void Hook_Fire( gentity_t *ent ) {
line 858
;850:	gclient_t	*client;
;851:	usercmd_t	*ucmd;
;852:	/*
;853:	if ( g_grapple.integer < 1 ) {
;854:		return;
;855:	}
;856:	*/
;857:
;858:	client = ent->client;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
ASGNP4
line 859
;859:	if ( client->ps.weapon == WP_GRAPPLING_HOOK ) {
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 10
NEI4 $567
line 860
;860:		return;
ADDRGP4 $566
JUMPV
LABELV $567
line 862
;861:	}
;862:	if ( client->ps.pm_type != PM_NORMAL ) {
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 0
EQI4 $569
line 863
;863:		return;
ADDRGP4 $566
JUMPV
LABELV $569
line 866
;864:	}
;865:
;866:	ucmd = &client->pers.cmd;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 472
ADDP4
ASGNP4
line 867
;867:	if ( client->hook && !( ucmd->buttons & 32 ) ) {
ADDRLP4 0
INDIRP4
CNSTI4 2712
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $571
ADDRLP4 4
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
NEI4 $571
line 868
;868:		Weapon_HookFree( client->hook );
ADDRLP4 0
INDIRP4
CNSTI4 2712
ADDP4
INDIRP4
ARGP4
ADDRGP4 Weapon_HookFree
CALLV
pop
line 869
;869:	}
LABELV $571
line 870
;870:	if ( !client->hook && ( ucmd->buttons & 32 ) ) {
ADDRLP4 0
INDIRP4
CNSTI4 2712
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $573
ADDRLP4 4
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $573
line 871
;871:		if ( ent->timestamp > level.time - 400 ) {
ADDRFP4 0
INDIRP4
CNSTI4 648
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
CNSTI4 400
SUBI4
LEI4 $575
line 872
;872:			return;
ADDRGP4 $566
JUMPV
LABELV $575
line 874
;873:		}
;874:		client->fireHeld = qfalse;
ADDRLP4 0
INDIRP4
CNSTI4 2708
ADDP4
CNSTI4 0
ASGNI4
line 875
;875:		Weapon_GrapplingHook_Fire( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 Weapon_GrapplingHook_Fire
CALLV
pop
line 876
;876:	}
LABELV $573
line 877
;877:}
LABELV $566
endproc Hook_Fire 8 4
export Cmd_Drop_f
proc Cmd_Drop_f 64 12
line 881
;878:
;879:char *ConcatArgs( int start );
;880:
;881:void Cmd_Drop_f( gentity_t *ent ) {
line 888
;882:	char	*name;
;883:	gitem_t	*it;
;884:	gentity_t	*drop;
;885:	int	quantity;
;886:	int	j;
;887:
;888:	if ( is_spectator( ent->client ) ) {
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 is_spectator
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
EQI4 $579
line 889
;889:		return;
ADDRGP4 $578
JUMPV
LABELV $579
line 891
;890:	}
;891:	if ( ent->health <= 0 ) {
ADDRFP4 0
INDIRP4
CNSTI4 756
ADDP4
INDIRI4
CNSTI4 0
GTI4 $581
line 892
;892:		return;
ADDRGP4 $578
JUMPV
LABELV $581
line 894
;893:	}
;894:	name = ConcatArgs( 1 );
CNSTI4 1
ARGI4
ADDRLP4 24
ADDRGP4 ConcatArgs
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 24
INDIRP4
ASGNP4
line 895
;895:	it = BG_FindItem( name );
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 28
ADDRGP4 BG_FindItem
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 28
INDIRP4
ASGNP4
line 896
;896:	if ( !Registered( it ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 32
ADDRGP4 Registered
CALLI4
ASGNI4
ADDRLP4 32
INDIRI4
CNSTI4 0
NEI4 $583
line 897
;897:		return;
ADDRGP4 $578
JUMPV
LABELV $583
line 900
;898:	}
;899:
;900:	j = it->giTag;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
ASGNI4
line 901
;901:	switch ( it->giType ) {
ADDRLP4 36
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
ASGNI4
ADDRLP4 36
INDIRI4
CNSTI4 1
LTI4 $585
ADDRLP4 36
INDIRI4
CNSTI4 6
GTI4 $585
ADDRLP4 36
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $618-4
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $618
address $588
address $600
address $585
address $585
address $605
address $612
code
LABELV $588
line 903
;902:	case IT_WEAPON:
;903:		if ( g_dmflags.integer & 256 ) {
ADDRGP4 g_dmflags+12
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $589
line 904
;904:			return;
ADDRGP4 $578
JUMPV
LABELV $589
line 906
;905:		}
;906:		if ( !( ent->client->ps.stats[ STAT_WEAPONS ] & ( 1 << j ) ) ) {
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 1
ADDRLP4 4
INDIRI4
LSHI4
BANDI4
CNSTI4 0
NEI4 $592
line 907
;907:			return;
ADDRGP4 $578
JUMPV
LABELV $592
line 909
;908:		}
;909:		if ( ent->client->ps.weaponstate != WEAPON_READY ) {
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 0
EQI4 $594
line 910
;910:			return;
ADDRGP4 $578
JUMPV
LABELV $594
line 912
;911:		}
;912:		if ( j == ent->s.weapon ) {
ADDRLP4 4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
NEI4 $596
line 913
;913:			return;
ADDRGP4 $578
JUMPV
LABELV $596
line 915
;914:		}
;915:		if ( j > WP_MACHINEGUN && j != WP_GRAPPLING_HOOK && ent->client->ps.ammo[ j ] ) {
ADDRLP4 44
ADDRLP4 4
INDIRI4
ASGNI4
ADDRLP4 48
CNSTI4 2
ASGNI4
ADDRLP4 44
INDIRI4
ADDRLP4 48
INDIRI4
LEI4 $586
ADDRLP4 44
INDIRI4
CNSTI4 10
EQI4 $586
ADDRLP4 44
INDIRI4
ADDRLP4 48
INDIRI4
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
CNSTI4 376
ADDP4
ADDP4
INDIRI4
CNSTI4 0
EQI4 $586
line 916
;916:			drop = Drop_Item( ent, it, 0 );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
CNSTF4 0
ARGF4
ADDRLP4 52
ADDRGP4 Drop_Item
CALLP4
ASGNP4
ADDRLP4 12
ADDRLP4 52
INDIRP4
ASGNP4
line 917
;917:			drop->count = 1;
ADDRLP4 12
INDIRP4
CNSTI4 784
ADDP4
CNSTI4 1
ASGNI4
line 918
;918:			drop->s.otherEntityNum = ent->s.clientNum + 1;
ADDRLP4 12
INDIRP4
CNSTI4 140
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 919
;919:			ent->client->ps.stats[ STAT_WEAPONS ] &= ~( 1 << j );
ADDRLP4 56
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
CNSTI4 192
ADDP4
ASGNP4
ADDRLP4 56
INDIRP4
ADDRLP4 56
INDIRP4
INDIRI4
CNSTI4 1
ADDRLP4 4
INDIRI4
LSHI4
BCOMI4
BANDI4
ASGNI4
line 920
;920:			ent->client->ps.ammo[ j ] -= 1;
ADDRLP4 60
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
CNSTI4 376
ADDP4
ADDP4
ASGNP4
ADDRLP4 60
INDIRP4
ADDRLP4 60
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 921
;921:		}
line 922
;922:		break;
ADDRGP4 $586
JUMPV
LABELV $600
line 924
;923:	case IT_AMMO:
;924:		quantity = ent->client->ps.ammo[ j ];
ADDRLP4 16
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
CNSTI4 376
ADDP4
ADDP4
INDIRI4
ASGNI4
line 925
;925:		if ( !quantity ) {
ADDRLP4 16
INDIRI4
CNSTI4 0
NEI4 $601
line 926
;926:			return;
ADDRGP4 $578
JUMPV
LABELV $601
line 928
;927:		}
;928:		if ( quantity > it->quantity ) {
ADDRLP4 16
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
LEI4 $603
line 929
;929:			quantity = it->quantity;
ADDRLP4 16
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ASGNI4
line 930
;930:		}
LABELV $603
line 931
;931:		drop = Drop_Item( ent, it, 0 );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
CNSTF4 0
ARGF4
ADDRLP4 52
ADDRGP4 Drop_Item
CALLP4
ASGNP4
ADDRLP4 12
ADDRLP4 52
INDIRP4
ASGNP4
line 932
;932:		drop->count = quantity;
ADDRLP4 12
INDIRP4
CNSTI4 784
ADDP4
ADDRLP4 16
INDIRI4
ASGNI4
line 933
;933:		drop->s.otherEntityNum = ent->s.clientNum + 1;
ADDRLP4 12
INDIRP4
CNSTI4 140
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 934
;934:		ent->client->ps.ammo[ j ] -= quantity;
ADDRLP4 56
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
CNSTI4 376
ADDP4
ADDP4
ASGNP4
ADDRLP4 56
INDIRP4
ADDRLP4 56
INDIRP4
INDIRI4
ADDRLP4 16
INDIRI4
SUBI4
ASGNI4
line 935
;935:		break;
ADDRGP4 $586
JUMPV
LABELV $605
line 937
;936:	case IT_POWERUP:
;937:		if ( ent->client->ps.powerups[ j ] > level.time ) {
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
CNSTI4 312
ADDP4
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
LEI4 $586
line 938
;938:			drop = Drop_Item( ent, it, 0 );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
CNSTF4 0
ARGF4
ADDRLP4 60
ADDRGP4 Drop_Item
CALLP4
ASGNP4
ADDRLP4 12
ADDRLP4 60
INDIRP4
ASGNP4
line 939
;939:			drop->count = ( ent->client->ps.powerups[ j ] - level.time ) / 1000;
ADDRLP4 12
INDIRP4
CNSTI4 784
ADDP4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
CNSTI4 312
ADDP4
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
SUBI4
CNSTI4 1000
DIVI4
ASGNI4
line 940
;940:			if ( drop->count < 1 ) {
ADDRLP4 12
INDIRP4
CNSTI4 784
ADDP4
INDIRI4
CNSTI4 1
GEI4 $610
line 941
;941:				drop->count = 1;
ADDRLP4 12
INDIRP4
CNSTI4 784
ADDP4
CNSTI4 1
ASGNI4
line 942
;942:			}
LABELV $610
line 943
;943:			drop->s.otherEntityNum = ent->s.clientNum + 1;
ADDRLP4 12
INDIRP4
CNSTI4 140
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 944
;944:			ent->client->ps.powerups[ j ] = 0;
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
CNSTI4 312
ADDP4
ADDP4
CNSTI4 0
ASGNI4
line 945
;945:		}
line 946
;946:		break;
ADDRGP4 $586
JUMPV
LABELV $612
line 948
;947:	case IT_HOLDABLE:
;948:		if ( j == HI_KAMIKAZE ) {
ADDRLP4 4
INDIRI4
CNSTI4 3
NEI4 $613
line 949
;949:			return;
ADDRGP4 $578
JUMPV
LABELV $613
line 951
;950:		}
;951:		if ( bg_itemlist[ ent->client->ps.stats[ STAT_HOLDABLE_ITEM ] ].giTag == j ) {
CNSTI4 52
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
MULI4
ADDRGP4 bg_itemlist+40
ADDP4
INDIRI4
ADDRLP4 4
INDIRI4
NEI4 $586
line 952
;952:			drop = Drop_Item( ent, it, 0 );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
CNSTF4 0
ARGF4
ADDRLP4 60
ADDRGP4 Drop_Item
CALLP4
ASGNP4
ADDRLP4 12
ADDRLP4 60
INDIRP4
ASGNP4
line 953
;953:			drop->s.otherEntityNum = ent->s.clientNum + 1;
ADDRLP4 12
INDIRP4
CNSTI4 140
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 954
;954:			ent->client->ps.stats[ STAT_HOLDABLE_ITEM ] = 0;
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
CNSTI4 188
ADDP4
CNSTI4 0
ASGNI4
line 955
;955:		}
line 956
;956:		break;
LABELV $585
LABELV $586
line 958
;957:	}
;958:}
LABELV $578
endproc Cmd_Drop_f 64 12
export Cmd_Ready_f
proc Cmd_Ready_f 0 8
line 960
;959:
;960:void Cmd_Ready_f( gentity_t *ent ) {
line 961
;961:	ent->readyBegin = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 928
ADDP4
CNSTI4 1
ASGNI4
line 962
;962:	trap_SendServerCommand( ent - g_entities, "print \"ready\n\"" );
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 932
DIVI4
ARGI4
ADDRGP4 $621
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 963
;963:}
LABELV $620
endproc Cmd_Ready_f 0 8
export WeaponDisabled
proc WeaponDisabled 8 8
line 969
;964:
;965:
;966:
;967:int G_ItemDisabled( gitem_t *item );
;968:
;969:qboolean WeaponDisabled( gitem_t *item ) {
line 970
;970:	if ( g_weaponlimit.integer & 1 ) {
ADDRGP4 g_weaponlimit+12
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $623
line 971
;971:		if ( !Q_stricmp( item->classname, "ammo_bullets" ) ) {
ADDRFP4 0
INDIRP4
INDIRP4
ARGP4
ADDRGP4 $628
ARGP4
ADDRLP4 0
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $626
line 972
;972:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $622
JUMPV
LABELV $626
line 974
;973:		}
;974:	}
LABELV $623
line 975
;975:	if ( g_weaponlimit.integer & 2 ) {
ADDRGP4 g_weaponlimit+12
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $629
line 976
;976:		if ( !Q_stricmp( item->classname, "weapon_shotgun" ) ) {
ADDRFP4 0
INDIRP4
INDIRP4
ARGP4
ADDRGP4 $634
ARGP4
ADDRLP4 0
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $632
line 977
;977:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $622
JUMPV
LABELV $632
line 979
;978:		}
;979:		if ( !Q_stricmp( item->classname, "ammo_shells" ) ) {
ADDRFP4 0
INDIRP4
INDIRP4
ARGP4
ADDRGP4 $637
ARGP4
ADDRLP4 4
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $635
line 980
;980:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $622
JUMPV
LABELV $635
line 982
;981:		}
;982:	}
LABELV $629
line 983
;983:	if ( g_weaponlimit.integer & 4 ) {
ADDRGP4 g_weaponlimit+12
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $638
line 984
;984:		if ( !Q_stricmp( item->classname, "weapon_grenadelauncher" ) ) {
ADDRFP4 0
INDIRP4
INDIRP4
ARGP4
ADDRGP4 $643
ARGP4
ADDRLP4 0
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $641
line 985
;985:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $622
JUMPV
LABELV $641
line 987
;986:		}
;987:		if ( !Q_stricmp( item->classname, "ammo_grenades" ) ) {
ADDRFP4 0
INDIRP4
INDIRP4
ARGP4
ADDRGP4 $646
ARGP4
ADDRLP4 4
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $644
line 988
;988:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $622
JUMPV
LABELV $644
line 990
;989:		}
;990:	}
LABELV $638
line 991
;991:	if ( g_weaponlimit.integer & 8 ) {
ADDRGP4 g_weaponlimit+12
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
EQI4 $647
line 992
;992:		if ( !Q_stricmp( item->classname, "weapon_rocketlauncher" ) ) {
ADDRFP4 0
INDIRP4
INDIRP4
ARGP4
ADDRGP4 $652
ARGP4
ADDRLP4 0
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $650
line 993
;993:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $622
JUMPV
LABELV $650
line 995
;994:		}
;995:		if ( !Q_stricmp( item->classname, "ammo_rockets" ) ) {
ADDRFP4 0
INDIRP4
INDIRP4
ARGP4
ADDRGP4 $655
ARGP4
ADDRLP4 4
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $653
line 996
;996:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $622
JUMPV
LABELV $653
line 998
;997:		}
;998:	}
LABELV $647
line 999
;999:	if ( g_weaponlimit.integer & 16 ) {
ADDRGP4 g_weaponlimit+12
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $656
line 1000
;1000:		if ( !Q_stricmp( item->classname, "weapon_lightning" ) ) {
ADDRFP4 0
INDIRP4
INDIRP4
ARGP4
ADDRGP4 $661
ARGP4
ADDRLP4 0
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $659
line 1001
;1001:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $622
JUMPV
LABELV $659
line 1003
;1002:		}
;1003:		if ( !Q_stricmp( item->classname, "ammo_lightning" ) ) {
ADDRFP4 0
INDIRP4
INDIRP4
ARGP4
ADDRGP4 $664
ARGP4
ADDRLP4 4
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $662
line 1004
;1004:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $622
JUMPV
LABELV $662
line 1006
;1005:		}
;1006:	}
LABELV $656
line 1007
;1007:	if ( g_weaponlimit.integer & 32 ) {
ADDRGP4 g_weaponlimit+12
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $665
line 1008
;1008:		if ( !Q_stricmp( item->classname, "weapon_railgun" ) ) {
ADDRFP4 0
INDIRP4
INDIRP4
ARGP4
ADDRGP4 $670
ARGP4
ADDRLP4 0
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $668
line 1009
;1009:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $622
JUMPV
LABELV $668
line 1011
;1010:		}
;1011:		if ( !Q_stricmp( item->classname, "ammo_slugs" ) ) {
ADDRFP4 0
INDIRP4
INDIRP4
ARGP4
ADDRGP4 $673
ARGP4
ADDRLP4 4
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $671
line 1012
;1012:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $622
JUMPV
LABELV $671
line 1014
;1013:		}
;1014:	}
LABELV $665
line 1015
;1015:	if ( g_weaponlimit.integer & 64 ) {
ADDRGP4 g_weaponlimit+12
INDIRI4
CNSTI4 64
BANDI4
CNSTI4 0
EQI4 $674
line 1016
;1016:		if ( !Q_stricmp( item->classname, "weapon_plasmagun" ) ) {
ADDRFP4 0
INDIRP4
INDIRP4
ARGP4
ADDRGP4 $679
ARGP4
ADDRLP4 0
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $677
line 1017
;1017:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $622
JUMPV
LABELV $677
line 1019
;1018:		}
;1019:		if ( !Q_stricmp( item->classname, "ammo_cells" ) ) {
ADDRFP4 0
INDIRP4
INDIRP4
ARGP4
ADDRGP4 $682
ARGP4
ADDRLP4 4
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $680
line 1020
;1020:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $622
JUMPV
LABELV $680
line 1022
;1021:		}
;1022:	}
LABELV $674
line 1023
;1023:	if ( g_weaponlimit.integer & 128 ) {
ADDRGP4 g_weaponlimit+12
INDIRI4
CNSTI4 128
BANDI4
CNSTI4 0
EQI4 $683
line 1024
;1024:		if ( !Q_stricmp( item->classname, "weapon_bfg" ) ) {
ADDRFP4 0
INDIRP4
INDIRP4
ARGP4
ADDRGP4 $688
ARGP4
ADDRLP4 0
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $686
line 1025
;1025:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $622
JUMPV
LABELV $686
line 1027
;1026:		}
;1027:		if ( !Q_stricmp( item->classname, "ammo_bfg" ) ) {
ADDRFP4 0
INDIRP4
INDIRP4
ARGP4
ADDRGP4 $691
ARGP4
ADDRLP4 4
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $689
line 1028
;1028:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $622
JUMPV
LABELV $689
line 1030
;1029:		}
;1030:	}
LABELV $683
line 1031
;1031:	if ( g_weaponlimit.integer & 256 ) {
ADDRGP4 g_weaponlimit+12
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $692
line 1032
;1032:		if ( !Q_stricmp( item->classname, "weapon_nailgun" ) ) {
ADDRFP4 0
INDIRP4
INDIRP4
ARGP4
ADDRGP4 $697
ARGP4
ADDRLP4 0
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $695
line 1033
;1033:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $622
JUMPV
LABELV $695
line 1035
;1034:		}
;1035:		if ( !Q_stricmp( item->classname, "ammo_nails" ) ) {
ADDRFP4 0
INDIRP4
INDIRP4
ARGP4
ADDRGP4 $700
ARGP4
ADDRLP4 4
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $698
line 1036
;1036:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $622
JUMPV
LABELV $698
line 1038
;1037:		}
;1038:	}
LABELV $692
line 1039
;1039:	if ( g_weaponlimit.integer & 512 ) {
ADDRGP4 g_weaponlimit+12
INDIRI4
CNSTI4 512
BANDI4
CNSTI4 0
EQI4 $701
line 1040
;1040:		if ( !Q_stricmp( item->classname, "weapon_prox_launcher" ) ) {
ADDRFP4 0
INDIRP4
INDIRP4
ARGP4
ADDRGP4 $706
ARGP4
ADDRLP4 0
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $704
line 1041
;1041:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $622
JUMPV
LABELV $704
line 1043
;1042:		}
;1043:		if ( !Q_stricmp( item->classname, "ammo_mines" ) ) {
ADDRFP4 0
INDIRP4
INDIRP4
ARGP4
ADDRGP4 $709
ARGP4
ADDRLP4 4
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $707
line 1044
;1044:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $622
JUMPV
LABELV $707
line 1046
;1045:		}
;1046:	}
LABELV $701
line 1047
;1047:	if ( g_weaponlimit.integer & 1024 ) {
ADDRGP4 g_weaponlimit+12
INDIRI4
CNSTI4 1024
BANDI4
CNSTI4 0
EQI4 $710
line 1048
;1048:		if ( !Q_stricmp( item->classname, "weapon_chaingun" ) ) {
ADDRFP4 0
INDIRP4
INDIRP4
ARGP4
ADDRGP4 $715
ARGP4
ADDRLP4 0
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $713
line 1049
;1049:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $622
JUMPV
LABELV $713
line 1051
;1050:		}
;1051:		if ( !Q_stricmp( item->classname, "ammo_belt" ) ) {
ADDRFP4 0
INDIRP4
INDIRP4
ARGP4
ADDRGP4 $718
ARGP4
ADDRLP4 4
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $716
line 1052
;1052:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $622
JUMPV
LABELV $716
line 1054
;1053:		}
;1054:	}
LABELV $710
line 1056
;1055:
;1056:	if ( G_ItemDisabled( item ) ) {
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ADDRGP4 G_ItemDisabled
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $719
line 1057
;1057:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $622
JUMPV
LABELV $719
line 1059
;1058:	}
;1059:	return qfalse;
CNSTI4 0
RETI4
LABELV $622
endproc WeaponDisabled 8 8
export RegisterWeapon
proc RegisterWeapon 8 4
line 1062
;1060:}
;1061:
;1062:void RegisterWeapon( void ) {
line 1063
;1063:	if ( g_wpflags.integer & 2 ) {
ADDRGP4 g_wpflags+12
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $722
line 1064
;1064:		RegisterItem( BG_FindItemForWeapon( WP_SHOTGUN ) );
CNSTI4 3
ARGI4
ADDRLP4 0
ADDRGP4 BG_FindItemForWeapon
CALLP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 RegisterItem
CALLV
pop
line 1065
;1065:	}
LABELV $722
line 1066
;1066:	if ( g_wpflags.integer & 4 ) {
ADDRGP4 g_wpflags+12
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $725
line 1067
;1067:		RegisterItem( BG_FindItemForWeapon( WP_GRENADE_LAUNCHER ) );
CNSTI4 4
ARGI4
ADDRLP4 0
ADDRGP4 BG_FindItemForWeapon
CALLP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 RegisterItem
CALLV
pop
line 1068
;1068:	}
LABELV $725
line 1069
;1069:	if ( g_wpflags.integer & 8 ) {
ADDRGP4 g_wpflags+12
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
EQI4 $728
line 1070
;1070:		RegisterItem( BG_FindItemForWeapon( WP_ROCKET_LAUNCHER ) );
CNSTI4 5
ARGI4
ADDRLP4 0
ADDRGP4 BG_FindItemForWeapon
CALLP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 RegisterItem
CALLV
pop
line 1071
;1071:	}
LABELV $728
line 1072
;1072:	if ( g_wpflags.integer & 16 ) {
ADDRGP4 g_wpflags+12
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $731
line 1073
;1073:		RegisterItem( BG_FindItemForWeapon( WP_LIGHTNING ) );
CNSTI4 6
ARGI4
ADDRLP4 0
ADDRGP4 BG_FindItemForWeapon
CALLP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 RegisterItem
CALLV
pop
line 1074
;1074:	}
LABELV $731
line 1075
;1075:	if ( g_wpflags.integer & 32 ) {
ADDRGP4 g_wpflags+12
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $734
line 1076
;1076:		RegisterItem( BG_FindItemForWeapon( WP_RAILGUN ) );
CNSTI4 7
ARGI4
ADDRLP4 0
ADDRGP4 BG_FindItemForWeapon
CALLP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 RegisterItem
CALLV
pop
line 1077
;1077:	}
LABELV $734
line 1078
;1078:	if ( g_wpflags.integer & 64 ) {
ADDRGP4 g_wpflags+12
INDIRI4
CNSTI4 64
BANDI4
CNSTI4 0
EQI4 $737
line 1079
;1079:		RegisterItem( BG_FindItemForWeapon( WP_PLASMAGUN ) );
CNSTI4 8
ARGI4
ADDRLP4 0
ADDRGP4 BG_FindItemForWeapon
CALLP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 RegisterItem
CALLV
pop
line 1080
;1080:	}
LABELV $737
line 1081
;1081:	if ( g_wpflags.integer & 128 ) {
ADDRGP4 g_wpflags+12
INDIRI4
CNSTI4 128
BANDI4
CNSTI4 0
EQI4 $740
line 1082
;1082:		RegisterItem( BG_FindItemForWeapon( WP_BFG ) );
CNSTI4 9
ARGI4
ADDRLP4 0
ADDRGP4 BG_FindItemForWeapon
CALLP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 RegisterItem
CALLV
pop
line 1083
;1083:	}
LABELV $740
line 1084
;1084:	if ( g_wpflags.integer & 512 ) {
ADDRGP4 g_wpflags+12
INDIRI4
CNSTI4 512
BANDI4
CNSTI4 0
EQI4 $743
line 1085
;1085:		RegisterItem( BG_FindItemForWeapon( WP_PROX_LAUNCHER ) );
CNSTI4 12
ARGI4
ADDRLP4 0
ADDRGP4 BG_FindItemForWeapon
CALLP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 RegisterItem
CALLV
pop
line 1086
;1086:	}
LABELV $743
line 1104
;1087:
;1088:#ifdef MISSIONPACK
;1089:	if ( g_wpflags.integer & 256 ) {
;1090:		RegisterItem( BG_FindItemForWeapon( WP_NAILGUN ) );
;1091:	}
;1092:	if ( g_wpflags.integer & 512 ) {
;1093:		RegisterItem( BG_FindItemForWeapon( WP_PROX_LAUNCHER ) );
;1094:	}
;1095:	if ( g_wpflags.integer & 1024 ) {
;1096:		RegisterItem( BG_FindItemForWeapon( WP_CHAINGUN ) );
;1097:	}
;1098:#endif
;1099:	/*
;1100:	if ( g_grapple.integer > 0 ) {
;1101:		RegisterItem( BG_FindItemForWeapon( WP_GRAPPLING_HOOK ) );
;1102:	} */
;1103:
;1104:	VectorClear( redflag );
ADDRLP4 0
CNSTF4 0
ASGNF4
ADDRGP4 redflag+8
ADDRLP4 0
INDIRF4
ASGNF4
ADDRGP4 redflag+4
ADDRLP4 0
INDIRF4
ASGNF4
ADDRGP4 redflag
ADDRLP4 0
INDIRF4
ASGNF4
line 1105
;1105:	VectorClear( blueflag );
ADDRLP4 4
CNSTF4 0
ASGNF4
ADDRGP4 blueflag+8
ADDRLP4 4
INDIRF4
ASGNF4
ADDRGP4 blueflag+4
ADDRLP4 4
INDIRF4
ASGNF4
ADDRGP4 blueflag
ADDRLP4 4
INDIRF4
ASGNF4
line 1106
;1106:}
LABELV $721
endproc RegisterWeapon 8 4
export SpawnWeapon
proc SpawnWeapon 16 0
line 1108
;1107:
;1108:void SpawnWeapon( gclient_t *client ) {
line 1111
;1109:	int	i;
;1110:
;1111:	if ( g_weaponlimit.integer & 1 && !( g_wpflags.integer & 1 ) ) {
ADDRLP4 4
CNSTI4 1
ASGNI4
ADDRLP4 8
CNSTI4 0
ASGNI4
ADDRGP4 g_weaponlimit+12
INDIRI4
ADDRLP4 4
INDIRI4
BANDI4
ADDRLP4 8
INDIRI4
EQI4 $751
ADDRGP4 g_wpflags+12
INDIRI4
ADDRLP4 4
INDIRI4
BANDI4
ADDRLP4 8
INDIRI4
NEI4 $751
line 1112
;1112:		client->ps.stats[ STAT_WEAPONS ] &= ~( 1 << WP_MACHINEGUN );
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI4
CNSTI4 -5
BANDI4
ASGNI4
line 1113
;1113:		client->ps.ammo[ WP_MACHINEGUN ] = 0;
ADDRFP4 0
INDIRP4
CNSTI4 384
ADDP4
CNSTI4 0
ASGNI4
line 1114
;1114:	}
LABELV $751
line 1115
;1115:	if ( g_wpflags.integer & 2 ) {
ADDRGP4 g_wpflags+12
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $755
line 1116
;1116:		client->ps.stats[ STAT_WEAPONS ] |= 1 << WP_SHOTGUN;
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI4
CNSTI4 8
BORI4
ASGNI4
line 1117
;1117:		client->ps.ammo[ WP_SHOTGUN ] = 10;
ADDRFP4 0
INDIRP4
CNSTI4 388
ADDP4
CNSTI4 10
ASGNI4
line 1118
;1118:	}
LABELV $755
line 1119
;1119:	if ( g_wpflags.integer & 4 ) {
ADDRGP4 g_wpflags+12
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $758
line 1120
;1120:		client->ps.stats[ STAT_WEAPONS ] |= 1 << WP_GRENADE_LAUNCHER;
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI4
CNSTI4 16
BORI4
ASGNI4
line 1121
;1121:		client->ps.ammo[ WP_GRENADE_LAUNCHER ] = 5;
ADDRFP4 0
INDIRP4
CNSTI4 392
ADDP4
CNSTI4 5
ASGNI4
line 1122
;1122:	}
LABELV $758
line 1123
;1123:	if ( g_wpflags.integer & 8 ) {
ADDRGP4 g_wpflags+12
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
EQI4 $761
line 1124
;1124:		client->ps.stats[ STAT_WEAPONS ] |= 1 << WP_ROCKET_LAUNCHER;
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI4
CNSTI4 32
BORI4
ASGNI4
line 1125
;1125:		client->ps.ammo[ WP_ROCKET_LAUNCHER ] = 5;
ADDRFP4 0
INDIRP4
CNSTI4 396
ADDP4
CNSTI4 5
ASGNI4
line 1126
;1126:	}
LABELV $761
line 1127
;1127:	if ( g_wpflags.integer & 16 ) {
ADDRGP4 g_wpflags+12
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $764
line 1128
;1128:		client->ps.stats[ STAT_WEAPONS ] |= 1 << WP_LIGHTNING;
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI4
CNSTI4 64
BORI4
ASGNI4
line 1129
;1129:		client->ps.ammo[ WP_LIGHTNING ] = 60;
ADDRFP4 0
INDIRP4
CNSTI4 400
ADDP4
CNSTI4 60
ASGNI4
line 1130
;1130:	}
LABELV $764
line 1131
;1131:	if ( g_wpflags.integer & 32 ) {
ADDRGP4 g_wpflags+12
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $767
line 1132
;1132:		client->ps.stats[ STAT_WEAPONS ] |= 1 << WP_RAILGUN;
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI4
CNSTI4 128
BORI4
ASGNI4
line 1133
;1133:		client->ps.ammo[ WP_RAILGUN ] = 10;
ADDRFP4 0
INDIRP4
CNSTI4 404
ADDP4
CNSTI4 10
ASGNI4
line 1134
;1134:	}
LABELV $767
line 1135
;1135:	if ( g_wpflags.integer & 64 ) {
ADDRGP4 g_wpflags+12
INDIRI4
CNSTI4 64
BANDI4
CNSTI4 0
EQI4 $770
line 1136
;1136:		client->ps.stats[ STAT_WEAPONS ] |= 1 << WP_PLASMAGUN;
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI4
CNSTI4 256
BORI4
ASGNI4
line 1137
;1137:		client->ps.ammo[ WP_PLASMAGUN ] = 30;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
CNSTI4 30
ASGNI4
line 1138
;1138:	}
LABELV $770
line 1139
;1139:	if ( g_wpflags.integer & 128 ) {
ADDRGP4 g_wpflags+12
INDIRI4
CNSTI4 128
BANDI4
CNSTI4 0
EQI4 $773
line 1140
;1140:		client->ps.stats[ STAT_WEAPONS ] |= 1 << WP_BFG;
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI4
CNSTI4 512
BORI4
ASGNI4
line 1141
;1141:		client->ps.ammo[ WP_BFG ] = 15;
ADDRFP4 0
INDIRP4
CNSTI4 412
ADDP4
CNSTI4 15
ASGNI4
line 1142
;1142:	}
LABELV $773
line 1143
;1143:	if ( g_wpflags.integer & 512 ) {
ADDRGP4 g_wpflags+12
INDIRI4
CNSTI4 512
BANDI4
CNSTI4 0
EQI4 $776
line 1144
;1144:		client->ps.stats[ STAT_WEAPONS ] |= 1 << WP_PROX_LAUNCHER;
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI4
CNSTI4 4096
BORI4
ASGNI4
line 1145
;1145:		client->ps.ammo[ WP_PROX_LAUNCHER ] = 10;
ADDRFP4 0
INDIRP4
CNSTI4 424
ADDP4
CNSTI4 10
ASGNI4
line 1146
;1146:	}
LABELV $776
line 1162
;1147:#ifdef MISSIONPACK
;1148:	if ( g_wpflags.integer & 256 ) {
;1149:		client->ps.stats[ STAT_WEAPONS ] |= 1 << WP_NAILGUN;
;1150:		client->ps.ammo[ WP_NAILGUN ] = 20;
;1151:	}
;1152:	if ( g_wpflags.integer & 512 ) {
;1153:		client->ps.stats[ STAT_WEAPONS ] |= 1 << WP_PROX_LAUNCHER;
;1154:		client->ps.ammo[ WP_PROX_LAUNCHER ] = 10;
;1155:	}
;1156:	if ( g_wpflags.integer & 1024 ) {
;1157:		client->ps.stats[ STAT_WEAPONS ] |= 1 << WP_CHAINGUN;
;1158:		client->ps.ammo[ WP_CHAINGUN ] = 100;
;1159:	}
;1160:#endif
;1161:
;1162:	if ( g_dmflags.integer & 1024 ) {
ADDRGP4 g_dmflags+12
INDIRI4
CNSTI4 1024
BANDI4
CNSTI4 0
EQI4 $779
line 1163
;1163:		for ( i = 0; i < MAX_WEAPONS; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $782
line 1164
;1164:			client->ps.ammo[ i ] = 999;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 376
ADDP4
ADDP4
CNSTI4 999
ASGNI4
line 1165
;1165:		}
LABELV $783
line 1163
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $782
line 1166
;1166:	}
LABELV $779
line 1167
;1167:}
LABELV $750
endproc SpawnWeapon 16 0
export InvulnerabilityEffect
proc InvulnerabilityEffect 48 20
line 1171
;1168:
;1169:int RaySphereIntersections( vec3_t origin, float radius, vec3_t point, vec3_t dir, vec3_t intersections[ 2 ] );
;1170:
;1171:int InvulnerabilityEffect( gentity_t *targ, vec3_t dir, vec3_t point, vec3_t impactpoint, vec3_t bouncedir ) {
line 1175
;1172:	vec3_t	intersections[ 2 ], vec;
;1173:	int	n;
;1174:
;1175:	if ( !targ->freezeState ) {
ADDRFP4 0
INDIRP4
CNSTI4 924
ADDP4
INDIRI4
CNSTI4 0
NEI4 $787
line 1176
;1176:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $786
JUMPV
LABELV $787
line 1178
;1177:	}
;1178:	VectorCopy( dir, vec );
ADDRLP4 0
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1179
;1179:	VectorInverse( vec );
ADDRLP4 0
ARGP4
ADDRGP4 VectorInverse
CALLV
pop
line 1180
;1180:	n = RaySphereIntersections( targ->r.currentOrigin, 42, point, vec, intersections );
ADDRFP4 0
INDIRP4
CNSTI4 496
ADDP4
ARGP4
CNSTF4 1109917696
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 12
ARGP4
ADDRLP4 40
ADDRGP4 RaySphereIntersections
CALLI4
ASGNI4
ADDRLP4 36
ADDRLP4 40
INDIRI4
ASGNI4
line 1181
;1181:	if ( n > 0 ) {
ADDRLP4 36
INDIRI4
CNSTI4 0
LEI4 $789
line 1182
;1182:		VectorSubtract( intersections[ 0 ], targ->r.currentOrigin, vec );
ADDRLP4 44
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 12
INDIRF4
ADDRLP4 44
INDIRP4
CNSTI4 496
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 12+4
INDIRF4
ADDRLP4 44
INDIRP4
CNSTI4 500
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 12+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 504
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1183
;1183:		if ( impactpoint ) {
ADDRFP4 12
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $795
line 1184
;1184:			VectorCopy( intersections[ 0 ], impactpoint );
ADDRFP4 12
INDIRP4
ADDRLP4 12
INDIRB
ASGNB 12
line 1185
;1185:		}
LABELV $795
line 1186
;1186:		if ( bouncedir ) {
ADDRFP4 16
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $797
line 1187
;1187:			VectorCopy( vec, bouncedir );
ADDRFP4 16
INDIRP4
ADDRLP4 0
INDIRB
ASGNB 12
line 1188
;1188:			VectorNormalize( bouncedir );
ADDRFP4 16
INDIRP4
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 1189
;1189:		}
LABELV $797
line 1190
;1190:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $786
JUMPV
LABELV $789
line 1192
;1191:	}
;1192:	return qfalse;
CNSTI4 0
RETI4
LABELV $786
endproc InvulnerabilityEffect 48 20
import RaySphereIntersections
import G_ItemDisabled
import ConcatArgs
import Weapon_GrapplingHook_Fire
import SP_target_location
import Team_ForceGesture
import SelectRandomDeathmatchSpawnPoint
import Kamikaze_DeathTimer
bss
align 4
LABELV blueflag
skip 12
align 4
LABELV redflag
skip 12
export check_time
align 4
LABELV check_time
skip 4
import CheckPlayerPostions
import G_SendCommandToClient
import visible
import findradius
import trap_SnapVector
import trap_GeneticParentsAndChildSelection
import trap_BotResetWeaponState
import trap_BotFreeWeaponState
import trap_BotAllocWeaponState
import trap_BotLoadWeaponWeights
import trap_BotGetWeaponInfo
import trap_BotChooseBestFightWeapon
import trap_BotAddAvoidSpot
import trap_BotInitMoveState
import trap_BotFreeMoveState
import trap_BotAllocMoveState
import trap_BotPredictVisiblePosition
import trap_BotMovementViewTarget
import trap_BotReachabilityArea
import trap_BotResetLastAvoidReach
import trap_BotResetAvoidReach
import trap_BotMoveInDirection
import trap_BotMoveToGoal
import trap_BotResetMoveState
import trap_BotFreeGoalState
import trap_BotAllocGoalState
import trap_BotMutateGoalFuzzyLogic
import trap_BotSaveGoalFuzzyLogic
import trap_BotInterbreedGoalFuzzyLogic
import trap_BotFreeItemWeights
import trap_BotLoadItemWeights
import trap_BotUpdateEntityItems
import trap_BotInitLevelItems
import trap_BotSetAvoidGoalTime
import trap_BotAvoidGoalTime
import trap_BotGetLevelItemGoal
import trap_BotGetMapLocationGoal
import trap_BotGetNextCampSpotGoal
import trap_BotItemGoalInVisButNotVisible
import trap_BotTouchingGoal
import trap_BotChooseNBGItem
import trap_BotChooseLTGItem
import trap_BotGetSecondGoal
import trap_BotGetTopGoal
import trap_BotGoalName
import trap_BotDumpGoalStack
import trap_BotDumpAvoidGoals
import trap_BotEmptyGoalStack
import trap_BotPopGoal
import trap_BotPushGoal
import trap_BotResetAvoidGoals
import trap_BotRemoveFromAvoidGoals
import trap_BotResetGoalState
import trap_BotSetChatName
import trap_BotSetChatGender
import trap_BotLoadChatFile
import trap_BotReplaceSynonyms
import trap_UnifyWhiteSpaces
import trap_BotMatchVariable
import trap_BotFindMatch
import trap_StringContains
import trap_BotGetChatMessage
import trap_BotEnterChat
import trap_BotChatLength
import trap_BotReplyChat
import trap_BotNumInitialChats
import trap_BotInitialChat
import trap_BotNumConsoleMessages
import trap_BotNextConsoleMessage
import trap_BotRemoveConsoleMessage
import trap_BotQueueConsoleMessage
import trap_BotFreeChatState
import trap_BotAllocChatState
import trap_Characteristic_String
import trap_Characteristic_BInteger
import trap_Characteristic_Integer
import trap_Characteristic_BFloat
import trap_Characteristic_Float
import trap_BotFreeCharacter
import trap_BotLoadCharacter
import trap_EA_ResetInput
import trap_EA_GetInput
import trap_EA_EndRegular
import trap_EA_View
import trap_EA_Move
import trap_EA_DelayedJump
import trap_EA_Jump
import trap_EA_SelectWeapon
import trap_EA_MoveRight
import trap_EA_MoveLeft
import trap_EA_MoveBack
import trap_EA_MoveForward
import trap_EA_MoveDown
import trap_EA_MoveUp
import trap_EA_Crouch
import trap_EA_Respawn
import trap_EA_Use
import trap_EA_Attack
import trap_EA_Talk
import trap_EA_Gesture
import trap_EA_Action
import trap_EA_Command
import trap_EA_SayTeam
import trap_EA_Say
import trap_AAS_PredictClientMovement
import trap_AAS_Swimming
import trap_AAS_AlternativeRouteGoals
import trap_AAS_PredictRoute
import trap_AAS_EnableRoutingArea
import trap_AAS_AreaTravelTimeToGoalArea
import trap_AAS_AreaLadder
import trap_AAS_AreaReachability
import trap_AAS_IntForBSPEpairKey
import trap_AAS_FloatForBSPEpairKey
import trap_AAS_VectorForBSPEpairKey
import trap_AAS_ValueForBSPEpairKey
import trap_AAS_NextBSPEntity
import trap_AAS_PointContents
import trap_AAS_TraceAreas
import trap_AAS_PointReachabilityAreaIndex
import trap_AAS_PointAreaNum
import trap_AAS_Time
import trap_AAS_PresenceTypeBoundingBox
import trap_AAS_Initialized
import trap_AAS_EntityInfo
import trap_AAS_AreaInfo
import trap_AAS_BBoxAreas
import trap_BotUserCommand
import trap_BotGetServerCommand
import trap_BotGetSnapshotEntity
import trap_BotLibTest
import trap_BotLibUpdateEntity
import trap_BotLibLoadMap
import trap_BotLibStartFrame
import trap_BotLibDefine
import trap_BotLibVarGet
import trap_BotLibVarSet
import trap_BotLibShutdown
import trap_BotLibSetup
import trap_DebugPolygonDelete
import trap_DebugPolygonCreate
import trap_GetEntityToken
import trap_GetUsercmd
import trap_BotFreeClient
import trap_BotAllocateClient
import trap_EntityContact
import trap_EntitiesInBox
import trap_UnlinkEntity
import trap_LinkEntity
import trap_AreasConnected
import trap_AdjustAreaPortalState
import trap_InPVSIgnorePortals
import trap_InPVS
import trap_PointContents
import trap_Trace
import trap_SetBrushModel
import trap_GetServerinfo
import trap_SetUserinfo
import trap_GetUserinfo
import trap_GetConfigstring
import trap_SetConfigstring
import trap_SendServerCommand
import trap_DropClient
import trap_LocateGameData
import trap_Cvar_VariableStringBuffer
import trap_Cvar_VariableValue
import trap_Cvar_VariableIntegerValue
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_SendConsoleCommand
import trap_FS_GetFileList
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_Milliseconds
import trap_Error
import trap_Printf
import trep_debug
import g_startArmor
import g_doReady
import g_weaponlimit
import g_wpflags
import g_CurrentRound
import g_NumRounds
import g_RegenAmmo
import g_RegenHealth
import g_AutoChangeMap
import g_lastmap2
import g_lastmap
import g_randommap
import g_mapfile
import g_ReverseCTF
import g_GuassRate
import g_GuassSelfDamage
import g_GuassKnockBack
import g_GuassJump
import g_PCTeamkills
import g_GrappleMode
import g_MaxTurrets
import g_Turrets
import g_StartRandom
import g_StartBFG
import g_StartPlasma
import g_StartGauss
import g_StartFlame
import g_StartSingCan
import g_StartGrenade
import g_StartSG
import g_StartMG
import g_StartGauntlet
import g_RedMC
import g_BlueMC
import g_GameMode
import g_instagib
import sv_fps
import g_lightningDamage
import g_truePing
import g_unlaggedVersion
import g_delagHitscan
import g_proxMineTimeout
import g_singlePlayer
import g_enableBreath
import g_enableDust
import g_rankings
import pmove_msec
import pmove_fixed
import g_smoothClients
import g_blueteam
import g_redteam
import g_cubeTimeout
import g_obeliskRespawnDelay
import g_obeliskRegenAmount
import g_obeliskRegenPeriod
import g_obeliskHealth
import g_filterBan
import g_banIPs
import g_teamForceBalance
import g_teamAutoJoin
import g_allowVote
import g_blood
import g_doWarmup
import g_warmup
import g_motd
import g_synchronousClients
import g_weaponTeamRespawn
import g_weaponRespawn
import g_debugDamage
import g_debugAlloc
import g_debugMove
import g_inactivity
import g_forcerespawn
import g_quadfactor
import g_knockback
import g_speed
import g_gravity
import g_needpass
import g_password
import g_friendlyFire
import g_capturelimit
import g_timelimit
import g_fraglimit
import g_dmflags
import g_restarted
import g_maxGameClients
import g_maxclients
import g_cheats
import g_dedicated
import g_gametype
import g_entities
import level
import Pickup_Team
import CheckTeamStatus
import TeamplayInfoMessage
import Team_GetLocationMsg
import Team_GetLocation
import SelectCTFSpawnPoint
import Team_FreeEntity
import Team_ReturnFlag
import Team_InitGame
import Team_CheckHurtCarrier
import Team_FragBonuses
import Team_DroppedFlagThink
import AddTeamScore
import TeamColorString
import OtherTeamName
import TeamName
import OtherTeam
import BotTestAAS
import BotAIStartFrame
import BotAIShutdownClient
import BotAISetupClient
import BotAILoadMap
import BotAIShutdown
import BotAISetup
import BotInterbreedEndMatch
import Svcmd_BotList_f
import Svcmd_AddBot_f
import G_BotConnect
import G_RemoveQueuedBotBegin
import G_CheckBotSpawn
import G_GetBotInfoByName
import G_GetBotInfoByNumber
import G_InitBots
import Svcmd_AbortPodium_f
import SpawnModelsOnVictoryPads
import UpdateTournamentInfo
import G_WriteSessionData
import G_InitWorldSession
import G_InitSessionData
import G_ReadSessionData
import Svcmd_GameMem_f
import G_InitMemory
import G_Alloc
import Team_DropFlags
import CheckObeliskAttack
import Team_CheckDroppedItem
import OnSameTeam
import G_RunClient
import ClientEndFrame
import ClientThink
import ClientCommand
import ClientBegin
import ClientDisconnect
import ClientUserinfoChanged
import ClientConnect
import Team_Point
import G_Error
import G_Printf
import SendScoreboardMessageToAllClients
import G_LogPrintf
import G_RunThink
import CheckTeamLeader
import SetLeader
import FindIntermissionPoint
import DeathmatchScoreboardMessage
import G_SetStats
import MoveClientToIntermission
import FireWeapon2
import FireWeapon
import G_FilterPacket
import G_ProcessIPBans
import ConsoleCommand
import PlaceMC
import SpotWouldTelefrag
import CalculateRanks
import AddScore
import player_die
import ClientSpawn
import InitBodyQue
import InitClientResp
import InitClientPersistant
import BeginIntermission
import respawn
import CopyToBodyQue
import SelectSpawnPoint
import SetClientViewAngle
import PickTeam
import TeamLeader
import BalanceTeams
import TeamCount
import BuildDisplacer
import BuildMC
import BuildGenerator
import BuildTurret
import voteCheck
import voteInvalid
import G_PredictPlayerMove
import G_UnTimeShiftClient
import G_UndoTimeShiftFor
import G_DoTimeShiftFor
import G_UnTimeShiftAllClients
import G_TimeShiftAllClients
import G_StoreHistory
import G_ResetHistory
import Weapon_HookThink
import Weapon_HookFree
import CheckGauntletAttack
import CalcMuzzlePoint
import LogAccuracyHit
import G_BreakGlass
import TeleportPlayer
import trigger_teleporter_touch
import Touch_DoorTrigger
import G_RunMover
import fire_mg
import fire_turret
import fire_alt_gata
import fire_grapple
import fire_bfg
import fire_rocket
import fire_flame
import fire_alt_rocket
import fire_altgrenade
import fire_bomb
import fire_pdgrenade
import fire_grenade
import fire_plasma2
import fire_plasma
import fire_blaster
import G_RunMissile
import TossClientCubes
import TossClientItems
import body_die
import G_InvulnerabilityEffect
import G_RadiusDamage
import G_Damage
import CanDamage
import G_ExplodeBomb
import G_ExplodeMissile
import BuildShaderStateConfig
import AddRemap
import G_SetOrigin
import G_AddEvent
import G_AddPredictableEvent
import vectoyaw
import vtos
import tv
import G_TouchSolids
import G_TouchTriggers
import G_EntitiesFree
import G_FreeEntity
import G_Sound
import G_TempEntity
import G_Spawn
import G_InitGentity
import G_SetMovedir
import G_UseTargets
import G_PickTarget
import G_Find
import G_KillBox
import G_TeamCommand
import G_SoundIndex
import G_ModelIndex
import SaveRegisteredItems
import RegisterItem
import ClearRegisteredItems
import Touch_Item
import Add_Ammo
import ArmorIndex
import Think_Weapon
import FinishSpawningItem
import G_SpawnItem
import SetRespawn
import LaunchItem
import Drop_Item
import PrecacheItem
import UseHoldableItem
import RespawnItem
import G_RunItem
import Registered
import G_CheckTeamItems
import Cmd_FollowCycle_f
import SetTeam
import BroadcastTeamChange
import StopFollowing
import Cmd_Score_f
import G_NewString
import G_SpawnEntitiesFromString
import G_SpawnVector
import G_SpawnInt
import G_SpawnFloat
import G_SpawnString
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import Max_Ammo
import BG_CanItemBeGrabbed
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import Com_Printf
import Com_Error
import Info_NextPair
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_RemoveKey_big
import Info_RemoveKey
import Info_ValueForKey
import va
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import irandom
import flrandom
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import SnapVectorTowards
import tonextint
import init_tonextint
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Com_Memcpy
import Com_Memset
import Hunk_Alloc
import FloatSwap
import LongSwap
import ShortSwap
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import sscanf
import vsprintf
import _atoi
import atoi
import _atof
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $718
byte 1 97
byte 1 109
byte 1 109
byte 1 111
byte 1 95
byte 1 98
byte 1 101
byte 1 108
byte 1 116
byte 1 0
align 1
LABELV $715
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 95
byte 1 99
byte 1 104
byte 1 97
byte 1 105
byte 1 110
byte 1 103
byte 1 117
byte 1 110
byte 1 0
align 1
LABELV $709
byte 1 97
byte 1 109
byte 1 109
byte 1 111
byte 1 95
byte 1 109
byte 1 105
byte 1 110
byte 1 101
byte 1 115
byte 1 0
align 1
LABELV $706
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 95
byte 1 112
byte 1 114
byte 1 111
byte 1 120
byte 1 95
byte 1 108
byte 1 97
byte 1 117
byte 1 110
byte 1 99
byte 1 104
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $700
byte 1 97
byte 1 109
byte 1 109
byte 1 111
byte 1 95
byte 1 110
byte 1 97
byte 1 105
byte 1 108
byte 1 115
byte 1 0
align 1
LABELV $697
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 95
byte 1 110
byte 1 97
byte 1 105
byte 1 108
byte 1 103
byte 1 117
byte 1 110
byte 1 0
align 1
LABELV $691
byte 1 97
byte 1 109
byte 1 109
byte 1 111
byte 1 95
byte 1 98
byte 1 102
byte 1 103
byte 1 0
align 1
LABELV $688
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 95
byte 1 98
byte 1 102
byte 1 103
byte 1 0
align 1
LABELV $682
byte 1 97
byte 1 109
byte 1 109
byte 1 111
byte 1 95
byte 1 99
byte 1 101
byte 1 108
byte 1 108
byte 1 115
byte 1 0
align 1
LABELV $679
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 95
byte 1 112
byte 1 108
byte 1 97
byte 1 115
byte 1 109
byte 1 97
byte 1 103
byte 1 117
byte 1 110
byte 1 0
align 1
LABELV $673
byte 1 97
byte 1 109
byte 1 109
byte 1 111
byte 1 95
byte 1 115
byte 1 108
byte 1 117
byte 1 103
byte 1 115
byte 1 0
align 1
LABELV $670
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 95
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 103
byte 1 117
byte 1 110
byte 1 0
align 1
LABELV $664
byte 1 97
byte 1 109
byte 1 109
byte 1 111
byte 1 95
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 0
align 1
LABELV $661
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 95
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 0
align 1
LABELV $655
byte 1 97
byte 1 109
byte 1 109
byte 1 111
byte 1 95
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 116
byte 1 115
byte 1 0
align 1
LABELV $652
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 95
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 116
byte 1 108
byte 1 97
byte 1 117
byte 1 110
byte 1 99
byte 1 104
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $646
byte 1 97
byte 1 109
byte 1 109
byte 1 111
byte 1 95
byte 1 103
byte 1 114
byte 1 101
byte 1 110
byte 1 97
byte 1 100
byte 1 101
byte 1 115
byte 1 0
align 1
LABELV $643
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 95
byte 1 103
byte 1 114
byte 1 101
byte 1 110
byte 1 97
byte 1 100
byte 1 101
byte 1 108
byte 1 97
byte 1 117
byte 1 110
byte 1 99
byte 1 104
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $637
byte 1 97
byte 1 109
byte 1 109
byte 1 111
byte 1 95
byte 1 115
byte 1 104
byte 1 101
byte 1 108
byte 1 108
byte 1 115
byte 1 0
align 1
LABELV $634
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 95
byte 1 115
byte 1 104
byte 1 111
byte 1 116
byte 1 103
byte 1 117
byte 1 110
byte 1 0
align 1
LABELV $628
byte 1 97
byte 1 109
byte 1 109
byte 1 111
byte 1 95
byte 1 98
byte 1 117
byte 1 108
byte 1 108
byte 1 101
byte 1 116
byte 1 115
byte 1 0
align 1
LABELV $621
byte 1 112
byte 1 114
byte 1 105
byte 1 110
byte 1 116
byte 1 32
byte 1 34
byte 1 114
byte 1 101
byte 1 97
byte 1 100
byte 1 121
byte 1 10
byte 1 34
byte 1 0
align 1
LABELV $565
byte 1 116
byte 1 97
byte 1 114
byte 1 103
byte 1 101
byte 1 116
byte 1 95
byte 1 108
byte 1 111
byte 1 99
byte 1 97
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $556
byte 1 105
byte 1 116
byte 1 101
byte 1 109
byte 1 95
byte 1 104
byte 1 101
byte 1 97
byte 1 108
byte 1 116
byte 1 104
byte 1 95
byte 1 109
byte 1 101
byte 1 103
byte 1 97
byte 1 0
align 1
LABELV $552
byte 1 105
byte 1 116
byte 1 101
byte 1 109
byte 1 95
byte 1 97
byte 1 114
byte 1 109
byte 1 111
byte 1 114
byte 1 95
byte 1 115
byte 1 104
byte 1 97
byte 1 114
byte 1 100
byte 1 0
align 1
LABELV $494
byte 1 112
byte 1 114
byte 1 105
byte 1 110
byte 1 116
byte 1 32
byte 1 34
byte 1 37
byte 1 115
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 32
byte 1 115
byte 1 99
byte 1 111
byte 1 114
byte 1 101
byte 1 115
byte 1 33
byte 1 10
byte 1 34
byte 1 0
align 1
LABELV $493
byte 1 99
byte 1 112
byte 1 32
byte 1 34
byte 1 94
byte 1 54
byte 1 37
byte 1 115
byte 1 32
byte 1 94
byte 1 55
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 32
byte 1 115
byte 1 99
byte 1 111
byte 1 114
byte 1 101
byte 1 115
byte 1 33
byte 1 10
byte 1 34
byte 1 0
align 1
LABELV $492
byte 1 66
byte 1 108
byte 1 117
byte 1 101
byte 1 0
align 1
LABELV $491
byte 1 82
byte 1 101
byte 1 100
byte 1 0
align 1
LABELV $358
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 47
byte 1 116
byte 1 97
byte 1 110
byte 1 107
byte 1 106
byte 1 114
byte 1 47
byte 1 106
byte 1 117
byte 1 109
byte 1 112
byte 1 49
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $330
byte 1 102
byte 1 114
byte 1 101
byte 1 101
byte 1 122
byte 1 101
byte 1 98
byte 1 111
byte 1 100
byte 1 121
byte 1 0
align 1
LABELV $294
byte 1 109
byte 1 112
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 54
byte 1 0
align 1
LABELV $293
byte 1 109
byte 1 112
byte 1 113
byte 1 51
byte 1 116
byte 1 111
byte 1 117
byte 1 114
byte 1 110
byte 1 101
byte 1 121
byte 1 54
byte 1 0
align 1
LABELV $292
byte 1 109
byte 1 112
byte 1 113
byte 1 51
byte 1 99
byte 1 116
byte 1 102
byte 1 52
byte 1 0
align 1
LABELV $291
byte 1 113
byte 1 51
byte 1 99
byte 1 116
byte 1 102
byte 1 52
byte 1 0
align 1
LABELV $290
byte 1 113
byte 1 51
byte 1 116
byte 1 111
byte 1 117
byte 1 114
byte 1 110
byte 1 101
byte 1 121
byte 1 54
byte 1 0
align 1
LABELV $289
byte 1 113
byte 1 51
byte 1 100
byte 1 109
byte 1 49
byte 1 57
byte 1 0
align 1
LABELV $288
byte 1 113
byte 1 51
byte 1 100
byte 1 109
byte 1 49
byte 1 56
byte 1 0
align 1
LABELV $287
byte 1 113
byte 1 51
byte 1 100
byte 1 109
byte 1 49
byte 1 55
byte 1 0
align 1
LABELV $286
byte 1 113
byte 1 51
byte 1 100
byte 1 109
byte 1 49
byte 1 54
byte 1 0
align 1
LABELV $285
byte 1 113
byte 1 51
byte 1 116
byte 1 111
byte 1 117
byte 1 114
byte 1 110
byte 1 101
byte 1 121
byte 1 51
byte 1 0
align 1
LABELV $281
byte 1 109
byte 1 97
byte 1 112
byte 1 110
byte 1 97
byte 1 109
byte 1 101
byte 1 0
align 1
LABELV $219
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 111
byte 1 114
byte 1 108
byte 1 100
byte 1 47
byte 1 106
byte 1 117
byte 1 109
byte 1 112
byte 1 112
byte 1 97
byte 1 100
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $184
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 85
byte 1 78
byte 1 75
byte 1 78
byte 1 79
byte 1 87
byte 1 78
byte 1 0
align 1
LABELV $183
byte 1 75
byte 1 105
byte 1 108
byte 1 108
byte 1 58
byte 1 32
byte 1 37
byte 1 105
byte 1 32
byte 1 37
byte 1 105
byte 1 32
byte 1 37
byte 1 105
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 107
byte 1 105
byte 1 108
byte 1 108
byte 1 101
byte 1 100
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 98
byte 1 121
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $140
byte 1 107
byte 1 97
byte 1 109
byte 1 105
byte 1 107
byte 1 97
byte 1 122
byte 1 101
byte 1 32
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 114
byte 1 0
